#include "stdafx.h"
#include <iostream>
#include <sstream>
#include <fstream>
#include "enet/enet.h"
#include "Server_tile.h"
#include <cmath>
#include <string>
#include <windows.h>
#include <vector>
#include <ctime>
#include <time.h>
#include <sstream>
#include <chrono>
#include <fstream>
#include "json.hpp"
#include <conio.h>
#include <thread>
#include <experimental/filesystem>
#include <cstdlib>
#include <cstdio>
#include <cctype>
#include <regex>
#include <filesystem>
#include <wininet.h>
#include <cstring>
#include <locale>
#include <stdexcept>
#pragma warning(disable:4996)

int main()
{
	int count = 0, ch;
wrong:
	{
		{
		}
		enet_initialize();
		if (atexit(saveAllWorlds)) {
			cout << "[WARNING]: Worlds Won't Be Saved For This Session!" << endl;
		}
		

		int itemdathash;
		{
			std::ifstream file("items.dat", std::ios::binary | std::ios::ate);
			itemsDatSize = file.tellg();
			itemsDat = new BYTE[60 + itemsDatSize];
			string asdf = "0400000010000000FFFFFFFF000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
			for (int i = 0; i < asdf.length(); i += 2)
			{
				char x = ch2n(asdf[i]);
				x = x << 4;
				x += ch2n(asdf[i + 1]);
				memcpy(itemsDat + (i / 2), &x, 1);
				if (asdf.length() > 60 * 2) throw 0;
			}
			memcpy(itemsDat + 56, &itemsDatSize, 4);
			file.seekg(0, std::ios::beg);
			if (file.read((char*)(itemsDat + 60), itemsDatSize))
			{
				uint8_t* pData;
				int size = 0;
				const char filename[] = "items.dat";
				size = filesize(filename);
				pData = getA((string)filename, &size, false, false);
				itemdathash = HashString((unsigned char*)pData, size);
				file.close();
				delete pData;
			}
			else {
				cout << "[CRITICAL]: Error Occured While Starting Server!" << endl;
			}
		}
		ENetAddress address;
		enet_address_set_host(&address, "0.0.0.0");
		address.port = 17091; // any port serverport
		server = enet_host_create(&address,
			300,
			2,
			4096,
			0);
		if (server == NULL)
		{
			fprintf(stderr,
				"[CRITICAL]: Error Occured While Starting Server!");
			while (1);
			exit(EXIT_FAILURE);
		}
		server->checksum = enet_crc32;
		enet_host_compress_with_range_coder(server);
		buildItemsDatabase();
		thread sendtips(SendTips);
		if (sendtips.joinable()) {
			sendtips.detach();
		}
		ENetEvent event;
		while (true)
			if (serverIsFrozen == false) {
				while (enet_host_service(server, &event, 1000) > 0)
				{
					ENetPeer* peer = event.peer;
					switch (event.type)
					{
					case ENET_EVENT_TYPE_CONNECT:
					{
#ifdef TOTAL_LOG
						printf("A new client connected.\n");
#endif
						ENetPeer* currentPeer;
						int count = 0;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (currentPeer->address.host == peer->address.host)
								count++;
						}
						event.peer->data = new PlayerInfo;
						char clientConnection[16];
						enet_address_get_host_ip(&peer->address, clientConnection, 16);
						((PlayerInfo*)(peer->data))->charIP = clientConnection;
						bool isBotHere = false;
						string ipFromFile = "";
						int countIpFromFile = 0;
						ifstream getip("blacklist.txt");
						getip >> countIpFromFile;
						for (int i = 0; i < countIpFromFile; i++)
						{
							getip >> ipFromFile;
							if (((PlayerInfo*)(peer->data))->charIP == ipFromFile)
							{
								isBotHere = true;
							}
						}
						if (isBotHere) enet_peer_disconnect_later(peer, 0);
						if (count > 3)
						{
							Player::OnConsoleMessage(peer, "`rToo many accounts are logged on from this IP. Log off one account before playing please.``");
							enet_peer_disconnect_later(peer, 0);
						}
						else {
							sendData(peer, 1, 0, 0);
						}
						continue;
					}
					case ENET_EVENT_TYPE_RECEIVE:
					{
						if (serverIsFrozen) continue;
						if (event.packet->dataLength < 9) {
							enet_peer_disconnect_now(peer, 0);
							break;
						}
						if (event.packet->dataLength > 4096) {
							enet_peer_reset(peer);
							break;
						}
						testCount(peer);
						if (((PlayerInfo*)(peer->data))->isUpdating)
						{
							continue;
						}
						if (((PlayerInfo*)(peer->data))->isIn && ((PlayerInfo*)(peer->data))->rawName == "") enet_peer_disconnect_later(peer, 0);
						sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
						if (((PlayerInfo*)(peer->data))->forcegemUpdate)
						{
						}
						if (((PlayerInfo*)(event.peer->data))->wrongpass == true)
						{
							if (((PlayerInfo*)(peer->data))->isIn) {
							}
							else
							{
								string text = "action|log\nmsg|`4GrowID or password is wrong! `7Incase you want to recover/change your account/password, contact ! Lim#1000 or HellFire#5667.``";
								string text3 = "action|logon_fail\n";
								string dc = "https://discord.gg/vc5MTyj";
								string url = "action|set_url\nurl|" + dc + "\nlabel|Join discord\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE* data3 = new BYTE[5 + text3.length()];
								BYTE* dataurl = new BYTE[5 + url.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);
								memcpy(dataurl, &type, 4);
								memcpy(dataurl + 4, url.c_str(), url.length());
								memcpy(dataurl + 4 + url.length(), &zero, 1);
								memcpy(data3, &type, 4);
								memcpy(data3 + 4, text3.c_str(), text3.length());
								memcpy(data3 + 4 + text3.length(), &zero, 1);
								ENetPacket* p = enet_packet_create(data,
									5 + text.length(),
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, p);
								ENetPacket* p3 = enet_packet_create(dataurl,
									5 + url.length(),
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, p3);
								ENetPacket* p2 = enet_packet_create(data3,
									5 + text3.length(),
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, p2);
								delete data;
								delete dataurl;
								delete data3;
							}
						}

						int messageType = GetMessageTypeFromPacket(event.packet);
						WorldInfo* world = getPlyersWorld(peer);
						switch (messageType) {
						case 2:
						{
							if (serverIsFrozen == true) continue;
							string cch = GetTextPointerFromPacket(event.packet);			
							std::fstream gay("logs.txt", std::ios::in | std::ios::out | std::ios::ate);
							gay << cch << " " << ((PlayerInfo*)(peer->data))->charIP << endl;
							gay.close();
							if (cch.size() <= 3) {
								break;
							}
							if (cch == "" || cch == " " || cch == "  " || cch == "   " || cch == "    " || cch == "     " || cch == "      " || cch == "       " || cch == "        " || cch == "        ")
							{
								break;
							}
							if (cch.size() > 2048) {
								break;
							}
							if (cch.length() > 2048) {
								break;
							}
							string str = cch.substr(cch.find("text|") + 5, cch.length() - cch.find("text|") - 1);
							if (cch.find("action|wrench") == 0) {
								std::stringstream ss(cch);
								std::string to;
								int id = -1;
								while (std::getline(ss, to, '\n')) {
									vector<string> infoDat = explode("|", to);
									if (infoDat[1] == "netid") {
										id = atoi(infoDat[2].c_str());
									}
								}
								if (id < 0) continue;
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(currentPeer->data))->netID == id) {
											((PlayerInfo*)(peer->data))->lastInfo = ((PlayerInfo*)(currentPeer->data))->rawName;
											((PlayerInfo*)(peer->data))->lastInfoname = ((PlayerInfo*)(currentPeer->data))->tankIDName;
											string name = ((PlayerInfo*)(currentPeer->data))->displayName;
											string rawnam = ((PlayerInfo*)(peer->data))->rawName;
											string rawnamofwrench = ((PlayerInfo*)(currentPeer->data))->rawName;
											string guildname = "";
											int guildpoints = 0;
											if (((PlayerInfo*)(currentPeer->data))->guild == "")
											{
												guildname = "None";
											}
											else {
												guildname = ((PlayerInfo*)(currentPeer->data))->guild;
												ifstream guildstream123("guildrewards/guildpoints/" + ((PlayerInfo*)(currentPeer->data))->guild + ".txt");
												guildstream123 >> guildpoints;
												guildstream123.close();
											}

											if (rawnamofwrench != rawnam)
											{
												if (rawnamofwrench != "")
												{
													std::ifstream ifszsx("gemdb/" + ((PlayerInfo*)(peer->data))->lastInfo + ".txt");
													std::string contentch2x((std::istreambuf_iterator<char>(ifszsx)),
														(std::istreambuf_iterator<char>()));
													if (find(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), ((PlayerInfo*)(currentPeer->data))->rawName) != ((PlayerInfo*)(peer->data))->friendinfo.end()) {
														if (world->owner == ((PlayerInfo*)(peer->data))->rawName && ((PlayerInfo*)(peer->data))->haveGrowId || ((PlayerInfo*)(peer->data))->adminLevel >= 777)
														{
															if (((PlayerInfo*)(peer->data))->adminLevel >= 998)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`w" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`5Guild:`^ " + guildname + "|left|4|\nadd_label|small|`5Guild Points:`^ " + std::to_string(guildpoints) + "|left|4|\nadd_label|small|`5Gems:`^ " + contentch2x + "|left|4|\nadd_spacer|small|\nadd_button|punishview|`!Punish/View|0|0|\nadd_button|tradebutton|`wTrade|0|0|\nadd_button|invitemenu|`eInvite...|0|0|\nadd_button|pull|`5Pull|0|0|\nadd_button|kick|`4Kick|0|0|\nadd_button|wban|`4World Ban|0|0|\nadd_button|btntradeworld|`9Sell World|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;
															}
															else
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`5Guild:`^ " + guildname + "|left|4|\nadd_label|small|`5Guild Points:`^ " + std::to_string(guildpoints) + "|left|4|\nadd_label|small|`5Gems:`^ " + contentch2x + "|left|4|\nadd_spacer|small|\nadd_button|tradebutton|`wTrade|0|0|\nadd_button|invitemenu|`eInvite..|0|0|\nadd_button|pull|`5Pull|0|0|\nadd_button|kick|`4Kick|0|0|\nadd_button|wban|`4World Ban|0|0|\nadd_button|btntradeworld|`9Sell World|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;
															}
														}
														else
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`5Guild:`^ " + guildname + "|left|4|\nadd_label|small|`5Guild Points:`^ " + std::to_string(guildpoints) + "|left|4|\nadd_label|small|`5Gems:`^ " + contentch2x + "|left|4|\nadd_spacer|small|\nadd_button|tradebutton|`wTrade|left|4|\nadd_spacer|small|\n\nadd_button|invitemenu|`eInvite...|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;
														}
													}
													else {
														if (world->owner == ((PlayerInfo*)(peer->data))->rawName && ((PlayerInfo*)(peer->data))->haveGrowId || ((PlayerInfo*)(peer->data))->adminLevel >= 998)
														{
															if (((PlayerInfo*)(peer->data))->adminLevel >= 998)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`w" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`5Guild:`^ " + guildname + "|left|4|\nadd_label|small|`5Guild Points:`^ " + std::to_string(guildpoints) + "|left|4|\nadd_label|small|`5Gems:`^ " + contentch2x + "|left|4|\nadd_spacer|small|\nadd_button|punishview|`!Punish/View|0|0|\nadd_button|tradebutton|`wTrade|0|0|\nadd_button|invitemenu|`eInvite...|0|0|\nadd_button|pull|`5Pull|0|0|\nadd_button|kick|`4Kick|0|0|\nadd_button|wban|`4World Ban|0|0|\nadd_button|btntradeworld|`9Sell World|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;
															}
															else
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`5Guild:`^ " + guildname + "|left|4|\nadd_label|small|`5Guild Points:`^ " + std::to_string(guildpoints) + "|left|4|\nadd_label|small|`5Gems:`^ " + contentch2x + "|left|4|\nadd_spacer|small|\nadd_button|tradebutton|`wTrade|0|0|\nadd_button|invitemenu|`eInvite...|0|0|\nadd_button|pull|`5Pull|0|0|\nadd_button|kick|`4Kick|0|0|\nadd_button|wban|`4World Ban|0|0|\nadd_button|btntradeworld|`9Sell World|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;
															}
														}
														else
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`5Guild:`^ " + guildname + "|left|4|\nadd_label|small|`5Guild Points:`^ " + std::to_string(guildpoints) + "|left|4|\nadd_label|small|`5Gems:`^ " + contentch2x + "|left|4|\nadd_spacer|small|\nadd_button|tradebutton|`wTrade|left|4|\nadd_spacer|small|\n\nadd_button|invitemenu|`eInvite...|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;
														}
													}
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_button|chc0|Close|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											else
											{
												std::ifstream ifszs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string contentch2((std::istreambuf_iterator<char>(ifszs)),
													(std::istreambuf_iterator<char>()));
												if (((PlayerInfo*)(peer->data))->isAAP == true)
												{
													if (((PlayerInfo*)(peer->data))->haveGrowId == true)
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + "|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2 + "|left|4|\nadd_button|disableaap|`5Disable AAP`w``|noflags|0|0|\nadd_button|chc0|Close|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													else
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + "|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2 + "|left|4|\nadd_button|chc0|Close|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
												}
												else
												{
													if (((PlayerInfo*)(peer->data))->haveGrowId == true)
													{
														std::ostringstream oss;
														if (!((PlayerInfo*)(peer->data))->worldsowned.empty())
														{
															std::copy(((PlayerInfo*)(peer->data))->worldsowned.begin(), ((PlayerInfo*)(peer->data))->worldsowned.end() - 1,
																std::ostream_iterator<string>(oss, " "));
															oss << ((PlayerInfo*)(peer->data))->worldsowned.back();
														}
														else {
															string oss = "You dont have any worlds!";
														}
														string buffs;
														if (((PlayerInfo*)(peer->data))->cantsay)
														{
															buffs += "\nadd_label_with_icon|small|`wDuct tape covered your mouth!``|left|408|";
														}
														else if (((PlayerInfo*)(peer->data))->canDoubleJump)
														{
															//buffs += "\nadd_label_with_icon|small|`wNinja, invisible to all!``|left|290|";
															buffs += "\nadd_label_with_icon|small|`wDouble jump``|left|156|";
														}
														else if (((PlayerInfo*)(peer->data))->canDoubleJump)
														{
															buffs += "\nadd_label_with_icon|small|`wDouble jump``|left|156|";
														}
														else if (((PlayerInfo*)(peer->data))->isGhost)
														{
															buffs += "\nadd_label_with_icon|small|`wI can walk in blocks. (Ghost)``|left|3106|";
														}
														else if (((PlayerInfo*)(peer->data))->isinv)
														{
															buffs += "\nadd_label_with_icon|small|`wNinja, invisible to all!``|left|290|";
														}
														else
														{
															buffs += "\nadd_label_with_icon|small|`wYou don't have any active effects!``|left|18|";
														}
														int levels = ((PlayerInfo*)(peer->data))->level;
														int xp = ((PlayerInfo*)(peer->data))->xp;
														int rubble = ((PlayerInfo*)(peer->data))->rubble;
														int amber = ((PlayerInfo*)(peer->data))->amber;
														int opal = ((PlayerInfo*)(peer->data))->opal;
														int gold = ((PlayerInfo*)(peer->data))->gold;
														int sapphire = ((PlayerInfo*)(peer->data))->sapphire;
														int diamond = ((PlayerInfo*)(peer->data))->diamond;
														int emerald = ((PlayerInfo*)(peer->data))->emerald;
														string currentworld = ((PlayerInfo*)(peer->data))->currentWorld;
														int xxx = ((PlayerInfo*)(peer->data))->x / 32;
														int yyy = ((PlayerInfo*)(peer->data))->y / 32;
														if (((PlayerInfo*)(peer->data))->isinvited == true)
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_player_info|" + name + "|" + std::to_string(levels) + "|" + std::to_string(xp) + "|" + to_string(((PlayerInfo*)(peer->data))->level * 1500) + "|\nadd_spacer|small|\nadd_button|joinguild|`2Join Guild " + ((PlayerInfo*)(currentPeer->data))->guildlast + "!|\nadd_button|viewbackpack|`oView Crystals``|small|\nadd_button|accountsecurity|`5Secure My Account``|small|\nadd_spacer|small|\nadd_textbox|`wActive effects:``|left|" + buffs + "|\nadd_spacer|small|\nadd_textbox|`oYou have `w" + to_string(((PlayerInfo*)(peer->data))->currentInventorySize) + "`` `obackpack slots.``|left|\nadd_spacer|small|\nadd_textbox|`oYou Currently Have `w" + contentch2 + " `oGems.|left|\nadd_spacer|small|\nadd_textbox|`oCurrent world: `w" + currentworld + " `o(`w" + std::to_string(xxx) + "`o, `w" + std::to_string(yyy) + "`o)|left|\nadd_textbox|`oWorlds Owned: " + oss.str() + "|left|4|\nadd_spacer|small|\nadd_button|chc0|`wContinue|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;
														}
														else
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_player_info|" + name + "|" + std::to_string(levels) + "|" + std::to_string(xp) + "|" + to_string(((PlayerInfo*)(peer->data))->level * 1500) + "|\nadd_spacer|small|\nadd_button|viewbackpack|`oView Crystals``|small|\nadd_button|accountsecurity|`5Secure My Account``|small|\nadd_spacer|small|\nadd_textbox|`wActive effects:``|left|" + buffs + "|\nadd_spacer|small|\nadd_textbox|`oYou have `w" + to_string(((PlayerInfo*)(peer->data))->currentInventorySize) + "`` `obackpack slots.``|left|\nadd_spacer|small|\nadd_textbox|`oYou Currently Have `w" + contentch2 + " `oGems.|left|\nadd_spacer|small|\nadd_textbox|`oCurrent world: `w" + currentworld + " `o(`w" + std::to_string(xxx) + "`o, `w" + std::to_string(yyy) + "`o)|left|\nadd_textbox|`oWorlds Owned: " + oss.str() + "|left|4|\nadd_spacer|small|\nadd_button|chc0|`wContinue|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;
														}
													}
													else
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`@Create Your `#Grow-ID`@!``|left|1048|\n\nadd_spacer|small|\nadd_text_input|username|GrowID: ||100|\nadd_text_input|password|Password: ||100|\nadd_text_input|code|Code: ||5|\nend_dialog|register||`2Complete!|\n"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														enet_host_flush(server);
														delete p.data;
													}
												}
											}
										}
									}
								}
							}
							if (cch.find("action|setSkin") == 0) {
								if (!world) continue;
								std::stringstream ss(cch);
								std::string to;
								int id = -1;
								string color;
								while (std::getline(ss, to, '\n')) {
									vector<string> infoDat = explode("|", to);
									if (infoDat[0] == "color") color = infoDat[1];
									if (has_only_digits(color) == false) continue;
									id = atoi(color.c_str());
									if (color == "2190853119") {
										id = -2104114177;
									}
									else if (color == "2527912447") {
										id = -1767054849;
									}
									else if (color == "2864971675") {
										id = -1429995521;
									}
									else if (color == "3033464831") {
										id = -1261502465;
									}
									else if (color == "3370516479") {
										id = -924450817;
									}
								}
								((PlayerInfo*)(peer->data))->skinColor = id;
								sendClothes(peer);
							}
							if (cch.find("action|respawn") == 0)
							{
								playerRespawn(peer, false);
							}
							if (cch.find("action|respawn_spike") == 0)
							{
								playerRespawn(peer, true);
							}
							if (cch.find("action|friends") == 0)
							{
								if (((PlayerInfo*)(peer->data))->joinguild == true) {
									Player::OnDialogRequest(peer, "set_default_color|`w\n\nadd_label_with_icon|big|Social Portal``|left|1366|\n\nadd_spacer|small|\nadd_button|backonlinelist|Show Friends``|0|0|\nadd_button|showguild|Show Guild Members``|0|0|\nadd_button|guildrewards|Guild Rewards``|0|0|\nend_dialog|||OK|\nadd_quick_exit|");
								}
								else {
									Player::OnDialogRequest(peer, "set_default_color|`w\n\nadd_label_with_icon|big|Social Portal``|left|1366|\n\nadd_spacer|small|\nadd_button|backonlinelist|Show Friends``|0|0|\nadd_button|createguildinfo|Create Guild``|0|0|\nend_dialog|||OK|\nadd_quick_exit|");
								}
							}
							if (cch.find("action|growid") == 0)
							{
								if (((PlayerInfo*)(peer->data))->haveGrowId == false)
								{
									Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`@Create Your `#Grow-ID`@!``|left|1048|\n\nadd_spacer|small|\nadd_text_input|username|GrowID: ||100|\nadd_text_input|password|Password: ||100|\nadd_text_input|code|Code: ||5|\nend_dialog|register||`2Complete!|\n");
									enet_host_flush(server);
								}
							}
							if (cch.find("action|store") == 0)
							{
								if (((PlayerInfo*)(peer->data))->haveGrowId == true)
								{
									if (((PlayerInfo*)(peer->data))->dotrade == true || ((PlayerInfo*)(peer->data))->istrading == true)
									{
										Player::OnTextOverlay(peer, "You cant do that while trading!");
										continue;
									}
									Player::OnDialogRequest(peer, "\nadd_textbox|`wPlease choose the store!|left|\nadd_spacer|small|\nadd_button|prostores|`wPurchase `6General Store|left|\nadd_button|market|`wMarketplace|left"); // pro?
								}
								else
								{
									Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`@Create Your `#Grow-ID`@!``|left|1048|\n\nadd_spacer|small|\nadd_text_input|username|GrowID: ||100|\nadd_text_input|password|Password: ||100|\nadd_text_input|code|Code: ||5|\nend_dialog|register||`2Complete!|\n");
									enet_host_flush(server);
								}
							}
							/*if (cch.find("action|store\nlocation|gem") == 0)
							{
								if (((PlayerInfo*)(peer->data))->haveGrowId == true) {
									string text1 = "set_description_text|Welcome to the `2Growtopia Store``! Select the item you'd like more info on.`o `wWant to get `5Supporter`` status? Any Gem purchase (or `57,000`` Gems earned with free `5Tapjoy`` offers) will make you one. You'll get new skin colors, the `5Recycle`` tool to convert unwanted items into Gems, and more bonuses!";
									string text2 = "|enable_tabs|1";
									string text3 = "|\nadd_tab_button|main_menu|Home|interface/large/shop_navigation.rttex||1|0|0|0||||-1|-1||||";
									string text4 = "|\nadd_tab_button|locks_menu|Locks And Stuff|interface/large/shop_navigation.rttex||0|1|0|0||||-1|-1|||";
									string text5 = "|\nadd_tab_button|itempack_menu|Item Packs|interface/large/shop_navigation.rttex||0|3|0|0||||-1|-1||||";
									string text6 = "|\nadd_tab_button|bigitems_menu|Awesome Items|interface/large/shop_navigation.rttex||0|4|0|0||||-1|-1||||";
									string text7 = "|\nadd_tab_button|weather_menu|Weather Machines|interface/large/shop_navigation.rttex|Tired of the same sunny sky?  We offer alternatives within...|0|5|0|0||||-1|-1||||";
									string text8 = "|\nadd_tab_button|token_menu|Growtoken Items|interface/large/shop_navigation.rttex||0|2|0|0||||-1|-1||||";
									string text9 = "|\nadd_banner|interface/large/gui_shop_featured_header.rttex|0|1|";
									string text10 = "|\nadd_button|ads_tv|`oGrowShow TV``|interface/large/store_buttons/store_buttons30.rttex|`2You Get:`` 1 GrowShow TV.<CR><CR>`5Description:`` Growtopia's most loved gameshow now brings you its very own TV to watch up to 3 ads per day for AMAZING prizes.|0|4|50|0|||-1|-1||-1|-1||1||||||";
									packet::storerequest(peer, text1 + text2 + text3 + text4 + text5 + text6 + text7 + text8 + text9 + text10);
									sendSound(peer, "boo_ghost_trap.wav");
								}
								else {
									Player::OnTextOverlay(peer, "Create GrowID First!");
								}
							}
							if (cch.find("action|buy\nitem|store") == 0)
							{

								string text1 = "set_description_text|Welcome to the `2Growtopia Store``! Select the item you'd like more info on.`o `wWant to get `5Supporter`` status? Any Gem purchase (or `57,000`` Gems earned with free `5Tapjoy`` offers) will make you one. You'll get new skin colors, the `5Recycle`` tool to convert unwanted items into Gems, and more bonuses!";
								string text2 = "|enable_tabs|1";
								string text3 = "|\nadd_tab_button|main_menu|Home|interface/large/shop_navigation.rttex||1|0|0|0||||-1|-1||||";;
								string text4 = "|\nadd_tab_button|locks_menu|Locks And Stuff|interface/large/shop_navigation.rttex||0|1|0|0||||-1|-1|||";
								string text5 = "|\nadd_tab_button|itempack_menu|Item Packs|interface/large/shop_navigation.rttex||0|3|0|0||||-1|-1||||";
								string text6 = "|\nadd_tab_button|bigitems_menu|Awesome Items|interface/large/shop_navigation.rttex||0|4|0|0||||-1|-1||||";
								string text7 = "|\nadd_tab_button|weather_menu|Weather Machines|interface/large/shop_navigation.rttex|Tired of the same sunny sky?  We offer alternatives within...|0|5|0|0||||-1|-1||||";
								string text8 = "|\nadd_tab_button|token_menu|Growtoken Items|interface/large/shop_navigation.rttex||0|2|0|0||||-1|-1||||";
								string text9 = "|\nadd_banner|interface/large/gui_shop_featured_header.rttex|0|1|";
								string text10 = "|\nadd_button|itemomonth|`oItem Of The Month``|interface/large/store_buttons/store_buttons16.rttex|May 2020:`` `9Doomsday Warhammer``!<CR><CR>`2You Get:`` 1 `9Doomsday Warhammer``.<CR><CR>`5Description:`` Wield the Warhammer of Doom and rain fiery death down on all around you! This warhammer is so hot it even tears the ground up as you lug its heavy weight behind you.|0|3|200000|0||interface/large/gui_store_button_overlays1.rttex|0|0||-1|-1||1|||||||";
								string text11 = "|\nadd_button|ads_tv|`oGrowShow TV``|interface/large/store_buttons/store_buttons30.rttex|`2You Get:`` 1 GrowShow TV.<CR><CR>`5Description:`` Growtopia's most loved gameshow now brings you its very own TV to watch up to 3 ads per day for AMAZING prizes.|0|4|50|0|||-1|-1||-1|-1||1||||||";
								string text12 = "|\nadd_banner|interface/large/gui_shop_featured_header.rttex|0|2|";
								string text13 = "|\nadd_button|gems_glory|Road To Glory|interface/large/store_buttons/store_buttons30.rttex|rt_grope_loyalty_bundle01|0|0|0|0||interface/large/gui_store_button_overlays1.rttex|0|0|/interface/large/gui_shop_buybanner.rttex|1|0|`2You Get:`` Road To Glory and 100k Gems Instantly.<CR>`5Description:`` Earn Gem rewards when you level up. Every 10 levels you will get additional Gem rewards up to Level 50! Claim all rewards instantly if you are over level 50!! 1.6M Gems in total!! |1|||||||";
								string text14 = "|\nadd_button|gems_rain|It's Rainin' Gems|interface/large/store_buttons/store_buttons.rttex|rt_grope_gem_rain|1|5|0|0|||-1|-1||-1|-1|`2You Get:`` 200,000 Gems, 2 Growtoken, and 1 Megaphone.<CR><CR>`5Description:`` All the gems you could ever want and more plus 2 Growtokens and a Megaphone to tell the whole world about it.|1|||||||";
								string text15 = "|\nadd_button|gems_fountain|Gem Fountain|interface/large/store_buttons/store_buttons2.rttex|rt_grope_gem_fountain|0|2|0|0|||-1|-1||-1|-1|`2You Get:`` 90,000 Gems and 1 Growtoken.<CR><CR>`5Description:`` Get a pile of gems to shop to your hearts desire and 1 Growtoken.|1|||||||";
								string text16 = "|\nadd_button|gems_chest|Chest o' Gems|interface/large/store_buttons/store_buttons.rttex|rt_grope_gem_chest|0|5|0|0|||-1|-1||-1|-1|`2You Get:`` 30,000 Gems.<CR><CR>`5Description:`` Get a chest containing gems.|1|||||||";
								string text17 = "|\nadd_button|gems_bag|Bag o' Gems|interface/large/store_buttons/store_buttons.rttex|rt_grope_gem_bag|1|0|0|0|||-1|-1||-1|-1|`2You Get:`` 14,000 Gems.<CR><CR>`5Description:`` Get a small bag of gems.|1|||||||";
								string text18 = "|\nadd_button|tapjoy|Earn Free Gems|interface/large/store_buttons/store_buttons.rttex||1|2|0|0|||-1|-1||-1|-1||1|||||||";
								string text19 = "|\nadd_banner|interface/large/gui_shop_featured_header.rttex|0|3|";
								string text20 = "|\nadd_button|365d|`o1-Year Subscription Token``|interface/large/store_buttons/store_buttons22.rttex|rt_grope_subs_bundle02|0|5|0|0|||-1|-1||-1|-1|`2You Get:`` 1x 1-Year Subscription Token and 25 Growtokens.<CR><CR>`5Description:`` One full year of special treatment AND 25 Growtokens upfront! You'll get 70 season tokens (as long as there's a seasonal clash running), and 2500 gems every day and a chance of doubling any XP earned, growtime reduction on all seeds planted and Exclusive Skins!|1||||||";
								string text21 = "|\nadd_button|30d|`o30-Day Subscription Token``|interface/large/store_buttons/store_buttons22.rttex|rt_grope_subs_bundle01|0|4|0|0|||-1|-1||-1|-1|`2You Get:`` 1x 30-Day Free Subscription Token and 2 Growtokens.<CR><CR>`5Description:`` 30 full days of special treatment AND 2 Growtokens upfront! You'll get 70 season tokens (as long as there's a seasonal clash running), and 2500 gems every day and a chance of doubling any XP earned, growtime reduction on all seeds planted and Exclusive Skins!|1||||||";
								string text22 = "|\nadd_button|video_tapjoy|Watch Videos For Gems|interface/large/store_buttons/store_buttons29.rttex||0|1|0|0|1/5 VIDEOS WATCHED||-1|-1||-1|-1||1||||||";*/

								/*
								string text1 = "set_description_text|Welcome to the `2Growtopia Store``!  Tap the item you'd like more info on.`o  `wWant to get `5Supporter`` status? Any Gem purchase (or `57,000`` Gems earned with free `5Tapjoy`` offers) will make you one. You'll get new skin colors, the `5Recycle`` tool to convert unwanted items into Gems, and more bonuses!";
								string text2 = "|\nadd_button|iapp_menu|Buy Gems|interface/large/store_buttons5.rttex||0|2|0|0|";
								string text3 = "|\nadd_button|subs_menu|Subscriptions|interface/large/store_buttons22.rttex||0|1|0|0|";
								string text4 = "|\nadd_button|itemomonth|`oItem Of The Month``|interface/large/store_buttons16.rttex|`2September 2018:`` `9Sorcerer's Tunic of Mystery!`` Capable of reflecting the true colors of the world around it, this rare tunic is made of captured starlight and aether. If you think knitting with thread is hard, just try doing it with moonbeams and magic! The result is worth it though, as these clothes won't just make you look amazing - you'll be able to channel their inherent power into blasts of cosmic energy!``|0|3|200000|0|";
								string text5 = "|\nadd_button|locks_menu|Locks And Stuff|interface/large/store_buttons3.rttex||0|4|0|0|";
								string text6 = "|\nadd_button|itempack_menu|Item Packs|interface/large/store_buttons3.rttex||0|3|0|0|";
								string text7 = "|\nadd_button|bigitems_menu|Awesome Items|interface/large/store_buttons4.rttex||0|6|0|0|";
								string text8 = "|\nadd_button|weather_menu|Weather Machines|interface/large/store_buttons5.rttex|Tired of the same sunny sky?  We offer alternatives within...|0|4|0|0||";
								string text9 = "|\nadd_button|token_menu|Growtoken Items|interface/large/store_buttons9.rttex||0|0|0|0|";
								*/
								/*packet::storerequest(peer, text1 + text2 + text3 + text4 + text5 + text6 + text7 + text8 + text9 + text10 + text11 + text12 + text13 + text14 + text15 + text16 + text17 + text18 + text19 + text20 + text21 + text22);
								sendSound(peer, "boo_ghost_trap.wav");
							}
							if (cch.find("action|buy\nitem|locks") == 0) {
								string text1 = "set_description_text|`2Locks And Stuff!``  Select the item you'd like more info on, or BACK to go back.";
								string text2 = "|enable_tabs|1";
								string text3 = "|\nadd_tab_button|store_menu|Home|interface/large/shop_navigation.rttex||0|0|0|0||||-1|-1||||";
								string text4 = "|\nadd_tab_button|locks_menu|Locks And Stuff|interface/large/shop_navigation.rttex||1|1|0|0||||-1|-1||||";
								string text5 = "|\nadd_tab_button|itempack_menu|Item Packs|interface/large/shop_navigation.rttex||0|3|0|0||||-1|-1||||";
								string text6 = "|\nadd_tab_button|bigitems_menu|Awesome Items|interface/large/shop_navigation.rttex||0|4|0|0||||-1|-1||||";
								string text7 = "|\nadd_tab_button|weather_menu|Weather Machines|interface/large/shop_navigation.rttex|Tired of the same sunny sky?  We offer alternatives within...|0|5|0|0||||-1|-1||||";
								string text8 = "|\nadd_tab_button|token_menu|Growtoken Items|interface/large/shop_navigation.rttex||0|2|0|0||||-1|-1||||";
								string text9 = "|\nadd_button|upgrade_backpack|`0Upgrade Backpack`` (`w10 Slots``)|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 10 Additional Backpack Slots.<CR><CR>`5Description:`` Sewing an extra pocket onto your backpack will allow you to store `$10`` additional item types.  How else are you going to fit all those toilets and doors?|0|1|3700|0|||-1|-1||-1|-1||1|||||||";
								string text10 = "|\nadd_button|rename|`oBirth Certificate``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 Birth Certificate.<CR><CR>`5Description:`` Tired of being who you are? By forging a new birth certificate, you can change your GrowID! The Birth Certificate will be consumed when used. This item only works if you have a GrowID, and you can only use one every 60 days, so you're not confusing everybody.|0|6|20000|0|||-1|-1||-1|-1||1|||||||";
								string text11 = "|\nadd_button|clothes|`oClothes Pack``|interface/large/store_buttons/store_buttons2.rttex|`2You Get:`` 3 Randomly Wearble Items.<CR><CR>`5Description:`` Why not look the part? Some may even have special powers...|0|0|50|0|||-1|-1||-1|-1||1|||||||";
								string text12 = "|\nadd_button|rare_clothes|`oRare Clothes Pack``|interface/large/store_buttons/store_buttons2.rttex|`2You Get:`` 3 Randomly Chosen Wearbale Items.<CR><CR>`5Description:`` Enjoy the garb of kings! Some may even have special powers...|0|1|500|0|||-1|-1||-1|-1||1|||||||";
								string text13 = "|\nadd_button|transmutation_device|`oTransmutabooth``|interface/large/store_buttons/store_buttons27.rttex|`2You Get:`` 1 Transmutabooth.<CR><CR>`5Description:`` Behold! A wondrous technological achievement from the innovative minds at GrowTech, the Transmutabooth allows you to merge clothing items, transferring the visual appearance of one onto another in the same slot! If you've ever wanted your Cyclopean Visor to look like Shades (while keeping its mod), now you can!|0|7|25000|0|||-1|-1||-1|-1||1|||||||";
								string text14 = "|\nadd_button|contact_lenses|`oContact Lens Pack``|interface/large/store_buttons/store_buttons22.rttex|`2You Get:`` 10 Random Contact Lens Colors.<CR><CR>`5Description:`` Need a colorful new look? This pack includes 10 random Contact Lens colors (and may include Contact Lens Cleaning Solution, to return to your natural eye color)!|0|7|15000|0|||-1|-1||-1|-1||1|||||||";
								string text15 = "|\nadd_button|eye_drops|`oEye Drop Pack``|interface/large/store_buttons/store_buttons17.rttex|`2You Get:`` 1 `#Rare Bathroom Mirror`` and 10 random Eye Drop Colors.<CR><CR>`5Description:`` Need a fresh new look?  This pack includes a 10 random Eye Drop Colors (may include Eye Cleaning Solution, to leave your eyes sparkly clean)!|0|6|30000|0|||-1|-1||-1|-1||1|||||||";
								string text16 = "|\nadd_button|nyan_hat|`oTurtle Hat``|interface/large/store_buttons/store_buttons3.rttex|`2You Get:`` 1 Turtle Hat.<CR><CR>`5Description:`` It's the greatest hat ever. It bloops out bubbles as you run! `4Not available any other way!``|0|2|25000|0|||-1|-1||-1|-1||1|||||||";
								string text17 = "|\nadd_button|tiny_horsie|`oTiny Horsie``|interface/large/store_buttons/store_buttons3.rttex|`2You Get:`` 1 Tiny Horsie.<CR><CR>`5Description:`` Tired of wearing shoes? Wear a Tiny Horsie instead! Or possibly a large dachshund, we're not sure. Regardless, it lets you run around faster than normal, plus you're on a horse! `4Not available any other way!``|0|5|25000|0|||-1|-1||-1|-1||1|||||||";
								string text18 = "|\nadd_button|star_ship|`oPleiadian Star Ship``|interface/large/store_buttons/store_buttons4.rttex|`2You Get:`` 1 Pleiadian Star Ship.<CR><CR>`5Description:`` Float on, my brother. It's all groovy. This star ship can't fly, but you can still zoom around in it, leaving a trail of energy rings and moving at enhanced speed. Sponsored by Pleiadian. `4Not available any other way!``|0|3|25000|0|||-1|-1||-1|-1||1|||||||";
								string text19 = "|\nadd_button|dragon_hand|`oDragon Hand``|interface/large/store_buttons/store_buttons5.rttex|`2You Get:`` 1 Dragon Hand.<CR><CR>`5Description:`` Call forth the dragons of legend!  With the Dragon Hand, you will command your own pet dragon. Instead of punching blocks or players, you can order your dragon to incinerate them! In addition to just being awesome, this also does increased damage, and pushes other players farther. `4Not available any other way!``|0|1|50000|0|||-1|-1||-1|-1||1|||||||";
								string text20 = "|\nadd_button|corvette|`oLittle Red Corvette``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 1 Little Red Corvette.<CR><CR>`5Description:`` Cruise around the neighborhood in style with this sweet convertible. It moves at enhanced speed and leaves other Growtopians in your dust. `4Not available any other way!``|0|1|25000|0|||-1|-1||-1|-1||1|||||||";
								string text21 = "|\nadd_button|stick_horse|`oStick Horse``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 1 Stick Horse.<CR><CR>`5Description:`` Nobody looks cooler than a person bouncing along on a stick with a fake horse head attached. NOBODY. `4Not available any other way!``|0|3|25000|0|||-1|-1||-1|-1||1|||||||";
								string text22 = "|\nadd_button|ambulance|`oAmbulance``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 Ambulance.<CR><CR>`5Description:`` Rush to the scene of an accident while lawyers chase you in this speedy rescue vehicle. `4Not available any other way!``|0|3|25000|0|||-1|-1||-1|-1||1|||||||";
								string text23 = "|\nadd_button|raptor|`oRiding Raptor``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 Riding Raptor.<CR><CR>`5Description:`` Long thought to be extinct, it turns out that these dinosaurs are actually alive and easily tamed. And riding one lets you run around faster than normal! `4Not available any other way!``|0|7|25000|0|||-1|-1||-1|-1||1|||||||";
								string text24 = "|\nadd_button|owl|`oMid-Pacific Owl``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 1 Mid-Pacific Owl.<CR><CR>`5Description:`` This owl is a bit lazy - if you stop moving around, he'll land on your head and fall asleep. Dedicated to the students of the Mid-Pacific Institute. `4Not available any other way!``|0|1|30000|0|||-1|-1||-1|-1||1|||||||";
								string text25 = "|\nadd_button|unicorn|`oUnicorn Garland``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 1 Unicorn Garland.<CR><CR>`5Description:`` Prance about in the fields with your very own pet unicorn! It shoots `1R`2A`3I`4N`5B`6O`7W`8S``. `4Not available any other way!``|0|4|50000|0|||-1|-1||-1|-1||1|||||||";
								string text26 = "|\nadd_button|starboard|`oStarBoard``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 1 StarBoard.<CR><CR>`5Description:`` Hoverboards are here at last! Zoom around Growtopia on this brand new model, which is powered by fusion energy (that means stars spit out of the bottom). Moves faster than walking. Sponsored by Miwsky, Chudy, and Dawid. `4Not available any other way!``|0|1|30000|0|||-1|-1||-1|-1||1|||||||";
								string text27 = "|\nadd_button|motorcycle|`oGrowley Motorcycle``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 1 Growley Motorcycle.<CR><CR>`5Description:`` The coolest motorcycles available are Growley Dennisons. Get a sporty blue one today! It even moves faster than walking, which is pretty good for a motorcycle. `4Not available any other way!``|0|6|50000|0|||-1|-1||-1|-1||1|||||||";
								string text28 = "|\nadd_button|monkey_on_back|`oMonkey On Your Back``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 1 Monkey On Your Back.<CR><CR>`5Description:`` Most people work really hard to get rid of these, but hey, if you want one, it's available! `4But not available any other way!`` Sponsored by SweGamerHD's subscribers, Kizashi, and Inforced. `#Note: This is a neck item, not a back item. He's grabbing your neck!``|0|2|50000|0|||-1|-1||-1|-1||1|||||||";
								string text29 = "|\nadd_button|carrot_sword|`oCarrot Sword``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 1 Carrot Sword.<CR><CR>`5Description:`` Razor sharp, yet oddly tasty. This can carve bunny symbols into your foes! `4Not available any other way!`` Sponsored by MrMehMeh.|0|3|15000|0|||-1|-1||-1|-1||1|||||||";
								string text30 = "|\nadd_button|red_bicycle|`oRed Bicycle``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 1 Red Bicycle.<CR><CR>`5Description:`` It's the environmentally friendly way to get around! Ride this bicycle at high speed hither and zither throughout Growtopia. `4Not available any other way!``|0|5|30000|0|||-1|-1||-1|-1||1|||||||";
								string text31 = "|\nadd_button|fire_truck|`oFire Truck``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 1 Fire Truck.<CR><CR>`5Description:`` Race to the scene of the fire in this speedy vehicle! `4Not available any other way!``|0|2|50000|0|||-1|-1||-1|-1||1|||||||";
								string text32 = "|\nadd_button|pet_slime|`oPet Slime``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 1 Pet Slime.<CR><CR>`5Description:`` What could be better than a blob of greasy slime that follows you around? How about a blob of greasy slime that follows you around and spits corrosive acid, melting blocks more quickly than a normal punch? `4Not available any other way!``|0|4|100000|0|||-1|-1||-1|-1||1|||||||";
								string text33 = "|\nadd_button|dabstep_shoes|`oDabstep Low Top Sneakers``|interface/large/store_buttons/store_buttons21.rttex|`2You Get:`` 1 Dabstep Low Top Sneakers.<CR><CR>`5Description:`` Light up every footfall and move to a better beat with these dabulous shoes! When you're wearing these, the world is your dance floor! `4Not available any other way!``|0|2|30000|0|||-1|-1||-1|-1||1|||||||";


								packet::storerequest(peer, text1 + text2 + text3 + text4 + text5 + text6 + text7 + text8 + text9 + text10 + text11 + text12 + text13 + text14 + text15 + text16 + text17 + text18 + text19 + text20 + text21 + text22 + text23 + text24 + text25 + text26 + text27 + text28 + text29 + text30 + text31 + text32 + text33);

							}
							if (cch.find("action|buy\nitem|itempack") == 0) {
								string text1 = "set_description_text|`2Item Packs!``  Select the item you'd like more info on, or BACK to go back.";
								string text2 = "|enable_tabs|1";
								string text3 = "|\nadd_tab_button|main_menu|Home|interface/large/shop_navigation.rttex||0|0|0|0||||-1|-1||||";
								string text4 = "|\nadd_tab_button|locks_menu|Locks And Stuff|interface/large/shop_navigation.rttex||0|1|0|0||||-1|-1||||";
								string text5 = "|\nadd_tab_button|itempack_menu|Item Packs|interface/large/shop_navigation.rttex||1|3|0|0||||-1|-1||||";
								string text6 = "|\nadd_tab_button|bigitems_menu|Awesome Items|interface/large/shop_navigation.rttex||0|4|0|0||||-1|-1||||";
								string text7 = "|\nadd_tab_button|weather_menu|Weather Machines|interface/large/shop_navigation.rttex|Tired of the same sunny sky?  We offer alternatives within...|0|5|0|0||||-1|-1||||";
								string text8 = "|\nadd_tab_button|token_menu|Growtoken Items|interface/large/shop_navigation.rttex||0|2|0|0||||-1|-1||||";
								string text9 = "|\nadd_button|world_lock|`oWorld Lock``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 World Lock.<CR><CR>`5Description:`` Become the undisputed ruler of your domain with one of these babies.  It works like a normal lock except it locks the `$entire world``!  Won't work on worlds that other people already have locks on. You can even add additional normal locks to give access to certain areas to friends. `5It's a perma-item, is never lost when destroyed.``  `wRecycles for 200 Gems.``|0|7|2000|0|||-1|-1||-1|-1||1|||||||";
								string text10 = "|\nadd_button|10_wl|`oWorld Lock Pack``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:`` 10 World Locks.<CR><CR>`5Description:`` 10-pack of World Locks. Become the undisputed ruler of up to TEN kingdoms with these babies. Each works like a normal lock except it locks the `$entire world``!  Won't work on worlds that other people already have locks on. You can even add additional normal locks to give access to certain areas to friends. `5It's a perma-item, is never lost when destroyed.`` `wEach recycles for 200 Gems.``|0|3|20000|0|||-1|-1||-1|-1||1|||||||";
								string text11 = "|\nadd_button|ads_tv|`oGrowShow TV``|interface/large/store_buttons/store_buttons30.rttex|`2You Get:`` 1 GrowShow TV.<CR><CR>`5Description:`` Growtopia's most loved gameshow now brings you its very own TV to watch up to 3 ads per day for AMAZING prizes.|0|4|50|0|||-1|-1||-1|-1||1|||||||";
								string text12 = "|\nadd_button|small_lock|`oSmall Lock``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 Small Lock.<CR><CR>`5Description:`` Protect up to `$10`` tiles.  Can add friends to the lock so others can edit that area as well. `5It's a perma-item, is never lost when destroyed.``|1|3|50|0|||-1|-1||-1|-1||1|||||||";
								string text13 = "|\nadd_button|big_lock|`oBig Lock``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 Big Lock.<CR><CR>`5Description:`` Protect up to `$48`` tiles.  Can add friends to the lock so others can edit that area as well. `5It's a perma-item, is never lost when destroyed.``|1|1|200|0|||-1|-1||-1|-1||1|||||||";
								string text14 = "|\nadd_button|huge_lock|`oHuge Lock``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 Huge Lock.<CR><CR>`5Description:`` Protect up to `$200`` tiles.  Can add friends to the lock so others can edit that area as well. `5It's a perma-item, is never lost when destroyed.``|0|4|500|0|||-1|-1||-1|-1||1|||||||";
								string text15 = "|\nadd_button|door_pack|`oDoor And Sign Hello Pack``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 Door and 1 Sign.<CR><CR>`5Description:`` Own your very own door and sign! This pack comes with one of each. Leave cryptic messages and create a door that can open to, well, anywhere.|0|3|15|0|||-1|-1||-1|-1||1|||||||";
								string text16 = "|\nadd_button|door_mover|`oDoor Mover``|interface/large/store_buttons/store_buttons8.rttex|`2You Get:`` 1 Door Mover.<CR><CR>`5Description:`` Unsatisfied with your world's layout?  This one-use device can be used to move the White Door to any new location in your world, provided there are 2 empty spaces for it to fit in. Disappears when used. `2Only usable on a world you have World Locked.``|0|6|5000|0|||-1|-1||-1|-1||1|||||||";
								string text17 = "|\nadd_button|vending_machine|`oVending Machine``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 1 Vending Machine.<CR><CR>`5Description:`` Tired of interacting with human beings? Try a Vending Machine! You can put a stack of items inside it, set a price in World Locks, and people can buy from the machine while you sit back and rake in the profits! `5It's a perma-item, is never lost when destroyed, and it is not available any other way.``|0|6|8000|0|||-1|-1||-1|-1||1|||||||";
								string text18 = "|\nadd_button|digi_vend|`oDigiVend Machine``|interface/large/store_buttons/store_buttons29.rttex|`2You Get:`` 1 DigiVend Machine.<CR><CR>`5Description:`` Get with the times and go digital! This wired vending machine can connect its contents to Vending Hubs AND the multiversal economy, providing a unified shopping experience along with price checks to help you sell your goods! All that, and still no human-related hassle! Use your wrench on this to stock it with an item and set a price in World Locks. Other players will be able to buy from it! Only works in World-Locked worlds.|0|2|12000|0|||-1|-1||-1|-1||1|||||||";
								string text19 = "|\nadd_button|checkout_counter|`oVending Hub - Checkout Counter``|interface/large/store_buttons/store_buttons29.rttex|`2You Get:`` 1 Vending Hub.<CR><CR>`5Description:`` Your one-stop shop! This vending hub will collect and display (and let shoppers buy) the contents of ALL DigiVends in its row or column (wrench it to set which the direction)! Wow! Now that's a shopping experience we can all enjoy! Note: Only works in World-Locked worlds.|0|3|50000|0|||-1|-1||-1|-1||1|||||||";
								string text20 = "|\nadd_button|change_addr|`oChange of Address``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 1 Change of Address.<CR><CR>`5Description:`` Don't like the name of your world? You can use up one of these to trade your world's name with the name of any other world that you own. You must have a `2World Lock`` in both worlds. Go lock up that empty world with the new name you want and swap away!|0|6|20000|0|||-1|-1||-1|-1||1|||||||";
								string text21 = "|\nadd_button|signal_jammer|`oSignal Jammer``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 Signal Jammer.<CR><CR>`5Description:`` Get off the grid! Install a `$Signal Jammer``! A single punch will cause it to whir to life, tireless hiding your world and its population from pesky snoopers - only those who know the world name will be able to enter. `5It's a perma-item, is never lost when destroyed.``|1|6|2000|0|||-1|-1||-1|-1||1|||||||";
								string text22 = "|\nadd_button|punch_jammer|`oPunch Jammer``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 Punch Jammer.<CR><CR>`5Description:`` Tired of getting bashed around? Set up a Punch Jammer in your world, and people won't be able to punch each other! Can be turned on and off as needed. `5It's a perma-item, is never lost when destroyed.``|0|4|15000|0|||-1|-1||-1|-1||1|||||||";
								string text23 = "|\nadd_button|zombie_jammer|`oZombie Jammer``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 Zombie Jammer.<CR><CR>`5Description:`` Got a parkour or race that you don't want slowed down? Turn this on and nobody can be infected by zombie bites in your world. It does not prevent direct infection by the g-Virus itself though. `5It's a perma-item, is never lost when destroyed.``|0|5|15000|0|||-1|-1||-1|-1||1|||||||";
								string text24 = "|\nadd_button|starship_blast|`oImperial Starship Blast``|interface/large/store_buttons/store_buttons21.rttex|`2You Get:`` 1 Imperial Starship Blast.<CR><CR>`5Description:`` Command your very own Starship and explore the cosmos! This blast contains one of 3 possible Imperial ship types - which will you get? Note: Each Starship comes with a full tank of gas, an Imperial Helm - Mk. I, Imperial Reactor - Mk. I and an Imperial Viewscreen - Mk. I, so you'll be all set for your adventure among the stars! Note: A Starship also comes with an assortment of space-age blocks!|0|1|20000|0|||-1|-1||-1|-1||1|||||||";
								string text25 = "|\nadd_button|surg_blast|`oSurgWorld Blast``|interface/large/store_buttons/store_buttons27.rttex|`2You Get:`` 1 SurgWorld Blast and 1 Caduceaxe.<CR><CR>`5Description:`` Your gateway to a world of medical wonders! SurgWorld is a place of care and healing, with all kinds of interesting blocks, top tips on how to treat people with surgery, and an increased chance of getting maladies while you work! Also comes with 1 Caduceaxe to extract Vaccine Drops from blocks. `6Warning:`` May break when extracting vaccine.|0|2|10000|0|||-1|-1||-1|-1||1|||||||";
								string text26 = "|\nadd_button|bountiful_blast|`oBountiful Blast``|interface/large/store_buttons/store_buttons27.rttex|`2You Get:`` 1 Bountiful Blast.<CR><CR>`5Description:`` Enter a world of fertile soil, cheerful sunshine and lush green hills, and bountiful new trees! This blast is your ticket to a different kind of farming!|0|3|5000|0|||-1|-1||-1|-1||1|||||||";
								string text27 = "|\nadd_button|thermo_blast|`oThermonuclear Blast``|interface/large/store_buttons/store_buttons8.rttex|`2You Get:`` 1 Thermonuclear Blast.<CR><CR>`5Description:`` This supervillainous device will blast you to a new world that has been scoured completely empty - it contains nothing but Bedrock and a White Door. Remember: When using this, you are creating a NEW world by typing in a new name. It would be irresponsible to let you blow up an entire existing world.|0|5|15000|0|||-1|-1||-1|-1||1|||||||";
								string text28 = "|\nadd_button|antigravity_generator|`oAntigravity Generator``|interface/large/store_buttons/store_buttons17.rttex|`2You Get:`` 1 Antigravity Generator.<CR><CR>`5Description:`` Disables gravity in your world when activated! Well, it reduces gravity, and lets everybody jump as much as they want! `5It's a perma-item - never lost when destroyed! `4Not available any other way!````|0|3|450000|0|||-1|-1||-1|-1||1|||||||";
								string text29 = "|\nadd_button|building_blocks_machine|`oBuilding Blocks Machine``|interface/large/store_buttons/store_buttons26.rttex|`2You Get:`` 1 Building Blocks Machine.<CR><CR>`5Description:`` Eager to add some new building materials to your construction stockpile? Tired of collecting them from random worlds and weirdos? Well, pop this beauty in your world and it'll start cranking out awesome blocks in no time! Contains the `5RARE Creepy Baby Block and Digital Dirt`` amongst a heap of other new blocks! Careful, though - blocks don't just come from nothing, and this machine will eventually run out of power once it makes a bunch!|0|3|8000|0|||-1|-1||-1|-1||1|||||||";
								string text30 = "|\nadd_button|builders_lock|`oBuilder's Lock``|interface/large/store_buttons/store_buttons17.rttex|`2You Get:`` 1 Builders Lock.<CR><CR>`5Description:`` Protect up to `$200`` tiles. Wrench the lock to limit it - it can either only allow building, or only allow breaking! `5It's a perma-item, is never lost when destroyed.``|0|2|50000|0|||-1|-1||-1|-1||1|||||||";
								string text31 = "|\nadd_button|weather_sunny|`oWeather Machine - Sunny``|interface/large/store_buttons/store_buttons5.rttex|`2You Get:`` 1 Weather Machine - Sunny.<CR><CR>`5Description:`` You probably don't need this one... but if you ever have a desire to turn a sunset or desert world back to normal, grab a Sunny Weather Machine to restore the default Growtopia sky! `5It's a perma-item, is never lost when destroyed.``|0|5|1000|0|||-1|-1||-1|-1||1|||||||";
								string text32 = "|\nadd_button|weather_night|`oWeather Machine - Night``|interface/large/store_buttons/store_buttons5.rttex|`2You Get:`` 1 Weather Machine - Night.<CR><CR>`5Description:`` You might not call it weather, but we do! This will turn the background of your world into a lovely night scene with stars and moon. `5It's a perma-item, is never lost when destroyed.``|0|6|10000|0|||-1|-1||-1|-1||1|||||||";
								string text33 = "|\nadd_button|weather_arid|`oWeather Machine - Arid``|interface/large/store_buttons/store_buttons5.rttex|`2You Get:`` 1 Weather Machine - Arid.<CR><CR>`5Description:`` Want your world to look like a cartoon desert? This will turn the background of your world into a desert scene with all the trimmings. `5It's a perma-item, is never lost when destroyed.``|0|7|10000|0|||-1|-1||-1|-1||1|||||||";
								string text34 = "|\nadd_button|weather_rainy|`oWeather Machine - Rainy City``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 1 Weather Machine - Rainy City.<CR><CR>`5Description:`` This will turn the background of your world into a dark, rainy city scene complete with sound effects. `5It's a perma-item, is never lost when destroyed.``|0|5|10000|0|||-1|-1||-1|-1||1|||||||";
								string text35 = "|\nadd_button|weather_warp|`oWeather Machine - Warp Speed``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 1 Weather Machine - Warp Speed.<CR><CR>`5Description:`` This Weather Machine will launch your world through space at relativistic speeds, which will cause you to age more slowly, as well as see stars flying by rapidly in the background. `5It's a perma-item, is never lost when destroyed.``|0|3|10000|0|||-1|-1||-1|-1||1|||||||";
								string text36 = "|\nadd_button|mars_blast|`oMars Blast``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 1 Mars Blast.<CR><CR>`5Description:`` Blast off to Mars!  This powerful rocket ship will launch you to a new world set up like the surface of Mars, with a special martian sky background, and unique terrain not found elsewhere in the solar system. Mars even has lower gravity than Growtopia normally does! Remember: When using this, you are creating a NEW world by typing in a new name. You can't convert an existing world to Mars, that would be dangerous.|0|7|15000|0|||-1|-1||-1|-1||1|||||||";
								string text37 = "|\nadd_button|undersea_blast|`oUndersea Blast``|interface/large/store_buttons/store_buttons9.rttex|`2You Get:`` 1 Undersea Blast.<CR><CR>`5Description:`` Explore the Locke!  This advanced device will terraform a new world set up like the bottom of the Locke, with a special Locke background, and special blocks like Seaweed, Coral, Jellyfish, Sharks, and maybe a special surprise... Remember, by using this you are creating a NEW world by typing in a new name. You can't convert an existing world to an Locke, that would be dangerous.|0|7|15000|0|||-1|-1||-1|-1||1|||||||";
								string text38 = "|\nadd_button|cave_blast|`oCave Blast``|interface/large/store_buttons/store_buttons15.rttex|`2You Get:`` 1 Cave Blast.<CR><CR>`5Description:`` This explosive device will punch a hole in the ground, giving you a dark cavern to explore. There are even rumors of treasure and the entrance to ancient mines, hidden deep in the caves... but make sure you bring a World Lock. The blasted world is not locked when it's created, so lock it before somebody shows up! Remember: When using this, you are creating a NEW world by typing in a new name. You can't convert an existing world to a cave, that would be dangerous.|0|2|30000|0|||-1|-1||-1|-1||1|||||||";
								string text39 = "|\nadd_button|weather_stuff|`oWeather Machine - Stuff``|interface/large/store_buttons/store_buttons15.rttex|`2You Get:`` 1 Weather Machine - Stuff.<CR><CR>`5Description:`` This is the most fun weather imaginable - Choose any item from your inventory, adjust some settings, and watch it rain down from the sky! Or up, if you prefer reversing the gravity. `5It's a perma-item, is never lost when destroyed.``|0|6|50000|0|||-1|-1||-1|-1||1|||||||";
								string text40 = "|\nadd_button|weather_jungle|`oWeather Machine - Jungle``|interface/large/store_buttons/store_buttons16.rttex|`2You Get:`` 1 Weather Machine - Jungle.<CR><CR>`5Description:`` This weather machine will turn the background of your world into a steamy jungle. `5It's a perma-item, is never lost when destroyed.``|0|5|20000|0|||-1|-1||-1|-1||1|||||||";
								string text41 = "|\nadd_button|weather_backgd|`oWeather Machine - Background``|interface/large/store_buttons/store_buttons17.rttex|`2You Get:`` 1 Weather Machine - Background.<CR><CR>`5Description:`` This amazing device can scan any Background Block, and will make your entire world look like it's been filled with that block. Also handy for hiding music notes! `5It's a perma-item, is never lost when destroyed.``|0|1|150000|0|||-1|-1||-1|-1||1|||||||";
								string text42 = "|\nadd_button|digital_rain_weather|`oWeather Machine - Digital Rain``|interface/large/store_buttons/store_buttons22.rttex|`2You Get:`` 1 Weather Machine - Digital Rain.<CR><CR>`5Description:`` Take the grow pill, and we'll show you how deep the rabbit hole goes! Splash the scrolling code of creation across the skies of your worlds. They say you learn to understand it after a while... Note: You can only have one of these per world. `5It's a perma-item, is never lost when destroyed.``|0|6|30000|0|||-1|-1||-1|-1||1|||||||";
								string text43 = "|\nadd_button|treasure_blast|`oTreasure Blast``|interface/large/store_buttons/store_buttons26.rttex|`2You Get:`` 1 Treasure Blast.<CR><CR>`5Description:`` Enter a world of snow-capped peaks and long-forgotten mysteries! Riddles and secrets - and a ton of treasure - await those who brave this blast's blocks! Remember, when you use this, it'll create a new world by typing in a new name! No sense in searching for clues to great treasures in well-trod worlds, is there?|0|6|10000|0|||-1|-1||-1|-1||1|||||||";


								packet::storerequest(peer, text1 + text2 + text3 + text4 + text5 + text6 + text7 + text8 + text9 + text10 + text11 + text12 + text13 + text14 + text15 + text16 + text17 + text18 + text19 + text20 + text21 + text22 + text23 + text24 + text25 + text26 + text27 + text28 + text29 + text30 + text31 + text32 + text33 + text34 + text35 + text36 + text37 + text38 + text39 + text40 + text41 + text42 + text43);

							}
							if (cch.find("action|buy\nitem|bigitems") == 0) {
								string text1 = "set_description_text|`2Awesome Items!``  Select the item you'd like more info on, or BACK to go back.";
								string text2 = "|enable_tabs|1";
								string text3 = "|\nadd_tab_button|main_menu|Home|interface/large/shop_navigation.rttex||0|0|0|0||||-1|-1||||";
								string text4 = "|\nadd_tab_button|locks_menu|Locks And Stuff|interface/large/shop_navigation.rttex||0|1|0|0||||-1|-1||||";
								string text5 = "|\nadd_tab_button|itempack_menu|Item Packs|interface/large/shop_navigation.rttex||0|3|0|0||||-1|-1||||";
								string text6 = "|\nadd_tab_button|bigitems_menu|Awesome Items|interface/large/shop_navigation.rttex||1|4|0|0||||-1|-1||||";
								string text7 = "|\nadd_tab_button|weather_menu|Weather Machines|interface/large/shop_navigation.rttex|Tired of the same sunny sky?  We offer alternatives within...|0|5|0|0||||-1|-1||||";
								string text8 = "|\nadd_tab_button|token_menu|Growtoken Items|interface/large/shop_navigation.rttex||0|2|0|0||||-1|-1||||";
								string text9 = "|\nadd_button|5seed|`oSmall Seed Pack``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 1 Small Seed Pack.<CR><CR>`5Description:`` Contains one Small Seed Pack. Open it for `$5`` randomly chosen seeds, including 1 rare seed! Who knows what you'll get?!|1|4|100|0|||-1|-1||-1|-1||1|||||||";
								string text10 = "|\nadd_button|ssp_10_pack|`oSmall Seed Pack Collection``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:`` 10 Small Seed Packs.<CR><CR>`5Description:`` Open each one for `$5`` randomly chosen seeds apiece, including 1 rare seed per pack! Who knows what you'll get?!|0|4|1000|0|||-1|-1||-1|-1||1|||||||";
								string text11 = "|\nadd_button|rare_seed|`oRare Seed Pack``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 5 Randomly Chosen Rare Seeds.<CR><CR>`5Description:`` Expect some wondrous crops with these!|1|7|500|0|||-1|-1||-1|-1||1|||||||";
								string text12 = "|\nadd_button|grow_spray|`o5-pack of Grow Spray Fertilizer``|interface/large/store_buttons/store_buttons.rttex|`2You Get:`` 5 Grow Spray Fertilizers.<CR><CR>`5Description:`` Why wait?!  Treat yourself to a `$5-pack`` of amazing `wGrow Spray Fertilizer`` by GrowTech Corp.  Each bottle instantly ages a tree by `$1 hour``.|0|6|200|0|||-1|-1||-1|-1||1|||||||";
								string text13 = "|\nadd_button|deluxe_grow_spray|`oDeluxe Grow Spray``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 1 Deluxe Grow Spray.<CR><CR>`5Description:`` GrowTech's new `$Deluxe`` `wGrow Spray`` instantly ages a tree by `$24 hours`` per bottle! That's somewhere around 25 times as much as regular Grow Spray!|0|2|900|0|||-1|-1||-1|-1||1|||||||";
								string text14 = "|\nadd_button|bountiful_seed_pack|`oBountiful Seed Pack``|interface/large/store_buttons/store_buttons28.rttex|`2You Get:`` 1 Bountiful Seed Pack.<CR><CR>`5Description:`` Contains `$5`` randomly chosen bountiful seeds, including 1 rare seed! Who knows what you'll get?!|0|4|1000|0|||-1|-1||-1|-1||1|||||||";
								string text15 = "|\nadd_button|basic_splice|`oBasic Splicing Kit``|interface/large/store_buttons/store_buttons2.rttex|`2You Get:`` 10 Rock Seeds and 10 Random Seeds of Rarity 2.<CR><CR>`5Description:`` The basic seeds every farmer needs.|0|3|200|0|||-1|-1||-1|-1||1|||||||";
								string text16 = "|\nadd_button|surgical_kit|`oSurgical Kit``|interface/large/store_buttons/store_buttons7.rttex|`2You Get:`` 1 `#Rare Heart Monitor``, 1 Hospital Bed, 1 Train-E Bot, 5 of each of the 13 different Surical Tools and 10 Med-a-Checks.<CR><CR>`5Description:`` Get all the tools you need to become Chief of Surgery at Growtopia General Hospital! `#Rare`` Heart Monitor that lets people know when you are online, Hospital Bed that lets you perform surgery on anybody laying (or standing) on it, Med-a-Checks to identify patients with maladies, The Train-E bot to practice on, and 5 each of the thirteen different Surgical Tools you'll need to do that surgery!|0|2|12000|0|||-1|-1||-1|-1||1|||||||";
								string text17 = "|\nadd_button|star_supplies|`oGalactic Goodies``|interface/large/store_buttons/store_buttons21.rttex|`2You Get:`` 60 Star Tools and 25 Star Fuel.<CR><CR>`5Description:`` Get all the Star Tools you need to boldly go where no Growtopian has gone! Use these to help you command a starship and seek victory in the Galactic Nexus! You'll get 5 each of the 12 Star Tools you'll need to complete missions and some bonus Star Fuel to help power a Starship!|0|0|15000|0|||-1|-1||-1|-1||1|||||||";
								string text18 = "|\nadd_button|fishin_pack|`oFishin' Pack``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 1 Fishing Rod, 5 Wiggly Worms, 1 Hand Drill, 1 Nuclear Detonator,  1 `#Rare Tackle Box``, 10 Fish Tanks and 1 `#Rare Fish Tank Port`` .<CR><CR>`5Description:`` Relax and sit by the shore... this pack includes a Fishing Rod, Wiggly Worms for bait, Hand Drill, Nuclear Detonator, and a `#Rare`` Tackle Box which provides you with more free bait every two days, Fish Tanks, and a `#Rare`` Fish Tank Port to put the fish you catch into your fish tank!|0|0|10000|0|||-1|-1||-1|-1||1|||||||";
								string text19 = "|\nadd_button|fish_training_pack|`oFish Trainin' Pack``|interface/large/store_buttons/store_buttons17.rttex|`2You Get:`` 2 Fish Flakes, 2 Fish Medicine, AND 1 `#Rare Training Port``.<CR><CR>`5Description:`` Get ready to train your favorite fish! Use the Training Port to put a perfect fish into your fish tank for training!|0|7|10000|0|||-1|-1||-1|-1||1|||||||";
								string text20 = "|\nadd_button|fish_flakes|`oFish Flakes``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:`` 5 Fish Flakes.<CR><CR>`5Description:`` Every fish adores these tasty flakes! Give a pinch to your Training Fish and fill their scaly bellies with aquatic goodness! Take the guesswork out of finnicky feedings with a treat you know they'll love!|0|2|7500|0|||-1|-1||-1|-1||1|||||||";
								string text21 = "|\nadd_button|fish_medicine|`oFish Medicine``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:`` 1 Fish Medicine.<CR><CR>`5Description:`` Make a sick Training Fish bright and healthy with this healing potion. One dose is enough to make even the sickest fish all better!|0|0|1500|0|||-1|-1||-1|-1||1|||||||";
								string text22 = "|\nadd_button|fish_reviver|`oFish Reviver``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:`` 1 `#Rare Fish Reviver``.<CR><CR>`5Description:`` Resurrect a dead Training Fish with a revivifying zap from this `#Rare`` Fish Reviver! One dose is enough to reach beyond the veil and bring a fish back from the dead! Comes with a 100% zombie-free guarantee!|0|1|5000|0|||-1|-1||-1|-1||1|||||||";
								string text23 = "|\nadd_button|crime_wave|`oCrime Wave``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 5 Random Superpower Cards and 1 `#Rare Crime Wave``.<CR><CR>`5Description:`` Get powered up with random Superpower Cards, and what good would that be without a `#Rare`` Crime Wave to use them on? A Crime Wave is a one-use item that calls four villains to your world for you to battle. `6Beware:`` Villains only stick around for 24 hours once they appear.|0|5|5000|0|||-1|-1||-1|-1||1|||||||";
								string text24 = "|\nadd_button|silkworm|`oSilkworm``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 1 Silk Worm.<CR><CR>`5Description:`` It's the newest cuddly pet from Growtech Pharma! Thanks to genetic engineering, you can now raise your own giant mutant silkworm. They'll eat almost any food, but don't forget to give them water too! And if they get sick, you'll need to have some Antidotes on hand. `6Warning:`` `9Silkworms are living creatures. They will not live forever! Take good care of them, and enjoy them while you can.`` `4Not available any other way``.|0|7|7000|0|||-1|-1||-1|-1||1|||||||";
								string text25 = "|\nadd_button|guild_name_changer|`oGuild Name Changer``|interface/large/store_buttons/store_buttons23.rttex|`2You Get:`` 1 Guild Name Changer.<CR><CR>`5Description:`` Fancy a change? Bored of your guild name or made a mistake when creating it? Fear not, you can use up one of these to change your `2Guild's name``! The usual name checks will be initiated to check if your new guild name is valid. `4Only usable by the guild leader!``|0|6|100000|0|||-1|-1||-1|-1||1|||||||";
								string text26 = "|\nadd_button|geiger|`oGeiger Counter``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 1 Geiger Counter.<CR><CR>`5Description:`` With this fantabulous device, you can detect radiation around you. It bleeps red, then yellow, then green as you get closer to the source. Who knows what you might find? `4Not available any other way!``|0|1|25000|0|||-1|-1||-1|-1||1|||||||";
								string text27 = "|\nadd_button|zombie_pack|`oZombie Defense Pack``|interface/large/store_buttons/store_buttons4.rttex|`2You Get:`` 1 `#Rare Sawed-Off Shotgun``, 1 Combat Vest, 1 Zombie Stompin' Boots, 3 Traffic Barricades, 1 Military Radio, 1 Antidote, 3 Toxic Waste Barrels, 3 Biohazard Signs, 3 Tombstones and 1 `#Rare Deadly G-Virus``!.<CR><CR>`5Description:`` The zombie invasion has come! Protect yourself with all the esential zombie fighting gear and best of all, you get an Antidote to cure yourself! Also includes the deadly g-Virus itself to infect your friends with!|0|4|10000|0|||-1|-1||-1|-1||1|||||||";
								string text28 = "|\nadd_button|boo_pack|`oB.O.O. Training Pack``|interface/large/store_buttons/store_buttons15.rttex|`2You Get:`` 1 `#Rare Spectral Goggles``, 1 Neutron Gun, 1 Neutron Pack and 10 Ghost Jars <CR><CR>`5Description:`` It looks like Growtopia is under siege by ghosts! Well, the `9Battlers Of the Otherworldly`` are hiring! You'll have to earn your uniform, but this pack includes all the tools you need to actually capture ghosts! Including `#Rare`` Spectral Goggles (all the better to see them with!)and a Neutron Pack to corral the ghosts, of course 10 Ghost Jars to catch them in.|0|4|10000|0|||-1|-1||-1|-1||1|||||||";
								string text29 = "|\nadd_button|ectojuicer|`oEctoJuicer``|interface/large/store_buttons/store_buttons20.rttex|`2You Get:`` 1 EctoJuicer.<CR><CR>`5Description:`` Infuse your muscles with the unearthly might of the Other Side! This spectral potion gives you the strength to wring every last drop of ectoplasm from a defeated Boss Ghost, granting you an EXTRA Boss Goo after a successful banishing!|0|0|30000|0|||-1|-1||-1|-1||1|||||||";
								string text30 = "|\nadd_button|ghost_hunting|`oGhost Hunter's Pack``|interface/large/store_buttons/store_buttons19.rttex|`2You Get:`` At least 5 Ghost Jars and 1 Bonus Item.<CR><CR>`5Description:`` Essentials for Ghost Hunting! Guaranteed to have at least 5x Ghost Jars, plus one or more bonus items! Prizes can include: Neutron Focus Cores, Containment Field Power Nodes, EXTRA Ghost Jars, Ghost Traps, Spirit Boards, and maybe even a Dark Spirit Board!|0|7|10000|0|||-1|-1||-1|-1||1|||||||";
								string text31 = "|\nadd_button|guild_chest_pack|`oGuild Chest Pack``|interface/large/store_buttons/store_buttons19.rttex|`2You Get:`` 10 Guild Chests.<CR><CR>`5Description:`` A 10-pack of Guild Chests! Loaded with guildy goodness - pop a chest open for a surprise item!|0|4|20000|0|||-1|-1||-1|-1||1|||||||";
								string text32 = "|\nadd_button|chemsynth|`oChemsynth Pack``|interface/large/store_buttons/store_buttons16.rttex|`2You Get:`` 1 `#Rare Chemsynth Processor``, 10 Chemsynth Tanks and 1 Chemsynth Replicator, 1 Chemsynth Catalyst, 1 Chemsynth Solvent, 1 Chemsynth Centrifuge, 1 Chemsynth Stirrer.<CR><CR>`5Description:`` Tired of the lousy chemicals nature has to offer? Create new synthetic ones! With a `#Rare`` Chemsynth Processor, Chemsynth Tanks, and one each of the five Chemsynth tools, you can be whipping up Synthetic Chemicals in no time. `6Warning:`` Chemsynth solving is a pretty tricky puzzle, and it costs a whole bunch of the five basic chemicals (R, G, B, P, and Y) to complete.|0|4|10000|0|||-1|-1||-1|-1||1|||||||";


								packet::storerequest(peer, text1 + text2 + text3 + text4 + text5 + text6 + text7 + text8 + text9 + text10 + text11 + text12 + text13 + text14 + text15 + text16 + text17 + text18 + text19 + text20 + text21 + text22 + text23 + text24 + text25 + text26 + text27 + text28 + text29 + text30 + text31 + text32);

							}
							if (cch.find("action|buy\nitem|weather") == 0) {
								string text1 = "set_description_text|`2Weather Machines!``  Select the item you'd like more info on, or BACK to go back.";
								string text2 = "|enable_tabs|1";
								string text3 = "|\nadd_tab_button|main_menu|Home|interface/large/shop_navigation.rttex||0|0|0|0||||-1|-1||||";
								string text4 = "|\nadd_tab_button|locks_menu|Locks And Stuff|interface/large/shop_navigation.rttex||0|1|0|0||||-1|-1||||";
								string text5 = "|\nadd_tab_button|itempack_menu|Item Packs|interface/large/shop_navigation.rttex||0|3|0|0||||-1|-1||||";
								string text6 = "|\nadd_tab_button|bigitems_menu|Awesome Items|interface/large/shop_navigation.rttex||0|4|0|0||||-1|-1||||";
								string text7 = "|\nadd_tab_button|weather_menu|Weather Machines|interface/large/shop_navigation.rttex|Tired of the same sunny sky?  We offer alternatives within...|1|5|0|0||||-1|-1||||";
								string text8 = "|\nadd_tab_button|token_menu|Growtoken Items|interface/large/shop_navigation.rttex||0|2|0|0||||-1|-1||||";
								string text9 = "|\nadd_button|race_pack|`oRacing Action Pack``|interface/large/store_buttons/store_buttons2.rttex|`2You Get:`` 1 Racing Start Flag, 1 Racing End Flag, 2 Checkpoints, 2 Big Old Sideways Arrows, 1 Big Old Up Arrow, 1 Big Old Down Arrow, 1 WristBand, 1 HeadBand, 1 Sports Ball Jersey and 1 Air Robinsons.<CR><CR>`5Description:`` Get all you need to host races in your worlds! You'll win the races too, with new Air Robinsons that make you run faster!|0|7|3500|0|||-1|-1||-1|-1||1|||||||";
								string text10 = "|\nadd_button|music_pack|`oComposer's Pack``|interface/large/store_buttons/store_buttons3.rttex|`2You Get:`` 20 Sheet Music: Blank, 20 Sheet Music: Piano Note, 20 Sheet Music: Bass Note, 20 Sheet Music Drums, 5 Sheet Music: Sharp Piano, 5 Sheet Music: Flat Piano, 5 Sheet Music: Flat Bass and 5 Sheet Music: Sharp Bass .<CR><CR>`5Description:`` With these handy blocks, you'll be able to compose your own music, using your World-Locked world as a sheet of music. Requires a World Lock (sold separately!).|0|0|5000|0|||-1|-1||-1|-1||1|||||||";
								string text11 = "|\nadd_button|school_pack|`oEducation Pack``|interface/large/store_buttons/store_buttons4.rttex|`2You Get:`` 10 ChalkBoards, 3 School Desks, 20 Red Bricks, 1 Bulletin Board, 10 Pencils, 1 Growtopia Lunchbox, 1 Grey Hair Bun, 1 Apple and 1 Random School Uniform Item.<CR><CR>`5Description:`` If you want to build a school in Growtopia, here's what you need!|0|0|5000|0|||-1|-1||-1|-1||1|||||||";
								string text12 = "|\nadd_button|dungeon_pack|`oDungeon Pack``|interface/large/store_buttons/store_buttons4.rttex|`2You Get:`` 20 Grimstone, 20 Blackrock Wall, 20 Iron Bars, 3 Jail Doors, 3 Skeletons, 1 Headsman's Axe, 1 Worthless Rags. 5 Torches and a `#Rare Iron Mask!``.<CR><CR>`5Description:`` Lock up your enemies in a dank dungeon! Of course they can still leave whenever they want. But they won't want to, because it looks so cool! Iron Mask muffles your speech!|0|1|10000|0|||-1|-1||-1|-1||1|||||||";
								string text13 = "|\nadd_button|fantasy_pack|`oFantasy Pack``|interface/large/store_buttons/store_buttons3.rttex|`2You Get:`` 1 Mystical Wizard Hat Seed, 1 Wizards Robe, 1 Golden Sword, 1 Elvish Longbow, 10 Barrels, 3 Tavern Signs, 3 Treasure Chests and 3 Dragon Gates.<CR><CR>`5Description:`` Hear ye, hear ye! It's a pack of magical wonders!|0|6|5000|0|||-1|-1||-1|-1||1|||||||";
								string text14 = "|\nadd_button|vegas_pack|`oVegas Pack``|interface/large/store_buttons/store_buttons4.rttex|`2You Get:`` 10 Neon Lights, 1 Card Block Seed, 1 `#Rare Pink Cadillac`` 4 Flipping Coins, 1 Dice Block, 1 Gamblers Visor, 1 Slot Machine, 1 Roulette Wheel and 1 Showgirl Hat, 1 Showgirl top and 1 Showgirl Leggins.<CR><CR>`5Description:`` What happens in Growtopia stays in Growtopia!|0|5|20000|0|||-1|-1||-1|-1||1|||||||";
								string text15 = "|\nadd_button|farm_pack|`oFarm Pack``|interface/large/store_buttons/store_buttons5.rttex|`2You Get:`` 1 Cow, 1 Chicken, 10 Wheat, 10 Barn Block, 10 Red Wood Walls, 1 Barn Door, 1 Straw Hat, 1 Overalls, 1 Pitchfork, 1 Farmgirl Hair, 1 `#Rare`` `2Dear John Tractor``.<CR><CR>`5Description:`` Put the `2Grow`` in Growtopia with this pack, including a Cow you can milk, a Chicken that lays eggs and a farmer's outfit. Best of all? You get a `#Rare`` `2Dear John Tractor`` you can ride that will mow down trees!|0|0|15000|0|||-1|-1||-1|-1||1|||||||";
								string text16 = "|\nadd_button|science_pack|`oMad Science Kit``|interface/large/store_buttons/store_buttons5.rttex|`2You Get:`` 1 Science Station, 1 Laboratory, 1 LabCoat, 1 Combover Hair, 1 Goggles, 5 Chemical 5, 10 Chemical G, 5 Chemical Y, 5 Chemical B, 5 Chemical P and 1 `#Rare`` `2Death Ray``.<CR><CR>`5Description:`` It's SCIENCE! Defy the natural order with a Science Station that produces chemicals, a Laboratory in which to mix them and a full outfit to do so safely! You'll also get a starter pack of assorted chemicals. Mix them up! Special bonus: A `#Rare`` `2Death Ray`` to make your science truly mad!|0|3|5000|0|||-1|-1||-1|-1||1|||||||";
								string text17 = "|\nadd_button|city_pack|`oCity Pack``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 10 Sidewalks, 3 Street Signs, 3 Streetlamps, 10 Gothic Building tiles, 10 Tenement Building tiles, 10 Fire Escapes, 3 Gargoyles, 10 Hedges, 1 Blue Mailbox, 1 Fire Hydrant and A `#Rare`` `2ATM Machine``.<CR><CR>`5Description:`` Life in the big city is rough but a `#Rare`` `2ATM Machine`` that dishes out gems once a day is very nice!|0|0|8000|0|||-1|-1||-1|-1||1|||||||";
								string text18 = "|\nadd_button|west_pack|`oWild West Pack``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 1 Cowboy Hat, 1 Cowboy Boots, 1 War Paint, 1 Face Bandana, 1 Sheriff Vest, 1 Layer Cake Dress,  1 Corset, 1 Kansas Curls, 10 Western Building 1 Saloon Doors, 5 Western Banners, 1 Buffalo, 10 Rustic Fences, 1 Campfire and 1 Parasol.<CR><CR>`5Description:`` Yippee-kai-yay! This pack includes everything you need to have wild time in the wild west! The Campfire plays cowboy music, and the `#Parasol`` lets you drift down slowly. Special bonus: A `#Rare`` `2Six Shooter`` to blast criminals with!|0|2|8000|0|||-1|-1||-1|-1||1|||||||";
								string text19 = "|\nadd_button|astro_pack|`oAstro Pack``|interface/large/store_buttons/store_buttons6.rttex|`2You Get:`` 1 Astronaut Rainbow, 1 Space Suit, 1 Space Pants, 1 Moon Boots, 1 Rocket Thruster, 1 Solar Panel, 6 Space Connectors, 1 Porthole, 1 Compu Panel, 1 Forcefield and 1 `#Rare`` `2Zorbnik DNA``.<CR><CR>`5Description:`` Boldly go where no Growtopian has gone before with an entire Astronaut outfit. As a special bonus, you can have this `#Rare`` `2Zorbnik DNA`` we found on a distant planet. It doesn't do anything by itself, but by trading with your friends, you can collect 10 of them, and then... well, who knows?|0|6|5000|0|||-1|-1||-1|-1||1|||||||";
								string text20 = "|\nadd_button|prehistoric_pack|`oPrehistoric Pack``|interface/large/store_buttons/store_buttons8.rttex|`2You Get:`` 1 Caveman Club, 1 Cave Woman Hair, 1 Caveman Hair, 1 Sabertooth Toga, 1 Fuzzy Bikini Top, 1 Fuzzy Bikni Bottom, 1 Cavewoman Outfit, 10 Cliffside, 5 Rock Platforms, 1 Cave Entrance, 3 Prehistoric Palms and 1 `#Rare Sabertooth Growtopian``.<CR><CR>`5Description:`` Travel way back in time with this pack, including full Caveman and Cavewoman outfits and `#Rare Sabertooth Growtopian`` (that's a mask of sorts). Unleash your inner monster!|0|0|5000|0|||-1|-1||-1|-1||1|||||||";
								string text21 = "|\nadd_button|shop_pack|`oShop Pack``|interface/large/store_buttons/store_buttons8.rttex|`2You Get:`` 4 Display Boxes, 1 For Sale Sign, 1 Gem Sign, 1 Exclamation Sign, 1 Shop Sign, 1 Open Sign, 1 Cash Register, 1 Mannequin and 1 Security Camera.<CR><CR>`5Description:`` Run a fancy shop with these new items! Advertise your wares with an Open/Closed Sign you can switch with a punch, a Cash Register, a Mannequin you can dress up to show off clothing, and a `#Rare`` Security Camera, which reports when people enter and take items!|0|7|10000|0|||-1|-1||-1|-1||1|||||||";
								string text22 = "|\nadd_button|home_pack|`oHome Pack``|interface/large/store_buttons/store_buttons9.rttex|`2You Get:`` 1 Television, 4 Couches, 2 Curtains, 1 Wall Clock, 1 Microwave, 1 Meaty Apron, 1 Ducky Pants, 1 Ducky top and 1 Eggs Benedict.<CR><CR>`5Description:`` Welcome home to Growtopia! Decorate with a Television, Window Curtains, Couches, a `#Rare`` Wall Clock that actually tells time, and a Microwave to cook in. Then dress up in a Meaty Apron and Ducky Pajamas to sit down and eat Eggs Benedict, which increases the amount of XP you earn!|0|6|5000|0|||-1|-1||-1|-1||1|||||||";
								string text23 = "|\nadd_button|cinema_pack|`oCinema Pack``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 1 ClapBoard, 1 Black Beret, 1 3D Glasses, 6 Theater Curtains, 6 Marquess Blocks, 1 Directors Chair, 4 Theater Seats, 6 Movie Screens, 1 Movie Camera and 1 `#Rare GHX Speaker``.<CR><CR>`5Description:`` It's movie time! Everything you need for the big screen experience including a `#Rare GHX Speaker`` that plays the score from Growtopia: The Movie.|0|2|6000|0|||-1|-1||-1|-1||1|||||||";
								string text24 = "|\nadd_button|adventure_pack|`oAdventure Pack``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 4 Gateways to Adventure, 4 Path Markers, 1 Lazy Cobra, 1 Adventure Brazier, 4 Adventure Barriers, 1 Rope, 1 Torch, 1 Key, 1 Golden Idol, 1 `#Rare Adventuring Mustache``, 1 Explorer's Ponytail and 1 Sling Bag .<CR><CR>`5Description:`` Join Dr. Exploro and her father (also technically Dr. Exploro) as they seek out adventure! You can make your own adventure maps with the tools in this pack.|0|7|20000|0|||-1|-1||-1|-1||1|||||||";
								string text25 = "|\nadd_button|rockin_pack|`oRockin' Pack``|interface/large/store_buttons/store_buttons11.rttex|`2You Get:`` 3 `#Rare Musical Instruments`` Including A Keytar, a Bass Guitar and Tambourine, 1 Starchild Make Up, 1 Rockin' Headband, 1 Leopard Leggings, 1 Shredded Ts-Shirt, 1 Drumkit, 6 Stage Supports, 6 Mega Rock Speakers and 6 Rock n' Roll Wallpaper.<CR><CR>`5Description:`` ROCK N' ROLL!!! Play live music in-game! We Formed a Band! Growtopia makes me want to rock out.|0|0|9999|0|||-1|-1||-1|-1||1|||||||";
								string text26 = "|\nadd_button|game_pack|`oGame Pack``|interface/large/store_buttons/store_buttons10.rttex|`2You Get:`` 1 `#Rare Game Generator``,  4 Game Blocks, 4 Game Flags, 4 Game Graves and 4 Game Goals.<CR><CR>`5Description:`` Growtopia's not all trading and socializing! Create games for your friends with the Game Pack (and a lot of elbow grease).|0|6|50000|0|||-1|-1||-1|-1||1|||||||";
								string text27 = "|\nadd_button|superhero|`oSuperhero Pack``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 1 Mask, 1 Shirt, 1 Boots, 1 Tights, 1 Cape, `#Rare Super Logos`` or `#Rare Utility Belt`` and 1 `2Phone Booth``.<CR><CR>`5Description:`` Battle the criminal element in Growtopia with a complete random superhero outfit including a cape that lets you double jump. Each of these items comes in one of six random colors. You also get one of 5 `#Rare`` Super Logos, which automatically match the color of any shirt you wear or a `#Rare`` Utility Belt... of course use the `2Phone Booth`` to change into your secret identity!|0|0|10000|0|||-1|-1||-1|-1||1|||||||";
								string text28 = "|\nadd_button|fashion_pack|`oFashion Pack``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 3 Random Clothing Items, 3 Jade Blocks and 1 `#Rare Spotlight``.<CR><CR>`5Description:`` The hottest new looks for the season are here now with 3 random Fashion Clothing (dress, shoes, or purse), Jade Blocks to pose on, and a `#Rare`` Spotlight to shine on your fabulousness.|0|0|6000|0|||-1|-1||-1|-1||1|||||||";
								string text29 = "|\nadd_button|sportsball_pack|`oSportsball Pack``|interface/large/store_buttons/store_buttons13.rttex|`2You Get:`` 2 Basketball Hoops, 2 Sporty Goals, 5 Stadiums, 5 Crowded Stadiums, 10 Field Grass, 1 Football Rainbow, 1 Growies Cap, 1 Ref's Jersey, 1 World Cup Jersey, 1 `#Rare Sports Item`` or `#Rare Growmoji!``.<CR><CR>`5Description:`` We like sports and we don't care who knows! This pack includes everything you need to get sporty! Use the Sports Items to launch Sportsballs at each other.|0|1|20000|0|||-1|-1||-1|-1||1|||||||";
								string text30 = "|\nadd_button|firefighter|`oFirefighter Pack``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 1 Yellow Rainbow, 1 Yellow Jacket, 1 Yellow Pants, 1 Firemans Boots, 1 Fire Hose, and 1 `#Rare Firehouse`` .<CR><CR>`5Description:`` Rescue Growtopians from the fire! Includes a full Yellow Firefighter Outfit, Fire Hose and a `#Rare Firehouse``, which will protect your own world from fires.|0|1|10000|0|||-1|-1||-1|-1||1|||||||";
								string text31 = "|\nadd_button|steampack|`oSteampack``|interface/large/store_buttons/store_buttons14.rttex|`2You Get:`` 10 Steam Tubes, 2 Steam Stompers, 2 Steam Organs, 2 Steam Vents, 2 Steam Valves and 1 `#Rare Steampunk Top Hat``.<CR><CR>`5Description:`` Steam! It's a wondrous new technology that lets you create paths of Steam Blocks, then jump on a Steam Stomper to launch a jet of steam through the path, triggering steam-powered devices. Build puzzles, songs, parkour challenges, and more!|0|6|20000|0|||-1|-1||-1|-1||1|||||||";
								string text32 = "|\nadd_button|paintbrush|`oPainter's Pack``|interface/large/store_buttons/store_buttons15.rttex|`2You Get:`` 1 `#Rare Paintbrush`` and 20 Random Colored Paint Buckets.<CR><CR>`5Description:`` Want to paint your world? This pack includes 20 buckets of random paint colors (may include Varnish, to clean up your messes)! You can paint any block in your world different colors to personalize it.|0|1|30000|0|||-1|-1||-1|-1||1|||||||";
								string text33 = "|\nadd_button|paleo_kit|`oPaleontologist's Kit``|interface/large/store_buttons/store_buttons16.rttex|`2You Get:`` 5 Fossil Brushes, 1 Rock Hammer, 1 Rock Chisel, 1 Blue Hardhat and 1 `#Rare Fossil Prep Station``.<CR><CR>`5Description:`` If you want to dig up fossils, this is the kit for you! Includes everything you need! Use the prepstation to get your fossils ready for display.|0|0|20000|0|||-1|-1||-1|-1||1|||||||";
								string text34 = "|\nadd_button|robot_starter_pack|`oCyBlocks Starter Pack``|interface/large/store_buttons/store_buttons18.rttex|`2You Get:`` 1 `5Rare ShockBot`` and 10 random movement commands.<CR><CR>`5Description:`` CyBlocks Starter Pack includes one `5Rare`` ShockBot and 10 random movement commands to use with it. `5ShockBot`` is a perma-item, is never lost when destroyed.|0|6|5000|0|||-1|-1||-1|-1||1|||||||";
								string text35 = "|\nadd_button|robot_command_pack|`oCyBlocks Command Pack``|interface/large/store_buttons/store_buttons19.rttex|`2You Get:`` 10 Random CyBlock Commands.<CR><CR>`5Description:`` Grants 10 random CyBlock Commands to help control your CyBots!|0|2|2000|0|||-1|-1||-1|-1||1|||||||";
								string text36 = "|\nadd_button|robot_pack|`oCyBot Pack``|interface/large/store_buttons/store_buttons19.rttex|`2You Get:`` 1 `5Rare CyBot``!<CR><CR>`5Description:`` Grants one random `5Rare`` CyBot! Use CyBlock Commands to send these mechanical monsters into action! `5Note: Each CyBot is a perma-item, and will never be lost when destroyed.``|0|3|15000|0|||-1|-1||-1|-1||1|||||||";
								string text37 = "|\nadd_button|gang_pack|`oGangland Style``|interface/large/store_buttons/store_buttons2.rttex|`2You Get:`` 1 Fedora, 1 Dames Fedora, 1 Pinstripe Suit with Pants, 1 Flapper Headband with Dress, 1 Cigar, 1 Tommy Gun, 1 Victola and 10 Art Deco Blocks .<CR><CR>`5Description:`` Step into the 1920's with a Complete Outfit, a Tommygun, a Victrola that plays jazz music, and 10 Art Deco Blocks. It's the whole package!|0|6|5000|0|||-1|-1||-1|-1||1|||||||";

								packet::storerequest(peer, text1 + text2 + text3 + text4 + text5 + text6 + text7 + text8 + text9 + text10 + text11 + text12 + text13 + text14 + text15 + text16 + text17 + text18 + text19 + text20 + text21 + text22 + text23 + text24 + text25 + text26 + text27 + text28 + text29 + text30 + text31 + text32 + text33 + text34 + text35 + text36 + text37);

							}
							if (cch.find("action|buy\nitem|token") == 0) {
								string text1 = "set_description_text|`2Spend your Growtokens!`` (You have `52``) You earn Growtokens from Crazy Jim and Sales-Man. Select the item you'd like more info on, or BACK to go back.";
								string text2 = "|enable_tabs|1";
								string text3 = "|\nadd_tab_button|main_menu|Home|interface/large/shop_navigation.rttex||0|0|0|0||||-1|-1||||";
								string text4 = "|\nadd_tab_button|locks_menu|Locks And Stuff|interface/large/shop_navigation.rttex||0|1|0|0||||-1|-1||||";
								string text5 = "|\nadd_tab_button|itempack_menu|Item Packs|interface/large/shop_navigation.rttex||0|3|0|0||||-1|-1||||";
								string text6 = "|\nadd_tab_button|bigitems_menu|Awesome Items|interface/large/shop_navigation.rttex||0|4|0|0||||-1|-1||||";
								string text7 = "|\nadd_tab_button|weather_menu|Weather Machines|interface/large/shop_navigation.rttex|Tired of the same sunny sky?  We offer alternatives within...|0|5|0|0||||-1|-1||||";
								string text8 = "|\nadd_tab_button|token_menu|Growtoken Items|interface/large/shop_navigation.rttex||1|2|0|0||||-1|-1||||";
								string text9 = "|\nadd_button|geiger|`oGeiger Counter``|interface/large/store_buttons/store_buttons12.rttex|`2You Get:`` 1 Geiger Counter.<CR><CR>`5Description:`` With this fantabulous device, you can detect radiation around you. It bleeps red, then yellow, then green as you get closer to the source. Who knows what you might find? `4Not available any other way!``|0|1|-20|0|||-1|-1||-1|-1||1|||||||";

								packet::storerequest(peer, text1 + text2 + text3 + text4 + text5 + text6 + text7 + text8 + text9);

							}
							if (cch.find("action|storenavigate\nitem|main\nselection|gems_rain") == 0) {
								string text1 = "set_description_text|Welcome to the `2Growtopia Store``! Select the item you'd like more info on.`o `wWant to get `5Supporter`` status? Any Gem purchase (or `57,000`` Gems earned with free `5Tapjoy`` offers) will make you one. You'll get new skin colors, the `5Recycle`` tool to convert unwanted items into Gems, and more bonuses!";
								string text2 = "|enable_tabs|1";
								string text3 = "|\nadd_tab_button|main_menu|Home|interface/large/shop_navigation.rttex||1|0|0|0||||-1|-1||||";
								string text4 = "|\nadd_tab_button|locks_menu|Locks And Stuff|interface/large/shop_navigation.rttex||0|1|0|0||||-1|-1||||";
								string text5 = "|\nadd_tab_button|itempack_menu|Item Packs|interface/large/shop_navigation.rttex||0|3|0|0||||-1|-1||||";
								string text6 = "|\nadd_tab_button|bigitems_menu|Awesome Items|interface/large/shop_navigation.rttex||0|4|0|0||||-1|-1||||";
								string text7 = "|\nadd_tab_button|weather_menu|Weather Machines|interface/large/shop_navigation.rttex|Tired of the same sunny sky?  We offer alternatives within...|0|5|0|0||||-1|-1||||";
								string text8 = "|\nadd_tab_button|token_menu|Growtoken Items|interface/large/shop_navigation.rttex||0|2|0|0||||-1|-1||||";
								string text9 = "|\nadd_banner|interface/large/gui_shop_featured_header.rttex|0|1|";
								string text10 = "|\nadd_button|itemomonth|`oItem Of The Month``|interface/large/store_buttons/store_buttons16.rttex|May 2020:`` `9Doomsday Warhammer``!<CR><CR>`2You Get:`` 1 `9Doomsday Warhammer``.<CR><CR>`5Description:`` Wield the Warhammer of Doom and rain fiery death down on all around you! This warhammer is so hot it even tears the ground up as you lug its heavy weight behind you.|0|3|200000|0||interface/large/gui_store_button_overlays1.rttex|0|0||-1|-1||1||||||";
								string text11 = "|\nadd_button|ads_tv|`oGrowShow TV``|interface/large/store_buttons/store_buttons30.rttex|`2You Get:`` 1 GrowShow TV.<CR><CR>`5Description:`` Growtopia's most loved gameshow now brings you its very own TV to watch up to 3 ads per day for AMAZING prizes.|0|4|50|0|||-1|-1||-1|-1||1|||||||";
								string text12 = "|\nadd_banner|interface/large/gui_shop_featured_header.rttex|0|2|";
								string text13 = "|\nadd_button|gems_glory|Road To Glory|interface/large/store_buttons/store_buttons30.rttex|rt_grope_loyalty_bundle01|0|0|0|0||interface/large/gui_store_button_overlays1.rttex|0|0|/interface/large/gui_shop_buybanner.rttex|1|0|`2You Get:`` Road To Glory and 100k Gems Instantly.<CR>`5Description:`` Earn Gem rewards when you level up. Every 10 levels you will get additional Gem rewards up to Level 50! Claim all rewards instantly if you are over level 50!! 1.6M Gems in total!! |1|||||||";
								string text14 = "|\nadd_button|gems_rain|It's Rainin' Gems|interface/large/store_buttons/store_buttons.rttex|rt_grope_gem_rain|1|5|0|0|||-1|-1||-1|-1|`2You Get:`` 200,000 Gems, 2 Growtoken, and 1 Megaphone.<CR><CR>`5Description:`` All the gems you could ever want and more plus 2 Growtokens and a Megaphone to tell the whole world about it.|1|||||||";
								string text15 = "|\nadd_button|gems_fountain|Gem Fountain|interface/large/store_buttons/store_buttons2.rttex|rt_grope_gem_fountain|0|2|0|0|||-1|-1||-1|-1|`2You Get:`` 90,000 Gems and 1 Growtoken.<CR><CR>`5Description:`` Get a pile of gems to shop to your hearts desire and 1 Growtoken.|1|||||||";
								string text16 = "|\nadd_button|gems_chest|Chest o' Gems|interface/large/store_buttons/store_buttons.rttex|rt_grope_gem_chest|0|5|0|0|||-1|-1||-1|-1|`2You Get:`` 30,000 Gems.<CR><CR>`5Description:`` Get a chest containing gems.|1|||||||";
								string text17 = "|\nadd_button|gems_bag|Bag o' Gems|interface/large/store_buttons/store_buttons.rttex|rt_grope_gem_bag|1|0|0|0|||-1|-1||-1|-1|`2You Get:`` 14,000 Gems.<CR><CR>`5Description:`` Get a small bag of gems.|1|||||||";
								string text18 = "|\nadd_button|tapjoy|Earn Free Gems|interface/large/store_buttons/store_buttons.rttex||1|2|0|0|||-1|-1||-1|-1||1|||||||";
								string text19 = "|\nadd_banner|interface/large/gui_shop_featured_header.rttex|0|3|";
								string text20 = "|\nadd_button|365d|`o1-Year Subscription Token``|interface/large/store_buttons/store_buttons22.rttex|rt_grope_subs_bundle02|0|5|0|0|||-1|-1||-1|-1|`2You Get:`` 1x 1-Year Subscription Token and 25 Growtokens.<CR><CR>`5Description:`` One full year of special treatment AND 25 Growtokens upfront! You'll get 70 season tokens (as long as there's a seasonal clash running), and 2500 gems every day and a chance of doubling any XP earned, growtime reduction on all seeds planted and Exclusive Skins!|1|||||||";
								string text21 = "|\nadd_button|30d|`o30-Day Subscription Token``|interface/large/store_buttons/store_buttons22.rttex|rt_grope_subs_bundle01|0|4|0|0|||-1|-1||-1|-1|`2You Get:`` 1x 30-Day Free Subscription Token and 2 Growtokens.<CR><CR>`5Description:`` 30 full days of special treatment AND 2 Growtokens upfront! You'll get 70 season tokens (as long as there's a seasonal clash running), and 2500 gems every day and a chance of doubling any XP earned, growtime reduction on all seeds planted and Exclusive Skins!|1|||||||";
								string text22 = "|\nadd_button|video_tapjoy|Watch Videos For Gems|interface/large/store_buttons/store_buttons29.rttex||0|1|0|0|1/5 VIDEOS WATCHED||-1|-1||-1|-1||1|||||||";
								string text23 = "|\nselect_item|gems_rain";


								packet::storerequest(peer, text1 + text2 + text3 + text4 + text5 + text6 + text7 + text8 + text9 + text10 + text11 + text12 + text13 + text14 + text15 + text16 + text17 + text18 + text19 + text20 + text21 + text22 + text23);

							}*/
							if (cch.find("action|dialog_return\ndialog_name|\nbuttonClicked|tradebutton") == 0) {
								if (((PlayerInfo*)(peer->data))->level >= 10) {
									Player::OnStartTrade(peer, ((PlayerInfo*)(peer->data))->netID, ((PlayerInfo*)(peer->data))->lastTradeNetID);
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{

											if (((PlayerInfo*)(currentPeer->data))->netID == ((PlayerInfo*)(peer->data))->lastTradeNetID)
											{
												if (((PlayerInfo*)(currentPeer->data))->lastTradeNetID == ((PlayerInfo*)(peer->data))->netID)
												{

												}
												else
												{
													Player::OnConsoleMessage(currentPeer, "`#TRADE ALERT: `w" + ((PlayerInfo*)(peer->data))->displayName + " `owants to trade with you! To start, use the `wWrench `oon that person's wrench icon, or type `w/trade " + ((PlayerInfo*)(peer->data))->displayName);
													Player::PlayAudio(currentPeer, "audio/cash_register.wav", 0);
												}

											}

										}
									}
								}
								else {
									Player::OnTextOverlay(peer, "This Feature Only `9Available `^For `9Level 10 `^And `@Higher!");
									break;
								}
							}
							if (cch.find("action|dialog_return\ndialog_name|mailbox_edit") == 0)
							{
								std::stringstream ss(GetTextPointerFromPacket(event.packet));
								std::string to;
								bool created = false;
								string text_mail = "";
								while (std::getline(ss, to, '\n')) {
									string id = to.substr(0, to.find("|"));
									string act = to.substr(to.find("|") + 1, to.length() - to.find("|") - 1);
									if (id == "sign_text")
									{
										text_mail = act;
										created = true;
									}
									if (created == true) {
										if (text_mail == "" || text_mail.length() < 3)
										{
											SendTalkSelf(peer, "That's not interesting enough to mail");
										}
										else
										{
											int x = ((PlayerInfo*)(peer->data))->lastPunchX;
											int y = ((PlayerInfo*)(peer->data))->lastPunchY;
											world->items[x + (y * world->width)].mailcount++;
											world->items[x + (y * world->width)].mail += "\nadd_label_with_icon|small|`#""" + text_mail + """ - `w" + ((PlayerInfo*)(peer->data))->displayName + "``|left|660|";
											SendTalkSelf(peer, "`2You place your letter in the mailbox.``");
											Player::PlayAudio(peer, "audio/page_turn.wav", 0);
										}
									}
								}
							}
							if (cch.find("action|dialog_return\ndialog_name|door_edit") == 0) {
								if (world != NULL) {
									if (((PlayerInfo*)(peer->data))->rawName == PlayerDB::getProperName(world->owner)) {
										std::stringstream ss(GetTextPointerFromPacket(event.packet));
										std::string to;
										int x = 0;
										int y = 0;
										bool created = false;
										bool world = false;
										string texts = "";
										string text = "";
										while (std::getline(ss, to, '\n')) {
											if (to.find('|') == -1) continue;
											string id = to.substr(0, to.find("|"));
											if (id.empty() || id.length() <= 0)
											{
												autoBan(peer, true, 999, "action|dialog_return\ndialog_name|door_edit -> id was empty or id length <= 0");
												continue;
											}
											string act = to.substr(to.find("|") + 1, to.length() - to.find("|") - 1);
											if (act.empty() || act.length() <= 0)
											{
												autoBan(peer, true, 999, "action|dialog_return\ndialog_name|door_edit -> act was empty or act length <= 0");
												continue;
											}
											if (id == "tilex")
											{
												x = atoi(act.c_str());
											}
											else if (id == "tiley")
											{
												y = atoi(act.c_str());
											}
											else if (id == "label")
											{
												texts = act;
												created = true;
											}
											else if (id == "world")
											{
												text = act;
												world = true;
											}
											if (created == true) {
												if (texts == "__%&P&%__") {
													Player::OnConsoleMessage(peer, ">> Can't use this!");
													continue;
												}
												if (texts.length() > 0) {
													if (texts.length() < 255) {
														WorldInfo* worldInfo = getPlyersWorld(peer);
														int squaredoor = ((PlayerInfo*)(peer->data))->wrenchx + (((PlayerInfo*)(peer->data))->wrenchy * 100);
														updateDoor(peer, worldInfo->items[squaredoor].foreground, squaredoor % worldInfo->width, squaredoor / worldInfo->width, texts);
														string world = ((PlayerInfo*)(peer->data))->currentWorld;
														std::ofstream outfile("doors/" + world + std::to_string(x) + std::to_string(y) + ".txt");
														outfile << texts;
														outfile.close();
													}
												}
											}
										}
									}
								}
							}
							if (cch.find("action|info") == 0)
							{
								std::stringstream ss(cch);
								std::string to;
								int id = -1;
								int count = -1;
								while (std::getline(ss, to, '\n')) {
									vector<string> infoDat = explode("|", to);
									if (infoDat.size() == 3) {
										if (infoDat[1] == "itemID") id = atoi(infoDat[2].c_str());
										if (infoDat[1] == "count") count = atoi(infoDat[2].c_str());
									}
								}
								if (id == -1 || count == -1) continue;
								if (itemDefs.size() < id || id < 0) continue;
								string properties = "";
								ItemDefinition itemDef = getItemDef(id);
								if (itemDef.rarity != 999)
									properties += "add_textbox|`oRarity: `w" + to_string(itemDef.rarity) + "``|\n";
								properties += "add_spacer|small|\n";
								if (itemDef.properties & Property_Untradable)
									properties += "add_textbox|`1This item cannot be dropped or traded.``|\n";
								if (itemDef.properties & Property_Wrenchable)
									properties += "add_textbox|`1This item has special properties you can adjust with the Wrench.``|\n";
								if (itemDef.properties & Property_NoSeed)
									properties += "add_textbox|`1This item never drops any seeds.``|\n";
								if (itemDef.properties & Property_Permanent)
									properties += "add_textbox|`1This item can't be destroyed - smashing it will return it to your backpack if you have room!``|\n";
								Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`wAbout " + itemDef.name + "|left|" + std::to_string(id) + "|\n\nadd_spacer|small|\nadd_textbox|" + itemDef.description + "|left|\n" + properties + "\nadd_spacer|small|\nadd_quick_exit|\nend_dialog|iteminfo||Close|");
							}
							if (cch.find("action|dialog_return\ndialog_name|sign_edit") == 0) {
								if (world != NULL) {
									if (((PlayerInfo*)(peer->data))->rawName == PlayerDB::getProperName(world->owner)) {
										std::stringstream ss(GetTextPointerFromPacket(event.packet));
										std::string to;
										int x = 0;
										int y = 0;
										bool created = false;
										string text = "";
										while (std::getline(ss, to, '\n')) {
											string id = to.substr(0, to.find("|"));
											string act = to.substr(to.find("|") + 1, to.length() - to.find("|") - 1);
											if (id == "tilex")
											{
												x = atoi(act.c_str());

											}
											else if (id == "tiley")
											{
												y = atoi(act.c_str());
											}
											else if (id == "ch3")
											{
												text = act;
												created = true;
											}
											if (created == true) {
												if (text == "__%&P&%__") {
													Player::OnConsoleMessage(peer, ">> Can't use this!");
													continue;
												}
												if (text.length() > 0) {
													if (text.length() < 255) {
														WorldInfo* worldInfo = getPlyersWorld(peer);
														int squaresign = ((PlayerInfo*)(peer->data))->wrenchx + (((PlayerInfo*)(peer->data))->wrenchy * 100);
														onSignBubble(peer, worldInfo->items[squaresign].foreground, squaresign % worldInfo->width, squaresign / worldInfo->width, text, worldInfo->items[squaresign].background);
														string world = ((PlayerInfo*)(peer->data))->currentWorld;
														std::ofstream outfile("signs/" + world + "X" + std::to_string(squaresign) + ".txt");

														outfile << text;

														outfile.close();
													}
												}
											}
										}
									}
								}
							}
							if (cch.find("action|dialog_return") == 0)
							{
								std::stringstream ss(cch);
								std::string to;
								bool isGuildDialog = false;
								string gguildname;
								string gguildstatement;
								string gguildflagbg;
								string gguildflagfg;
								string stuffitem = "";
								string addItemToStore = "";
								bool isBG = false;
								string bgitem = ""; /// noooooOoOOoooooBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB
								string worldname3 = "";
								string worldheight3 = "";
								string worldwidth3 = "";
								string worldforeground3 = "";
								string worldbackground3 = "";
								string worldbedrock3 = "";
								string gravitystr = "";
								string btn = "";
								bool isRegisterDialog = false;
								bool changeCodeDialog = false;
								string username = "";
								string restrictedname = "";
								string password = "";
								string passwordverify = "";
								string password2 = "";
								string username2 = "";
								string passwords = "";
								string passwordss = "";
								string password2verify = "";
								string oldpass = "";
								string newgrowid = "";
								//string email = "";
								string discord = "";
								string netid = "";
								string pin = "";
								bool isLockDialog = false;
								string text = "";//done!
								// /store
								string storeItemPickerCount = "";
								string storeItemId = "";
								string storeItemDescription = "";
								string storeItemSellForItem = "";
								string storeItemSellPer = "";
								string storeWriteReviewShopName = "";
								string storeWriteReview = "";
								string storeWriteReviewStar="";
								string buyPlayerStoreAposition = "";
								string buyPlayerStoreName = "";
								string buyPlayerStoreQuantity = "";
								bool isstoreReviewConfirmDialog = false;
								bool isBuyItemByRarityDialog = false;
								bool isaddItemStoreOnSaleDialog = false;
								bool isbuyPlayerStoreItemDialog = false;
								bool isDropDialog = false;
								bool megaphone = false;
								string sbtext = "";
								bool isTrashDialog = false;
								bool isStuffDialog = false;
								bool isaddItemToStoreDialog = false;
								bool isGenDialog = false;
								bool isUranusDialog = false;
								bool isTeleDialog = false;
								bool checkCodeDialog = false;
								string dropitemcount = "";
								string trashitemcount = "";
								bool isPasswordDialog = false;
								bool isGrowidDialog = false;
								bool isFindDialog = false;
								bool isEditDoorDialog = false;
								bool isEditPDoorDialog = false;
								bool isPwdDoorDialog = false;
								string destworld = "", destid = "", label = "", currid = "";
								bool isCreateStoreDialog = false;
								bool isTradeDialog = false;
								bool isTradeDialogs = false;
								bool isTradingDialog = false;
								bool isMailDialog = false;
								string mail = "";
								bool isEntranceDialog = false;
								string entranceresult = "";
								bool isWorldLockBuyDialog = false;
								bool isDarkStoneBuyDialog = false;
								bool isDiamondLockBuyDialog = false;
								bool isAmbersBuyDialog = false;
								bool isOpalsBuyDialog = false;
								bool isGoldBuyDialog = false;
								bool isRubiesBuyDialog = false;
								bool isSapphiresBuyDialog = false;
								bool isDiamondsBuyDialog = false;
								bool isEmeraldsBuyDialog = false;
								bool isWarnDialog = false;
								bool Accesspicker = false;
								bool signszzz = false;
								string item1count = "";
								string item2count = "";
								string item3count = "";
								string telefonas = "";
								string item4count = "";
								string uranusnames = "";
								string checkCodeText = "";
								string itemFind = "";
								string warntext = "";
								string strBuyOffer = "";
								string pub = "";
								string pub1 = "";
								string disable_music = "";
								string rainbows = ""; //gay?
								string muted = "";
								string tempo = "";
								string disable_music_render = "";
								string strBuyWorldLockOffer = "";
								string changeCodeText = "";
								string reqBuyDarkStoneOffer = "";
								string strBuyDiamondLockOffer = "";
								string strAmbersBuyOffer = "";
								string strOpalsBuyOffer = "";
								string strGoldBuyOffer = "";
								bool isStuff = false;
								string stuff_gravity = "";
								bool stuff_invert = false;
								bool stuff_spin = false;
								string stuffITEM = "";
								string strRubiesBuyOffer = "";
								string strSapphiresBuyOffer = "";
								bool isMagplantPicker = false;
								string strDiamondsBuyOffer = "";
								string strEmeraldsBuyOffer = "";
								string strResult = "";
								string strButItemByRarityCount = "";

								string createstorefg = "";
								string createstorename = "";
								string createstoredesc = "";
								string tradeitemcount = ""; //omegad pro right?
								int Result = 68662362;
								int magplantitem = 0;
								int buyOffer;
								string dialog_name = "";
								while (std::getline(ss, to, '\n')) {
									vector<string> infoDat = explode("|", to);
									if (infoDat.size() == 2) {
										if (((PlayerInfo*)(peer->data))->isIn == true)
										{

											if (infoDat[0] == "buttonClicked") btn = infoDat[1];
											if (((PlayerInfo*)(peer->data))->haveGrowId == false && infoDat[0] == "dialog_name" && infoDat[1] != "register")
											{
												continue;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "stuff_weather")
											{
												isStuff = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "bg_weather")
											{
												isBG = true;
											}
											if (isMagplantPicker) {
												// VULNERABLE
												PlayerInfo* pinfo = (PlayerInfo*)peer->data;
												int netID = pinfo->netID;
												int x = pinfo->wrenchedBlockLocation % world->width;
												int y = pinfo->wrenchedBlockLocation / world->width;
												world->magX = x;
												world->magY = y;
												for (int i = 0; i < world->width * world->height; i++)
												{
													if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT") {
														string jenisitem = GetItemDef(world->magitem).name;

														if (infoDat[0] == "magplantitem") magplantitem = atoi(infoDat[1].c_str());

														WorldInfo* world = getPlyersWorld(peer);
														world->gaiajumlah = 0;
														world->magitem = magplantitem;
													//	OnTalkBubble(currentPeer, netID, "`9Owner `0Update Block to `2" + jenisitem + " `0In Magplant 5000", false);
														//OnTalkBubble(currentPeer, netID, "`9Please Re-enter world!", false);
													}
												}
											}
											if (isBG) {
												if (world != NULL) {
													if (infoDat[0] == "bg_pick") bgitem = infoDat[1];
													PlayerInfo* pinfo = (PlayerInfo*)(peer->data);
													int id = atoi(bgitem.c_str());

													if (getItemDef(id).blockType != BlockTypes::BACKGROUND)
													{

														//OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "You can only set background blocks to Weather Machine - Background!", true);
														continue;
														break;
													}


													int x = pinfo->wrenchedBlockLocation % world->width;
													int y = pinfo->wrenchedBlockLocation / world->width;

													getPlyersWorld(peer)->weather = 34;

													ENetPeer* currentPeer;

													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (isHere(peer, currentPeer))
														{

															GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), 34));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(currentPeer, 0, packet2);
															delete p2.data;
															continue;
														}
													}
													world->bgID = atoi(bgitem.c_str());
													sendBackground(peer, x, y, atoi(bgitem.c_str()));
													getPlyersWorld(peer)->weather = 34;

												}
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "trade_item")
											{
												isTradeDialogs = true;
											}
											if (isTradeDialogs) {

												if (infoDat[0] == "trditemcount") tradeitemcount = infoDat[1];
											}
											if (isTradeDialogs) {
												short int currentItemCount = 0;
												for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
												{
													if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTradeItem)
													{
														currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
														if (currentItemCount < 0)
														{
															currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
														}
													}
												}
												if (atoi(tradeitemcount.c_str()) > currentItemCount)
												{
													continue;
												}
												else if (atoi(tradeitemcount.c_str()) < 1)
												{
													continue;
												}
												if (((PlayerInfo*)(peer->data))->currentTradeItems.find("add_slot|" + to_string(((PlayerInfo*)(peer->data))->lastTradeItem) + "|") != std::string::npos)
												{
													replace(((PlayerInfo*)(peer->data))->currentTradeItems, "add_slot|" + to_string(((PlayerInfo*)(peer->data))->lastTradeItem) + "|", "");
												}
												((PlayerInfo*)(peer->data))->currentTradeItems += "add_slot|" + to_string(((PlayerInfo*)(peer->data))->lastTradeItem) + "|" + tradeitemcount + "\n"; // TODO TRADE
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer))
													{
														if (((PlayerInfo*)(currentPeer->data))->netID == ((PlayerInfo*)(peer->data))->lastTradeNetID)
														{
															if (((PlayerInfo*)(peer->data))->currentTradeItems.find("accepted|1") != std::string::npos)
															{
																replace(((PlayerInfo*)(peer->data))->currentTradeItems, "accepted|1", "");
															}
															if (((PlayerInfo*)(currentPeer->data))->currentTradeItems.find("accepted|1") != std::string::npos)
															{
																replace(((PlayerInfo*)(currentPeer->data))->currentTradeItems, "accepted|1", "");
															}
															Player::OnTradeStatus(currentPeer, ((PlayerInfo*)(peer->data))->netID, ((PlayerInfo*)(peer->data))->displayName + "`o", ((PlayerInfo*)(peer->data))->currentTradeItems);
															Player::OnTradeStatus(peer, ((PlayerInfo*)(peer->data))->netID, ((PlayerInfo*)(peer->data))->displayName + "`o", ((PlayerInfo*)(currentPeer->data))->currentTradeItems);
															Player::OnTradeStatus(currentPeer, ((PlayerInfo*)(peer->data))->netID, ((PlayerInfo*)(peer->data))->displayName + "`o", ((PlayerInfo*)(peer->data))->currentTradeItems);
															Player::OnTradeStatus(peer, ((PlayerInfo*)(peer->data))->netID, ((PlayerInfo*)(peer->data))->displayName + "`o", ((PlayerInfo*)(peer->data))->currentTradeItems);
															if (((PlayerInfo*)(currentPeer->data))->isTradingWithUser == 1)
															{
																Player::OnTextOverlay(peer, "The deal has changed");
																Player::OnTextOverlay(currentPeer, "The deal has changed");
																Player::PlayAudio(peer, "audio/tile_removed.wav", 0);
																Player::PlayAudio(currentPeer, "audio/tile_removed.wav", 0);
															}
															else
															{
																Player::OnTextOverlay(peer, "The deal has changed");
																Player::PlayAudio(peer, "audio/tile_removed.wav", 0);
															}
														}

													}
												}
											}
											if (isStuff) {


												if (infoDat[0] == "stuff_pick") stuffITEM = infoDat[1];


												if (infoDat[0] == "stuff_gravity") stuff_gravity = infoDat[1];
												if (infoDat[0] == "stuff_spin") stuff_spin = atoi(infoDat[1].c_str());
												if (infoDat[0] == "stuff_invert") stuff_invert = atoi(infoDat[1].c_str());


											}
											if (isStuff) {
												if (world != NULL) {
													if (stuffITEM != "") {
														PlayerInfo* pinfo = (PlayerInfo*)(peer->data);
														int x = pinfo->wrenchedBlockLocation % world->width;
														int y = pinfo->wrenchedBlockLocation / world->width;
														int id = atoi(stuffITEM.c_str());
														int stuffGra = atoi(stuff_gravity.c_str());
														world->stuff_invert = stuff_invert;
														world->stuff_spin = stuff_spin;
														world->stuff_gravity = stuffGra;
														world->stuffID = atoi(stuffITEM.c_str());
														sendStuffweather(peer, x, y, world->stuffID, stuffGra, stuff_spin, stuff_invert);

														getPlyersWorld(peer)->weather = 29;

													}
													else {
														PlayerInfo* pinfo = (PlayerInfo*)(peer->data);
														int x = pinfo->wrenchedBlockLocation % world->width;
														int y = pinfo->wrenchedBlockLocation / world->width;

														int stuffGra = atoi(stuff_gravity.c_str());
														world->stuff_invert = stuff_invert;
														world->stuff_spin = stuff_spin;
														world->stuff_gravity = stuffGra;

														sendStuffweather(peer, x, y, world->stuffID, stuffGra, stuff_spin, stuff_invert);

														getPlyersWorld(peer)->weather = 29;
													}




													PlayerInfo* pinfo = (PlayerInfo*)(peer->data);
													int x = pinfo->wrenchedBlockLocation % world->width;
													int y = pinfo->wrenchedBlockLocation / world->width;

													ENetPeer* currentPeer;

													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (isHere(peer, currentPeer))
														{

															GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), 29));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(currentPeer, 0, packet2);
															delete p2.data;
															continue;
														}
													}

												}
											}

											if (((PlayerInfo*)(peer->data))->haveGrowId == false && btn != "")
											{
												continue;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "findid")
											{
												isFindDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "lock_editz") {
												isLockDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "checkCodeDialog")
											{
												checkCodeDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "reqoffer")
											{
												isTradeDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "createstoreconfirm")
											{
												isCreateStoreDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "tradingdialog")
											{
												isTradingDialog = true;
											}
											if (isLockDialog) {
												if (infoDat[0] == "checkbox_public") pub = infoDat[1];
												if (infoDat[0] == "checkbox_disable_music") disable_music = infoDat[1];
												if (infoDat[0] == "tempo") tempo = infoDat[1];
												if (infoDat[0] == "checkbox_disable_music_render") disable_music_render = infoDat[1];
												if (infoDat[0] == "checkbox_rainbow") rainbows = infoDat[1];
												if (infoDat[0] == "checkbox_muted") muted = infoDat[1];
												if (world) {
													int x = ((PlayerInfo*)(peer->data))->lastPunchX;
													int y = ((PlayerInfo*)(peer->data))->lastPunchY;
													int fg = world->items[x + (y * world->width)].foreground;
													int bg = world->items[x + (y * world->width)].background;

													if (getItemDef(fg).blockType == BlockTypes::LOCK && has_only_digits(tempo) && has_only_digits(pub) && has_only_digits(pub1) && has_only_digits(disable_music) && has_only_digits(disable_music_render)) {
														uint8_t lol = 0x00;
														int checkbox_public = atoi(pub.c_str());
														int checkbox_rainb = atoi(rainbows.c_str());
														int checkbox_silen = atoi(muted.c_str());
														int checkbox_disable_music = atoi(disable_music.c_str());
														int checkbox_disable_music_render = atoi(disable_music_render.c_str());
														int tempoint = atoi(tempo.c_str());
														world->tempo = tempoint;
														world->disable_music = checkbox_disable_music;
														world->disable_music_render = checkbox_disable_music_render;
														bool rains = atoi(rainbows.c_str());
														//SendRainbowShitData(currentPeer, fg, bg, x, y, rains);
														if (checkbox_public == 1)
														{
															world->isPublic = true;
														}
														else
														{
															world->isPublic = false;
														}

														if (rainbows == "1") {
															world->rainbows = true;
															bool rains = atoi(rainbows.c_str());
															//SendRainbowShitData(currentPeer, fg, bg, x, y, rains);
														}
														else {
															world->rainbows = false;
														}

														if (muted == "1") {
															world->silence = true;
														}
														else {
															world->silence = false;

														}

														if (disable_music_render == "1") {
															lol |= 0x20;
														}
														if (disable_music == "1") {

															lol |= 0x10;
														}
														ENetPeer* currentPeer;

														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															if (isHere(peer, currentPeer)) {
																//sendTileData(currentPeer, x, y, 0x00, fg, bg, lockTileDatas(lol, ((PlayerInfo*)(peer->data))->userID, 0, 0, world->isPublic, tempoint));
															}
														}
														continue;
													}
												}
											}
											if (infoDat[0] == "addItemToStore")
											{
												isaddItemToStoreDialog = true;
											}
											if (infoDat[0] == "stuffitem")
											{
												isStuffDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "entrance")
											{
												isEntranceDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "reqworldlockoffer")
											{
												isWorldLockBuyDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "changeCodeDialog")
											{
												changeCodeDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "reqdarkstoneoffer")
											{
												isDarkStoneBuyDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "reqdiamondlockoffer")
											{
												isDiamondLockBuyDialog = true;
											}										
											if (infoDat[0] == "dialog_name" && infoDat[1] == "storeReviewConfirm")
											{
												isstoreReviewConfirmDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "buyPlayerStoreItem")
											{
												isbuyPlayerStoreItemDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "buyitembyrarity")
											{
												isBuyItemByRarityDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "addItemStoreOnSale")
											{
												isaddItemStoreOnSaleDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "reqambersoffer")
											{
												isAmbersBuyDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "reqopalsoffer")
											{
												isOpalsBuyDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "reqgoldoffer")
											{
												isGoldBuyDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "reqrubiesoffer")
											{
												isRubiesBuyDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "reqsapphiresoffer")
											{
												isSapphiresBuyDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "reqdiamondsoffer")
											{
												isDiamondsBuyDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "reqemeraldsoffer")
											{
												isEmeraldsBuyDialog = true;
											}
											if (infoDat[0] == "netid") {
												netid = infoDat[1];
												Accesspicker = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "dropdialog")
											{
												isDropDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "trashdialog")
											{
												isTrashDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "guildconfirm")
											{
												isGuildDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "editdoor")
											{
												isEditDoorDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "editpdoor")
											{
												isEditPDoorDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "pwddoor")
											{
												isPwdDoorDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "sendwarn")
											{
												isWarnDialog = true;
											}
											if (infoDat[0] == "dialog_name" && infoDat[1] == "sendsb")
											{
												megaphone = true;
											}
										}
										if (infoDat[0] == "enablemag" && infoDat[1] == "0")
										{
											PlayerInfo* pinfo = (PlayerInfo*)peer->data;
											int squaresign = ((PlayerInfo*)(peer->data))->wrenchx + (((PlayerInfo*)(peer->data))->wrenchy * 100);
											getPlyersWorld(peer)->magplant = false;
											world->magitem = 0;

											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer))
												{
													Player::OnConsoleMessage(currentPeer, "`oWorld owner has turned `4off `othe magplant!");
												}
											}
										}
										if (infoDat[0] == "enablemag" && infoDat[1] == "1")
										{
											if (((PlayerInfo*)(peer->data))->rawName == PlayerDB::getProperName(world->owner) || ((PlayerInfo*)(peer->data))->adminLevel > 1336) {
												getPlyersWorld(peer)->magplant = true;
												PlayerInfo* pinfo = (PlayerInfo*)peer->data;
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer))
													{
														Player::OnConsoleMessage(currentPeer, "`oWorld owner has turned `2on `othe magplant!");
													}
												}
											}

										}
										if (btn == "enablemag") {
											int squaresign = ((PlayerInfo*)(peer->data))->wrenchx + (((PlayerInfo*)(peer->data))->wrenchy * 100);
											int pp = world->magitem;
											getPlyersWorld(peer)->magplant = true;
											sendMag(peer, squaresign % getPlyersWorld(peer)->width, squaresign / getPlyersWorld(peer)->width, pp, 1, true, true);
											PlayerInfo* pinfo = (PlayerInfo*)peer->data;
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer))
												{
													Player::OnConsoleMessage(currentPeer, "`oWorld owner has turned `2on `othe magplant!");
												}
											}
										}
										if (infoDat[0] == "magplantitem")
										{
											isMagplantPicker = true;

										}
										if (btn == "disablemag") {
											int squaresign = ((PlayerInfo*)(peer->data))->wrenchx + (((PlayerInfo*)(peer->data))->wrenchy * 100);
											int pp = world->magitem;
											getPlyersWorld(peer)->magplant = false;
											sendMag(peer, squaresign % getPlyersWorld(peer)->width, squaresign / getPlyersWorld(peer)->width, pp, 1, false, false);
											PlayerInfo* pinfo = (PlayerInfo*)peer->data;
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer))
												{
													Player::OnConsoleMessage(currentPeer, "`oWorld owner has turned `2on `othe magplant!");
												}
											}
										}
										if (btn == "takegems")
										{
											PlayerInfo* pinfo = (PlayerInfo*)peer->data;

											int netID = pinfo->netID;
											int currentGems = 0;
											ifstream ifs("emdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											ifs >> currentGems;
											ifs.close();

											currentGems += world->maggems;
											ofstream myfile;
											myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											myfile << currentGems;
											myfile.close();

											std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string contentx((std::istreambuf_iterator<char>(ifszi)),
												(std::istreambuf_iterator<char>()));


											GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), currentGems));
											ENetPacket* packetpp = enet_packet_create(pp.data,
												pp.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(peer, 0, packetpp);
											delete pp.data;
											world->maggems = 0;
											Player::OnSetBux(peer, currentGems, 0);

											int jumlah = world->gaiajumlah;
											int id = world->magitem;
											bool success = true;
											SaveShopsItemMoreTimes(id, jumlah, peer, success);

											world->gaiajumlah = 0;

										}
										if (btn == "takeblocks")
										{
											PlayerInfo* pinfo = (PlayerInfo*)peer->data;

											int jumlah = world->jumlahitem7;
											int id = world->magitem;
											int netID = pinfo->netID;
											world->jumlahitem7 = 0;

											bool success = true;
											SaveShopsItemMoreTimes(id, jumlah, peer, success);
										}
										if (btn == "getremote") {
											bool success = true;
											SaveShopsItemMoreTimes(5640, 1, peer, success);
										}
										if (isEditDoorDialog || isEditPDoorDialog) {
											if (infoDat[0] == "dest")
											{
												string a = getStrUpper(infoDat[1]);
												vector<string> b = explode(":", a);
												if (b.size() == 1)
												{
													destworld = b[0];
												}
												else if (b.size() > 1)
												{
													destworld = b[0];
													destid = b[1];
												}
											}
											if (infoDat[0] == "label")
											{
												label = infoDat[1];
											}
											if (infoDat[0] == "doorid")
											{
												currid = getStrUpper(infoDat[1]);
											}
											if (infoDat[0] == "doorpw")
											{
												passwordss = getStrUpper(infoDat[1]);
											}
										}
										if (isEditDoorDialog || isEditPDoorDialog)
										{
											PlayerInfo* pinfo = (PlayerInfo*)peer->data;
											string wrldname = destworld;
											if (wrldname == "CON" || wrldname == "NUL" || wrldname == "PRN" || wrldname == "AUX" || wrldname == "CLOCK$" || wrldname == "COM0" || wrldname == "COM1" || wrldname == "COM2" || wrldname == "COM3" || wrldname == "COM4" || wrldname == "COM5" || wrldname == "COM6" || wrldname == "COM7" || wrldname == "COM8" || wrldname == "COM9" || wrldname == "LPT0" || wrldname == "LPT1" || wrldname == "LPT2" || wrldname == "LPT3" || wrldname == "LPT4" || wrldname == "LPT5" || wrldname == "LPT6" || wrldname == "LPT7" || wrldname == "LPT8" || wrldname == "LPT9")
											{

												Player::OnConsoleMessage(peer, "`@Sorry this world name is not allowed!");
												break;

											}
											if (pinfo->wrenchsession < 0 && pinfo->wrenchsession > 6000) break;
											world->items[pinfo->wrenchsession].destWorld = destworld;
											world->items[pinfo->wrenchsession].destId = destid;
											world->items[pinfo->wrenchsession].currId = currid;
											world->items[pinfo->wrenchsession].label = label;
											world->items[pinfo->wrenchsession].password = passwordss;
											string labelForDoor = label == "" ? (destid == "" ? destworld : destworld + "...") : label;
											updateDoor(peer, world->items[pinfo->wrenchsession].foreground, pinfo->wrenchsession % world->width, pinfo->wrenchsession / world->width, labelForDoor);
											// .....
										}
										if (infoDat[0] == "dialog_name" && infoDat[1] == "pwddoor")
										{
											isPwdDoorDialog = true;
										}
										if (isPwdDoorDialog) {
											if (infoDat[0] == "doorpass") passwords = infoDat[1];
										}
										if (isDropDialog) {
											if (infoDat[0] == "dropitemcount") dropitemcount = infoDat[1];
										}
										if (isTrashDialog) {
											if (infoDat[0] == "trashitemcount") trashitemcount = infoDat[1];
										}
										if (isbuyPlayerStoreItemDialog)
										{
											if (infoDat[0].substr(0, 23) == "buyPlayerStoreQuantity_")
											{
												buyPlayerStoreQuantity = infoDat[1];

												string pos_and_whoseStore = infoDat[0].erase(0, 23);
												string::size_type pos = pos_and_whoseStore.find('_');
												string apos = "";
												string whosStore = "";
												if (pos != std::string::npos)
												{
													apos = pos_and_whoseStore.substr(0, pos);
													pos_and_whoseStore.erase(0, pos + 1); // +1, kad "_" erase
													whosStore = pos_and_whoseStore;
												}
												else
												{
													autoBan(peer, false, 24 * 7, "Incorrect parameters in isbuyPlayerStoreItemDialog . Was:" + pos_and_whoseStore);
													break;
												}

												bool contains_non_int2 = !std::regex_match(apos, std::regex("^[0-9]+$"));
												if (contains_non_int2 == true)
												{
													autoBan(peer, false, 24 * 7, "Incorrect aPos in isbuyPlayerStoreItemDialog .Was: " + apos);
													break;
												}

												bool existx = std::experimental::filesystem::exists("store/" + PlayerDB::getProperName(whosStore) + ".json");
												if (!existx)
												{
													Player::OnTextOverlay(peer, "`4Store does not exist");
													break;
												}

												buyPlayerStoreAposition = apos;
												buyPlayerStoreName = whosStore;

												int a_pos = stoi(buyPlayerStoreAposition);
												string name = buyPlayerStoreName;

												bool contains_non_int3 = !std::regex_match(buyPlayerStoreQuantity, std::regex("^[0-9]+$"));
												if (contains_non_int3 == true)
												{
													Player::OnTextOverlay(peer, "`4Quantity should be 1-200");
													break;
												}
												int quantityBuy = stoi(buyPlayerStoreQuantity);

												if (quantityBuy < 1 || quantityBuy > 200)
												{
													Player::OnTextOverlay(peer, "`4Quantity should be 1-200");
													break;
												}

												ifstream ifff("store/" + PlayerDB::getProperName(name) + ".json");
												json j;
												ifff >> j;
												ifff.close();

												bool found = false;
												bool error = false;
												bool error2 = false;

												for (int i = 0; i < j["itemsInStore"].size(); i++)
												{
													if (j["itemsInStore"][i]["aposition"] == a_pos)
													{
														found = true;
														if (j["itemsInStore"][i]["itemid"] == 0)
														{
															error = true;
															break;
														}
														if (j["itemsInStore"][i]["quantityOfItems"] == 0)
														{
															error2 = true;
															break;
														}
														int itemprice = j["itemsInStore"][i]["sellForItem"];
														int itempricePer = j["itemsInStore"][i]["sellPer"];
														int itemId = j["itemsInStore"][i]["itemid"];
														int quantity = j["itemsInStore"][i]["quantityOfItems"];

														if (quantityBuy > quantity)
														{
															Player::OnTextOverlay(peer, "`4There is no in shop "+to_string(quantityBuy)+" items.");
															break;
														}

														if (CheckItemExists(peer, j["itemsInStore"][i]["sellForItem"]) == false)
														{
															Player::OnConsoleMessage(peer, "`4You don't have "+ itemDefs[j["itemsInStore"][i]["sellForItem"]].name +".");
															break;
														}
														bool iscontains = false;
														SearchInventoryItem(peer, j["itemsInStore"][i]["sellForItem"], quantityBuy*itempricePer, iscontains);
														if(iscontains == false)
														{
															Player::OnConsoleMessage(peer, "`4You don't have enough("+to_string(quantityBuy*itempricePer)+") " + itemDefs[j["itemsInStore"][i]["sellForItem"]].name + ".");
															break;
														}
														bool success = false;

														if (CheckItemExists(peer, j["itemsInStore"][i]["itemid"]))
														{
															int currentlyHave = GetQuantityOfItem(peer, j["itemsInStore"][i]["itemid"]);
															if (quantityBuy + currentlyHave < 201)
															{
																SaveItemMoreTimes(j["itemsInStore"][i]["itemid"], quantityBuy, peer, success);
																j["itemsInStore"][i]["quantityOfItems"] = j["itemsInStore"][i]["quantityOfItems"] - quantityBuy;
																Player::OnConsoleMessage(peer, "`2Successfully bought " + to_string(quantityBuy) + " " + itemDefs[j["itemsInStore"][i]["itemid"]].name + ".");
															}
															else
															{
																Player::OnConsoleMessage(peer, "`4You don't have enought space in your inventory to buy " + to_string(quantityBuy) + " " + itemDefs[j["itemsInStore"][i]["itemid"]].name + ".");
																break;
															}
														}
														else
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.size() == ((PlayerInfo*)(peer->data))->currentInventorySize) {
																Player::OnTextOverlay(peer, "`4Your inventory is full! You can purchase an inventory upgrade in the shop.");
																break;
															}
															SaveItemMoreTimes(j["itemsInStore"][i]["itemid"], quantityBuy, peer, success);
															j["itemsInStore"][i]["quantityOfItems"] = j["itemsInStore"][i]["quantityOfItems"] - quantityBuy;
															Player::OnConsoleMessage(peer, "`2Successfully bought "+to_string(quantityBuy)+" "+ itemDefs[j["itemsInStore"][i]["itemid"]].name +".");

														}

														RemoveInventoryItem(j["itemsInStore"][i]["sellForItem"], quantityBuy*itempricePer, peer);
														j["itemsInStore"][i]["boughtItems"] = j["itemsInStore"][i]["boughtItems"] + (quantityBuy* itempricePer);
														
														vector<string> currentLogs;
														for (int i = 0; i < j["logs"].size(); i++)
														{
															currentLogs.push_back(j["logs"][i]);
														}
														time_t _tm = time(NULL);
														struct tm* curtime = localtime(&_tm);
														string test = asctime(curtime);

														string tolog = test + " A new purchase from" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ": "+to_string(quantityBuy )+" "+ itemDefs[j["itemsInStore"][i]["itemid"]].name +"";
														currentLogs.push_back(tolog);

														j["logs"] = currentLogs;
														j["newLogs"] = j["newLogs"] + 1;

														std::ofstream oo("store/" + PlayerDB::getProperName(name) + ".json");
														if (!oo.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														oo << j << std::endl;

														ENetPeer* currentPeer;
														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															if (PlayerDB::getProperName(name) == PlayerDB::getProperName(((PlayerInfo*)(currentPeer->data))->rawName))
															{
																Player::OnConsoleMessage(currentPeer, "`#You have received a new notification in your store! `$Check it out.");
																break;
															}
														}

														break;
													}
												}

												if (error)
												{
													Player::OnTextOverlay(peer, "`4Item does not exist in this store.");
													break;
												}

												if (error2)
												{
													Player::OnTextOverlay(peer, "`4Item sold out.");
													break;
												}

												if (!found)
												{
													Player::OnTextOverlay(peer, "`4Item does not exist in this store.");
													break;
												}

											}

										}
										if (isstoreReviewConfirmDialog)
										{
											if (infoDat[0].substr(0, 17) == "storeWriteReview_")
											{
												storeWriteReview = infoDat[1];
												storeWriteReviewShopName = infoDat[0].substr(infoDat[0].find("_") + 1);
												if (storeWriteReview.size() < 15)
												{
													Player::OnTextOverlay(peer, "`4Too short review.");
													break;
												}
												if (storeWriteReviewShopName.size() < 3)
												{
													Player::OnTextOverlay(peer, "`4System error. Try again.");
													break;
												}
											}

											if (infoDat[0] == "storeWriteReviewStar")
											{
												storeWriteReviewStar = infoDat[1];

												bool contains_non_int2 = !std::regex_match(storeWriteReviewStar, std::regex("^[0-9]+$"));
												if (contains_non_int2 == true)
												{
													Player::OnTextOverlay(peer, "`4Stars should be 0-5");
													break;
												}

												int stars = stoi(storeWriteReviewStar);

												if (stars < 1 || stars > 5)
												{
													Player::OnTextOverlay(peer, "`4Stars should be 0-5");
													break;
												}

												bool existx = std::experimental::filesystem::exists("store/" + PlayerDB::getProperName(storeWriteReviewShopName) + ".json");
												if (!existx)
												{
													Player::OnTextOverlay(peer, "`4Store does not exist");
													continue;
												}

												ifstream ifff("store/" + PlayerDB::getProperName(storeWriteReviewShopName) + ".json");
												json j;
												ifff >> j;
												ifff.close();

												bool arRase = false;
												bool arRado = false;

												for (int i = 0; i < 50; i++)
												{

													if (j["storeReview"][i]["sentBy"].get<string>() == PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName))
													{
														arRase = true;
														Player::OnTextOverlay(peer, "`4Unfortunately, but you have already sent the review in this store.");
														break;
													}

												}

												if (arRase == true)
												{
													break;
												}

												for (int i = 0; i < 50; i++)
												{
													if (j["storeReview"][i]["sentBy"].get<string>() == "")
													{
														j["storeReview"][i]["review"] = storeWriteReview;
														j["storeReview"][i]["sentBy"] = PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName);
														j["storeReview"][i]["stars"] = stars;
														j["newLogs"] = j["newLogs"] + 1;
														vector<string> currentLogs;
														for (int i = 0; i < j["logs"].size(); i++)
														{
															currentLogs.push_back(j["logs"][i]);
														}
														time_t _tm = time(NULL);
														struct tm* curtime = localtime(&_tm);
														string test = asctime(curtime);

														string tolog = test + " You have received a new review from "+ PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) +"("+to_string(stars)+"/5): "+ storeWriteReview +"";
														currentLogs.push_back(tolog);

														j["logs"] = currentLogs;

														

														std::ofstream oo("store/" + PlayerDB::getProperName(storeWriteReviewShopName) + ".json");
														if (!oo.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														oo << j << std::endl;

														Player::OnTextOverlay(peer, "`2Successfully sent.");
														arRado = true;


														ENetPeer* currentPeer;
														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															if (PlayerDB::getProperName(storeWriteReviewShopName) == PlayerDB::getProperName(((PlayerInfo*)(currentPeer->data))->rawName))
															{
																Player::OnConsoleMessage(currentPeer, "`#You have received a new notification in your store! `$Check it out.");
																break;
															}
														}
														break;
													}
												}

												if (arRado == false)
												{
													Player::OnTextOverlay(peer, "`4Unfortunately, but the reviews in this store are overflowing.");
													break;
												}

											}
											
										}
										if (isaddItemStoreOnSaleDialog)
										{
											if (infoDat[0].substr(0, 21) == "storeItemPickerCount_")
											{
												storeItemPickerCount = infoDat[1];
											    storeItemId = infoDat[0].substr(infoDat[0].find("_") + 1);

												if (storeItemPickerCount == "")
												{
													Player::OnTextOverlay(peer, "`4Quantity should be more than 0 and lower than 201.");
													break;
												}

												bool contains_non_int2 = !std::regex_match(storeItemPickerCount, std::regex("^[0-9]+$"));
												if (contains_non_int2 == true)
												{
													Player::OnTextOverlay(peer, "`4Quantity should be more than 0 and lower than 201.");
													break;
												}

												int count = stoi(storeItemPickerCount);

												if (count < 1 || count > 200)
												{
													Player::OnTextOverlay(peer, "`4Quantity should be more than 0 and lower than 201.");
													break;
												}

												bool contains_non_int3 = !std::regex_match(storeItemId, std::regex("^[0-9]+$"));
												if (contains_non_int3 == true)
												{
													autoBan(peer, false, 24 * 7, "Proxy detect! In isaddItemStoreOnSaleDialog, item id was: "+ storeItemId +"");
													break;
												}

												int id = stoi(storeItemId);

												if (id < 1 || id > maxItems)
												{
													autoBan(peer, false, 24 * 7, "Proxy detect! In isaddItemStoreOnSaleDialog, item id was: " + storeItemId + "");
													break;
												}

												if (id == 18 || id == 32 || id == 6336 || id == 8552 || id == 1738 || id == 9482 || id == 9356 || id == 9492 || id == 1672 || id == 8774 || id == 1790 || id == 2592 || id == 1784 || id == 1792 || id == 1794 || id == 7734 || id == 8306 || id == 9458)
												{
													Player::OnTextOverlay(peer, "`4You can't place on sale " + getItemDef(id).name + ".");
													break;
												}

												bool isContains = false;
												SearchInventoryItem(peer, id, count, isContains);
												if (isContains == false)
												{
													Player::OnTextOverlay(peer, "`4You don't have enough " + itemDefs[id].name + " in your inventory.");
													break;
												}

												bool existx = std::experimental::filesystem::exists("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
												if (!existx)
												{
													Player::OnTextOverlay(peer, "`4You don't have your own store!");
													break;
												}

											}

											if (infoDat[0] == "storeItemDescription")
											{
												storeItemDescription = infoDat[1];

												if (storeItemDescription.size() <= 5)
												{
													Player::OnTextOverlay(peer, "`4Too short description.");
													break;
												}

											}

											if (infoDat[0] == "storeItemSellForItem")
											{

												storeItemSellForItem = infoDat[1];

												bool contains_non_int2 = !std::regex_match(storeItemSellForItem, std::regex("^[0-9]+$"));
												if (contains_non_int2 == true)
												{
													Player::OnTextOverlay(peer, "`4Item Id should be more than 0 and lower than 201.");
													break;
												}

												int idd = stoi(storeItemSellForItem);

												if (idd < 1 || idd > maxItems)
												{
													Player::OnTextOverlay(peer, "`4Item Id should be more than 0 and lower than "+to_string(maxItems)+".");
													break;
												}
												if (idd == 18 || idd == 32 || idd == 6336 || idd == 8552 || idd == 1738 || idd == 9482 || idd == 9356 || idd == 9492 || idd == 1672 || idd == 8774 || idd == 1790 || idd == 2592 || idd == 1784 || idd == 1792 || idd == 1794 || idd == 7734 || idd == 8306 || idd == 9458)
												{
													Player::OnTextOverlay(peer, "`4You can't choose "+ getItemDef(idd).name +" as a price item.");
													break;
												}
											}

											if (infoDat[0] == "storeItemSellPer")
											{
												int id = stoi(storeItemId);
												int count = stoi(storeItemPickerCount);

												storeItemSellPer = infoDat[1];

												bool contains_non_int2 = !std::regex_match(storeItemSellPer, std::regex("^[0-9]+$"));
												if (contains_non_int2 == true)
												{
													Player::OnTextOverlay(peer, "`4Quantity should be more than 0 and lower than 201.");
													break;
												}

												int sellPer = stoi(storeItemSellPer);

												if (sellPer < 1 || sellPer > 200)
												{
													Player::OnTextOverlay(peer, "`4Quantity should be more than 0 and lower than 201.");
													break;
												}

												int sellForItem = stoi(storeItemSellForItem);

												ifstream ifff("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
												json j;
												ifff >> j;
												ifff.close();

												int currentSpaceInStore = j["currentSpaceInStore"];
												bool arYraLaisvu = false;

												for (int i = 0; i < currentSpaceInStore; i++)
												{
													if (j["itemsInStore"][i]["itemid"] == 0)
													{
														j["itemsInStore"][i]["itemDesc"] = storeItemDescription;
														j["itemsInStore"][i]["itemid"] = id;
														j["itemsInStore"][i]["quantityOfItems"] = count;
														j["itemsInStore"][i]["sellForItem"] = sellForItem;
														j["itemsInStore"][i]["sellPer"] = sellPer;


														std::ofstream oo("store/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
														if (!oo.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														oo << j << std::endl;

														RemoveInventoryItem(id, count, peer);

														Player::OnTextOverlay(peer, "`2Successfully placed on sale!");

														arYraLaisvu = true;
														break;
													}
												}

												if (arYraLaisvu == false)
												{
													Player::OnTextOverlay(peer, "`4You don't have enough space in your store to put this item! Please buy an upgrade.");
													break;
												}

											}
											
										}
										if (isBuyItemByRarityDialog)
										{
											if (infoDat[0].substr(0, 18) == "buyitembyrarityid_")
											{
												strButItemByRarityCount = infoDat[1];
												string id_and_price = infoDat[0].erase(0, 18);
												string::size_type pos = id_and_price.find('_');
												string id = "";
												string price = "";

												if (pos != std::string::npos)
												{
													id = id_and_price.substr(0, pos);
													id_and_price.erase(0, pos + 1); // +1, kad "_" erase
													price = id_and_price;
												}
												else
												{
													autoBan(peer, false, 24 * 7, "Incorrect parameters when buying item by rarity from /buy. Id and price were: " + id_and_price);
													break;
												}

												if (strButItemByRarityCount == "")
												{
													Player::OnTextOverlay(peer, "`4Quantity should be more than 0 and lower than 201.");
													break;
												}

												if (strButItemByRarityCount.length() > 5)
												{
													Player::OnTextOverlay(peer, "`4Quantity should be more than 0 and lower than 201.");
													break;
												}

												bool contains_non_int2 = !std::regex_match(strButItemByRarityCount, std::regex("^[0-9]+$"));
												if (contains_non_int2 == true)
												{
													Player::OnTextOverlay(peer, "`4Quantity should be more than 0 and lower than 201.");
													break;
												}
												if (strButItemByRarityCount.size() > 3 || strButItemByRarityCount.size() <= 0)
												{
													Player::OnTextOverlay(peer, "`4Quantity should be more than 0 and lower than 201.");
													break;
												}
												int converted_count = stoi(strButItemByRarityCount);
												if (converted_count < 1 || converted_count > 200)
												{
													Player::OnTextOverlay(peer, "`4Quantity should be more than 0 and lower than 201.");
													break;
												}

												bool contains_non_int3 = !std::regex_match(price, std::regex("^[0-9]+$"));
												if (contains_non_int3 == true)
												{
													autoBan(peer, false, 24 * 7, "Proxy detect! when buying item by rarity from /buy. price was: " + price);
													break;
												}

												int convertedPrice = stoi(price);

												int realPrice = round((float)(convertedPrice * converted_count));
												if (realPrice == 0)
												{
													realPrice = 1;
												}

												bool contains_non_int4 = !std::regex_match(id, std::regex("^[0-9]+$"));
												if (contains_non_int4 == true)
												{
													autoBan(peer, false, 24 * 7, "Proxy detect! when buying item by rarity from /buy. item id was: " + id);
													break;
												}
												if (id.size() > 5 || id.size() <= 0) 
												{
													break;
												}
												int itemID = stoi(id);

												if (CheckItemMaxed(peer, itemID, converted_count))
												{
													Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "`1(Item maxed)", 0, true);
													break;
												}
												if (CheckItemExists(peer, itemID) == false)
												{
													if (((PlayerInfo*)(peer->data))->inventory.items.size() == ((PlayerInfo*)(peer->data))->currentInventorySize) {
														Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "`1(Inventory is full)", 0, true);
														break;
													}
												}
												if (CheckItemExists(peer, 242) == false && CheckItemExists(peer, 1796) == false)
												{
													Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "`1You don't have wls and dls", 0, true);
													break;
												}

												if (converted_count < 201)
												{
													bool isContains = false;
													SearchInventoryItem(peer, 242, realPrice, isContains);
													if (isContains == false)
													{
														//dls ieskoti
														int needDls = realPrice / 100;
														int needWls = realPrice;

														//minusuoti dls
														if (needDls == 0)
														{
															needDls = 1;
														}
														if (needWls == 0)
														{
															needWls = 1;
														}
														if (realPrice > 200)
														{
															bool isContains3 = false;
															SearchInventoryItem(peer, 1796, needDls, isContains3);
															if (isContains3 == false)
															{
																Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "`1You don't have enought dls.", 0, true);
																break;
															}
															else
															{
																bool success = false;
																RemoveInventoryItem(1796, needDls, peer);
																SaveShopsItemMoreTimes(itemID, converted_count, peer, success);
																Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "`1You have bought `c" + getItemDef(itemID).name + " `1For `c" + to_string(needDls) + " `!Diamond Locks`1!", 0, true);
																break;
															}
														}
														if (needWls != 0)
														{
															// minusuoti wls
															bool isContains2 = false;
															SearchInventoryItem(peer, 242, needWls, isContains2);
															if (isContains2 == false)
															{
																Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "`1You don't have enought wls. Split dl to get " + to_string(needWls) + " wls more!", 0, true);
																break;
															}
															else
															{
																bool success = false;
																RemoveInventoryItem(242, needWls, peer);
																SaveShopsItemMoreTimes(itemID, converted_count, peer, success);
																Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "`1You have bought `c" + getItemDef(itemID).name + " `1For `c" + to_string(needWls) + " `$World Locks`1!", 0, true);
																break;
															}
														}

													}
													else
													{
														//uz wls
														bool success = false;
														RemoveInventoryItem(242, realPrice, peer);
														SaveShopsItemMoreTimes(itemID, converted_count, peer, success);
														Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "`1You have bought `c" + getItemDef(itemID).name + " `1For `c" + to_string(realPrice) + " `$World Locks`1!", 0, true);
														break;
													}
												}
												else
												{
													//tik dls
													int needDls = realPrice / 100;
													int needWls = realPrice;

													//minusuoti dls
													if (needDls == 0)
													{
														needDls = 1;
													}
													if (needWls == 0)
													{
														needWls = 1;
													}
													bool isContains3 = false;
													SearchInventoryItem(peer, 1796, needDls, isContains3);
													if (isContains3 == false)
													{
														Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "`1You don't have enought dls.", 0, true);
														break;
													}
													else
													{
														bool success = false;
														RemoveInventoryItem(1796, needDls, peer);
														SaveShopsItemMoreTimes(itemID, converted_count, peer, success);
														Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "`1You have bought `c" + getItemDef(itemID).name + " `1For `c" + to_string(needDls) + " `!Diamond Locks`1!", 0, true);
														break;
													}

													if (needWls != 0)
													{
														// minusuoti wls
														bool isContains2 = false;
														SearchInventoryItem(peer, 242, needWls, isContains2);
														if (isContains2 == false)
														{
															Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "`1You don't have enought wls. Split dl to get " + to_string(needWls) + " wls more!", 0, true);
															break;
														}
														else
														{
															bool success = false;
															RemoveInventoryItem(242, needWls, peer);
															SaveShopsItemMoreTimes(itemID, converted_count, peer, success);
															Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "`1You have bought `c" + getItemDef(itemID).name + " `1For `c" + to_string(needWls) + " `$World Locks`1!", 0, true);
															break;
														}
													}

												}

											}
										}
										if (isDropDialog) {
											if (((PlayerInfo*)(peer->data))->dotrade == true || ((PlayerInfo*)(peer->data))->istrading == true)
											{
												Player::OnTextOverlay(peer, "You cant do that while trading!");
												continue;
											}
											if (dropitemcount.size() > 3 || dropitemcount.size() <= 0)
											{
												continue;
											}
											int x;
											try {
												x = stoi(dropitemcount);
											}
											catch (std::invalid_argument& e) {
												Player::OnConsoleMessage(peer, "`^Item `@dropped `^successfully!");
												continue;
											}
											short int currentItemCount = 0;
											for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
											{
												if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastdropitem)
												{
													currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
												}
											}
											if (x <= 0 || x > currentItemCount) {
												Player::OnConsoleMessage(peer, "`^That too many or too less to drop!");
												continue;
											}
											else {
												bool iscontainseas = false;
												SearchInventoryItem(peer, ((PlayerInfo*)(peer->data))->lastdropitem, 1, iscontainseas);
												if (!iscontainseas)
												{
													autoBan(peer, false, 24 * 7, "isDropDialog didnt has " + to_string(((PlayerInfo*)(peer->data))->lastdropitem) + " item");
													break;
												}
												else {
													int xx = ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1));
													int netid = -1;
													int yy = ((PlayerInfo*)(peer->data))->y;
													DropItem(peer, netid, xx, yy, ((PlayerInfo*)(peer->data))->lastdropitem, x, 0);
													RemoveInventoryItem(((PlayerInfo*)(peer->data))->lastdropitem, x, peer);
													updateplayerset(peer, ((PlayerInfo*)(peer->data))->lastdropitem);
												}

											}
										}
										if (isaddItemToStoreDialog)
										{
											if (infoDat[0] == "addItemToStore") addItemToStore = infoDat[1];
											int itemid = stoi(addItemToStore);
											GTDialog dialogaddItemToStore;

											dialogaddItemToStore.addSpacer(SPACER_SMALL);
											dialogaddItemToStore.addSmallText("`$How many of "+ itemDefs[itemid].name + " you want to put on sale?");
											dialogaddItemToStore.addInputBox("storeItemPickerCount_" + to_string(itemid) + "", "How many you want to put?", "", 3);
											dialogaddItemToStore.addSpacer(SPACER_SMALL);

											dialogaddItemToStore.addSmallText("`$Write a description about this item for buyers.");
											dialogaddItemToStore.addInputBox("storeItemDescription", "Description:", "", 50);
											dialogaddItemToStore.addSpacer(SPACER_SMALL);

											dialogaddItemToStore.addSmallText("`$Enter item id that will be used as the price for your selling item.");
											dialogaddItemToStore.addSmallText("`$PS: you can find any items id using (`#/findid <item name>`$) command.");
											dialogaddItemToStore.addInputBox("storeItemSellForItem", "Item id:", "", 5);
											dialogaddItemToStore.addSpacer(SPACER_SMALL);

											dialogaddItemToStore.addSmallText("`$How many of these items that you wrote above need to buy your selling item?");
											dialogaddItemToStore.addInputBox("storeItemSellPer", "How many per?", "", 3);
											dialogaddItemToStore.addSpacer(SPACER_SMALL);

											dialogaddItemToStore.addQuickExit();
											dialogaddItemToStore.endDialog("addItemStoreOnSale", "Add item on sale", "Cancel");
											Player::OnDialogRequest(peer, dialogaddItemToStore.finishDialog());
										}
										if (isWarnDialog) {
											if (infoDat[0] == "warntext")
											{
												warntext = infoDat[1];
												ENetPeer* currentPeerpx;
												for (currentPeerpx = server->peers;
													currentPeerpx < &server->peers[server->peerCount];
													++currentPeerpx)
												{
													if (currentPeerpx->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeerpx))
													{
														if (((PlayerInfo*)(currentPeerpx->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) // if last wrench
														{
															GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`0Warning from `4ADMIN`0: " + warntext), "audio/hub_open.wav"), 0));
															ENetPacket* packet2 = enet_packet_create(ps2.data,
																ps2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeerpx, 0, packet2);
															GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Applied punishment on " + ((PlayerInfo*)(peer->data))->lastInfoname + "."));
															//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
															ENetPacket* packetto = enet_packet_create(pto.data,
																pto.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetto);
														}
													}
												}
												string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `2" + ((PlayerInfo*)(peer->data))->displayName + " has `4warned `2" + ((PlayerInfo*)(peer->data))->lastInfoname;
												showModLogs(textInfo);
											}
										}
										if (megaphone) {
											if (infoDat[0] == "sbtext")
											{
												sbtext = infoDat[1];
												GamePacket p;


												p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5 CP:0_PL:4_OID:_CT:[SB]_ `w** `5Super-Broadcast`w from `2" + (((PlayerInfo*)(peer->data))->rawName + "`w (in `$" + ((PlayerInfo*)(peer->data))->currentWorld + "`w) ** :`# " + sbtext)));

												RemoveInventoryItem(2480, 1, peer);
												OnConsoleMessageAll(peer, "`o >>`5 Super-Broadcast `osent. `oUsed `$1 Megaphone.");
												string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
												BYTE* data = new BYTE[5 + text.length()];
												BYTE zero = 0;
												int type = 3;
												memcpy(data, &type, 4);
												memcpy(data + 4, text.c_str(), text.length());
												memcpy(data + 4 + text.length(), &zero, 1);
												ENetPeer* currentPeer;

												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (!((PlayerInfo*)(currentPeer->data))->radio)
														continue;

													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(currentPeer, 0, packet);




													ENetPacket* packet2 = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);


													enet_peer_send(currentPeer, 0, packet2);

													//enet_host_flush(server);
												}
												delete data;
												delete p.data;
											}
										}
										if (isTrashDialog) {
											if (((PlayerInfo*)(peer->data))->dotrade == true || ((PlayerInfo*)(peer->data))->istrading == true)
											{
												Player::OnTextOverlay(peer, "You cant do that while trading!");
												continue;
											}
											if (trashitemcount.size() > 3 || trashitemcount.size() <= 0)
											{
												continue;
											}
											int gemtrashcount = 0;
											int x;
											try {
												x = stoi(trashitemcount);
											}
											catch (std::invalid_argument& e) {

												continue;
											}
											short int currentItemCount = 0;
											for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
											{
												if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lasttrashitem)
												{
													currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
												}
											}
											if (x <= 0 || x > currentItemCount) {
												Player::OnConsoleMessage(peer, "`^That too many or too less to `4trash`^!");
												continue;
											}
											else {
												((PlayerInfo*)(peer->data))->trashgemmeritem = x;
												if (((PlayerInfo*)(peer->data))->lasttrashitem == 242) {
													gemtrashcount = gemtrashcount + 300 * ((PlayerInfo*)(peer->data))->trashgemmeritem;
												}

												if (((PlayerInfo*)(peer->data))->lasttrashitem == 1796) {
													gemtrashcount = gemtrashcount + 30000 * ((PlayerInfo*)(peer->data))->trashgemmeritem;
												}

												if (((PlayerInfo*)(peer->data))->lasttrashitem == 7188) {
													gemtrashcount = gemtrashcount + 3000000 * ((PlayerInfo*)(peer->data))->trashgemmeritem;
												}

												Player::OnConsoleMessage(peer, "`w" + std::to_string(((PlayerInfo*)(peer->data))->trashgemmeritem) + " " + getItemDef(((PlayerInfo*)(peer->data))->lasttrashitem).name + " `orecycled, `w" + std::to_string(gemtrashcount) + " `ogems earned.");
												RemoveInventoryItem(((PlayerInfo*)(peer->data))->lasttrashitem, x, peer);
												sendSound(peer, "trash.wav");



												updateplayerset(peer, ((PlayerInfo*)(peer->data))->lasttrashitem);
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));
												int gembux = atoi(content.c_str());
												int fingembux = gembux + gemtrashcount;
												ofstream myfile;
												myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												myfile << fingembux;
												myfile.close();
												int gemcalc = gembux + gemtrashcount;
												((PlayerInfo*)(peer->data))->eikiscia = gemcalc;
											}
											Player::OnSetBux(peer, ((PlayerInfo*)(peer->data))->eikiscia, 0);
										}
										if (signszzz) {
											if (infoDat[0] == "text")
											{
												text = infoDat[1];
												((PlayerInfo*)(peer->data))->SignPosX;
												((PlayerInfo*)(peer->data))->SignPosY;
												int yy = ((PlayerInfo*)(event.peer->data))->SignPosX / 32;
												int xx = ((PlayerInfo*)(event.peer->data))->SignPosY / 32;
												int posX = ((PlayerInfo*)(event.peer->data))->posX / 32; // good value is actually 31.16-31.33
												int posY = ((PlayerInfo*)(event.peer->data))->posY / 32;
												string world = ((PlayerInfo*)(peer->data))->currentWorld;
												string posx = std::to_string(yy);
												string posy = std::to_string(xx);

												for (char c : text)

													if (c < 0x18 || std::all_of(text.begin(), text.end(), isspace))
													{

													}

												std::ofstream outfile("signs/" + world + "X" + posx + posy + ".txt");

												outfile << text;

												outfile.close();
											}
										}
										if (isFindDialog) {
											if (infoDat[0] == "item") itemFind = infoDat[1];
										}
										if (isDarkStoneBuyDialog)
										{
											if (infoDat[0] == "darkstoneoffer")
											{
												reqBuyDarkStoneOffer = infoDat[1];
												bool contains_non_int = !std::regex_match(reqBuyDarkStoneOffer, std::regex("^[0-9]+$"));
												if (contains_non_int == true)
												{
													Player::OnTextOverlay(peer, "`@Invalid `9Mystery `oBlock's `@Format!");
													continue;
												}
												else
												{
													if (reqBuyDarkStoneOffer.size() > 3 || reqBuyDarkStoneOffer.size() <= 0)
													{
														continue;
													}
													int konvertuotasInt = stoi(reqBuyDarkStoneOffer);
													if (CheckItemMaxed(peer, 120, konvertuotasInt))
													{
														Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "Those Mystery Block wont fit into my backpack!", 0, true);
														break;
													}
													if (konvertuotasInt <= 0 || konvertuotasInt >= 200)
													{
														Player::OnTextOverlay(peer, "`bMystery Block's `@Should Be Between `91-199`@!");
														continue;
													}
													else
													{
														std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string content((std::istreambuf_iterator<char>(ifsz)),
															(std::istreambuf_iterator<char>()));
														int b = atoi(content.c_str());
														if (b > 300000 * konvertuotasInt)
														{
															bool success = true;
															SaveShopsItemMoreTimes(120, konvertuotasInt, peer, success); // aposition, itemid, quantity, peer, success
															if (!success)continue;
															Player::OnTextOverlay(peer, "`9You have bought `9Mystery Block's`9!");
															string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
															BYTE* data = new BYTE[5 + text.length()];
															BYTE zero = 0;
															int type = 3;
															memcpy(data, &type, 4);
															memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
															memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
															ENetPacket* packetsou = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetsou);
															int gemcalc10k = b - 300000 * konvertuotasInt;
															ofstream myfile2;
															myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															myfile2 << std::to_string(gemcalc10k);
															myfile2.close();
															std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															std::string contentx((std::istreambuf_iterator<char>(ifszi)),
																(std::istreambuf_iterator<char>()));
															int updgem = atoi(contentx.c_str());
															GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
															ENetPacket* packetpp = enet_packet_create(pp.data,
																pp.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetpp);
															delete pp.data;
														}
														else
														{
															Player::OnTextOverlay(peer, "`9You `@Don't `9Have enought `9Gem's`9!");
														}
													}
												}
											}
										}
										if (checkCodeDialog)
										{
											if (infoDat[0] == "checkCodeText") {
												checkCodeText = infoDat[1];
												if (((PlayerInfo*)(peer->data))->registercode != checkCodeText)
												{
													GamePacket p2code = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"),
														"set_default_color|`o\n\nadd_label_with_icon|big|`oNew device detected``|left|32|\n\nadd_spacer|small|\nadd_label|small|`wIt seems you joined from another location. `wPlease confirm your identity by entering your `@security `wcode.|left||\n\nadd_spacer|small||\nadd_text_input|checkCodeText|Code||5|left|32|\n\nadd_spacer|small|\nadd_label_with_icon|small|`@Wrong answer. Try again.||\n\nadd_spacer|small|\nend_dialog|checkCodeDialog||Accept|\n"));
													ENetPacket* packet2 = enet_packet_create(p2code.data,
														p2code.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2code.data;
												}
												else
												{
													((PlayerInfo*)(peer->data))->isConfirmingCode = false;
													((PlayerInfo*)(peer->data))->isBot = false;
													Player::OnConsoleMessage(peer, "`@Successfully passed verification.");
													((PlayerInfo*)(peer->data))->registermac = ((PlayerInfo*)(peer->data))->mac;
													((PlayerInfo*)(peer->data))->registerrid = ((PlayerInfo*)(peer->data))->rid;
													((PlayerInfo*)(peer->data))->registersid = ((PlayerInfo*)(peer->data))->sid;
													((PlayerInfo*)(peer->data))->registergid = ((PlayerInfo*)(peer->data))->gid;
													((PlayerInfo*)(peer->data))->registervid = ((PlayerInfo*)(peer->data))->vid;
													((PlayerInfo*)(peer->data))->registeraid = ((PlayerInfo*)(peer->data))->aid;
													((PlayerInfo*)(peer->data))->registerIP = ((PlayerInfo*)(peer->data))->charIP;
													ofstream saveNewSecurity("accountSecurity/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													saveNewSecurity << "true" << endl;
													saveNewSecurity << ((PlayerInfo*)(peer->data))->registercode << endl;
													saveNewSecurity << ((PlayerInfo*)(peer->data))->registermac << endl;
													saveNewSecurity << ((PlayerInfo*)(peer->data))->registerrid << endl;
													saveNewSecurity << ((PlayerInfo*)(peer->data))->registersid << endl;
													saveNewSecurity << ((PlayerInfo*)(peer->data))->registergid << endl;
													saveNewSecurity << ((PlayerInfo*)(peer->data))->registervid << endl;
													saveNewSecurity << ((PlayerInfo*)(peer->data))->registeraid << endl;
													saveNewSecurity << ((PlayerInfo*)(peer->data))->registerIP << endl;
													saveNewSecurity.close();
												}
											}
										}
										if (changeCodeDialog)
										{
											if (infoDat[0] == "changeCodeText")
											{
												changeCodeText = infoDat[1];
												if (changeCodeText.find_first_not_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789") != string::npos)
												{
													Player::OnConsoleMessage(peer, "`5Sorry but the `4Code `@must consist of `25 `@characters.``");
													continue;
												}
												if (changeCodeText.length() < 5)
												{
													Player::OnConsoleMessage(peer, "`5Sorry but the code must have 5 symbols!``");
													continue;
												}
												((PlayerInfo*)(peer->data))->registercode = changeCodeText;
												Player::OnConsoleMessage(peer, "`@You successfully changed security code to:`2 " + changeCodeText + "`@. Remember it!");
												ofstream fsCode("accountSecurity/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												string tekstasFalseArTrue = "error";
												if (((PlayerInfo*)(peer->data))->isUseCode)
												{
													tekstasFalseArTrue = "true";
												}
												else
												{
													tekstasFalseArTrue = "false";
												}
												fsCode << tekstasFalseArTrue << endl;
												fsCode << ((PlayerInfo*)(peer->data))->registercode << endl;
												fsCode << ((PlayerInfo*)(peer->data))->registermac << endl;
												fsCode << ((PlayerInfo*)(peer->data))->registerrid << endl;
												fsCode << ((PlayerInfo*)(peer->data))->registersid << endl;
												fsCode << ((PlayerInfo*)(peer->data))->registergid << endl;
												fsCode << ((PlayerInfo*)(peer->data))->registervid << endl;
												fsCode << ((PlayerInfo*)(peer->data))->registeraid << endl;
												fsCode << ((PlayerInfo*)(peer->data))->registerIP << endl;
												fsCode.close();
											}
										}
										if (isWorldLockBuyDialog)
										{
											if (infoDat[0] == "worldlockoffer")
											{
												strBuyWorldLockOffer = infoDat[1];
												bool contains_non_int = !std::regex_match(strBuyWorldLockOffer, std::regex("^[0-9]+$"));
												if (contains_non_int == true)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `2World Lock's `@Format!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													if (strBuyWorldLockOffer.size() > 3 || strBuyWorldLockOffer.size() <= 0)
													{
														continue;
													}
													int konvertuotasInt = stoi(strBuyWorldLockOffer);
													if (CheckItemMaxed(peer, 242, konvertuotasInt))
													{
														Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "Those world locks wont fit into my backpack!", 0, true);
														break;
													}
													if (konvertuotasInt <= 0 || konvertuotasInt >= 200)
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9World Lock's `@Should Be Between `91-199`@!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;
														continue;
													}
													else
													{
														std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string content((std::istreambuf_iterator<char>(ifsz)),
															(std::istreambuf_iterator<char>()));
														int b = atoi(content.c_str());
														if (b > 1000 * konvertuotasInt)
														{
															bool success = true;
															SaveShopsItemMoreTimes(242, konvertuotasInt, peer, success); // aposition, itemid, quantity, peer, success
															if (!success)continue;
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `2World Lock's`9!"));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;
															string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
															BYTE* data = new BYTE[5 + text.length()];
															BYTE zero = 0;
															int type = 3;
															memcpy(data, &type, 4);
															memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
															memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
															ENetPacket* packetsou = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetsou);
															int gemcalc10k = b - 1000 * konvertuotasInt;
															ofstream myfile2;
															myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															myfile2 << std::to_string(gemcalc10k);
															myfile2.close();
															std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															std::string contentx((std::istreambuf_iterator<char>(ifszi)),
																(std::istreambuf_iterator<char>()));
															int updgem = atoi(contentx.c_str());
															GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
															ENetPacket* packetpp = enet_packet_create(pp.data,
																pp.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetpp);
															delete pp.data;
														}
														else
														{
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;
														}
													}
												}
											}
										}
										if (isDiamondLockBuyDialog)
										{
											if (infoDat[0] == "diamondlockoffer")
											{
												strBuyDiamondLockOffer = infoDat[1];
												bool contains_non_int = !std::regex_match(strBuyDiamondLockOffer, std::regex("^[0-9]+$"));
												if (contains_non_int == true)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `2World Lock's `@Format!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													if (strBuyDiamondLockOffer.size() > 3 || strBuyDiamondLockOffer.size() <= 0)
													{
														continue;
													}
													int konvertuotasInt = stoi(strBuyDiamondLockOffer);
													if (CheckItemMaxed(peer, 1796, konvertuotasInt))
													{
														Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "Those diamond locks wont fit into my backpack!", 0, true);
														break;
													}
													if (konvertuotasInt <= 0 || konvertuotasInt >= 200)
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`1Diamond Lock's `@Should Be Between `91-199`@!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;
														continue;
													}
													else
													{
														std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string content((std::istreambuf_iterator<char>(ifsz)),
															(std::istreambuf_iterator<char>()));
														int b = atoi(content.c_str());
														if (b > 100000 * konvertuotasInt)
														{
															bool success = true;
															SaveShopsItemMoreTimes(1796, konvertuotasInt, peer, success);
															if (!success)continue;
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `1Diamond Lock's`9!"));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;
															string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
															BYTE* data = new BYTE[5 + text.length()];
															BYTE zero = 0;
															int type = 3;
															memcpy(data, &type, 4);
															memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
															memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
															ENetPacket* packetsou = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetsou);
															int gemcalc10k = b - 100000 * konvertuotasInt;
															ofstream myfile2;
															myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															myfile2 << std::to_string(gemcalc10k);
															myfile2.close();
															std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															std::string contentx((std::istreambuf_iterator<char>(ifszi)),
																(std::istreambuf_iterator<char>()));
															int updgem = atoi(contentx.c_str());
															GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
															ENetPacket* packetpp = enet_packet_create(pp.data,
																pp.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetpp);
															delete pp.data;
														}
														else
														{
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;
														}
													}
												}
											}
										}
										if (isAmbersBuyDialog)
										{
											if (infoDat[0] == "ambersoffer")
											{
												strAmbersBuyOffer = infoDat[1];
												bool contains_non_int = !std::regex_match(strAmbersBuyOffer, std::regex("^[0-9]+$"));
												if (contains_non_int == true)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `8Amber's `@Format!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													if (strAmbersBuyOffer.size() > 3 || strAmbersBuyOffer.size() <= 0)
													{
														continue;
													}
													int konvertuotasInt = stoi(strAmbersBuyOffer);
													if (konvertuotasInt <= 0 || konvertuotasInt >= 500)
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`8Amber's `@Should Be Between `91-499`@!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;
														continue;
													}
													else
													{
														std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string content((std::istreambuf_iterator<char>(ifsz)),
															(std::istreambuf_iterator<char>()));
														int b = atoi(content.c_str());
														if (b > 3000 * konvertuotasInt)
														{
															try {
																std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
																json jj;
																if (iffff.fail()) {
																	iffff.close();
																	cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko amber!" << endl;
																}
																if (iffff.is_open()) {
																}
																iffff >> jj;
																std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
																if (!oo.is_open()) {
																	cout << GetLastError() << endl;
																	_getch();
																}
																int dabarTuri = jj["amber"];
																dabarTuri += konvertuotasInt;
																jj["amber"] = dabarTuri;
																oo << jj << std::endl;
																//oo.close();
															}
															catch (std::exception& e)
															{
																std::cerr << e.what() << std::endl;
															}
															catch (const std::out_of_range& e) {
																cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
															}
															catch (...) {
																cout << "reading file violation" << endl;
															}
															((PlayerInfo*)(peer->data))->amber = ((PlayerInfo*)(peer->data))->amber + konvertuotasInt;
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `8Amber's`9!"));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;
															string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
															BYTE* data = new BYTE[5 + text.length()];
															BYTE zero = 0;
															int type = 3;
															memcpy(data, &type, 4);
															memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
															memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
															ENetPacket* packetsou = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetsou);
															int gemcalc10k = b - 3000 * konvertuotasInt;
															ofstream myfile2;
															myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															myfile2 << std::to_string(gemcalc10k);
															myfile2.close();
															std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															std::string contentx((std::istreambuf_iterator<char>(ifszi)),
																(std::istreambuf_iterator<char>()));
															int updgem = atoi(contentx.c_str());
															GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
															ENetPacket* packetpp = enet_packet_create(pp.data,
																pp.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetpp);
															delete pp.data;
														}
														else
														{
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;
														}
													}
												}
											}
										}
										if (isOpalsBuyDialog)
										{
											if (infoDat[0] == "opalsoffer")
											{
												strOpalsBuyOffer = infoDat[1];
												bool contains_non_int = !std::regex_match(strOpalsBuyOffer, std::regex("^[0-9]+$"));
												if (contains_non_int == true)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `1Opal's `@Format!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													if (strOpalsBuyOffer.size() > 3 || strOpalsBuyOffer.size() <= 0)
													{
														continue;
													}
													int konvertuotasInt = stoi(strOpalsBuyOffer);
													if (konvertuotasInt <= 0 || konvertuotasInt >= 500)
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`1Opal's `@Should Be Between `91-499`@!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;
														continue;
													}
													else
													{
														std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string content((std::istreambuf_iterator<char>(ifsz)),
															(std::istreambuf_iterator<char>()));
														int b = atoi(content.c_str());
														if (b > 10000 * konvertuotasInt)
														{
															try {
																std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
																json jj;
																if (iffff.fail()) {
																	iffff.close();
																	cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko opal!" << endl;
																}
																if (iffff.is_open()) {
																}
																iffff >> jj; //load
																std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
																if (!oo.is_open()) {
																	cout << GetLastError() << endl;
																	_getch();
																}
																int dabarTuri = jj["opal"];
																dabarTuri += konvertuotasInt;
																jj["opal"] = dabarTuri;
																oo << jj << std::endl;
																//oo.close();
															}
															catch (std::exception& e)
															{
																std::cerr << e.what() << std::endl;
															}
															catch (const std::out_of_range& e) {
																cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
															}
															catch (...) {
																cout << "reading file violation" << endl;
															}
															((PlayerInfo*)(peer->data))->opal = ((PlayerInfo*)(peer->data))->opal + konvertuotasInt;
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `1Opal's`9!"));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;
															string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
															BYTE* data = new BYTE[5 + text.length()];
															BYTE zero = 0;
															int type = 3;
															memcpy(data, &type, 4);
															memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
															memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
															ENetPacket* packetsou = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetsou);
															int gemcalc10k = b - 10000 * konvertuotasInt;
															ofstream myfile2;
															myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															myfile2 << std::to_string(gemcalc10k);
															myfile2.close();
															std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															std::string contentx((std::istreambuf_iterator<char>(ifszi)),
																(std::istreambuf_iterator<char>()));
															int updgem = atoi(contentx.c_str());
															GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
															ENetPacket* packetpp = enet_packet_create(pp.data,
																pp.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetpp);
															delete pp.data;
														}
														else
														{
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;
														}
													}
												}
											}
										}
										if (isGoldBuyDialog)
										{
											if (infoDat[0] == "goldoffer")
											{
												strGoldBuyOffer = infoDat[1];
												bool contains_non_int = !std::regex_match(strGoldBuyOffer, std::regex("^[0-9]+$"));
												if (contains_non_int == true)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `9Gold's `@Format!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													if (strGoldBuyOffer.size() > 3 || strGoldBuyOffer.size() <= 0)
													{
														continue;
													}
													int konvertuotasInt = stoi(strGoldBuyOffer);
													if (konvertuotasInt <= 0 || konvertuotasInt >= 500)
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Gold's `@Should Be Between `91-499`@!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;
														continue;
													}
													else
													{
														std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string content((std::istreambuf_iterator<char>(ifsz)),
															(std::istreambuf_iterator<char>()));
														int b = atoi(content.c_str());
														if (b > 20000 * konvertuotasInt)
														{
															try {
																std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
																json jj;
																if (iffff.fail()) {
																	iffff.close();
																	cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko gold!" << endl;
																}
																if (iffff.is_open()) {
																}
																iffff >> jj; //load
																std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
																if (!oo.is_open()) {
																	cout << GetLastError() << endl;
																	_getch();
																}
																int dabarTuri = jj["gold"];
																dabarTuri += konvertuotasInt;
																jj["gold"] = dabarTuri;
																oo << jj << std::endl;
																//oo.close();
															}
															catch (std::exception& e)
															{
																std::cerr << e.what() << std::endl;
															}
															catch (const std::out_of_range& e) {
																cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
															}
															catch (...) {
																cout << "reading file violation" << endl;
															}
															((PlayerInfo*)(peer->data))->gold = ((PlayerInfo*)(peer->data))->gold + konvertuotasInt;
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `9Gold's`9!"));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;
															string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
															BYTE* data = new BYTE[5 + text.length()];
															BYTE zero = 0;
															int type = 3;
															memcpy(data, &type, 4);
															memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
															memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
															ENetPacket* packetsou = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetsou);
															int gemcalc10k = b - 20000 * konvertuotasInt;
															ofstream myfile2;
															myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															myfile2 << std::to_string(gemcalc10k);
															myfile2.close();
															std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															std::string contentx((std::istreambuf_iterator<char>(ifszi)),
																(std::istreambuf_iterator<char>()));
															int updgem = atoi(contentx.c_str());
															GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
															ENetPacket* packetpp = enet_packet_create(pp.data,
																pp.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetpp);
															delete pp.data;
														}
														else
														{
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;
														}
													}
												}
											}
										}
										if (isRubiesBuyDialog)
										{
											if (infoDat[0] == "rubiesoffer")
											{
												strRubiesBuyOffer = infoDat[1];
												bool contains_non_int = !std::regex_match(strRubiesBuyOffer, std::regex("^[0-9]+$"));
												if (contains_non_int == true)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `4Rubies `@Format!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													if (strRubiesBuyOffer.size() > 3 || strRubiesBuyOffer.size() <= 0)
													{
														continue;
													}
													int konvertuotasInt = stoi(strRubiesBuyOffer);
													if (konvertuotasInt <= 0 || konvertuotasInt >= 500)
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Rubies `@Should Be Between `91-499`@!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;
														continue;
													}
													else
													{
														std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string content((std::istreambuf_iterator<char>(ifsz)),
															(std::istreambuf_iterator<char>()));
														int b = atoi(content.c_str());
														if (b > 1000 * konvertuotasInt)
														{
															try {
																std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
																json jj;
																if (iffff.fail()) {
																	iffff.close();
																	cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko ruby!" << endl;
																}
																if (iffff.is_open()) {
																}
																iffff >> jj; //load
																std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
																if (!oo.is_open()) {
																	cout << GetLastError() << endl;
																	_getch();
																}
																int dabarTuri = jj["rubble"];
																dabarTuri += konvertuotasInt;
																jj["rubble"] = dabarTuri;
																oo << jj << std::endl;
																//oo.close();
															}
															catch (std::exception& e)
															{
																std::cerr << e.what() << std::endl;
															}
															catch (const std::out_of_range& e) {
																cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
															}
															catch (...) {
																cout << "reading file violation" << endl;
															}
															((PlayerInfo*)(peer->data))->rubble = ((PlayerInfo*)(peer->data))->rubble + konvertuotasInt;
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `4Rubies`9!"));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;
															string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
															BYTE* data = new BYTE[5 + text.length()];
															BYTE zero = 0;
															int type = 3;
															memcpy(data, &type, 4);
															memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
															memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
															ENetPacket* packetsou = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetsou);
															int gemcalc10k = b - 1000 * konvertuotasInt;
															ofstream myfile2;
															myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															myfile2 << std::to_string(gemcalc10k);
															myfile2.close();
															std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															std::string contentx((std::istreambuf_iterator<char>(ifszi)),
																(std::istreambuf_iterator<char>()));
															int updgem = atoi(contentx.c_str());
															GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
															ENetPacket* packetpp = enet_packet_create(pp.data,
																pp.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetpp);
															delete pp.data;
														}
														else
														{
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;
														}
													}
												}
											}
										}
										if (isSapphiresBuyDialog)
										{
											if (infoDat[0] == "sapphiresoffer")
											{
												strSapphiresBuyOffer = infoDat[1];
												bool contains_non_int = !std::regex_match(strSapphiresBuyOffer, std::regex("^[0-9]+$"));
												if (contains_non_int == true)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `bSapphire's `@Format!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													if (strSapphiresBuyOffer.size() > 3 || strSapphiresBuyOffer.size() <= 0)
													{
														continue;
													}
													int konvertuotasInt = stoi(strSapphiresBuyOffer);
													if (konvertuotasInt <= 0 || konvertuotasInt >= 500)
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`bSapphire's `@Should Be Between `91-499`@!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;
														continue;
													}
													else
													{
														std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string content((std::istreambuf_iterator<char>(ifsz)),
															(std::istreambuf_iterator<char>()));
														int b = atoi(content.c_str());
														if (b > 30000 * konvertuotasInt)
														{
															try {
																std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
																json jj;
																if (iffff.fail()) {
																	iffff.close();
																	cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko sapphire!" << endl;
																}
																if (iffff.is_open()) {
																}
																iffff >> jj; //load
																std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
																if (!oo.is_open()) {
																	cout << GetLastError() << endl;
																	_getch();
																}
																int dabarTuri = jj["sapphire"];
																dabarTuri += konvertuotasInt;
																jj["sapphire"] = dabarTuri;
																oo << jj << std::endl;
																//oo.close();
															}
															catch (std::exception& e)
															{
																std::cerr << e.what() << std::endl;
															}
															catch (const std::out_of_range& e) {
																cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
															}
															catch (...) {
																cout << "reading file violation" << endl;
															}
															((PlayerInfo*)(peer->data))->sapphire = ((PlayerInfo*)(peer->data))->sapphire + konvertuotasInt;
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `bSapphire's`9!"));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;
															string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
															BYTE* data = new BYTE[5 + text.length()];
															BYTE zero = 0;
															int type = 3;
															memcpy(data, &type, 4);
															memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
															memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
															ENetPacket* packetsou = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetsou);
															int gemcalc10k = b - 30000 * konvertuotasInt;
															ofstream myfile2;
															myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															myfile2 << std::to_string(gemcalc10k);
															myfile2.close();
															std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															std::string contentx((std::istreambuf_iterator<char>(ifszi)),
																(std::istreambuf_iterator<char>()));
															int updgem = atoi(contentx.c_str());
															GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
															ENetPacket* packetpp = enet_packet_create(pp.data,
																pp.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetpp);
															delete pp.data;
														}
														else
														{
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;
														}
													}
												}
											}
										}
										if (isDiamondsBuyDialog)
										{
											if (infoDat[0] == "diamondsoffer")
											{
												strDiamondsBuyOffer = infoDat[1];
												bool contains_non_int = !std::regex_match(strDiamondsBuyOffer, std::regex("^[0-9]+$"));
												if (contains_non_int == true)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `3Diamond's `@Format!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													if (strDiamondsBuyOffer.size() > 3 || strDiamondsBuyOffer.size() <= 0)
													{
														continue;
													}
													int konvertuotasInt = stoi(strDiamondsBuyOffer);
													if (konvertuotasInt <= 0 || konvertuotasInt >= 500)
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`eDiamond's `@Should Be Between `91-499`@!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;
														continue;
													}
													else
													{
														std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string content((std::istreambuf_iterator<char>(ifsz)),
															(std::istreambuf_iterator<char>()));
														int b = atoi(content.c_str());
														if (b > 100000 * konvertuotasInt)
														{
															try {
																std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
																json jj;
																if (iffff.fail()) {
																	iffff.close();
																	cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko diamond!" << endl;
																}
																if (iffff.is_open()) {
																}
																iffff >> jj; //load
																std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
																if (!oo.is_open()) {
																	cout << GetLastError() << endl;
																	_getch();
																}
																int dabarTuri = jj["diamond"];
																dabarTuri += konvertuotasInt;
																jj["diamond"] = dabarTuri;
																oo << jj << std::endl;
																//oo.close();
															}
															catch (std::exception& e)
															{
																std::cerr << e.what() << std::endl;
															}
															catch (const std::out_of_range& e) {
																cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
															}
															catch (...) {
																cout << "reading file violation" << endl;
															}
															((PlayerInfo*)(peer->data))->diamond = ((PlayerInfo*)(peer->data))->diamond + konvertuotasInt;
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `3Diamond's`9!"));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;
															string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
															BYTE* data = new BYTE[5 + text.length()];
															BYTE zero = 0;
															int type = 3;
															memcpy(data, &type, 4);
															memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
															memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
															ENetPacket* packetsou = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetsou);
															int gemcalc10k = b - 100000 * konvertuotasInt;
															ofstream myfile2;
															myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															myfile2 << std::to_string(gemcalc10k);
															myfile2.close();
															std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															std::string contentx((std::istreambuf_iterator<char>(ifszi)),
																(std::istreambuf_iterator<char>()));
															int updgem = atoi(contentx.c_str());
															GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
															ENetPacket* packetpp = enet_packet_create(pp.data,
																pp.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetpp);
															delete pp.data;
														}
														else
														{
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;
														}
													}
												}
											}
										}
										if (isEmeraldsBuyDialog)
										{
											if (infoDat[0] == "emeraldsoffer")
											{
												strEmeraldsBuyOffer = infoDat[1];
												bool contains_non_int = !std::regex_match(strEmeraldsBuyOffer, std::regex("^[0-9]+$"));
												if (contains_non_int == true)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `2Emerald's `@Format!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													if (strEmeraldsBuyOffer.size() > 3 || strEmeraldsBuyOffer.size() <= 0)
													{
														continue;
													}
													int konvertuotasInt = stoi(strEmeraldsBuyOffer);
													if (konvertuotasInt <= 0 || konvertuotasInt >= 500)
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Emerald's `@Should Be Between `91-499`@!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;
														continue;
													}
													else
													{
														std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string content((std::istreambuf_iterator<char>(ifsz)),
															(std::istreambuf_iterator<char>()));
														int b = atoi(content.c_str());
														if (b > 300000 * konvertuotasInt)
														{
															try {
																std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
																json jj;
																if (iffff.fail()) {
																	iffff.close();
																	cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko emerald!" << endl;
																}
																if (iffff.is_open()) {
																}
																iffff >> jj; //load
																std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
																if (!oo.is_open()) {
																	cout << GetLastError() << endl;
																	_getch();
																}
																int dabarTuri = jj["emerald"];
																dabarTuri += konvertuotasInt;
																jj["emerald"] = dabarTuri;
																oo << jj << std::endl;
																//oo.close();
															}
															catch (std::exception& e)
															{
																std::cerr << e.what() << std::endl;
															}
															catch (const std::out_of_range& e) {
																cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
															}
															catch (...) {
																cout << "reading file violation" << endl;
															}
															((PlayerInfo*)(peer->data))->emerald = ((PlayerInfo*)(peer->data))->emerald + konvertuotasInt;
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `2Emerald's`9!"));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;
															string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
															BYTE* data = new BYTE[5 + text.length()];
															BYTE zero = 0;
															int type = 3;
															memcpy(data, &type, 4);
															memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
															memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
															ENetPacket* packetsou = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetsou);
															int gemcalc10k = b - 300000 * konvertuotasInt;
															ofstream myfile2;
															myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															myfile2 << std::to_string(gemcalc10k);
															myfile2.close();
															std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															std::string contentx((std::istreambuf_iterator<char>(ifszi)),
																(std::istreambuf_iterator<char>()));
															int updgem = atoi(contentx.c_str());
															GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
															ENetPacket* packetpp = enet_packet_create(pp.data,
																pp.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetpp);
															delete pp.data;
														}
														else
														{
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;
														}
													}
												}
											}
										}
										if (isTradingDialog)
										{
											if (infoDat[0] == "itemcount") item1count = infoDat[1];
											if (infoDat[0] == "itemcount2") item2count = infoDat[1];
											if (infoDat[0] == "itemcount3") item3count = infoDat[1];
											if (infoDat[0] == "itemcount4") item4count = infoDat[1];
										}
										if (isTradingDialog)
										{
											int x = 0;
											if (item1count != "")
											{
												bool contains_non_int = !std::regex_match(item1count, std::regex("^[0-9]+$"));
												if (contains_non_int == true)
												{
													((PlayerInfo*)(peer->data))->item1 = 0;
													((PlayerInfo*)(peer->data))->item1count = 0;
													continue;
												}
												if (item1count.size() > 3 || item1count.size() <= 0)
												{
													continue;
												}
												x = stoi(item1count);

												short int currentItemCount = 0;
												for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
												{
													if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->item1)
													{
														currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
													}
												}
												if (x <= 0 || x > currentItemCount) {
													((PlayerInfo*)(peer->data))->item1 = 0;
													((PlayerInfo*)(peer->data))->item1count = 0;
													Player::OnConsoleMessage(peer, "`^That too many or too less to trade!");
													continue;
												}

												if (((PlayerInfo*)(peer->data))->item2 == ((PlayerInfo*)(peer->data))->item1 || ((PlayerInfo*)(peer->data))->item3 == ((PlayerInfo*)(peer->data))->item1 || ((PlayerInfo*)(peer->data))->item4 == ((PlayerInfo*)(peer->data))->item1)
												{
													((PlayerInfo*)(peer->data))->item1 = 0;
													((PlayerInfo*)(peer->data))->item1count = 0;
													continue;
												}

												((PlayerInfo*)(peer->data))->item1count = x;
											}
											if (item2count != "")
											{
												bool contains_non_int = !std::regex_match(item2count, std::regex("^[0-9]+$"));
												if (contains_non_int == true)
												{
													((PlayerInfo*)(peer->data))->item2 = 0;
													((PlayerInfo*)(peer->data))->item2count = 0;
													continue;
												}
												if (item2count.size() > 3 || item2count.size() <= 0)
												{
													continue;
												}
												x = stoi(item2count);

												short int currentItemCount = 0;
												for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
												{
													if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->item2)
													{
														currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
													}
												}
												if (x <= 0 || x > currentItemCount) {
													((PlayerInfo*)(peer->data))->item2 = 0;
													((PlayerInfo*)(peer->data))->item2count = 0;
													Player::OnConsoleMessage(peer, "`^That too many or too less to trade!");
													continue;
												}

												if (((PlayerInfo*)(peer->data))->item1 == ((PlayerInfo*)(peer->data))->item2 || ((PlayerInfo*)(peer->data))->item3 == ((PlayerInfo*)(peer->data))->item2 || ((PlayerInfo*)(peer->data))->item4 == ((PlayerInfo*)(peer->data))->item2)
												{
													((PlayerInfo*)(peer->data))->item2 = 0;
													((PlayerInfo*)(peer->data))->item2count = 0;
													continue;
												}

												((PlayerInfo*)(peer->data))->item2count = x;
											}
											if (item3count != "")
											{
												bool contains_non_int = !std::regex_match(item3count, std::regex("^[0-9]+$"));
												if (contains_non_int == true)
												{
													((PlayerInfo*)(peer->data))->item3 = 0;
													((PlayerInfo*)(peer->data))->item3count = 0;
													continue;
												}
												if (item3count.size() > 3 || item3count.size() <= 0)
												{
													continue;
												}
												x = stoi(item3count);

												short int currentItemCount = 0;
												for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
												{
													if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->item3)
													{
														currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
													}
												}
												if (x <= 0 || x > currentItemCount) {
													((PlayerInfo*)(peer->data))->item3 = 0;
													((PlayerInfo*)(peer->data))->item3count = 0;
													Player::OnConsoleMessage(peer, "`^That too many or too less to trade!");
													continue;
												}

												if (((PlayerInfo*)(peer->data))->item1 == ((PlayerInfo*)(peer->data))->item3 || ((PlayerInfo*)(peer->data))->item2 == ((PlayerInfo*)(peer->data))->item3 || ((PlayerInfo*)(peer->data))->item4 == ((PlayerInfo*)(peer->data))->item2)
												{
													((PlayerInfo*)(peer->data))->item3 = 0;
													((PlayerInfo*)(peer->data))->item3count = 0;
													continue;
												}

												((PlayerInfo*)(peer->data))->item3count = x;
											}
											if (item4count != "")
											{
												bool contains_non_int = !std::regex_match(item4count, std::regex("^[0-9]+$"));
												if (contains_non_int == true)
												{
													((PlayerInfo*)(peer->data))->item4 = 0;
													((PlayerInfo*)(peer->data))->item4count = 0;
													continue;
												}
												if (item4count.size() > 3 || item4count.size() <= 0)
												{
													continue;
												}
												x = stoi(item4count);

												short int currentItemCount = 0;
												for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
												{
													if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->item4)
													{
														currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
													}
												}
												if (x <= 0 || x > currentItemCount) {
													((PlayerInfo*)(peer->data))->item4 = 0;
													((PlayerInfo*)(peer->data))->item4count = 0;
													Player::OnConsoleMessage(peer, "`^That too many or too less to trade!");
													continue;
												}

												if (((PlayerInfo*)(peer->data))->item1 == ((PlayerInfo*)(peer->data))->item4 || ((PlayerInfo*)(peer->data))->item2 == ((PlayerInfo*)(peer->data))->item4 || ((PlayerInfo*)(peer->data))->item3 == ((PlayerInfo*)(peer->data))->item4)
												{
													((PlayerInfo*)(peer->data))->item4 = 0;
													((PlayerInfo*)(peer->data))->item4count = 0;
													continue;
												}

												((PlayerInfo*)(peer->data))->item4count = x;
											}
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;


												tradestatus(peer, ((PlayerInfo*)(currentPeer->data))->netID, "", ((PlayerInfo*)(currentPeer->data))->displayName, "add_slot|" + to_string(((PlayerInfo*)(currentPeer->data))->item1) + "|" + to_string(((PlayerInfo*)(currentPeer->data))->item1count) + "\nadd_slot|" + to_string(((PlayerInfo*)(currentPeer->data))->item2) + "|" + to_string(((PlayerInfo*)(currentPeer->data))->item2count) + "\nadd_slot|" + to_string(((PlayerInfo*)(currentPeer->data))->item3) + "|" + to_string(((PlayerInfo*)(currentPeer->data))->item3count) + "\nadd_slot|" + to_string(((PlayerInfo*)(currentPeer->data))->item4) + "|" + to_string(((PlayerInfo*)(currentPeer->data))->item4count));
												tradestatus(currentPeer, ((PlayerInfo*)(peer->data))->netID, "", ((PlayerInfo*)(peer->data))->displayName, "add_slot|" + to_string(((PlayerInfo*)(peer->data))->item1) + "|" + to_string(((PlayerInfo*)(peer->data))->item1count) + "\nadd_slot|" + to_string(((PlayerInfo*)(peer->data))->item2) + "|" + to_string(((PlayerInfo*)(peer->data))->item2count) + "\nadd_slot|" + to_string(((PlayerInfo*)(peer->data))->item3) + "|" + to_string(((PlayerInfo*)(peer->data))->item3count) + "\nadd_slot|" + to_string(((PlayerInfo*)(peer->data))->item4) + "|" + to_string(((PlayerInfo*)(peer->data))->item4count));
											}
										}
										if (isCreateStoreDialog)
										{
											if (infoDat[0] == "createstorefg")
											{
												createstorefg = infoDat[1];
												bool contains_non_int
													= !std::regex_match(createstorefg, std::regex("^[0-9]+$"));
												if (contains_non_int == true || createstorefg == "")
												{
													Player::OnTextOverlay(peer, "`@You may only use `^Positive `@Numbers to create your own store!");
													break;
												}			
											}

											if (infoDat[0] == "createstorename")
											{
												createstorename = infoDat[1];
												bool contains_non_alpha
													= createstorename.find_first_not_of("abcdefghijklmnopqrstuvwxyz") != std::string::npos;
												if (contains_non_alpha == true || createstorename == "")
												{
													Player::OnTextOverlay(peer, "`@You may only use letters in your store name!");
													break;
												}
											}

											if (infoDat[0] == "createstoredesc")
											{
												createstoredesc = infoDat[1];
												if (createstoredesc.size() < 10)
												{
													Player::OnTextOverlay(peer, "`@Too short description!");
													break;
												}

												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));
												int b = atoi(content.c_str());
												if (b >= 150000)
												{


													time_t _tm = time(NULL);
													struct tm* curtime = localtime(&_tm);
													string test = asctime(curtime);

													string tolog = test + " You have successfully created your store!";
													vector<string> logs = { tolog };

													json j;

													j["fg"] = createstorefg;
													j["name"] = createstorename;
													j["desc"] = createstoredesc;
													j["currentSpaceInStore"] = 5;
													j["logs"] = logs;
													j["newLogs"] = 1;


													json storeReviewall = json::array();
													json storeReview;

													for (int i = 1; i <= 50; i++)
													{
														storeReview["aposition"] = i;
														storeReview["sentBy"] = "";
														storeReview["review"] = "";
														storeReview["stars"] = 0;
														storeReviewall.push_back(storeReview);
													}
													j["storeReview"] = storeReviewall;

												/*	json boughtall = json::array();
													json bought;

													for (int i = 1; i <= 20; i++)
													{
														bought["aposition"] = i;
														bought["itemid"] = 0;
														bought["quantity"] = 0;
														bought["buyerName"] = "";
														bought["buyerMessage"] = "";
														boughtall.push_back(bought);
													}*/
												//	j["boughtItems"] = boughtall;

													json jjall = json::array();
													json jj;

													for (int i = 1; i <= 100; i++)
													{
														jj["aposition"] = i;
														jj["itemid"] = 0;
														jj["quantityOfItems"] = 0;
														jj["sellPer"] = 0;
														jj["sellForItem"] = 0;
														jj["itemDesc"] = "";
														jj["boughtItems"] = 0;
														jjall.push_back(jj);
													}
													j["itemsInStore"] = jjall;


													vector<string> allStores;
													ifstream iffff("storeinfo/stores.json");
													json j2;
													iffff >> j2;
													iffff.close();

													bool arYraToksId = false;
													for (int i = 0; i < j2["owners"].size(); i++)
													{
														allStores.push_back(j2["owners"][i]);
														ifstream iifff("store/" + PlayerDB::getProperName(allStores[i]) + ".json");
														json jh;
														iifff >> jh;
														iifff.close();
														if (jh["name"].get<string>() == createstorename)
														{
															arYraToksId = true;
															break;
														}
													}

													if (arYraToksId == true)
													{
														Player::OnTextOverlay(peer, "`4This name is already taken by another seller! Use another.");
														break;
													}



													int gemcalc10k = b - 150000;
													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();
													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));
													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packetpp);
													delete pp.data;



													allStores.push_back(((PlayerInfo*)(peer->data))->rawName);

													j2["owners"] = allStores;


													std::ofstream oo("store/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
													if (!oo.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}
													oo << j << std::endl;

													std::ofstream oo2("storeinfo/stores.json");
													if (!oo2.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}
													oo2 << j2 << std::endl;

													Player::OnConsoleMessage(peer, "`2You have succeessfully created your own store.");
												}
												else {
													GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4You don't have enough gems."));
													ENetPacket* packetto = enet_packet_create(pto.data,
														pto.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packetto);
													delete pto.data;
													break;
												}

											}

											

										}
										if (isTradeDialog) {
											if (infoDat[0] == "worldoffer")
											{
												bool islegitnow = true;
												strBuyOffer = infoDat[1];
												bool contains_non_int
													= !std::regex_match(strBuyOffer, std::regex("^[0-9]+$"));
												if (contains_non_int == true)
												{
													Player::OnTextOverlay(peer, "`@You may only use `^Positive `@Numbers to begin a Trade!");
												}
												else
												{
													for (int i = 0; i < world->width * world->height; i++)
													{
														if (world->items[i].foreground == 1790) {
															Player::OnTextOverlay(peer, "`@You `4Cannot `@Buy World With `4Untradeable `@Blocks!");
															islegitnow = false;
															continue;
														}
													}
													if (islegitnow == true)
													{
														buyOffer = std::atoi(strBuyOffer.c_str());
														Player::OnTextOverlay(peer, "`2World Trade Request Sended To `c" + ((PlayerInfo*)(peer->data))->lastInfo + "`2! For `4" + strBuyOffer + " `cGems.");
														ENetPeer* currentPeerpx;
														for (currentPeerpx = server->peers;
															currentPeerpx < &server->peers[server->peerCount];
															++currentPeerpx)
														{
															if (currentPeerpx->state != ENET_PEER_STATE_CONNECTED)
																continue;
															if (isHere(peer, currentPeerpx))
															{
																if (((PlayerInfo*)(currentPeerpx->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) // if last wrench
																{
																	Player::OnConsoleMessage(currentPeerpx, ((PlayerInfo*)(peer->data))->displayName + " `2Wants To `cBuy Your World `2For `4" + strBuyOffer + " `cGems. `2Do `c/tradeworld `2To `cAccept/Decline`2!");
																	((PlayerInfo*)(peer->data))->lastBuyer = ((PlayerInfo*)(currentPeerpx->data))->rawName;
																	((PlayerInfo*)(currentPeerpx->data))->lastSeller = ((PlayerInfo*)(peer->data))->rawName;
																	((PlayerInfo*)(currentPeerpx->data))->lastTradeAmount = buyOffer;
																	((PlayerInfo*)(peer->data))->lastTradeAmount = buyOffer;
																	((PlayerInfo*)(currentPeerpx->data))->lastSellWorld = getPlyersWorld(currentPeerpx)->name;
																	((PlayerInfo*)(peer->data))->lastSellWorld = getPlyersWorld(peer)->name;
																}
															}
														}
													}
												}
											}
										}
										if (Accesspicker) {
											if (((PlayerInfo*)(peer->data))->rawName == world->owner) {
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (((PlayerInfo*)(currentPeer->data))->netID == stoi(netid)) {
														if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(currentPeer->data))->rawName) {
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You can't access yourself"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;
														}
														else {
															WorldInfo info;
															world->worldaccess.push_back(((PlayerInfo*)(currentPeer->data))->rawName);
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You got world access!"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet);
															delete p.data;
															GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You gave world access to player! (To remove acc type /unacc name!)"));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;
															//enet_host_flush(server);
															string text = "action|play_sfx\nfile|audio/secret.wav\ndelayMS|0\n";
															BYTE* data = new BYTE[5 + text.length()];
															BYTE zero = 0;
															int type = 3;
															memcpy(data, &type, 4);
															memcpy(data + 4, text.c_str(), text.length());
															memcpy(data + 4 + text.length(), &zero, 1);
															ENetPacket* packet3 = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet3);
														}
													}
												}
											}
										}
										if (infoDat[0] == "dialog_name" && infoDat[1] == "pssdia") 	isPasswordDialog = true;
										if (infoDat[0] == "dialog_name" && infoDat[1] == "grodia") 	isGrowidDialog = true;
										if (infoDat[0] == "dialog_name" && infoDat[1] == "register") isRegisterDialog = true;
										if (infoDat[0] == "dialog_name" && infoDat[1] == "wgmgen") isGenDialog = true;
										if (infoDat[0] == "dialog_name" && infoDat[1] == "useuranusblast") isUranusDialog = true;
										if (infoDat[0] == "dialog_name" && infoDat[1] == "usetelephone") isTeleDialog = true;
										if (infoDat[0] == "dialog_name") dialog_name = infoDat[1];
										//cout << "#20245" << endl;
										if (isPasswordDialog) {
											if (infoDat[0] == "oldpass") oldpass = infoDat[1];
											if (infoDat[0] == "newpass") password2 = infoDat[1];
											if (infoDat[0] == "verifypass")	password2verify = infoDat[1];
										}
										if (isGrowidDialog) {
											if (infoDat[0] == "newgrowid") newgrowid = infoDat[1];
											if (infoDat[0] == "username2") username2 = infoDat[1];
										}
										if (isGenDialog) {
											if (infoDat[0] == "worldname")
											{
												worldname3 = infoDat[1];
												string upsd = worldname3;
												string act = worldname3;
												std::transform(upsd.begin(), upsd.end(), upsd.begin(), ::toupper);
												if (act.find(" ") != string::npos || act.find("  ") != string::npos || act.find(".") != string::npos || act.find("?") != string::npos || act.find(",") != string::npos || act.find("@") != string::npos || act.find("[") != string::npos || act.find("]") != string::npos || act.find("#") != string::npos || act.find("<") != string::npos || act.find(">") != string::npos || act.find(":") != string::npos || act.find("\"") != string::npos || act.find("{") != string::npos || act.find("}") != string::npos || act.find("|") != string::npos || act.find("+") != string::npos || act.find("_") != string::npos || act.find("~") != string::npos || act.find("-") != string::npos || act.find("!") != string::npos || act.find("$") != string::npos || act.find("%") != string::npos || act.find("^") != string::npos || act.find("&") != string::npos || act.find("`") != string::npos || act.find("*") != string::npos || act.find("(") != string::npos || act.find(")") != string::npos || act.find("=") != string::npos || act.find("'") != string::npos || act.find(";") != string::npos || act.find("/") != string::npos) {
													Player::OnTextOverlay(peer, "You cant use symbols in world name");
													Player::OnFailedToEnterWorld(peer);
													continue;
													break;
												}
												bool existx = std::experimental::filesystem::exists("worlds/" + worldname3 + ".json");
												if (!existx)
												{
													if (worldname3.find_first_not_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789") != string::npos) {
														Player::OnConsoleMessage(peer, "`@Symbols are not allowed!");
														continue;
													}
													if (std::all_of(upsd.begin(), upsd.end(), isspace))
													{
														Player::OnConsoleMessage(peer, "`@Spaces are not allowed!");
														continue;
													}
													if (upsd == "CON" || upsd == "PRN" || upsd == "AUX" || upsd == "EXIT" || upsd == "NUL" || upsd == "COM1" || upsd == "COM2" || upsd == "COM3" || upsd == "COM4" || upsd == "COM5" || upsd == "COM6" || upsd == "COM7" || upsd == "COM8" || upsd == "COM9" || upsd == "LPT1" || upsd == "LPT2" || upsd == "LPT3" || upsd == "LPT4" || upsd == "LPT5" || upsd == "LPT6" || upsd == "LPT7" || upsd == "LPT8" || upsd == "LPT9" || upsd == "con" || upsd == "prn" || upsd == "aux" || upsd == "nul" || upsd == "com1" || upsd == "com2" || upsd == "com3" || upsd == "com4" || upsd == "com5" || upsd == "com6" || upsd == "com7" || upsd == "com8" || upsd == "com9" || upsd == "lpt1" || upsd == "lpt2" || upsd == "lpt3" || upsd == "lpt4" || upsd == "lpt5" || upsd == "lpt6" || upsd == "lpt7" || upsd == "lpt8" || upsd == "lpt9")
													{
														Player::OnConsoleMessage(peer, "`@Entered world name is not allowed!");
														continue;
													}
													if (upsd == ((PlayerInfo*)(peer->data))->currentWorld)
													{
														Player::OnTextOverlay(peer, "This world already exists!");
														continue;
													}
													((PlayerInfo*)(peer->data))->passedname = true;
												}
												else {
													Player::OnTextOverlay(peer, "This world already exists!");
												}
											}
											if (infoDat[0] == "worldheight")
											{
												worldheight3 = infoDat[1];
												if (has_only_digits(worldheight3) == false) continue;
												stringstream geek(worldheight3);
												int wheight = 0;
												geek >> wheight;
												if (worldheight3.find_first_not_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789") != string::npos) {
													Player::OnConsoleMessage(peer, "`@Symbols are not allowed!");
													continue;
												}
												if (std::all_of(worldheight3.begin(), worldheight3.end(), isspace))
												{
													Player::OnConsoleMessage(peer, "`@Spaces are not allowed!");
													continue;
												}
												if (wheight > 200 || wheight < 50)
												{
													Player::OnConsoleMessage(peer, "`@Incorrect world height value! It must be between `450 `@and `4200`@!");
													continue;
												}
												((PlayerInfo*)(peer->data))->passedheight = true;
												genheight = wheight;
											}
											if (infoDat[0] == "worldwidth")
											{
												worldwidth3 = infoDat[1];
												if (has_only_digits(worldwidth3) == false) continue;
												stringstream geeks(worldwidth3);
												int wwidth = 0;
												geeks >> wwidth;
												if (worldwidth3.find_first_not_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789") != string::npos) {
													Player::OnConsoleMessage(peer, "`@Symbols are not allowed!");
													continue;
												}
												if (std::all_of(worldwidth3.begin(), worldwidth3.end(), isspace))
												{
													Player::OnConsoleMessage(peer, "`@Spaces are not allowed!");
													continue;
												}
												if (wwidth > 200 || wwidth < 50)
												{
													Player::OnConsoleMessage(peer, "`@Incorrect world width value! It must be between `450 `@and `4200`@!");
													continue;
												}
												((PlayerInfo*)(peer->data))->passedwidth = true;
												genwidth = wwidth;
											}
											if (infoDat[0] == "worldforeground")
											{
												worldforeground3 = infoDat[1];
												if (has_only_digits(worldforeground3) == false) continue;
												stringstream geekss(worldforeground3);
												int wforeground = 0;
												geekss >> wforeground;
												if (worldforeground3.find_first_not_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789") != string::npos) {
													Player::OnConsoleMessage(peer, "`@Symbols are not allowed!");
													continue;
												}
												if (std::all_of(worldforeground3.begin(), worldforeground3.end(), isspace))
												{
													Player::OnConsoleMessage(peer, "`@Spaces are not allowed!");
													continue;
												}
												if (wforeground >= 30 || wforeground < 0)
												{
													Player::OnConsoleMessage(peer, "`@World foreground must be between `40 `@and `430`@!");
													continue;
												}
												((PlayerInfo*)(peer->data))->passedforeground = true;
												genforeground = wforeground;
											}
											if (infoDat[0] == "worldbackground")
											{
												worldbackground3 = infoDat[1];
												if (has_only_digits(worldbackground3) == false) continue;
												stringstream geeksss(worldbackground3);
												int wbackground = 0;
												geeksss >> wbackground;
												if (worldbackground3.find_first_not_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789") != string::npos) {
													Player::OnConsoleMessage(peer, "`@Symbols are not allowed!");
													continue;
												}
												if (std::all_of(worldbackground3.begin(), worldbackground3.end(), isspace))
												{
													Player::OnConsoleMessage(peer, "`@Spaces are not allowed!");
													continue;
												}
												if (wbackground >= 30 || wbackground < 0)
												{
													Player::OnConsoleMessage(peer, "`@World background must be between `40 `@and `430`@!");
													continue;
												}
												((PlayerInfo*)(peer->data))->passedbackground = true;
												genbackground = wbackground;
											}
											if (infoDat[0] == "worldbedrock")
											{
												worldbedrock3 = infoDat[1];
												if (has_only_digits(worldbedrock3) == false) continue;
												stringstream geekssss(worldbedrock3);
												int wbedrock = 0;
												geekssss >> wbedrock;
												if (worldbedrock3.find_first_not_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789") != string::npos) {
													Player::OnConsoleMessage(peer, "`@Symbols are not allowed!");
													continue;
												}
												if (std::all_of(worldbedrock3.begin(), worldbedrock3.end(), isspace))
												{
													Player::OnConsoleMessage(peer, "`@Spaces are not allowed!");
													continue;
												}
												if (wbedrock >= 30 || wbedrock < 0)
												{
													Player::OnConsoleMessage(peer, "`@World bedrock must be between `40 `@and `430`@!");
													continue;
												}
												((PlayerInfo*)(peer->data))->passedbedrock = true;
												genbedrock = wbedrock;
											}
											if (((PlayerInfo*)(peer->data))->passedname == true && ((PlayerInfo*)(peer->data))->passedheight == true && ((PlayerInfo*)(peer->data))->passedwidth == true && ((PlayerInfo*)(peer->data))->passedforeground == true && ((PlayerInfo*)(peer->data))->passedbackground == true && ((PlayerInfo*)(peer->data))->passedbedrock == true)
											{
												usedgenworld = true;
												((PlayerInfo*)(peer->data))->passedname = false;
												((PlayerInfo*)(peer->data))->passedheight = false;
												((PlayerInfo*)(peer->data))->passedwidth = false;
												((PlayerInfo*)(peer->data))->passedforeground = false;
												((PlayerInfo*)(peer->data))->passedbackground = false;
												((PlayerInfo*)(peer->data))->passedbedrock = false;
												WorldInfo info = worldDB.get(worldname3);
												string act = worldname3;
												sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
												joinWorld(peer, act, 0, 0);
											}
										}
										if (isTeleDialog) {
											if (infoDat[0] == "telephonenumber")
											{
												telefonas = infoDat[1];
												if (telefonas.size() > 5 || telefonas.size() <= 0)
												{
													continue;
												}
												if (telefonas != "12345")
												{
													Player::OnTextOverlay(peer, "This phone number does not exist!");
												}
												else {
													Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`wLocke The Salesman``|left|2398|0|0|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oI'm selling all kind of `9Stuff `oFor `9Various Items `oTell Me, Which kind of `9Stuff `oDo you want to `^Buy`o?|\nadd_spacer|small|\nadd_button|purchaseyellowcrystal|`oPurchase `9Yellow Crystal `o(`@15 `2Green Crystals`o)|\nadd_button|purchaselegendaryorb|`oPurchase `8Legendary Orb `o(`@1 `cSummer Clash Ticket`o)|\nadd_spacer|small|\nadd_button|store|`#Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
												}
											}
										}
										if (isUranusDialog) {
											if (infoDat[0] == "uranusname")
											{
												Player::OnConsoleMessage(peer, "this item is currently disabled");
												continue;
												uranusnames = infoDat[1];
												string upsd = uranusnames;
												string act = uranusnames;
												std::transform(upsd.begin(), upsd.end(), upsd.begin(), ::toupper);
												if (act.find(" ") != string::npos || act.find("  ") != string::npos || act.find(".") != string::npos || act.find("?") != string::npos || act.find(",") != string::npos || act.find("@") != string::npos || act.find("[") != string::npos || act.find("]") != string::npos || act.find("#") != string::npos || act.find("<") != string::npos || act.find(">") != string::npos || act.find(":") != string::npos || act.find("\"") != string::npos || act.find("{") != string::npos || act.find("}") != string::npos || act.find("|") != string::npos || act.find("+") != string::npos || act.find("_") != string::npos || act.find("~") != string::npos || act.find("-") != string::npos || act.find("!") != string::npos || act.find("$") != string::npos || act.find("%") != string::npos || act.find("^") != string::npos || act.find("&") != string::npos || act.find("`") != string::npos || act.find("*") != string::npos || act.find("(") != string::npos || act.find(")") != string::npos || act.find("=") != string::npos || act.find("'") != string::npos || act.find(";") != string::npos || act.find("/") != string::npos) {
													Player::OnTextOverlay(peer, "You cant use symbols in world name");
													Player::OnFailedToEnterWorld(peer);
													continue;
													break;
												}
												bool existx = std::experimental::filesystem::exists("worlds/" + uranusnames + ".json");
												if (!existx)
												{
													if (worldname3.find_first_not_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789") != string::npos) {
														Player::OnConsoleMessage(peer, "`@Symbols are not allowed!");
														continue;
													}
													if (std::all_of(upsd.begin(), upsd.end(), isspace))
													{
														Player::OnConsoleMessage(peer, "`@Spaces are not allowed!");
														continue;
													}
													if (upsd == "CON" || upsd == "EXIT" || upsd == "PRN" || upsd == "AUX" || upsd == "NUL" || upsd == "COM1" || upsd == "COM2" || upsd == "COM3" || upsd == "COM4" || upsd == "COM5" || upsd == "COM6" || upsd == "COM7" || upsd == "COM8" || upsd == "COM9" || upsd == "LPT1" || upsd == "LPT2" || upsd == "LPT3" || upsd == "LPT4" || upsd == "LPT5" || upsd == "LPT6" || upsd == "LPT7" || upsd == "LPT8" || upsd == "LPT9" || upsd == "con" || upsd == "prn" || upsd == "aux" || upsd == "nul" || upsd == "com1" || upsd == "com2" || upsd == "com3" || upsd == "com4" || upsd == "com5" || upsd == "com6" || upsd == "com7" || upsd == "com8" || upsd == "com9" || upsd == "lpt1" || upsd == "lpt2" || upsd == "lpt3" || upsd == "lpt4" || upsd == "lpt5" || upsd == "lpt6" || upsd == "lpt7" || upsd == "lpt8" || upsd == "lpt9")
													{
														Player::OnConsoleMessage(peer, "`@Entered world name is not allowed!");
														continue;
													}
													if (upsd == ((PlayerInfo*)(peer->data))->currentWorld)
													{
														Player::OnTextOverlay(peer, "This world already exists!");
														continue;
													}
													RemoveInventoryItem(8428, 1, peer);
													useduranusblast = true;
													WorldInfo info = worldDB.get(uranusnames);
													string act = uranusnames;
													sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
													joinWorld(peer, act, 0, 0);
													ENetPeer* currentPeer;
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (isHere(peer, currentPeer))
														{
															if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT")
															{
																getPlyersWorld(peer)->weather = 17;
															}
															GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), 17));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet2);
															delete p2.data;
															continue;
														}
													}
												}
												else {
													Player::OnTextOverlay(peer, "This world already exists!");
												}
											}
										}
										if (isRegisterDialog) {
											if (infoDat[0] == "username")
											{
												username = infoDat[1];
												restrictedname = username;
												toUpperCase(restrictedname);
												//cout << "user typed: " + restrictedname;
												string cleanrname = std::regex_replace(restrictedname, std::regex("^ +| +$|( ) +"), "$1");
												if (restrictedname == "CON" || restrictedname == "NUL" || restrictedname == "PRN" || restrictedname == "AUX" || restrictedname == "CLOCK$" || restrictedname == "COM0" || restrictedname == "COM1" || restrictedname == "COM2" || restrictedname == "COM3" || restrictedname == "COM4" || restrictedname == "COM5" || restrictedname == "COM6" || restrictedname == "COM7" || restrictedname == "COM8" || restrictedname == "COM9" || restrictedname == "LPT0" || restrictedname == "LPT1" || restrictedname == "LPT2" || restrictedname == "LPT3" || restrictedname == "LPT4" || restrictedname == "LPT5" || restrictedname == "LPT6" || restrictedname == "LPT7" || restrictedname == "LPT8" || restrictedname == "LPT9")
												{
													enet_peer_disconnect_now(peer, 0);
												}
												else
												{
													((PlayerInfo*)(peer->data))->canCreate == true;
												}
											}
											if (infoDat[0] == "password") password = infoDat[1];
											if (infoDat[0] == "passwordverify") passwordverify = infoDat[1];
											//if (infoDat[0] == "email") email = infoDat[1];
											if (infoDat[0] == "discord") discord = infoDat[1];
											if (infoDat[0] == "code") pin = infoDat[1];
										}
										//cout << "#20485" << endl;
									}
									if (isEntranceDialog) {
										if (infoDat[0] == "opentopublic") entranceresult = infoDat[1];
										if (entranceresult == "1") {
											world->items[((PlayerInfo*)(peer->data))->wrenchx + (((PlayerInfo*)(peer->data))->wrenchy * world->width)].isOpened = true;
											updateEntrance(peer, world->items[((PlayerInfo*)(peer->data))->wrenchx + (((PlayerInfo*)(peer->data))->wrenchy * world->width)].foreground, ((PlayerInfo*)(peer->data))->wrenchx, ((PlayerInfo*)(peer->data))->wrenchy, true, world->items[((PlayerInfo*)(peer->data))->wrenchx + (((PlayerInfo*)(peer->data))->wrenchy * world->width)].background);
										}
										else {
											world->items[((PlayerInfo*)(peer->data))->wrenchx + (((PlayerInfo*)(peer->data))->wrenchy * world->width)].isOpened = false;
											updateEntrance(peer, world->items[((PlayerInfo*)(peer->data))->wrenchx + (((PlayerInfo*)(peer->data))->wrenchy * world->width)].foreground, ((PlayerInfo*)(peer->data))->wrenchx, ((PlayerInfo*)(peer->data))->wrenchy, false, world->items[((PlayerInfo*)(peer->data))->wrenchx + (((PlayerInfo*)(peer->data))->wrenchy * world->width)].background);
										}
									}
									if (isMailDialog) {
										if (mail.length() < 3) {
											GamePacket p2 = packetEnd(appendIntx(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`4Your text is too short!``"), 0), 1));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											break;
										}
										if (mail.length() > 10) {
											GamePacket p2 = packetEnd(appendIntx(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`4Your text is too long!``"), 0), 1));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											break;
										}
										WorldInfo* worldInfo = getPlyersWorld(peer);
										int squaresign = ((PlayerInfo*)(peer->data))->wrenchx + (((PlayerInfo*)(peer->data))->wrenchy * world->width);
										worldInfo->items[squaresign].mailbox.push_back("`w" + ((PlayerInfo*)(peer->data))->tankIDName + ": `5" + mail);
										GamePacket p2 = packetEnd(appendIntx(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`2Bulletin posted``"), 0), 1));


										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									if (isPwdDoorDialog) {
										PlayerInfo* pinfo = (PlayerInfo*)peer->data;
										if (passwords != world->items[pinfo->wrenchsession].password) {
											GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`4Wrong password"));
											ENetPacket* packet3 = enet_packet_create(p3.data,
												p3.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet3);
											delete p3.data;
											break;
										}
										else if (passwords == world->items[pinfo->wrenchsession].password) {
											GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`2Door opened!"));
											ENetPacket* packet3 = enet_packet_create(p3.data,
												p3.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet3);
											delete p3.data;
											DoEnterDoor(peer, world, pinfo->wrenchsession % world->width, pinfo->wrenchsession / world->width);
											break;
										}
									}
									if (isGuildDialog) {
										if (infoDat[0] == "gname") gguildname = infoDat[1];
										if (infoDat[0] == "gstatement") gguildstatement = infoDat[1];
										if (infoDat[0] == "ggcflagbg") gguildflagbg = infoDat[1];
										if (infoDat[0] == "ggcflagfg") gguildflagfg = infoDat[1];
									}
									if (isGuildDialog) {

										int GCState = PlayerDB::guildRegister(peer, gguildname, gguildstatement, gguildflagbg, gguildflagfg);
										if (GCState == -1) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because special characters isnt allowed!``"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										else if (GCState == -2) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because guild name is too short!``"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										else if (GCState == -3) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because guild name is too long!``"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										else if (GCState == -4) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because the guild name is already taken!``"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										else if (GCState == -5) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because the background block must be a number!``"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										if (GCState == -6) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because the foreground block must be a number!``"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										else if (GCState == -7) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because the background id is too long!``"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										if (GCState == -8) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because the foreground id is too long!``"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										else {
											if (GCState == 1) {
												((PlayerInfo*)(peer->data))->createGuildName = gguildname;
												((PlayerInfo*)(peer->data))->createGuildStatement = gguildstatement;
												((PlayerInfo*)(peer->data))->createGuildFlagBg = gguildflagbg;
												((PlayerInfo*)(peer->data))->createGuildFlagFg = gguildflagfg;
												GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wGrow Guild|left|242|\nadd_textbox|`1Guild Name: `o" + gguildname + "``|\nadd_textbox|`1Guild Statement: `o" + gguildstatement + "``|\nadd_label_with_icon|small|`1<-Guild Flag Background``|left|" + gguildflagbg + "|\nadd_label_with_icon|small|`1<-Guild Flag Foreground``|left|" + gguildflagfg + "|\n\nadd_spacer|small|\nadd_textbox|`oCost: `4250,000 Gems``|\n\nadd_spacer|small|\nadd_button|confirmcreateguild|`oCreate Guild``|\nend_dialog||`wCancel``||\n"));
												ENetPacket* packet = enet_packet_create(ps.data,
													ps.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete ps.data;
											}
										}
									}
								}
								int x = ((PlayerMoving*)(peer->data))->punchX;
								int y = ((PlayerMoving*)(peer->data))->punchY;
								int causedBy = ((PlayerMoving*)(peer->data))->netID;
								int tile = ((PlayerMoving*)(peer->data))->plantingTree;
								if (btn == "rankupmenu") {
									string nextlvlname = "";
									int Pgems = 0;
									ifstream gemfd("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									gemfd >> Pgems;
									gemfd.close();
									int Pruby = ((PlayerInfo*)(peer->data))->rubble;
									int Pamber = ((PlayerInfo*)(peer->data))->amber;
									int Pgold = ((PlayerInfo*)(peer->data))->gold;
									int Pdiamond = ((PlayerInfo*)(peer->data))->diamond;
									int Popal = ((PlayerInfo*)(peer->data))->opal;
									int Psapphire = ((PlayerInfo*)(peer->data))->sapphire;
									int Pemerald = ((PlayerInfo*)(peer->data))->emerald;
									int gems = 120000;
									int amber = 1300;
									int opal = 1060;
									int gold = 730;
									int ruby = 490;
									int sapphire = 340;
									int diamond = 280;
									int emerald = 180;
									int kiek, lvl;
									ifstream fd("rankup.txt");
									fd >> kiek;
									for (int i = 0; i < kiek; i++)
									{
										fd >> lvl >> nextlvlname;
										if (((PlayerInfo*)(peer->data))->adminLevel == lvl)
										{
											amber *= i + 1;
											opal *= i + 1;
											gold *= i + 1;
											ruby *= i + 1;
											sapphire *= i + 1;
											diamond *= i + 1;
											emerald *= i + 1;
											gems *= i + 1;
											break;
										}
									}
									if (nextlvlname != "NONE") {
										((PlayerInfo*)(peer->data))->rankupInfo.nextlvlName = nextlvlname;
										if (((PlayerInfo*)(peer->data))->adminLevel == 999)
										{
											((PlayerInfo*)(peer->data))->rankupInfo.nextRankId = 1000;
										}
										else
										{
											((PlayerInfo*)(peer->data))->rankupInfo.nextRankId = lvl + 111;
										}
										((PlayerInfo*)(peer->data))->rankupInfo.gems = gems;
										((PlayerInfo*)(peer->data))->rankupInfo.amber = amber;
										((PlayerInfo*)(peer->data))->rankupInfo.opal = opal;
										((PlayerInfo*)(peer->data))->rankupInfo.gold = gold;
										((PlayerInfo*)(peer->data))->rankupInfo.ruby = ruby;
										((PlayerInfo*)(peer->data))->rankupInfo.sapphire = sapphire;
										((PlayerInfo*)(peer->data))->rankupInfo.diamond = diamond;
										((PlayerInfo*)(peer->data))->rankupInfo.emerald = emerald;
										Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`7Rankup``|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oYou have: `1" + to_string(Pamber) + " `8Amber's`0!|left|1432|small|\nadd_textbox|`oYou have: `1" + to_string(Popal) + " `1Opal's`0!|left|1432|small|\nadd_textbox|`oYou have: `1" + to_string(Pgold) + " `9Gold's`0!|left|1432|small|\nadd_textbox|`oYou have: `1" + to_string(Pruby) + " `4Ruby's`0!|left|1432|small|\nadd_textbox|`oYou have: `1" + to_string(Psapphire) + " `bSapphire's`0!|left|1432|small|\nadd_textbox|`oYou have: `1" + to_string(Pdiamond) + " `3Diamond's`0!|left|1432|small|\nadd_textbox|`oYou have: `1" + to_string(Pemerald) + " `2Emerald's`0!|left|1432|small|\nadd_textbox|`oYou have: `1" + to_string(Pgems) + " `9Gem's`0|left|826|\nadd_spacer|small|\nadd_textbox|`oTo `5upgrade `oyou need " + to_string(amber) + " `8Amber's`o!|left|1432|small|\nadd_textbox|`oTo `5upgrade `oyou need " + to_string(opal) + " `1Opal's`o!|left|1432|small|\nadd_textbox|`oTo `5upgrade `oyou need " + to_string(gold) + " `9Gold's`o!|left|1432|small|\nadd_textbox|`oTo `5upgrade `oyou need " + to_string(ruby) + " `4Ruby's`o!|left|1432|small|\nadd_textbox|`oTo `5upgrade `oyou need " + to_string(sapphire) + " `bSapphire's`o!|left|1432|small|\nadd_textbox|`oTo `5upgrade `oyou need " + to_string(diamond) + " `3Diamond's`o!|left|1432|small|\nadd_textbox|`oTo `5upgrade `oyou need " + to_string(emerald) + " `2Emerald's`o!|left|1432|small|\nadd_textbox|`oTo `5upgrade `oyou need " + to_string(gems) + " `9Gem's`o!|left|826|\nadd_spacer|\nadd_label_with_icon|small|`7Your next available rank is `1" + nextlvlname + "`7. Ranking UP will give you new commands and new features!|left|112|\nadd_spacer|small|\nadd_button|rankup|`2Rankup!|0|0|\nadd_spacer|\nadd_quick_exit");
									}
									else
									{
										Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`8Whoops!``|left|1048|\nadd_spacer|small|\nadd_label_with_icon|small|`4Unfortunately `oyou are the highest rank of all available ranks!|left|6126|\nadd_spacer|small|\nadd_button|close|`8Close|0|0|\nadd_spacer|\nadd_quick_exit");
									}
									fd.close();
								}
								if (btn == "prostores") {
									Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label|big|`wSelect The Category!|left|\n\nadd_spacer|small|small|\nadd_button|defaultstore|`cGrowLand `4Store|noflags|3233|\nadd_button|farmstore|`cFarmables `4Store|noflags|2622|small|left|212|\nadd_button|lockstore|`cLocks `4Store|noflags|2622|small|left|212|\nadd_button|tokenstore|`cGrowtokens `4Store|noflags|2322|small|left|212|\nadd_button|winterstore|`cWinter Tokens `4Store|noflags|2322|small|left|212|\nadd_spacer|\nadd_button|close|`2Close|\n");
								}
								if (btn == "market")
								{
									GTDialog store;
									store.addLabelWithIcon("`wMarket Place", 1430, LABEL_BIG);
									store.addSpacer(SPACER_SMALL);
									store.addLabelWithIcon("`wOwn store:", 1434, LABEL_SMALL);
									bool existx = std::experimental::filesystem::exists("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
									if (!existx)
									{
										store.addSmallText("`wYou don't have store right now. You can create it for 150.000 gems.");
										store.addSpacer(SPACER_SMALL);
										store.addButton("createstore", "Create my store.");
									}
									else
									{
										ifstream ifff("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
										json j;
										ifff >> j;
										ifff.close();

										string ownedFgItemID = "2";
										string ownedStoreName = "0";
										ownedFgItemID = j["fg"].get<string>();
										ownedStoreName = j["name"].get<string>();

										//store.addStaticBlueFrame(ownedFgItemID, ownedStoreName,"entermystore", true);
										store.addItemWithCustomText(ownedFgItemID, ownedStoreName, "entermystore");
										store.addSpacer(SPACER_SMALL);
									}
									store.addSpacer(SPACER_BIG);
									store.addLabelWithIcon("`wPlayer's store:", 1434, LABEL_SMALL);

									bool existx2 = std::experimental::filesystem::exists("storeinfo/stores.json");
									if (!existx2)
									{
										store.addSmallText("`wThere is no any stores yet.");
									}
									else
									{
										vector<string> allStores;

										ifstream iffff("storeinfo/stores.json");
										json j2;
										iffff >> j2;
										iffff.close();
										for (int i = 0; i < j2["owners"].size(); i++)
										{
											allStores.push_back(j2["owners"][i]);
										}

										if (allStores.size() == 0 || (allStores[0] == ((PlayerInfo*)(peer->data))->rawName && allStores.size() == 1))
										{
											store.addSmallText("`wThere is no any stores yet.");
										}
										else
										{
											for (int i = 0; i < allStores.size(); i++)
											{
												if (allStores[i] == ((PlayerInfo*)(peer->data))->rawName)
												{
													continue;
												}
												ifstream ifffff("store/" + allStores[i] + ".json");
												json j3;
												ifffff >> j3;
												ifffff.close();

												/*if (i % 6 == 0 && i != 0) {
													store.addStaticBlueFrame(j3["fg"].get<string>(), j3["name"].get<string>(),"storeitem_"+ allStores[i] +"", true);
												}
												else {
													store.addStaticBlueFrame(j3["fg"].get<string>(), j3["name"].get<string>(),"storeitem_"+ allStores[i] +"", false);
												}*/

												store.addItemWithCustomText(j3["fg"].get<string>(), j3["name"].get<string>(), "storeitem_" + allStores[i] + "");

											}

										}
									}

									store.addSpacer(SPACER_SMALL);
									store.addQuickExit();
									store.endDialog("Close", "Close", "");
									Player::OnDialogRequest(peer, store.finishDialog());
								}
								if (btn == "entermystore")
								{
									GTDialog myStore;
									myStore.addLabelWithIcon("`wMy store", 1430, LABEL_BIG);
									myStore.addSpacer(SPACER_SMALL);
									bool existx = std::experimental::filesystem::exists("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
									if (!existx)
									{
										myStore.addSmallText("`wYou don't have store right now. You can create it for 150.000 gems.");
										myStore.addSpacer(SPACER_SMALL);
										myStore.addButton("createstore", "Create my store.");
									}
									else
									{
										ifstream ifff("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
										json j;
										ifff >> j;
										ifff.close();

										string ownedFgItemID = "2";
										string ownedStoreName = "0";
										int currentSpaceInStore = 0;
										ownedFgItemID = j["fg"].get<string>();
										ownedStoreName = j["name"].get<string>();
										currentSpaceInStore = j["currentSpaceInStore"];
										
										int upgradeFor = 0;

										if (currentSpaceInStore < 20)
										{
											if (currentSpaceInStore == 5) upgradeFor = 150000 * 2;
											else if (currentSpaceInStore == 10) upgradeFor = (150000 * 2)*2;
											else if (currentSpaceInStore == 15) upgradeFor = ((150000 * 2)*2)*2;
											myStore.addSmallText("`wYou can upgrade your current space from "+ to_string(currentSpaceInStore) +" to "+ to_string(currentSpaceInStore+5) +" in your store to place more items for " + to_string(upgradeFor));
											myStore.addButton("upgradeCurrentSpace", "Upgrade for " + to_string(upgradeFor));
										}
										else
										{
											myStore.addSmallText("`wYour store items space is maxed(20)!");
										}
										myStore.addSpacer(SPACER_SMALL);
										
										if (j["newLogs"] > 0)
										{
											myStore.addSmallText("`2There are new notifications in your store.");
											myStore.addButton("readStoreNotifications", "Read them.");
										}
										else
										{
											myStore.addSmallText("`4There are no new notifications in your store.");
										}
										
										myStore.addSpacer(SPACER_SMALL);
										myStore.addSmallText("`$Placed items in your store:");
										myStore.addPicker("addItemToStore", "Add item for sale.", "Which item you wanna place on sale?");
										int kiekItemuBus = 0;
										int id;
										int kiekis;
										int aPosition;
										for (int i = 0; i < j["itemsInStore"].size(); i++)
										{
											if (j["itemsInStore"][i]["itemid"] != 0)
											{
												kiekItemuBus++;
												aPosition = j["itemsInStore"][i]["aposition"];
												id = j["itemsInStore"][i]["itemid"];
												kiekis = j["itemsInStore"][i]["quantityOfItems"];
											
												if (i % 6 == 0 && i != 0) {
													myStore.addStaticBlueFrame(to_string(id),to_string(kiekis), "myStoreItemEnter_"+ to_string(aPosition), true);
												}
												else {
													myStore.addStaticBlueFrame(to_string(id), to_string(kiekis), "myStoreItemEnter_"+ to_string(aPosition), false);
												}

												
											}
										}
										if (kiekItemuBus == 0)
										{
											myStore.addSmallText("`4There are no items placed in your store! `$You can add for sale some.");
										}
										else
										{
											myStore.addNewLineAfterFrame();
										}

										myStore.addSpacer(SPACER_SMALL);

										myStore.addSmallText("`2Tired of selling items? `4You can Abandon from your store.");
										myStore.addButton("abandonStore", "Abandon.");
										myStore.addSpacer(SPACER_SMALL);

									}
									myStore.addSpacer(SPACER_SMALL);
									myStore.addQuickExit();
									myStore.endDialog("Close", "", "Close my store");
									Player::OnDialogRequest(peer, myStore.finishDialog());
								}
								if (btn == "pickupdisplayitem")
								{
									if (((PlayerInfo*)(peer->data))->rawName == world->owner || world->owner == "") {
										string world = ((PlayerInfo*)(peer->data))->currentWorld;
										int squaresign = ((PlayerInfo*)(peer->data))->blockx + (((PlayerInfo*)(peer->data))->blocky * 100);
										short dfg = ((PlayerInfo*)(peer->data))->displayfg;
										short dbg = ((PlayerInfo*)(peer->data))->displaybg;
										int hi = ((PlayerInfo*)(peer->data))->displaypunchx;
										int hi2 = ((PlayerInfo*)(peer->data))->displaypunchy;
										((PlayerInfo*)(peer->data))->displayfg = 0;
										((PlayerInfo*)(peer->data))->displaybg = 0;
										((PlayerInfo*)(peer->data))->displaypunchx = 0;
										((PlayerInfo*)(peer->data))->displaypunchy = 0;
										string receivedid;
										string currentworld = world + "X" + std::to_string(squaresign);
										ifstream getdisplay("display/" + currentworld + ".txt");
										getdisplay >> receivedid;
										getdisplay.close();
										bool displayexist = std::experimental::filesystem::exists("display/" + currentworld + ".txt");
										if (displayexist) {
											remove(("display/" + currentworld + ".txt").c_str());
											Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "You removed `5" + getItemDef(stoi(receivedid)).name + " `wfrom the Display Block.", 0, true);
											bool success = true;
											SaveItemMoreTimes(stoi(receivedid), 1, peer, success);
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer)) {
													SendDisplayBlock(currentPeer, dfg, dbg, hi, hi2, 0);
												}
											}
										}
										else {
											Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "Error occured while trying to remove item!", 0, true);
											continue;
										}
									}
									else {
										autoBan(peer, true, 24, "yes");
									}
								}
								if (btn == "createstore")
								{
									bool existx = std::experimental::filesystem::exists("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
									if (existx)
									{
										continue;
									}

									GTDialog store;
									store.addLabelWithIcon("`wCreate your store!", 1430, LABEL_BIG);
									store.addSpacer(SPACER_SMALL);
									store.addLabelWithIcon("`4Warning: `wto create your own store you need 150.000 gems. You will be able to sell all items from your inventory.", 1434, LABEL_SMALL);
									store.addSpacer(SPACER_SMALL);
									store.addInputBox("createstorefg", "Enter foreground id", "", 4);
									store.addInputBox("createstorename", "Enter store name", "", 20);
									store.addInputBox("createstoredesc", "Enter description", "", 50);
									store.addSpacer(SPACER_SMALL);
									
									store.addQuickExit();
									store.endDialog("createstoreconfirm", "Create store", "Cancel");
									Player::OnDialogRequest(peer, store.finishDialog());
								}
								if (btn == "upgradeCurrentSpace")
								{
									bool existx = std::experimental::filesystem::exists("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
									if (!existx)
									{
										continue;
									}

									ifstream ifff("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
									json j;
									ifff >> j;
									ifff.close();

									int currentSpaceInStore = j["currentSpaceInStore"];

									int upgradeFor = 0;

									if (currentSpaceInStore < 20)
									{
										if (currentSpaceInStore == 5) upgradeFor = 150000 * 2;
										else if (currentSpaceInStore == 10) upgradeFor = (150000 * 2) * 2;
										else if (currentSpaceInStore == 15) upgradeFor = ((150000 * 2) * 2) * 2;
										std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string content((std::istreambuf_iterator<char>(ifsz)),
											(std::istreambuf_iterator<char>()));
										int b = atoi(content.c_str());
										if (b >= upgradeFor)
										{
											int gemcalc10k = b - upgradeFor;
											ofstream myfile2;
											myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											myfile2 << std::to_string(gemcalc10k);
											myfile2.close();
											std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string contentx((std::istreambuf_iterator<char>(ifszi)),
												(std::istreambuf_iterator<char>()));
											int updgem = atoi(contentx.c_str());
											GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
											ENetPacket* packetpp = enet_packet_create(pp.data,
												pp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packetpp);
											delete pp.data;

											j["currentSpaceInStore"] = currentSpaceInStore + 5;

											std::ofstream oo("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
											if (!oo.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}
											oo << j << std::endl;

											Player::OnConsoleMessage(peer, "`2You have succeessfully increased your store items space to `$"+ to_string(currentSpaceInStore+5) + " `2for "+ to_string(upgradeFor));
										}
										else {
											GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4You don't have enough gems."));
											ENetPacket* packetto = enet_packet_create(pto.data,
												pto.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packetto);
											delete pto.data;
											continue;
										}
									}
									else
									{
										Player::OnTextOverlay(peer, "`4Current Space in store is already full!");
									}
								}
								if (btn == "readStoreNotifications")
								{
									bool existx = std::experimental::filesystem::exists("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
									if (!existx)
									{
										continue;
									}

									ifstream ifff("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
									json j;
									ifff >> j;
									ifff.close();

									GTDialog notifications;
									notifications.addLabelWithIcon("`4Notifications!", 1430, LABEL_BIG);

									string log;
									cout << j["logs"].size() << endl;
									for (int i = 0; i < j["logs"].size(); i++)
									{
										notifications.addSpacer(SPACER_SMALL);
										log = j["logs"][i].get<string>();
										log.erase(std::remove(log.begin(), log.end(), '\n'), log.end());
										notifications.addSmallText("`$"+to_string(i+1)+") `#"+ log);
									}
									notifications.addSpacer(SPACER_SMALL);
									notifications.addQuickExit();
									notifications.endDialog("Close", "", "Close");
									Player::OnDialogRequest(peer, notifications.finishDialog());

									j["newLogs"] = 0;

									std::ofstream oo("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}
									oo << j << std::endl;
								}
								if (btn == "abandonStore")
								{
									GTDialog abandon;
									abandon.addLabelWithIcon("`wAre you sure?", 1430, LABEL_SMALL);
									abandon.addSmallText("`$Are you sure that you want to abandon from your store?");
									abandon.addSmallText("`#Note: make sure that you have withdrawn all earnings and removed all items from your store, otherwise, they will be removed.");
									abandon.addSpacer(SPACER_SMALL);
									abandon.addButton("confirmabandonStore", "Yes, abandon.");

									abandon.addQuickExit();
									abandon.endDialog("Close", "", "No, Close it.");
									Player::OnDialogRequest(peer, abandon.finishDialog());
								}
								if (btn == "confirmabandonStore")
								{
									bool existx = std::experimental::filesystem::exists("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
									if (!existx)
									{
										continue;
									}

									remove(("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json").c_str());

									ifstream iffff("storeinfo/stores.json");
									json j2;
									iffff >> j2;
									iffff.close();
									vector<string> allStores;
									for (int i = 0; i < j2["owners"].size(); i++)
									{
										allStores.push_back(j2["owners"][i]);
									}

									for (int i = 0; i < allStores.size(); i++)
									{
										if (allStores[i] == ((PlayerInfo*)(peer->data))->rawName)
										{
											allStores.erase(std::remove(allStores.begin(), allStores.end(), ((PlayerInfo*)(peer->data))->rawName), allStores.end());
										}
									}

									j2["owners"] = allStores;

									std::ofstream oo2("storeinfo/stores.json");
									if (!oo2.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}
									oo2 << j2 << std::endl;

									Player::OnTextOverlay(peer, "`bSuccessfully abandoned from the store!");
								}
								if (btn.substr(0, 10) == "storeitem_")
								{
									string whoseStore = btn.substr(btn.find("_") + 1);

									bool existx = std::experimental::filesystem::exists("store/" + PlayerDB::getProperName(whoseStore) + ".json");
									if (!existx)
									{
										Player::OnTextOverlay(peer, "`4 Store does not exist");
										continue;
									}


									ifstream ifff("store/" + PlayerDB::getProperName(whoseStore) + ".json");
									json j;
									ifff >> j;
									ifff.close();

									GTDialog playerStore;

									playerStore.addLabelWithIcon("`w"+whoseStore+"'s store.", 1434, LABEL_SMALL);
									playerStore.addSpacer(SPACER_SMALL);
									playerStore.addButton("storeReview_" + whoseStore + "", "Wanna write a review about this store?");
									playerStore.addSpacer(SPACER_SMALL);
									playerStore.addButton("storeReviewCheck_" + whoseStore + "", "Wanna check this store's reviews?");
									playerStore.addSpacer(SPACER_SMALL);
									playerStore.addSmallText("`$Store description: `#" + j["desc"].get<string>() + "");
									playerStore.addSpacer(SPACER_SMALL);
									playerStore.addSmallText("`$"+whoseStore+"'s selling items:");


									int kiekItemuBus = 0;
									int id;
									int kiekis;
									int aPosition;
									for (int i = 0; i < j["itemsInStore"].size(); i++)
									{
										if (j["itemsInStore"][i]["itemid"] != 0)
										{
											kiekItemuBus++;
											aPosition = j["itemsInStore"][i]["aposition"];
											id = j["itemsInStore"][i]["itemid"];
											kiekis = j["itemsInStore"][i]["quantityOfItems"];
										
											if (i % 6 == 0 && i != 0) {
												playerStore.addStaticBlueFrame(to_string(id), to_string(kiekis), "playerStoreItemEnter_" + to_string(aPosition)+"_"+ whoseStore, true);
											}
											else {
												playerStore.addStaticBlueFrame(to_string(id), to_string(kiekis), "playerStoreItemEnter_" + to_string(aPosition) + "_" + whoseStore, false);
											}
											
										}
									}
									if (kiekItemuBus == 0)
									{
										playerStore.addSmallText("`4There are no items placed in this store!");
									}
									else
									{
										playerStore.addNewLineAfterFrame();
									}

									playerStore.addSpacer(SPACER_SMALL);

									playerStore.addQuickExit();
									playerStore.endDialog("Close", "", "Close "+whoseStore+"'s store.");
									Player::OnDialogRequest(peer, playerStore.finishDialog());

								}
								if (btn.substr(0, 12) == "storeReview_")
								{
									string whoseStore = btn.substr(btn.find("_") + 1);
									bool existx = std::experimental::filesystem::exists("store/" + PlayerDB::getProperName(whoseStore) + ".json");
									if (!existx)
									{
										Player::OnTextOverlay(peer, "`4Store does not exist");
										continue;
									}

									GTDialog playerReviewStore;

									playerReviewStore.addLabelWithIcon("`wApply a review for " + whoseStore + "'s store.", 1434, LABEL_SMALL);							
									playerReviewStore.addInputBox("storeWriteReview_"+ whoseStore +"", "Write a review:", "", 200);
									playerReviewStore.addInputBox("storeWriteReviewStar", "Rate store 0-5:", "", 2);
									playerReviewStore.addSpacer(SPACER_SMALL);

									playerReviewStore.addQuickExit();
									playerReviewStore.endDialog("storeReviewConfirm", "Apply a review", "Cancel");
									Player::OnDialogRequest(peer, playerReviewStore.finishDialog());
								}
								if (btn.substr(0, 17) == "storeReviewCheck_")
								{
									string whoseStore = btn.substr(btn.find("_") + 1);
									bool existx = std::experimental::filesystem::exists("store/" + PlayerDB::getProperName(whoseStore) + ".json");
									if (!existx)
									{
										Player::OnTextOverlay(peer, "`4Store does not exist");
										continue;
									}

									ifstream ifff("store/" + PlayerDB::getProperName(whoseStore) + ".json");
									json j;
									ifff >> j;
									ifff.close();

									GTDialog allReviews;
									allReviews.addLabelWithIcon("`wAll " + whoseStore + "'s reviews:", 1434, LABEL_SMALL);

									bool noReviews = true;
									for (int i = 0; i < 50; i++)
									{
										if (j["storeReview"][i]["sentBy"].get<string>() != "")
										{
											noReviews = false;

											string review = j["storeReview"][i]["review"].get<string>();
											string sendBy = j["storeReview"][i]["sentBy"].get<string>();
											int stars = j["storeReview"][i]["stars"];

											allReviews.addSmallText("`$" + sendBy + "`#(`$"+to_string(stars)+"/5`#): "+ review +"");
											allReviews.addSpacer(SPACER_SMALL);
										}
									}

									if (noReviews == true)
									{
										allReviews.addSpacer(SPACER_SMALL);
										allReviews.addSmallText("`$There is no any reviews in this store.");
										allReviews.addSpacer(SPACER_SMALL);
									}

									allReviews.addQuickExit();
									allReviews.endDialog("Close", "", "Close " + whoseStore + "'s reviews.");
									Player::OnDialogRequest(peer, allReviews.finishDialog());
								}
								if (btn.substr(0, 17) == "myStoreItemEnter_")
								{
									string aposition = btn.substr(btn.find("_") + 1);
									int ap = stoi(aposition);

									bool existx = std::experimental::filesystem::exists("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
									if (!existx)
									{
										Player::OnTextOverlay(peer, "`4Store does not exist");
										continue;
									}

									ifstream ifff("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
									json j;
									ifff >> j;
									ifff.close();

									bool found = false;

									for (int i = 0; i < j["itemsInStore"].size(); i++)
									{
										if (j["itemsInStore"][i]["aposition"] == ap)
										{
											int earned = j["itemsInStore"][i]["boughtItems"];
											GTDialog myStoreItem;
											myStoreItem.addLabelWithIcon("`w" + itemDefs[j["itemsInStore"][i]["itemid"]].name + " item's properties:", 1434, LABEL_SMALL);
											myStoreItem.addSpacer(SPACER_SMALL);
											myStoreItem.addButton("myStoreItemAddAll_"+ aposition +"", "Add more " + itemDefs[j["itemsInStore"][i]["itemid"]].name + ".");
											myStoreItem.addButton("myStoreItemRemove_" + aposition + "", "Remove that item from selling.");
											myStoreItem.addButton("myStoreTakeBackItems_" + aposition + "", "Take them back to your inventory.");
											myStoreItem.addButton("myStoreWithdrawEarnings_" + aposition + "", "Withdraw earnings ("+to_string(earned )+").");
											
											myStoreItem.addQuickExit();
											myStoreItem.endDialog("Close", "", "Cancel.");
											Player::OnDialogRequest(peer, myStoreItem.finishDialog());
											
											found = true;
											break;
										}
									}
									
									if (!found)
									{
										Player::OnTextOverlay(peer, "`4Item does not exist in your store");
										continue;
									}

								}
								if (btn.substr(0, 18) == "myStoreItemAddAll_")
								{
									string aposition = btn.substr(btn.find("_") + 1);
									int ap = stoi(aposition);

									bool existx = std::experimental::filesystem::exists("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
									if (!existx)
									{
										Player::OnTextOverlay(peer, "`4Store does not exist");
										continue;
									}

									ifstream ifff("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
									json j;
									ifff >> j;
									ifff.close();

									bool found = false;
									bool doesHave = false;
									int howManyHave = 0;

									for (int i = 0; i < j["itemsInStore"].size(); i++)
									{
										if (j["itemsInStore"][i]["aposition"] == ap)
										{									
											SearchInventoryItem(peer, j["itemsInStore"][i]["itemid"], 1, doesHave);
											if (doesHave == false)
											{
												break;
											}

											howManyHave = GetQuantityOfItem(peer, j["itemsInStore"][i]["itemid"]);
											j["itemsInStore"][i]["quantityOfItems"] = j["itemsInStore"][i]["quantityOfItems"] + howManyHave;
											RemoveInventoryItem(j["itemsInStore"][i]["itemid"], howManyHave, peer);

											std::ofstream oo("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
											if (!oo.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}
											oo << j << std::endl;

											Player::OnConsoleMessage(peer, "`2Successfully added all`1(`2"+to_string(howManyHave )+"`1)`2 "+ itemDefs[j["itemsInStore"][i]["itemid"]].name +" from your inventory to your shop.");

											doesHave = true;
											found = true;
											break;
										}
									}

									if (!doesHave)
									{
										Player::OnTextOverlay(peer, "`4You don't have that item in your inventory.");
										continue;
									}

									if (!found)
									{
										Player::OnTextOverlay(peer, "`4Item does not exist in your store");
										continue;
									}	

								}
								if (btn.substr(0, 18) == "myStoreItemRemove_")
								{
									string aposition = btn.substr(btn.find("_") + 1);
									int ap = stoi(aposition);

									bool existx = std::experimental::filesystem::exists("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
									if (!existx)
									{
										Player::OnTextOverlay(peer, "`4Store does not exist");
										continue;
									}

									ifstream ifff("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
									json j;
									ifff >> j;
									ifff.close();

									bool found = false;
									bool earned = false;
									bool quantityOfItems = false;
									int quantityOfItemsHowMany = 0;

									for (int i = 0; i < j["itemsInStore"].size(); i++)
									{
										if (j["itemsInStore"][i]["aposition"] == ap)
										{
											found = true;
											if (j["itemsInStore"][i]["boughtItems"] > 0)
											{
												earned = true;
												break;
											}

											if (j["itemsInStore"][i]["quantityOfItems"] > 0)
											{
												quantityOfItems = true;
												quantityOfItemsHowMany = j["itemsInStore"][i]["quantityOfItems"];
												break;
											}

											j["itemsInStore"][i]["itemDesc"] = "";
											j["itemsInStore"][i]["itemid"] = 0;
											j["itemsInStore"][i]["sellForItem"] = 0;
											j["itemsInStore"][i]["sellPer"] = 0;

											std::ofstream oo("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
											if (!oo.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}
											oo << j << std::endl;

											Player::OnTextOverlay(peer, "`2Successfully removed from selling that item.");

											break;
										}

									}

									if (earned)
									{
										Player::OnTextOverlay(peer, "`4You have earned items here. Withdraw them first.");
										continue;
									}

									if (quantityOfItems)
									{
										Player::OnConsoleMessage(peer, "`4There are "+to_string(quantityOfItemsHowMany )+" items placed on your store. Take them back to your inventory.");
										continue;
									}

									if (!found)
									{
										Player::OnTextOverlay(peer, "`4Item does not exist in your store");
										continue;
									}
								}
								
								if (btn.substr(0, 21) == "myStoreTakeBackItems_")
								{
									string aposition = btn.substr(btn.find("_") + 1);
									int ap = stoi(aposition);

									bool existx = std::experimental::filesystem::exists("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
									if (!existx)
									{
										Player::OnTextOverlay(peer, "`4Store does not exist");
										continue;
									}

									ifstream ifff("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
									json j;
									ifff >> j;
									ifff.close();

									bool found = false;
									bool noHas = false;

									for (int i = 0; i < j["itemsInStore"].size(); i++)
									{
										if (j["itemsInStore"][i]["aposition"] == ap)
										{
											bool success = false;
											found = true;
											if (j["itemsInStore"][i]["quantityOfItems"] < 1)
											{
												noHas = true;
												break;
											}
											int howManyHas= j["itemsInStore"][i]["quantityOfItems"];

											if (CheckItemExists(peer, j["itemsInStore"][i]["itemid"]))
											{
												int currentlyHave = GetQuantityOfItem(peer, j["itemsInStore"][i]["itemid"]);
												if (j["itemsInStore"][i]["quantityOfItems"] + currentlyHave < 201)
												{
													SaveItemMoreTimes(j["itemsInStore"][i]["itemid"], j["itemsInStore"][i]["quantityOfItems"], peer, success);
													j["itemsInStore"][i]["quantityOfItems"] = 0;
													Player::OnConsoleMessage(peer, "`2Successfully returned " + to_string(howManyHas) + " items of " + itemDefs[j["itemsInStore"][i]["itemid"]].name + ".\n0 items left.");
												}
												else
												{
													int kiekTrukstaIki200 = 200 - currentlyHave;
													SaveItemMoreTimes(j["itemsInStore"][i]["itemid"], kiekTrukstaIki200, peer, success);
													j["itemsInStore"][i]["quantityOfItems"] = j["itemsInStore"][i]["quantityOfItems"] - kiekTrukstaIki200;
													howManyHas -= kiekTrukstaIki200;
													Player::OnConsoleMessage(peer, "`2Successfully returned " + to_string(kiekTrukstaIki200) + " items of " + itemDefs[j["itemsInStore"][i]["itemid"]].name + ".\n" + to_string(howManyHas) + " items left.");
												}
											}
											else
											{
												if (((PlayerInfo*)(peer->data))->inventory.items.size() == ((PlayerInfo*)(peer->data))->currentInventorySize) {
													Player::OnTextOverlay(peer, "`4Your inventory is full! You can purchase an inventory upgrade in the shop.");
													break;
												}
												if (j["itemsInStore"][i]["quantityOfItems"] > 200)
												{
													SaveItemMoreTimes(j["itemsInStore"][i]["itemid"], 200, peer, success);
													j["itemsInStore"][i]["quantityOfItems"] = j["itemsInStore"][i]["quantityOfItems"] - 200;
													howManyHas -= 200;
													Player::OnConsoleMessage(peer, "`2Successfully returned 200 items of " + itemDefs[j["itemsInStore"][i]["itemid"]].name + ".\n" + to_string(howManyHas) + " items left.");
												}
												else
												{
													SaveItemMoreTimes(j["itemsInStore"][i]["itemid"], j["itemsInStore"][i]["quantityOfItems"], peer, success);
													j["itemsInStore"][i]["quantityOfItems"] = 0;
													Player::OnConsoleMessage(peer, "`2Successfully returned " + to_string(howManyHas) + " items of " + itemDefs[j["itemsInStore"][i]["itemid"]].name + ".\n0 items left.");
												}
											}


											std::ofstream oo("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
											if (!oo.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}
											oo << j << std::endl;

											break;
										}

									}

									if (noHas)
									{
										Player::OnTextOverlay(peer, "`4You don't have more than 0 placed items.");
										continue;
									}

									if (!found)
									{
										Player::OnTextOverlay(peer, "`4Item does not exist in your store");
										continue;
									}
								}
								if (btn.substr(0, 24) == "myStoreWithdrawEarnings_")
								{
									string aposition = btn.substr(btn.find("_") + 1);
									int ap = stoi(aposition);

									bool existx = std::experimental::filesystem::exists("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
									if (!existx)
									{
										Player::OnTextOverlay(peer, "`4Store does not exist");
										continue;
									}

									ifstream ifff("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
									json j;
									ifff >> j;
									ifff.close();

									bool found = false;
									bool noearned = false;

									for (int i = 0; i < j["itemsInStore"].size(); i++)
									{
										if (j["itemsInStore"][i]["aposition"] == ap)
										{
											bool success = false;
											found = true;
											if (j["itemsInStore"][i]["boughtItems"] < 1)
											{
												noearned = true;
												break;
											}
											int howManyEarnings = j["itemsInStore"][i]["boughtItems"];

											if (CheckItemExists(peer, j["itemsInStore"][i]["sellForItem"]))
											{
												int currentlyHave = GetQuantityOfItem(peer, j["itemsInStore"][i]["sellForItem"]);
												if (j["itemsInStore"][i]["boughtItems"] + currentlyHave < 201)
												{
													SaveItemMoreTimes(j["itemsInStore"][i]["sellForItem"], j["itemsInStore"][i]["boughtItems"], peer, success);
													j["itemsInStore"][i]["boughtItems"] = 0;
													Player::OnConsoleMessage(peer, "`2Successfully withdrawn " + to_string(howManyEarnings) + " earnings of " + itemDefs[j["itemsInStore"][i]["sellForItem"]].name + ".\n0 earnings left.");
												}
												else
												{
													int kiekTrukstaIki200 = 200 - currentlyHave;
													SaveItemMoreTimes(j["itemsInStore"][i]["sellForItem"], kiekTrukstaIki200, peer, success);
													j["itemsInStore"][i]["boughtItems"] = j["itemsInStore"][i]["boughtItems"] - kiekTrukstaIki200;
													howManyEarnings -= kiekTrukstaIki200;
													Player::OnConsoleMessage(peer, "`2Successfully withdrawn " + to_string(kiekTrukstaIki200) + " earnings of " + itemDefs[j["itemsInStore"][i]["sellForItem"]].name + ".\n" + to_string(howManyEarnings) + " earnings left.");
												}
											}
											else
											{
												if (((PlayerInfo*)(peer->data))->inventory.items.size() == ((PlayerInfo*)(peer->data))->currentInventorySize) {
													Player::OnTextOverlay(peer, "`4Your inventory is full! You can purchase an inventory upgrade in the shop.");
													break;
												}
												if (j["itemsInStore"][i]["boughtItems"] > 200)
												{
													SaveItemMoreTimes(j["itemsInStore"][i]["sellForItem"], 200, peer, success);
													j["itemsInStore"][i]["boughtItems"] = j["itemsInStore"][i]["boughtItems"] - 200;
													howManyEarnings -= 200;
													Player::OnConsoleMessage(peer, "`2Successfully withdrawn 200 earnings of " + itemDefs[j["itemsInStore"][i]["sellForItem"]].name + ".\n" + to_string(howManyEarnings) + " earnings left.");
												}
												else
												{
													SaveItemMoreTimes(j["itemsInStore"][i]["sellForItem"], j["itemsInStore"][i]["boughtItems"], peer, success);
													j["itemsInStore"][i]["boughtItems"] = 0;
													Player::OnConsoleMessage(peer, "`2Successfully withdrawn " + to_string(howManyEarnings) + " earnings of " + itemDefs[j["itemsInStore"][i]["sellForItem"]].name + ".\n0 earnings left.");
												}
											}


											std::ofstream oo("store/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->rawName) + ".json");
											if (!oo.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}
											oo << j << std::endl;

											break;
										}

									}

									if (noearned)
									{
										Player::OnTextOverlay(peer, "`4You don't have earned items.");
										continue;
									}

									if (!found)
									{
										Player::OnTextOverlay(peer, "`4Item does not exist in your store");
										continue;
									}

								}
								if (btn.substr(0, 21) == "playerStoreItemEnter_")
								{
									string pos_and_whoseStore = btn.erase(0, 21);
									string::size_type pos = pos_and_whoseStore.find('_');
									string apos = "";
									string whosStore = "";
									if (pos != std::string::npos)
									{
										apos = pos_and_whoseStore.substr(0, pos);
										pos_and_whoseStore.erase(0, pos + 1); // +1, kad "_" erase
										whosStore = pos_and_whoseStore;
									}
									else
									{
										autoBan(peer, false, 24 * 7, "Incorrect parameters in btn playerStoreItemEnter_ . Was:" + pos_and_whoseStore);
										continue;
									}

									bool contains_non_int2 = !std::regex_match(apos, std::regex("^[0-9]+$"));
									if (contains_non_int2 == true)
									{
										autoBan(peer, false, 24 * 7, "Incorrect aPos in btn playerStoreItemEnter_ .Was: " + apos);
										continue;
									}

									bool existx = std::experimental::filesystem::exists("store/" + PlayerDB::getProperName(whosStore) + ".json");
									if (!existx)
									{
										Player::OnTextOverlay(peer, "`4Store does not exist");
										continue;
									}

									int a_pos = stoi(apos);

									ifstream ifff("store/" + PlayerDB::getProperName(whosStore) + ".json");
									json j;
									ifff >> j;
									ifff.close();
					
									GTDialog playerStore;

									bool found = false;
									bool error = false;
									bool error2 = false;

									for (int i = 0; i < j["itemsInStore"].size(); i++)
									{
										if (j["itemsInStore"][i]["aposition"] == a_pos)
										{
											found = true;
											if (j["itemsInStore"][i]["itemid"] == 0)
											{
												error = true;
												break;
											}
											if (j["itemsInStore"][i]["quantityOfItems"] == 0)
											{
												error2 = true;
												break;
											}
											int itemprice = j["itemsInStore"][i]["sellForItem"];
											int itempricePer = j["itemsInStore"][i]["sellPer"];
											int itemId = j["itemsInStore"][i]["itemid"];
											int quantity = j["itemsInStore"][i]["quantityOfItems"];
											
											playerStore.addLabelWithIcon("`w" + PlayerDB::getProperName(whosStore) + "'s store.", 1430, LABEL_BIG);
											playerStore.addSpacer(SPACER_SMALL);

											playerStore.addSmallText("`$Item's description: `#" + j["itemsInStore"][i]["itemDesc"].get<string>() +"");
											playerStore.addSpacer(SPACER_SMALL);

											playerStore.addSmallText("`$Selling item:");
											playerStore.addStaticBlueFrame(to_string(itemId), to_string(quantity), "askdganslda", false);
											playerStore.addNewLineAfterFrame();

											playerStore.addSpacer(SPACER_SMALL);
											playerStore.addSmallText("`6Price:");
											playerStore.addStaticBlueFrame(to_string(itemprice), to_string(itempricePer), "askdganslda", false);
											playerStore.addNewLineAfterFrame();

											playerStore.addSpacer(SPACER_SMALL);
											playerStore.addSpacer(SPACER_SMALL);
											playerStore.addInputBox("buyPlayerStoreQuantity_" + apos + "_" + whosStore, "How many buy? Price (1/" + to_string(itempricePer) + ")", "", 3);
											
											break;
										}
									}

									if (error)
									{
										Player::OnTextOverlay(peer, "`4Item does not exist in this store.");
										continue;
									}

									if (error2)
									{
										Player::OnTextOverlay(peer, "`4Item sold out.");
										continue;
									}

									if (!found)
									{
										Player::OnTextOverlay(peer, "`4Item does not exist in this store.");
										continue;
									}


									playerStore.addSpacer(SPACER_SMALL);
									playerStore.addQuickExit();
									playerStore.endDialog("buyPlayerStoreItem", "Buy item", "Cancel");
									Player::OnDialogRequest(peer, playerStore.finishDialog());

								}

								//Kvestai
								if (btn == "questkatana")
								{
									if (((PlayerInfo*)(peer->data))->rawName == world->owner)
									{
										Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`#Quest For The Katana``|left|2592|0|0|\n\nadd_spacer|small|\nadd_textbox|`5Are you sure you want to start a `^Quest `5For the `cLegendary Katana`5? Theres no way to `@Undone `5That, Even if you will cancel `^Current Quest `5The `#Legendary Wizard `5Will be consumed!|\n\nadd_spacer|small|\nadd_button|startquestkatana|`9Start Quest For Legendary Katana|\nadd_button|chc0|`9Close|0|0|\nadd_quick_exit|");
									}
									else {
										autoBan(peer, true, 24, "btn questkatana -> is not owner");
									}
								}
								if (btn == "startquestkatana")
								{
									if (((PlayerInfo*)(peer->data))->rawName == world->owner)
									{
										ofstream fd("quests/currentquest/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										fd << "Katana";
										fd.close();
										Player::OnTextOverlay(peer, "`#You have started `^Quest `#For the `cLegendary Katana`#!");

										//Kvesto Jau Dialogas

										int sQuest = 1;
										ifstream fileStream216("quests/currentqueststep/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										fileStream216 >> sQuest;
										fileStream216.close();
										int s1Quest = 0;
										ifstream fileStream219("quests/katana/step1/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										fileStream219 >> s1Quest;
										fileStream219.close();
										std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string content((std::istreambuf_iterator<char>(ifsz)),
											(std::istreambuf_iterator<char>()));
										int b = atoi(content.c_str());
										int togive = 3000000 - s1Quest;
										int cangive = b - togive;
										if (cangive >= 0)
										{
											cangive = 3000000 - s1Quest;
										}
										else {
											cangive = b;
										}
										Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`#Quest For The Katana``|left|2592|0|0|\n\nadd_spacer|small|\nadd_textbox|`5Your current step: `^" + to_string(sQuest) + "/5|\nadd_textbox|`5Step 1: Welcome adventurer, your first `^Quest `5Will be to bring me `43m `9Gems`5, Hope that not too much for you`5!|\nadd_textbox|`5Progress: `^" + to_string(s1Quest) + "/3000000 `5Gems|\nadd_button|s1sgemsgive|`9Give `^" + to_string(cangive) + " `9Gems|\nadd_button|chc0|`9Close|0|0|\nadd_quick_exit|");
									}
									else {
										autoBan(peer, true, 24, "btn startquestkatana -> is not owner");
									}
								}
								if (btn == "s1sgemsgive")
								{
									if (((PlayerInfo*)(peer->data))->rawName == world->owner)
									{
										std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string content((std::istreambuf_iterator<char>(ifsz)),
											(std::istreambuf_iterator<char>()));
										int b = atoi(content.c_str());
										int s1Quest = 0;
										ifstream fileStream216("quests/katana/step1/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										fileStream216 >> s1Quest;
										fileStream216.close();
										int bendras = 3000000 - s1Quest;
										int cangive = b - bendras;
										int willgive = 0;
										if (cangive >= 0)
										{
											willgive = b - bendras;
											ofstream myfile2;
											myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											myfile2 << std::to_string(willgive);
											myfile2.close();
											std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string contentx((std::istreambuf_iterator<char>(ifszi)),
												(std::istreambuf_iterator<char>()));
											int updgem = atoi(contentx.c_str());
											GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
											ENetPacket* packetpp = enet_packet_create(pp.data,
												pp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packetpp);
											delete pp.data;
											ofstream fd("quests/currentqueststep/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											fd << 2;
											fd.close();
											Player::OnTextOverlay(peer, "`#You have completed Step 1 For the `cLegendary Katana`#!");
										}
										else {
											willgive = 0;
											int alrdadded = 0;
											ifstream fileStream316("quests/katana/step1/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											fileStream316 >> alrdadded;
											fileStream316.close();
											int willaddnow = b + alrdadded;
											ofstream fileStream216("quests/katana/step1/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											fileStream216 << willaddnow;
											fileStream216.close();
											ofstream myfile2;
											myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											myfile2 << std::to_string(willgive);
											myfile2.close();
											std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string contentx((std::istreambuf_iterator<char>(ifszi)),
												(std::istreambuf_iterator<char>()));
											int updgem = atoi(contentx.c_str());
											GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
											ENetPacket* packetpp = enet_packet_create(pp.data,
												pp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packetpp);
											delete pp.data;
											Player::OnTextOverlay(peer, "`#Thank you, keep it going`#!");
										}
									}
									else {
										autoBan(peer, true, 24, "btn questkatana -> is not owner");
									}
								}
								if (btn == "s2scomplete")
								{
									if (((PlayerInfo*)(peer->data))->rawName == world->owner)
									{
										ofstream fd("quests/currentqueststep/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										fd << 3;
										fd.close();
										Player::OnTextOverlay(peer, "`#You have completed Step 2 For the `cLegendary Katana`#!");
									}
									else {
										autoBan(peer, true, 24, "btn s2scomplete -> is not owner");
									}
								}
								if (btn == "s3scomplete")
								{
									if (((PlayerInfo*)(peer->data))->rawName == world->owner)
									{
										ofstream fd("quests/currentqueststep/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										fd << 4;
										fd.close();
										Player::OnTextOverlay(peer, "`#You have completed Step 3 For the `cLegendary Katana`#!");
									}
									else {
										autoBan(peer, true, 24, "btn s3scomplete -> is not owner");
									}
								}
								if (btn == "s4scomplete")
								{
									if (((PlayerInfo*)(peer->data))->rawName == world->owner)
									{
										ofstream fd("quests/currentqueststep/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										fd << 5;
										fd.close();
										RemoveInventoryItem(9758, 1, peer);
										Player::OnTextOverlay(peer, "`#You have completed Step 4 For the `cLegendary Katana`#!");
									}
									else {
										autoBan(peer, true, 24, "btn s4scomplete -> is not owner");
									}
								}
								if (btn == "s5scomplete")
								{
									if (((PlayerInfo*)(peer->data))->rawName == world->owner)
									{
										ofstream fd("quests/currentqueststep/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										fd << 5;
										fd.close();
										RemoveInventoryItem(1794, 1, peer);
										bool success = true;
										SaveItemMoreTimes(2592, 1, peer, success);
										Player::OnTextOverlay(peer, "`#You have received the `cLegendary Katana`#!");
										remove(("quests/currentquest/" + ((PlayerInfo*)(peer->data))->rawName + ".txt").c_str());
										remove(("quests/currentqueststep/" + ((PlayerInfo*)(peer->data))->rawName + ".txt").c_str());
										remove(("quests/katana/step1/" + ((PlayerInfo*)(peer->data))->rawName + ".txt").c_str());
										remove(("quests/katana/step2/" + ((PlayerInfo*)(peer->data))->rawName + ".txt").c_str());
										remove(("quests/katana/step3/" + ((PlayerInfo*)(peer->data))->rawName + ".txt").c_str());
										remove(("quests/katana/step4/" + ((PlayerInfo*)(peer->data))->rawName + ".txt").c_str());
										remove(("quests/katana/step5/" + ((PlayerInfo*)(peer->data))->rawName + ".txt").c_str());
										for (int i = 0; i < world->width * world->height; i++)
										{
											if (world->items[i].foreground == 1790) {
												world->items[i].foreground = 0;
											}
										}
										int effect = 92;
										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											Player::OnConsoleMessage(currentPeer, "`c>> Player `w" + ((PlayerInfo*)(peer->data))->rawName + " `cReceived The Legendary Katana!");
											if (isHere(peer, currentPeer))
											{
												Player::OnParticleEffect(currentPeer, effect, x, y, 0);
												string act = ((PlayerInfo*)(peer->data))->currentWorld;
												sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
												joinWorld(currentPeer, act, 0, 0);
											}
										}
									}
									else {
										autoBan(peer, true, 24, "btn s5scomplete -> is not owner");
									}
								}
								//End
								if (btn == "starttrade")
								{
									bool found = false;

									if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo)
									{
										Player::OnConsoleMessage(peer, "`4You cant trade your self.");
										continue;
									}
									else if (((PlayerInfo*)(peer->data))->istrading == true)
									{
										Player::OnConsoleMessage(peer, "`4cancel the current trade first.");
										continue;
									}
									if (((PlayerInfo*)(peer->data))->level < 10) {
										Player::OnConsoleMessage(peer, "`4You should be level 10 at least.");
										continue;
									}
									if (((PlayerInfo*)(peer->data))->tradingme == ((PlayerInfo*)(peer->data))->lastInfo)
									{
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (isHere(peer, currentPeer))
											{
												if (((PlayerInfo*)(peer->data))->tradingme == ((PlayerInfo*)(currentPeer->data))->rawName) {
													((PlayerInfo*)(peer->data))->istrading = true;
													((PlayerInfo*)(currentPeer->data))->istrading = true;

													GamePacket pt1 = packetEnd(appendInt(appendString(appendString(createPacket(), "OnStartTrade"), ((PlayerInfo*)(currentPeer->data))->rawName), ((PlayerInfo*)(currentPeer->data))->netID));
													ENetPacket* packetw = enet_packet_create(pt1.data,
														pt1.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packetw);
													delete pt1.data;

													GamePacket pty = packetEnd(appendInt(appendString(appendString(createPacket(), "OnStartTrade"), ((PlayerInfo*)(peer->data))->rawName), ((PlayerInfo*)(peer->data))->netID));
													ENetPacket* packety = enet_packet_create(pty.data,
														pty.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packety);
													delete pty.data;
												}
											}
										}
									}
									else
									{
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (isHere(peer, currentPeer))
											{
												if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo)
												{
													found = true;

													if (((PlayerInfo*)(currentPeer->data))->level < 10) {
														Player::OnConsoleMessage(peer, "`4This player should be level 10 at least.");
														continue;
													}
													if (((PlayerInfo*)(currentPeer->data))->istrading == true)
													{
														Player::OnConsoleMessage(peer, "this player is trading someone else");
														continue;
													}
													else
													{
														((PlayerInfo*)(peer->data))->tradingme = ((PlayerInfo*)(peer->data))->lastInfo;
														((PlayerInfo*)(currentPeer->data))->tradingme = ((PlayerInfo*)(peer->data))->rawName;
														((PlayerInfo*)(peer->data))->istrading = true;
														GamePacket p1 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You started trading with " + ((PlayerInfo*)(currentPeer->data))->rawName));
														ENetPacket* packet = enet_packet_create(p1.data,
															p1.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p1.data;
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#TRADE ALERT: `w" + ((PlayerInfo*)(peer->data))->rawName + " `owants to trade with you! To start, use the `wWrench `oon that person's wrench icon,or type `w/trade " + ((PlayerInfo*)(peer->data))->rawName));
														ENetPacket* packet2 = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet2);
														delete p.data;
														GamePacket pt1 = packetEnd(appendInt(appendString(appendString(createPacket(), "OnStartTrade"), ((PlayerInfo*)(currentPeer->data))->rawName), ((PlayerInfo*)(currentPeer->data))->netID));
														ENetPacket* packet3 = enet_packet_create(pt1.data,
															pt1.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet3);
														delete pt1.data;
													}
												}
											}
										}
										if (!found) {
											Player::OnConsoleMessage(peer, "The player no found ");
										}
									}
								}

								if (btn == "notrade")
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`wYou canceled the trade."));
									ENetPacket* packet1 = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet1);
									delete p.data;

									((PlayerInfo*)(peer->data))->item1 = 0;
									((PlayerInfo*)(peer->data))->item1count = 0;
									((PlayerInfo*)(peer->data))->item2 = 0;
									((PlayerInfo*)(peer->data))->item2count = 0;
									((PlayerInfo*)(peer->data))->item3 = 0;
									((PlayerInfo*)(peer->data))->item3count = 0;
									((PlayerInfo*)(peer->data))->item4 = 0;
									((PlayerInfo*)(peer->data))->item4count = 0;
									((PlayerInfo*)(peer->data))->istrading = false;
									((PlayerInfo*)(peer->data))->accepted = false;
									((PlayerInfo*)(peer->data))->dotrade = false;

									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->tradingme)
										{
											GamePacket p24 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), ((PlayerInfo*)(peer->data))->displayName + " `wcanceled the trade."));

											ENetPacket* packet2 = enet_packet_create(p24.data,
												p24.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet2);

											GamePacket p2 = packetEnd(appendString(createPacket(), "OnForceTradeEnd"));

											ENetPacket* packet3 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet3);

											ENetPacket* packet4 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet4);

											delete p24.data;
											delete p2.data;

											((PlayerInfo*)(currentPeer->data))->item1 = 0;
											((PlayerInfo*)(currentPeer->data))->item1count = 0;
											((PlayerInfo*)(currentPeer->data))->item2 = 0;
											((PlayerInfo*)(currentPeer->data))->item2count = 0;
											((PlayerInfo*)(currentPeer->data))->item3 = 0;
											((PlayerInfo*)(currentPeer->data))->item3count = 0;
											((PlayerInfo*)(currentPeer->data))->item4 = 0;
											((PlayerInfo*)(currentPeer->data))->item4count = 0;
											((PlayerInfo*)(currentPeer->data))->tradingme = "";
											((PlayerInfo*)(currentPeer->data))->istrading = false;
											((PlayerInfo*)(currentPeer->data))->accepted = false;
											((PlayerInfo*)(currentPeer->data))->dotrade = false;
										}
									}
									((PlayerInfo*)(peer->data))->tradingme = "";
								}

								if (btn == "dothetrade")
								{

									string traderName = ((PlayerInfo*)(peer->data))->displayName;
									string tradingWithName = ((PlayerInfo*)(peer->data))->tradingme;

									string toLogs = "";
									string toLogs2 = "";
									bool toLogsItem1 = false;
									bool toLogsItem2 = false;
									bool toLogsItem3 = false;
									bool toLogsItem4 = false;

									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(currentPeer->data))->rawName == tradingWithName)
										{

											if (((PlayerInfo*)(currentPeer->data))->isDoTheTrade == false)
											{
												((PlayerInfo*)(peer->data))->isDoTheTrade = true;
												Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "`4Waiting for another player...", 0, true);
												break;
											}
											bool success = false;

											//Peer

											if (((PlayerInfo*)(peer->data))->item1count != 0 && ((PlayerInfo*)(peer->data))->item1 != 0)
											{
												RemoveInventoryItem(((PlayerInfo*)(peer->data))->item1, ((PlayerInfo*)(peer->data))->item1count, peer);
												SaveItemMoreTimes(((PlayerInfo*)(peer->data))->item1, ((PlayerInfo*)(peer->data))->item1count, currentPeer, success);
												toLogs += ((PlayerInfo*)(peer->data))->displayName + " `1traded " + to_string(((PlayerInfo*)(peer->data))->item1count) + " " + itemDefs[((PlayerInfo*)(peer->data))->item1].name + " to " + ((PlayerInfo*)(currentPeer->data))->displayName + "; ";
											}
											if (((PlayerInfo*)(peer->data))->item2count != 0 && ((PlayerInfo*)(peer->data))->item2 != 0)
											{
												RemoveInventoryItem(((PlayerInfo*)(peer->data))->item2, ((PlayerInfo*)(peer->data))->item2count, peer);
												SaveItemMoreTimes(((PlayerInfo*)(peer->data))->item2, ((PlayerInfo*)(peer->data))->item2count, currentPeer, success);
												toLogs += ((PlayerInfo*)(peer->data))->displayName + " `1traded " + to_string(((PlayerInfo*)(peer->data))->item2count) + " " + itemDefs[((PlayerInfo*)(peer->data))->item2].name + " to " + ((PlayerInfo*)(currentPeer->data))->displayName + "; ";
											}
											if (((PlayerInfo*)(peer->data))->item3count != 0 && ((PlayerInfo*)(peer->data))->item3 != 0)
											{
												RemoveInventoryItem(((PlayerInfo*)(peer->data))->item3, ((PlayerInfo*)(peer->data))->item3count, peer);
												SaveItemMoreTimes(((PlayerInfo*)(peer->data))->item3, ((PlayerInfo*)(peer->data))->item3count, currentPeer, success);
												toLogs += ((PlayerInfo*)(peer->data))->displayName + " `1traded " + to_string(((PlayerInfo*)(peer->data))->item3count) + " " + itemDefs[((PlayerInfo*)(peer->data))->item3].name + " to " + ((PlayerInfo*)(currentPeer->data))->displayName + "; ";
											}
											if (((PlayerInfo*)(peer->data))->item4count != 0 && ((PlayerInfo*)(peer->data))->item4 != 0)
											{
												RemoveInventoryItem(((PlayerInfo*)(peer->data))->item4, ((PlayerInfo*)(peer->data))->item4count, peer);
												SaveItemMoreTimes(((PlayerInfo*)(peer->data))->item4, ((PlayerInfo*)(peer->data))->item4count, currentPeer, success);
												toLogs += ((PlayerInfo*)(peer->data))->displayName + " `1traded " + to_string(((PlayerInfo*)(peer->data))->item4count) + " " + itemDefs[((PlayerInfo*)(peer->data))->item4].name + " to " + ((PlayerInfo*)(currentPeer->data))->displayName + "; ";
											}

											//currentPeer

											if (((PlayerInfo*)(currentPeer->data))->item1count != 0 && ((PlayerInfo*)(currentPeer->data))->item1 != 0)
											{
												RemoveInventoryItem(((PlayerInfo*)(currentPeer->data))->item1, ((PlayerInfo*)(currentPeer->data))->item1count, currentPeer);
												SaveItemMoreTimes(((PlayerInfo*)(currentPeer->data))->item1, ((PlayerInfo*)(currentPeer->data))->item1count, peer, success);
												toLogs2 += ((PlayerInfo*)(currentPeer->data))->displayName + " `1traded " + to_string(((PlayerInfo*)(currentPeer->data))->item1count) + " " + itemDefs[((PlayerInfo*)(currentPeer->data))->item1].name + " to " + ((PlayerInfo*)(peer->data))->displayName + "; ";
											}
											if (((PlayerInfo*)(currentPeer->data))->item2count != 0 && ((PlayerInfo*)(currentPeer->data))->item2 != 0)
											{
												RemoveInventoryItem(((PlayerInfo*)(currentPeer->data))->item2, ((PlayerInfo*)(currentPeer->data))->item2count, currentPeer);
												SaveItemMoreTimes(((PlayerInfo*)(currentPeer->data))->item2, ((PlayerInfo*)(currentPeer->data))->item2count, peer, success);
												toLogs2 += ((PlayerInfo*)(currentPeer->data))->displayName + " `1traded " + to_string(((PlayerInfo*)(currentPeer->data))->item2count) + " " + itemDefs[((PlayerInfo*)(currentPeer->data))->item2].name + " to " + ((PlayerInfo*)(peer->data))->displayName + "; ";
											}
											if (((PlayerInfo*)(currentPeer->data))->item3count != 0 && ((PlayerInfo*)(currentPeer->data))->item3 != 0)
											{
												RemoveInventoryItem(((PlayerInfo*)(currentPeer->data))->item3, ((PlayerInfo*)(currentPeer->data))->item3count, currentPeer);
												SaveItemMoreTimes(((PlayerInfo*)(currentPeer->data))->item3, ((PlayerInfo*)(currentPeer->data))->item3count, peer, success);
												toLogs2 += ((PlayerInfo*)(currentPeer->data))->displayName + " `1traded " + to_string(((PlayerInfo*)(currentPeer->data))->item3count) + " " + itemDefs[((PlayerInfo*)(currentPeer->data))->item3].name + " to " + ((PlayerInfo*)(peer->data))->displayName + "; ";
											}
											if (((PlayerInfo*)(currentPeer->data))->item4count != 0 && ((PlayerInfo*)(currentPeer->data))->item4 != 0)
											{
												RemoveInventoryItem(((PlayerInfo*)(currentPeer->data))->item4, ((PlayerInfo*)(currentPeer->data))->item4count, currentPeer);
												SaveItemMoreTimes(((PlayerInfo*)(currentPeer->data))->item4, ((PlayerInfo*)(currentPeer->data))->item4count, peer, success);
												toLogs2 += ((PlayerInfo*)(currentPeer->data))->displayName + " `1traded " + to_string(((PlayerInfo*)(currentPeer->data))->item4count) + " " + itemDefs[((PlayerInfo*)(currentPeer->data))->item4].name + " to " + ((PlayerInfo*)(peer->data))->displayName + "; ";
											}

											//logs

											if (toLogs == "")
											{
												toLogs = ((PlayerInfo*)(peer->data))->displayName + " `1traded `4nothing `1to `4" + ((PlayerInfo*)(currentPeer->data))->displayName;
											}
											if (toLogs2 == "")
											{
												toLogs = ((PlayerInfo*)(currentPeer->data))->displayName + " `1traded `4nothing `1to `4" + ((PlayerInfo*)(peer->data))->displayName;
											}
											ofstream tradelogs("logs/trade.txt", ios::app);
											tradelogs << toLogs << endl;
											tradelogs << toLogs2 << endl;
											tradelogs.close();

											//return values

											((PlayerInfo*)(peer->data))->dotrade = false;
											((PlayerInfo*)(peer->data))->istrading = false;
											((PlayerInfo*)(peer->data))->accepted = false;

											((PlayerInfo*)(currentPeer->data))->dotrade = false;
											((PlayerInfo*)(currentPeer->data))->istrading = false;
											((PlayerInfo*)(currentPeer->data))->accepted = false;

											Player::OnForceTradeEnd(peer);
											Player::OnForceTradeEnd(currentPeer);

											updateplayerset(peer, ((PlayerInfo*)(peer->data))->item1);
											updateplayerset(currentPeer, ((PlayerInfo*)(currentPeer->data))->item1);

											updateplayerset(peer, ((PlayerInfo*)(peer->data))->item2);
											updateplayerset(currentPeer, ((PlayerInfo*)(currentPeer->data))->item2);

											updateplayerset(peer, ((PlayerInfo*)(peer->data))->item3);
											updateplayerset(currentPeer, ((PlayerInfo*)(currentPeer->data))->item3);

											updateplayerset(peer, ((PlayerInfo*)(peer->data))->item4);
											updateplayerset(currentPeer, ((PlayerInfo*)(currentPeer->data))->item4);

											//notice players

											ENetPeer* currentPeer2;
											for (currentPeer2 = server->peers;
												currentPeer2 < &server->peers[server->peerCount];
												++currentPeer2)
											{
												if (currentPeer2->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer2))
												{
													Player::OnConsoleMessage(currentPeer2, toLogs);
													Player::OnConsoleMessage(currentPeer2, toLogs2);
												}
											}

										}

									}
						
								}

								if (btn == "showuserinventory")
								{
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfoAboutPlayer) {
											string appendItems = "";
											for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
											{
												appendItems += "\nadd_button_with_icon|close||staticBlueFrame|" + to_string(((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID) + "|" + to_string(((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount) + "|";
											}
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`2" + ((PlayerInfo*)(currentPeer->data))->rawName + " inventory``|left|826|" + appendItems + "\nadd_quick_exit|"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
										}
									}

								}
								if (btn == "changeskillgroup")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`wChoose Skill Group``|left|18|0|0|\n\nadd_spacer|small|\nadd_button|changetofarmer|`9Farmer [`415 `@Growtokens`9]|0|0|\nadd_textbox|`oFarmer Skill Buffs all gem drops by `430% `oAnd gives you exlusive looking flag`o!|\nadd_button|changetominer|`9Miner [`430 `@Growtokens`9]|0|0|\nadd_textbox|`oMiner Skill Buffs all crystal drops by `430% `oAnd gives you exlusive looking flag`o!|\nadd_button|changetonone|`9Leave Skill Group|0|0|\nadd_textbox|`@Warning! `oIf you will leave your current skill group you will lose all buffs`o!|\n\nadd_spacer|small|\nadd_button||`9Continue|0|0|\nadd_quick_exit|");
								}
								if (btn == "weaponupgrademenu")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									//pMov->plantingTree == 6312 || pMov->plantingTree == 7956 || pMov->plantingTree == 9716 || pMov->plantingTree == 9456 || pMov->plantingTree == 9458

									Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`wUpgrade Weapon``|left|18|0|0|\n\nadd_spacer|small|\nadd_textbox|`oChoose which one `9Weapon `oyou want to `9Upgrade `oto`o!||\n\nadd_spacer|small|\nadd_label|small|`^The `1Phoenix Swords > `4Buffs `oAll `1XP `oDrops, Gives `9Change `oTo get `9Double `4Gems `oAnd it is `9Faster `oThan regular `9Digger's `oSpade`o!|left|4|\nadd_button|upgradetocrystal|`!Upgrade To Phoenix Sword|0|0|\nadd_spacer|small|\nadd_label|small|`^The Burnished's `oSword > `oGives you `9Rayman `oBreak `9Effects `oWithout any `9Cooldown `oAnd `41.5 HIT`o!|left|4|\nadd_button|upgradetoburnished|`#Upgrade To Burnished|0|0|\nadd_spacer|small|\nadd_label|small|`^The `cCrystal `9Infused's `oSword > `oOne of the most `9Powerfull `oItems from the `9Game`o, Homever it does not act like normal `9Digger's `oSpade, instead it gives you `44x4 `9Break Power`o!|left|4|\nadd_button|upgradeto|`4Upgrade To Neptune Trident|0|0|\nadd_spacer|small|\nadd_label|small|`^The `9Golden `9Neptune `oTrident`o > `oPretty similar to the `cCrystal infused `oSword? Huh youre `9Wrong! `oThis `8Beast `oGives you everything same as `cCrystal infused `oSword but also a `9Chance `oTo get `2World Locks `oWhile breaking `9Any Blocks, Also `41 HIT`o!|left|4|\nadd_button|upgradetotrident|`8Upgrade To Neptune Trident|0|0|\nadd_spacer|small|\nadd_button||`9Continue|0|0|\nadd_quick_exit|");

								}
								if (btn == "upgradetotrident")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`wUpgrade To Neptune Trident``|left|9456|0|0|\n\nadd_spacer|small|\nadd_textbox|`9Neptune's `oTrident `oSimilar as the `4Demon `oSpade, but hold on it gives `9Great `oChance to obtain `2World Locks `oWhile `9Breaking All Kind Of Blocks, Also `41 HIT`o!|\nadd_spacer|small|\nadd_textbox|`oTo `9Upgrade `oYou Need: `4Demon `9Digger's `oSpade, `9Golden `9Digger's `oSpade, `@2100 `9Gold's`o!|\n\nadd_spacer|small|\nadd_button|confirmNeptuneTridentupgrade|`9Upgrade|0|0|\nadd_quick_exit|");
								}
								if (btn == "upgradetocis")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`wUpgrade To Crystal Infused Sword``|left|9716|0|0|\n\nadd_spacer|small|\nadd_textbox|`cCrystal's `oInfused `@sword  Which is one of the most `9Powerfull `oItems, Homever it does not act as normal `9Digger's `oSpade, gives you `44x4 `9Break Power`o!|\nadd_spacer|small|\nadd_textbox|`oTo `9Upgrade `oYou Need: `9Digger's `oSpade, `@1500 `4Fire `9Fragment's`o, `@60 `1Diamond Lock's`o!|\n\nadd_spacer|small|\nadd_button|confirmdemonupgrade|`9Upgrade|0|0|\nadd_quick_exit|");
								}
								if (btn == "upgradetoburnished")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`wUpgrade To Burnished``|left|7956|0|0|\n\nadd_spacer|small|\nadd_textbox|`#Burnished Sword fast and `9Powerfull `oSpade, Gives breaking effect like `9Rayman `oAnd `41.5 HIT `oBut the most important thing, there's no `9Cooldown`o!|\nadd_spacer|small|\nadd_textbox|`oTo `9Upgrade `oYou Need: `1Crystal `9Digger's `oSpade, `@600 `8Amber's`o, `@10 `1Diamond Lock's`o!|\n\nadd_spacer|small|\nadd_button|confirmrainbowupgrade|`9Upgrade|0|0|\nadd_quick_exit|");
								}
								if (btn == "upgradetocrystal")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`wUpgrade To Crystal``|left|6312|0|0|\n\nadd_spacer|small|\nadd_textbox|`1Phoenix Sword gives you many `9Abilities `oIncluding Faster `@1 HIT `oBreaking, `4Buffs `oAnd `9Double `4Gem `oDrops, if you're a `9Lazy `oFarmer this one will be `9Perfect `oFor you`o!|\nadd_spacer|small|\nadd_textbox|`oTo `9Upgrade `oYou Need: `9Digger's `oSpade, `@3000 `1Diamond's`o, `@30 `1Diamond Lock's`o!|\n\nadd_spacer|small|\nadd_button|confirmcrystalupgrade|`9Upgrade|0|0|\nadd_quick_exit|");
								}
								if (btn == "confirmrainbowupgrade")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontainss = false;
									SearchInventoryItem(peer, 6312, 1, iscontainss);
									if (!iscontainss)
									{
										Player::OnTextOverlay(peer, "`@You `4Don't `@Have `1Crystal `@Digger's Spade Yet!");
									}
									else
									{
										bool iscontainss = false;
										SearchInventoryItem(peer, 1796, 10, iscontainss);
										if (!iscontainss)
										{
											Player::OnTextOverlay(peer, "`9You `@Don't `9Have enough `eDiamond Locks`9!");
										}
										else
										{
											if (((PlayerInfo*)(peer->data))->amber >= 600)
											{
												RemoveInventoryItem(6312, 1, peer);
												RemoveInventoryItem(1796, 10, peer);
												((PlayerInfo*)(peer->data))->amber -= 600;
												bool success = true;
												SaveItemMoreTimes(7956, 1, peer, success);
												Player::OnTextOverlay(peer, "`^You Have `9Upgraded `^To The `#Rainbow `9Digger's `^Spade!");
												if (((PlayerInfo*)(peer->data))->haveGrowId) {
													try {
														std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
														PlayerInfo* p = ((PlayerInfo*)(peer->data));
														string username = PlayerDB::getProperName(p->rawName);
														if (ifff.fail()) {
															ifff.close();
														}
														if (ifff.is_open()) {
														}
														json j;
														ifff >> j;
														j["level"] = p->level;
														j["xp"] = p->xp;
														j["rubblexp"] = p->rubblexp;
														j["rubble"] = p->rubble;
														j["amberxp"] = p->amberxp;
														j["amber"] = p->amber;
														j["opalxp"] = p->opalxp;
														j["opal"] = p->opal;
														j["goldxp"] = p->goldxp;
														j["gold"] = p->gold;
														j["sapphirexp"] = p->sapphirexp;
														j["sapphire"] = p->sapphire;
														j["diamondxp"] = p->diamondxp;
														j["diamond"] = p->diamond;
														j["emeraldxp"] = p->emeraldxp;
														j["emerald"] = p->emerald;
														std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														o << j << std::endl;
													}
													catch (std::exception& e)
													{
														std::cerr << e.what() << std::endl;
													}
													catch (const std::out_of_range& e) {
														cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
													}
													catch (...) {
														cout << "reading file violation" << endl;
													}
												}

											}
											else {
												Player::OnTextOverlay(peer, "`9You `@Don't `9Have enought `8Ambers`9!");
											}
										}
									}
								}
								if (btn == "confirmcrystalupgrade")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontainss = false;
									SearchInventoryItem(peer, 2952, 1, iscontainss);
									if (!iscontainss)
									{
										Player::OnTextOverlay(peer, "`@You `4Don't `@Have Digger's Spade Yet!");
									}
									else
									{
										bool iscontainss = false;
										SearchInventoryItem(peer, 1796, 30, iscontainss);
										if (!iscontainss)
										{
											Player::OnTextOverlay(peer, "`9You `@Don't `9Have enough `eDiamond Locks`9!");
										}
										else
										{
											if (((PlayerInfo*)(peer->data))->diamond >= 3000)
											{
												RemoveInventoryItem(2952, 1, peer);
												RemoveInventoryItem(1796, 30, peer);
												((PlayerInfo*)(peer->data))->diamond -= 3000;
												bool success = true;
												SaveItemMoreTimes(6312, 1, peer, success);
												Player::OnTextOverlay(peer, "`^You Have `9Upgraded `^To The `1Crystal `9Digger's `^Spade!");
												if (((PlayerInfo*)(peer->data))->haveGrowId) {
													try {
														std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
														PlayerInfo* p = ((PlayerInfo*)(peer->data));
														string username = PlayerDB::getProperName(p->rawName);
														if (ifff.fail()) {
															ifff.close();
														}
														if (ifff.is_open()) {
														}
														json j;
														ifff >> j;
														j["level"] = p->level;
														j["xp"] = p->xp;
														j["rubblexp"] = p->rubblexp;
														j["rubble"] = p->rubble;
														j["amberxp"] = p->amberxp;
														j["amber"] = p->amber;
														j["opalxp"] = p->opalxp;
														j["opal"] = p->opal;
														j["goldxp"] = p->goldxp;
														j["gold"] = p->gold;
														j["sapphirexp"] = p->sapphirexp;
														j["sapphire"] = p->sapphire;
														j["diamondxp"] = p->diamondxp;
														j["diamond"] = p->diamond;
														j["emeraldxp"] = p->emeraldxp;
														j["emerald"] = p->emerald;
														std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														o << j << std::endl;
													}
													catch (std::exception& e)
													{
														std::cerr << e.what() << std::endl;
													}
													catch (const std::out_of_range& e) {
														cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
													}
													catch (...) {
														cout << "reading file violation" << endl;
													}
												}

											}
											else {
												Player::OnTextOverlay(peer, "`9You `@Don't `9Have enought `eDiamonds`9!");
											}
										}
									}
								}
								if (btn == "confirmNeptuneTridentupgrade")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontainss = false;
									SearchInventoryItem(peer, 9716, 1, iscontainss);
									if (!iscontainss)
									{
										Player::OnTextOverlay(peer, "`@You `4Don't `@Have Crystal Infused Sword  Yet!");
									}
									else
									{
										bool iscontainss = false;
										SearchInventoryItem(peer, 9758, 1, iscontainss);
										if (!iscontainss)
										{
											Player::OnTextOverlay(peer, "`@You `4Don't `@Have Neptune Trident's Yet!");
										}
										else
										{
											if (((PlayerInfo*)(peer->data))->gold >= 2100)
											{
												RemoveInventoryItem(9716, 1, peer);
												RemoveInventoryItem(9758, 1, peer);
												((PlayerInfo*)(peer->data))->gold -= 2100;
												bool success = true;
												SaveItemMoreTimes(9456, 1, peer, success);
												Player::OnTextOverlay(peer, "`^You Have `9Upgraded `^To The `9Golden `4Demon `9Digger's `^Spade!");
												if (((PlayerInfo*)(peer->data))->haveGrowId) {
													try {
														std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
														PlayerInfo* p = ((PlayerInfo*)(peer->data));
														string username = PlayerDB::getProperName(p->rawName);
														if (ifff.fail()) {
															ifff.close();
														}
														if (ifff.is_open()) {
														}
														json j;
														ifff >> j;
														j["level"] = p->level;
														j["xp"] = p->xp;
														j["rubblexp"] = p->rubblexp;
														j["rubble"] = p->rubble;
														j["amberxp"] = p->amberxp;
														j["amber"] = p->amber;
														j["opalxp"] = p->opalxp;
														j["opal"] = p->opal;
														j["goldxp"] = p->goldxp;
														j["gold"] = p->gold;
														j["sapphirexp"] = p->sapphirexp;
														j["sapphire"] = p->sapphire;
														j["diamondxp"] = p->diamondxp;
														j["diamond"] = p->diamond;
														j["emeraldxp"] = p->emeraldxp;
														j["emerald"] = p->emerald;
														std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														o << j << std::endl;
													}
													catch (std::exception& e)
													{
														std::cerr << e.what() << std::endl;
													}
													catch (const std::out_of_range& e) {
														cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
													}
													catch (...) {
														cout << "reading file violation" << endl;
													}
												}

											}
											else {
												Player::OnTextOverlay(peer, "`9You `@Don't `9Have enought `9Golds`9!");
											}
										}
									}
								}
								if (btn == "confirmdemonupgrade")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontainss = false;
									SearchInventoryItem(peer, 2952, 1, iscontainss);
									if (!iscontainss)
									{
										Player::OnTextOverlay(peer, "`@You `4Don't `@Have Digger's Spade Yet!");
									}
									else
									{
										bool iscontainss = false;
										SearchInventoryItem(peer, 1796, 60, iscontainss);
										if (!iscontainss)
										{
											Player::OnTextOverlay(peer, "`9You `@Don't `9Have enough `eDiamond Locks`9!");
										}
										else
										{
											if (((PlayerInfo*)(peer->data))->fFire >= 1500)
											{
												RemoveInventoryItem(2952, 1, peer);
												RemoveInventoryItem(1796, 60, peer);
												bool success = true;
												SaveItemMoreTimes(9716, 1, peer, success);
												Player::OnTextOverlay(peer, "`^You Have `9Upgraded `^To The `4Demon `9Digger's `^Spade!");
												UpdateLocalPlayerFragments(peer);
												RemovePlayerFragmentFire(peer, 1500);
											}
											else {
												Player::OnTextOverlay(peer, "`9You `@Don't `9Have enought `4Fire `9Fragment's`9!");
											}
										}
									}
								}
								if (btn == "killrewards")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									int killscount = 0;
									if (((PlayerInfo*)(peer->data))->haveGrowId == true)
									{

										ifstream fileStream213("kills/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										fileStream213 >> killscount;
										fileStream213.close();

									}
									Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`wKill Rewards``|left|18|0|0|\n\nadd_spacer|small|\nadd_textbox|`oYou Currently Have: " + std::to_string(killscount) + " Kills`o!|\nadd_button|10wlskills|`9Purchase 10 World Locks For 180 Kills|0|0|\nadd_button|storetokenkills|`9Purchase Growtoken For 330 Kills|0|0|\n\nadd_spacer|small|\nadd_button||`9Continue|0|0|\nadd_quick_exit|");
								}
								if (btn == "10wlskills")
								{
									int killscount = 0;
									if (((PlayerInfo*)(peer->data))->haveGrowId == true)
									{
										ifstream fileStream213("kills/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										fileStream213 >> killscount;
										fileStream213.close();
									}
									if (killscount >= 180)
									{
										killscount -= 180;
										ofstream fileStream213("kills/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										fileStream213 << killscount;
										fileStream213.close();
										bool success = true;
										SaveItemMoreTimes(242, 10, peer, success);
										Player::OnTextOverlay(peer, "`^You Have `9Purchased `@10 `2World Locks`^!");
									}
									else {
										Player::OnTextOverlay(peer, "`@You Dont Have Enough Kills!");
									}
								}
								if (btn == "storetokenkills")
								{
									int killscount = 0;
									if (((PlayerInfo*)(peer->data))->haveGrowId == true)
									{

										ifstream fileStream213("kills/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										fileStream213 >> killscount;
										fileStream213.close();

									}
									if (killscount >= 330)
									{
										killscount -= 330;
										ofstream fileStream213("kills/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										fileStream213 << killscount;
										fileStream213.close();
										bool success = true;
										SaveItemMoreTimes(1486, 1, peer, success);
										Player::OnTextOverlay(peer, "`^You Have `9Purchased `@Growtoken`^!");
									}
									else {
										Player::OnTextOverlay(peer, "`@You Dont Have Enough Kills!");
									}
								}
								if (btn == "lvluprewards")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`wLevelup Rewards``|left|18|0|0|\n\nadd_spacer|small|\nadd_button|claimRainbowRainbow|`9Claim Rainbow WWing `w[`410 `!LVL`w]|0|0|\nadd_textbox|`4R`4A`5I`7N`2B`4O`9W`o!|\nadd_button|claimCrystalCape|`9Claim Crystal Capes `w[`430 `!LVL`w]|0|0|\nadd_textbox|`oCrystal `1Capes `oWill give you `9Higher `oJump than regular, also awesome effects`o!|\nadd_button|claimdemonturtlehat|`9Claim Demon Turtle Hat `w[`450 `!LVL`w]|0|0|\nadd_textbox|`oSimilar to `^Turtle Hat`o, but `9Pretty `oNice And `4Demonish`o!|\nadd_button|claimgoldenstaff|`9Claim Golden Staff `w[`480 `!LVL`w]|0|0|\nadd_textbox|`oWarning `bBlack Magic `oAhead! This item allows you to convert any block you tap to `9Gold`o!||\nadd_button|claimmercywings|`9Claim Mercy Wings `w[`4100 `!LVL`w]|0|0|\nadd_textbox|`oMercy wings will give you `4Dr. `oTitle and `9Exclusive Movement Effects`o, Also a `9Flag`o!||\n\nadd_spacer|small|\nadd_button||`9Continue|0|0|\nadd_quick_exit|");
								}
								if (btn == "claimRainbowRainbow")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontainss = false;
									SearchInventoryItem(peer, 1672, 1, iscontainss);
									if (iscontainss)
									{
										Player::OnTextOverlay(peer, "`^You Already Have `3Rainbow `!Wings`^!");
									}
									else {
										if (((PlayerInfo*)(peer->data))->level >= 10) {
											bool success = true;
											SaveItemMoreTimes(1672, 1, peer, success);
											Player::OnTextOverlay(peer, "`^You Have `9Obtained `3Rainbow `!Wings`^!");
											Player::OnParticleEffect(peer, 365, ((PlayerInfo*)(peer->data))->x, ((PlayerInfo*)(peer->data))->y, 0);
										}
										else {
											Player::OnTextOverlay(peer, "`@You Need To Be `1Level `@10!");
										}
									}
								}
								if (btn == "claimdemonturtlehat")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontainss = false;
									SearchInventoryItem(peer, 9492, 1, iscontainss);
									if (iscontainss)
									{
										Player::OnTextOverlay(peer, "`^You Already Have `4Demon `2Turtle Hat`^!");
									}
									else {
										if (((PlayerInfo*)(peer->data))->level >= 50) {
											bool success = true;
											SaveItemMoreTimes(9492, 1, peer, success);
											Player::OnTextOverlay(peer, "`^You Have `9Obtained `4Demon `2Turtle Hat`^!");
											Player::OnParticleEffect(peer, 365, ((PlayerInfo*)(peer->data))->x, ((PlayerInfo*)(peer->data))->y, 0);
										}
										else {
											Player::OnTextOverlay(peer, "`@You Need To Be `1Level `@50!");
										}
									}
								}
								if (btn == "claimgoldenstaff")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontainss = false;
									SearchInventoryItem(peer, 9482, 1, iscontainss);
									if (iscontainss)
									{
										Player::OnTextOverlay(peer, "`^You Already Have `9Golden Staff`^!");
									}
									else {
										if (((PlayerInfo*)(peer->data))->level >= 80) {
											bool success = true;
											SaveItemMoreTimes(9482, 1, peer, success);
											Player::OnTextOverlay(peer, "`^You Have `9Obtained `^The `9Golden Staff`^!");
											Player::OnParticleEffect(peer, 365, ((PlayerInfo*)(peer->data))->x, ((PlayerInfo*)(peer->data))->y, 0);
										}
										else {
											Player::OnTextOverlay(peer, "`@You Need To Be `1Level `@80!");
										}
									}
								}
								if (btn == "claimCrystalCape")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontainss = false;
									SearchInventoryItem(peer, 1738, 1, iscontainss);
									if (iscontainss)
									{
										Player::OnTextOverlay(peer, "`^You Already Have `1Crystal Capes`^!");
									}
									else {
										if (((PlayerInfo*)(peer->data))->level >= 30) {
											bool success = true;
											SaveItemMoreTimes(1738, 1, peer, success);
											Player::OnTextOverlay(peer, "`^You Have `9Obtained `^The `1Crystal Capes`^!");
											Player::OnParticleEffect(peer, 365, ((PlayerInfo*)(peer->data))->x, ((PlayerInfo*)(peer->data))->y, 0);
										}
										else {
											Player::OnTextOverlay(peer, "`@You Need To Be `1Level `@30!");
										}
									}
								}
								if (btn == "claimmercywings")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontainss = false;
									SearchInventoryItem(peer, 8552, 1, iscontainss);
									if (iscontainss)
									{
										Player::OnTextOverlay(peer, "`^You Already Have `4Mercy `^Wings!");
									}
									else {
										if (((PlayerInfo*)(peer->data))->level >= 100) {
											bool success = true;
											SaveItemMoreTimes(8552, 1, peer, success);
											Player::OnTextOverlay(peer, "`^You Have `9Obtained `^The `4Mercy `^Wings!");
											Player::OnParticleEffect(peer, 365, ((PlayerInfo*)(peer->data))->x, ((PlayerInfo*)(peer->data))->y, 0);
										}
										else {
											Player::OnTextOverlay(peer, "`@You Need To Be `1Level `@100!");
										}
									}
								}
								if (btn == "changetonone")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->skill == "None")
									{
										Player::OnTextOverlay(peer, "`@You Don't Have Any `#Skill Groups `@To Leave!");
										continue;
									}
									else {
										((PlayerInfo*)(peer->data))->skill = "None";
										Player::OnTextOverlay(peer, "`^Succesfully Left `#Skill Groups`^!");
										sendState(peer);
										ofstream of("skill/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										of << "None";
										of.close();
										GamePacket p2 = packetEnd(appendIntx(appendIntx(appendIntx(appendIntx(appendString(createPacket(), "OnGuildDataChanged"), 1), 2), 0), 0));
										memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
										ENetPacket* packet3 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (isHere(peer, currentPeer))
											{
												enet_peer_send(currentPeer, 0, packet3);
											}
										}
										delete p2.data;
									}
								}
								//cout << "#20784" << endl;
								if (btn == "changetominer")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->skill == "Miner")
									{
										Player::OnTextOverlay(peer, "`@You Are `4Already `@In The `^Miner's `@Group!");
										continue;
									}
									else {
										bool iscontainss = false;
										SearchInventoryItem(peer, 1486, 30, iscontainss);
										if (!iscontainss)
										{
											Player::OnTextOverlay(peer, "`@You `4Don't `@Have Enough Growtokens!");
										}
										else
										{
											RemoveInventoryItem(1486, 30, peer);
											((PlayerInfo*)(peer->data))->skill = "Miner";
											Player::OnTextOverlay(peer, "`^Succesfully Joined `2Miner's `^Skill Group!");
											sendState(peer);
											Player::OnParticleEffect(peer, 366, ((PlayerInfo*)(peer->data))->x, ((PlayerInfo*)(peer->data))->y, 0);
											ofstream of("skill/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											of << "Miner";
											of.close();
										}
									}
								}
								if (btn == "changetofarmer")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->skill == "Farmer")
									{
										Player::OnTextOverlay(peer, "`@You Are `4Already `@In The `^Farmer's `@Group!");
										continue;
									}
									else {
										bool iscontainss = false;
										SearchInventoryItem(peer, 1486, 15, iscontainss);
										if (!iscontainss)
										{
											Player::OnTextOverlay(peer, "`@You `4Don't `@Have Enough Growtokens!");
										}
										else
										{
											RemoveInventoryItem(1486, 15, peer);
											((PlayerInfo*)(peer->data))->skill = "Farmer";
											Player::OnTextOverlay(peer, "`^Succesfully Joined `2Farmer's `^Skill Group!");
											sendState(peer);
											Player::OnParticleEffect(peer, 366, ((PlayerInfo*)(peer->data))->x, ((PlayerInfo*)(peer->data))->y, 0);
											ofstream of("skill/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											of << "Farmer";
											of.close();
										}
									}
								}
								if (btn == "collectgems")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (world->owner != "") {
										if (((PlayerInfo*)(peer->data))->rawName == world->owner)
										{
											UpdateLocalPlayerGems(peer);
											int gem = ((PlayerInfo*)(peer->data))->plantgems;
											int Pgems = 0;
											ifstream gemfd("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											gemfd >> Pgems;
											gemfd.close();
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`#Gem Storage``|left|6950|0|0|\n\nadd_spacer|small|\nadd_textbox|`oCurrently Stored `9Gems `2" + to_string(gem) + "`o!|\n\nadd_spacer|small|\nadd_textbox|`oYou Have `9Gems `2" + to_string(Pgems) + "!|\n\nadd_spacer|small|\nadd_button|collect10k|`9Collect `w[`410K`w] `9Gems|\nadd_button|collect100k|`9Collect `w[`4100K`w] `9Gems|\nadd_button|collect1m|`9Collect `w[`41M`w] `9Gems|\n\nadd_spacer|small|\nadd_button|gemback|`9Back|0|0|\nadd_quick_exit|"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											autoBan(peer, true, 24, "btn collectgems -> is not owner");
											continue;
										}
									}
								}
								if (btn == "addgems")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (world->owner != "") {
										if (((PlayerInfo*)(peer->data))->rawName == world->owner)
										{
											UpdateLocalPlayerGems(peer);
											int gem = ((PlayerInfo*)(peer->data))->plantgems;
											int Pgems = 0;
											ifstream gemfd("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											gemfd >> Pgems;
											gemfd.close();
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`#Gem Storage``|left|6950|0|0|\n\nadd_spacer|small|\nadd_textbox|`oCurrently Stored `9Gems `2" + to_string(gem) + "`o!|\n\nadd_spacer|small|\nadd_textbox|`oYou Have `9Gems `2" + to_string(Pgems) + "!|\n\nadd_spacer|small|\nadd_button|deposit10k|`9Deposit `w[`410K`w] `9Gems|\nadd_button|deposit100k|`9Deposit `w[`4100K`w] `9Gems|\nadd_button|deposit1m|`9Deposit `w[`41M`w] `9Gems|\n\nadd_spacer|small|\nadd_button|gemback|`9Back|0|0|\nadd_quick_exit|"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											autoBan(peer, true, 1, "btn addgems -> is not owner");
											continue;
										}
									}
								}
								if (btn == "gemback")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (world->owner != "") {
										if (((PlayerInfo*)(peer->data))->rawName == world->owner)
										{
											UpdateLocalPlayerGems(peer);
											int gem = ((PlayerInfo*)(peer->data))->plantgems;
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`#Gem Storage``|left|6950|0|0|\n\nadd_spacer|small|\nadd_textbox|`#Gem Storage `oAllows you to `9Store Gems `oIn It! You can store as many as you want! `w[`4Warning`w] `oThis `9Storage `oIs personal, Other `9Players `oIn your world `@Won't `oBe able to `@Collect/Add `9Gems`o! If you will `^Sell `oYour `9world `oYour `9Gems `4WILL BE STILL `oIn your `9Account`o!|\n\nadd_spacer|small|\nadd_textbox|`oCurrently Stored `9Gems `2" + to_string(gem) + "`o!|\n\nadd_spacer|small|\nadd_button|collectgems|`9Collect|\nadd_button|addgems|`9Add Gems|0|0|\nadd_quick_exit|"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											autoBan(peer, true, 1, "btn gemback -> is not owner");
											continue;
										}
									}
								}
								if (btn == "collect1m") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (world->owner != "") {
										if (((PlayerInfo*)(peer->data))->rawName == world->owner)
										{
											std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string content((std::istreambuf_iterator<char>(ifsz)),
												(std::istreambuf_iterator<char>()));
											int b = atoi(content.c_str());
											UpdateLocalPlayerFragments(peer);
											int gem = ((PlayerInfo*)(peer->data))->plantgems;
											if (gem >= 1000000)
											{
												RemovePlayerPlantGems(peer, 1000000);
												int gembux = atoi(content.c_str());
												int fingembux = gembux + 1000000;
												ofstream myfile;
												myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												myfile << fingembux;
												myfile.close();
												int gemcalc = gembux + 1000000;
												Player::OnSetBux(peer, gemcalc, 0);
												Player::OnTextOverlay(peer, "`^You Have `2Received `41000000 `9Gems`^!");
											}
										}
										else
										{
											Player::OnTextOverlay(peer, "`@Collect `4Aborted`@! Not `4Enough `9Gems`@!");
										}
									}
								}
								if (btn == "collect100k") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (world->owner != "") {
										if (((PlayerInfo*)(peer->data))->rawName == world->owner)
										{
											std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string content((std::istreambuf_iterator<char>(ifsz)),
												(std::istreambuf_iterator<char>()));
											int b = atoi(content.c_str());
											UpdateLocalPlayerFragments(peer);
											int gem = ((PlayerInfo*)(peer->data))->plantgems;
											if (gem >= 100000)
											{
												RemovePlayerPlantGems(peer, 100000);
												int gembux = atoi(content.c_str());
												int fingembux = gembux + 100000;
												ofstream myfile;
												myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												myfile << fingembux;
												myfile.close();
												int gemcalc = gembux + 100000;
												Player::OnSetBux(peer, gemcalc, 0);
												Player::OnTextOverlay(peer, "`^You Have `2Received `4100000 `9Gems`^!");
											}
										}
										else
										{
											Player::OnTextOverlay(peer, "`@Collect `4Aborted`@! Not `4Enough `9Gems`@!");
										}
									}
								}
								if (btn == "collect10k") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (world->owner != "") {
										if (((PlayerInfo*)(peer->data))->rawName == world->owner)
										{
											std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string content((std::istreambuf_iterator<char>(ifsz)),
												(std::istreambuf_iterator<char>()));
											int b = atoi(content.c_str());
											UpdateLocalPlayerFragments(peer);
											int gem = ((PlayerInfo*)(peer->data))->plantgems;
											if (gem >= 10000)
											{
												RemovePlayerPlantGems(peer, 10000);
												int gembux = atoi(content.c_str());
												int fingembux = gembux + 10000;
												ofstream myfile;
												myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												myfile << fingembux;
												myfile.close();
												int gemcalc = gembux + 10000;
												Player::OnSetBux(peer, gemcalc, 0);
												Player::OnTextOverlay(peer, "`^You Have `2Received `410000 `9Gems`^!");
											}
										}
										else
										{
											Player::OnTextOverlay(peer, "`@Collect `4Aborted`@! Not `4Enough `9Gems`@!");
										}
									}
								}
								if (btn == "deposit10k")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (world->owner != "") {
										if (((PlayerInfo*)(peer->data))->rawName == world->owner)
										{
											std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string content((std::istreambuf_iterator<char>(ifsz)),
												(std::istreambuf_iterator<char>()));
											int b = atoi(content.c_str());
											if (b > 9999)
											{
												int b = atoi(content.c_str());
												int gemcalc10k = b - 10000;
												ofstream myfile2;
												myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												myfile2 << std::to_string(gemcalc10k);
												myfile2.close();
												std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string contentx((std::istreambuf_iterator<char>(ifszi)),
													(std::istreambuf_iterator<char>()));
												int updgem = atoi(contentx.c_str());
												Player::OnSetBux(peer, updgem, 0);
												UpdateLocalPlayerGems(peer);
												int gem = ((PlayerInfo*)(peer->data))->plantgems;
												AddPlayerPlantGems(peer, 10000);
												Player::OnTextOverlay(peer, "`^Deposit `2Completed`^! Added `410000 `9Gems`^!");
												string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
												BYTE* data = new BYTE[5 + text.length()];
												BYTE zero = 0;
												int type = 3;
												memcpy(data, &type, 4);
												memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
												memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
												ENetPacket* packetsou = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packetsou);
											}
										}
										else
										{
											Player::OnTextOverlay(peer, "`@Deposit `4Aborted`@! Not `4Enough `9Gems`@!");
										}
									}
								}
								//cout << "#21125" << endl;
								if (btn == "deposit100k")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (world->owner != "") {
										if (((PlayerInfo*)(peer->data))->rawName == world->owner)
										{
											std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string content((std::istreambuf_iterator<char>(ifsz)),
												(std::istreambuf_iterator<char>()));
											int b = atoi(content.c_str());
											if (b > 99999)
											{
												int b = atoi(content.c_str());
												int gemcalc10k = b - 100000;
												ofstream myfile2;
												myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												myfile2 << std::to_string(gemcalc10k);
												myfile2.close();
												std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string contentx((std::istreambuf_iterator<char>(ifszi)),
													(std::istreambuf_iterator<char>()));
												int updgem = atoi(contentx.c_str());
												Player::OnSetBux(peer, updgem, 0);
												UpdateLocalPlayerGems(peer);
												int gem = ((PlayerInfo*)(peer->data))->plantgems;
												AddPlayerPlantGems(peer, 100000);
												Player::OnTextOverlay(peer, "`^Deposit `2Completed`^! Added `4100000 `9Gems`^!");
												string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
												BYTE* data = new BYTE[5 + text.length()];
												BYTE zero = 0;
												int type = 3;
												memcpy(data, &type, 4);
												memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
												memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
												ENetPacket* packetsou = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packetsou);
											}
										}
										else
										{
											Player::OnTextOverlay(peer, "`@Deposit `4Aborted`@! Not `4Enough `9Gems`@!");
										}
									}
								}
								if (btn == "deposit1m")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (world->owner != "") {
										if (((PlayerInfo*)(peer->data))->rawName == world->owner)
										{
											std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string content((std::istreambuf_iterator<char>(ifsz)),
												(std::istreambuf_iterator<char>()));
											int b = atoi(content.c_str());
											if (b > 999999)
											{
												int b = atoi(content.c_str());
												int gemcalc10k = b - 1000000;
												ofstream myfile2;
												myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												myfile2 << std::to_string(gemcalc10k);
												myfile2.close();
												std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string contentx((std::istreambuf_iterator<char>(ifszi)),
													(std::istreambuf_iterator<char>()));
												int updgem = atoi(contentx.c_str());
												Player::OnSetBux(peer, updgem, 0);
												UpdateLocalPlayerGems(peer);
												int gem = ((PlayerInfo*)(peer->data))->plantgems;
												AddPlayerPlantGems(peer, 1000000);
												Player::OnTextOverlay(peer, "`^Deposit `2Completed`^! Added `41000000 `9Gems`^!");
												string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
												BYTE* data = new BYTE[5 + text.length()];
												BYTE zero = 0;
												int type = 3;
												memcpy(data, &type, 4);
												memcpy(data + 4, text.c_str(), text.length());
												memcpy(data + 4 + text.length(), &zero, 1);
												ENetPacket* packetsou = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packetsou);
											}
										}
										else
										{
											Player::OnTextOverlay(peer, "`@Deposit `4Aborted`@! Not `4Enough `9Gems`@!");
										}
									}
								}
								if (btn == "magicmachine") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`wMagic Machine``|left|9170|0|0|\n\nadd_spacer|small|\nadd_textbox|`oChoose block which you want to shatter!|\nadd_button_with_icon|iamethyst||staticBlueFrame|4762|\nadd_button_with_icon|ionyx||staticBlueFrame|7382|\nadd_button_with_icon|ismaraged||staticBlueFrame|3948|\nadd_button_with_icon|idiamondstone||staticBlueFrame|3606|\nadd_button_with_icon|ipinkdiamond||staticBlueFrame|3146|\n\nadd_spacer||0|0|\nadd_quick_exit|");
								}
								if (btn == "iamethyst") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 4762, 100, iscontains);
									if (iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wMagic Machine``|left|9170|0|0|\n\nadd_spacer|small|\nadd_textbox|`oAre you sure you want to convert `9100 `#Amethyst Blocks `oInto `9crystals`o? [`4This cannot be undone after clicking convert!`o]|\n\nadd_spacer|small|\nadd_button|yesconvertamethyst|`9Convert!|0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										Player::OnTextOverlay(peer, "`@You dont have `#Amethyst Block's`@!");
									}
								}
								if (btn == "ionyx") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 7382, 100, iscontains);
									if (iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wMagic Machine``|left|9170|0|0|\n\nadd_spacer|small|\nadd_textbox|`oAre you sure you want to convert `9100 `bOnyx Blocks `oInto `9crystals`o? [`4This cannot be undone after clicking convert!`o]|\n\nadd_spacer|small|\nadd_button|yesconvertonyx|`9Convert!|0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										Player::OnTextOverlay(peer, "`@You dont have `bOnyx Block's`@!");
									}
								}
								if (btn == "ismaraged") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 3948, 100, iscontains);
									if (iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wMagic Machine``|left|9170|0|0|\n\nadd_spacer|small|\nadd_textbox|`oAre you sure you want to convert `9100 `2Amber Blocks `oInto `9crystals`o? [`4This cannot be undone after clicking convert!`o]|\n\nadd_spacer|small|\nadd_button|yesconvertsmaraged|`9Convert!|0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										Player::OnTextOverlay(peer, "`@You dont have `2Amber Block's`@!");
									}
								}
								if (btn == "idiamondstone") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 3606, 100, iscontains);
									if (iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wMagic Machine``|left|9170|0|0|\n\nadd_spacer|small|\nadd_textbox|`oAre you sure you want to convert `9100 `1Topaz Block `oInto `9crystals`o? [`4This cannot be undone after clicking convert!`o]|\n\nadd_spacer|small|\nadd_button|yesconvertdiamondstone|`9Convert!|0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										Player::OnTextOverlay(peer, "`@You dont have `1Topaz Block's`@!");
									}
								}
								if (btn == "ipinkdiamond") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 3146, 100, iscontains);
									if (iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wMagic Machine``|left|9170|0|0|\n\nadd_spacer|small|\nadd_textbox|`oAre you sure you want to convert `9100 `#Rainbow Crystal Block `oInto `9crystals`o? [`4This cannot be undone after clicking convert!`o]|\n\nadd_spacer|small|\nadd_button|yesconvertpinkdiamond|`9Convert!|0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										Player::OnTextOverlay(peer, "`@You dont have `#Rainbow Crystal Block's`@!");
									}
								}
								if (btn == "yesconvertamethyst") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontainsss = false;
									SearchInventoryItem(peer, 4762, 100, iscontainsss);
									if (!iscontainsss)
									{
										Player::OnConsoleMessage(peer, "`4Anticheat marked you as suspicious!");
										continue;
									}
									else {
										Player::OnTextOverlay(peer, "`9You Have Shattered 100 `#Amethyst `9Blocks!");
										RemoveInventoryItem(4762, 100, peer);
										string crystaluMas[26] = { "gold", "sapphire", "sapphire", "diamond", "rubble", "sapphire", "rubble", "rubble", "opal", "opal", "opal", "opal", "gold", "emerald", "amber", "sapphire", "amber", "sapphire", "amber", "amber", "amber", "emerald", "gold", "gold", "gold", "amber" };
										int crystalChance = rand() % 15;
										int randIndex = rand() % 26;
										string crystalName = crystaluMas[randIndex];
										GiveChestPrizeCrystal(peer, crystalName, crystalChance);
										int gemChance = rand() % 28000;
										GiveChestPrizeGems(peer, gemChance);
										int effect = 224;
										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										Player::OnParticleEffect(peer, effect, x, y, 0);

										if (((PlayerInfo*)(peer->data))->guild != "")
										{
											int currentgpoints = 0;
											ifstream guildstream1("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
											guildstream1 >> currentgpoints;
											guildstream1.close();
											if (((PlayerInfo*)(peer->data))->cloth_hand == 9508)
											{
												int newgpoints = currentgpoints + 30;
												ofstream guildstream3("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
												guildstream3 << newgpoints;
												guildstream3.close();
											}
											else {
												int newgpoints = currentgpoints + 15;
												ofstream guildstream3("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
												guildstream3 << newgpoints;
												guildstream3.close();
											}
											// M CONTRIBUTION
											int currentplayercontribution = 0;
											namespace fs = std::experimental::filesystem;
											if (!fs::is_directory("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild) || !fs::exists("guildrewards / contribution / " + ((PlayerInfo*)(peer->data))->guild)) {
												fs::create_directory("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild);
												ifstream mcontr("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												mcontr >> currentplayercontribution;
												mcontr.close();
												if (((PlayerInfo*)(peer->data))->cloth_hand == 9508)
												{
													int newcontr = currentplayercontribution + 30;
													ofstream savecon("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													savecon << newcontr;
													savecon.close();
												}
												else {
													int newcontr = currentplayercontribution + 15;
													ofstream savecon("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													savecon << newcontr;
													savecon.close();
												}
											}
											else {
												ifstream mcontr("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												mcontr >> currentplayercontribution;
												mcontr.close();
												if (((PlayerInfo*)(peer->data))->cloth_hand == 9508)
												{
													int newcontr = currentplayercontribution + 30;
													ofstream savecon("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													savecon << newcontr;
													savecon.close();
												}
												else {
													int newcontr = currentplayercontribution + 15;
													ofstream savecon("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													savecon << newcontr;
													savecon.close();
												}
											}
											if (((PlayerInfo*)(peer->data))->chatnotifications == true)
											{
												if (((PlayerInfo*)(peer->data))->cloth_hand == 9508)
												{
													Player::OnConsoleMessage(peer, "`8[GPOINTS] `^You have obtained `@30 `^Guild Points!");
												}
												else {
													Player::OnConsoleMessage(peer, "`8[GPOINTS] `^You have obtained `@15 `^Guild Points!");
												}
											}
										}

									}
								}
								if (btn == "yesconvertonyx") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontainsss = false;
									SearchInventoryItem(peer, 7382, 100, iscontainsss);
									if (!iscontainsss)
									{
										Player::OnConsoleMessage(peer, "`4Anticheat marked you as suspicious!");
										continue;
									}
									else {
										Player::OnTextOverlay(peer, "`9You Have Shattered 100 `bOnyx `9Blocks!");
										RemoveInventoryItem(7382, 100, peer);
										string crystaluMas[26] = { "gold", "sapphire", "sapphire", "diamond", "diamond", "diamond", "rubble", "rubble", "opal", "opal", "sapphire", "opal", "gold", "amber", "amber", "emerald", "amber", "emerald", "amber", "amber", "amber", "emerald", "gold", "gold", "gold", "amber" };
										int crystalChance = rand() % 35;
										int randIndex = rand() % 26;
										string crystalName = crystaluMas[randIndex];
										GiveChestPrizeCrystal(peer, crystalName, crystalChance);
										int gemChance = rand() % 35000;
										GiveChestPrizeGems(peer, gemChance);
										int effect = 224;
										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										Player::OnParticleEffect(peer, effect, x, y, 0);

										if (((PlayerInfo*)(peer->data))->guild != "")
										{
											int currentgpoints = 0;
											ifstream guildstream1("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
											guildstream1 >> currentgpoints;
											guildstream1.close();
											if (((PlayerInfo*)(peer->data))->cloth_hand == 9508)
											{
												int newgpoints = currentgpoints + 50;
												ofstream guildstream3("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
												guildstream3 << newgpoints;
												guildstream3.close();
											}
											else {
												int newgpoints = currentgpoints + 25;
												ofstream guildstream3("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
												guildstream3 << newgpoints;
												guildstream3.close();
											}
											// M CONTRIBUTION
											int currentplayercontribution = 0;
											namespace fs = std::experimental::filesystem;
											if (!fs::is_directory("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild) || !fs::exists("guildrewards / contribution / " + ((PlayerInfo*)(peer->data))->guild)) {
												fs::create_directory("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild);
												ifstream mcontr("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												mcontr >> currentplayercontribution;
												mcontr.close();
												if (((PlayerInfo*)(peer->data))->cloth_hand == 9508)
												{
													int newcontr = currentplayercontribution + 50;
													ofstream savecon("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													savecon << newcontr;
													savecon.close();
												}
												else {
													int newcontr = currentplayercontribution + 25;
													ofstream savecon("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													savecon << newcontr;
													savecon.close();
												}
											}
											else {
												ifstream mcontr("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												mcontr >> currentplayercontribution;
												mcontr.close();
												if (((PlayerInfo*)(peer->data))->cloth_hand == 9508)
												{
													int newcontr = currentplayercontribution + 50;
													ofstream savecon("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													savecon << newcontr;
													savecon.close();
												}
												else {
													int newcontr = currentplayercontribution + 25;
													ofstream savecon("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													savecon << newcontr;
													savecon.close();
												}
											}
											if (((PlayerInfo*)(peer->data))->chatnotifications == true)
											{
												if (((PlayerInfo*)(peer->data))->cloth_hand == 9508)
												{
													Player::OnConsoleMessage(peer, "`8[GPOINTS] `^You have obtained `@50 `^Guild Points!");
												}
												else {
													Player::OnConsoleMessage(peer, "`8[GPOINTS] `^You have obtained `@25 `^Guild Points!");
												}
											}
										}
									}
								}
								if (btn == "yesconvertsmaraged") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontainsss = false;
									SearchInventoryItem(peer, 3948, 100, iscontainsss);
									if (!iscontainsss)
									{
										Player::OnConsoleMessage(peer, "`4Anticheat marked you as suspicious!");
										continue;
									}
									else {
										Player::OnTextOverlay(peer, "`9You Have Shattered 100 `2Amber `9Blocks!");
										RemoveInventoryItem(3948, 100, peer);
										string crystaluMas[26] = { "gold", "sapphire", "sapphire", "diamond", "diamond", "diamond", "rubble", "rubble", "opal", "opal", "sapphire", "opal", "gold", "amber", "amber", "emerald", "amber", "emerald", "amber", "amber", "amber", "emerald", "gold", "gold", "gold", "amber" };
										int crystalChance = rand() % 35;
										int randIndex = rand() % 26;
										string crystalName = crystaluMas[randIndex];
										GiveChestPrizeCrystal(peer, crystalName, crystalChance);
										int gemChance = rand() % 40000;
										GiveChestPrizeGems(peer, gemChance);
										int effect = 224;
										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										Player::OnParticleEffect(peer, effect, x, y, 0);

										if (((PlayerInfo*)(peer->data))->guild != "")
										{
											int currentgpoints = 0;
											ifstream guildstream1("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
											guildstream1 >> currentgpoints;
											guildstream1.close();
											if (((PlayerInfo*)(peer->data))->cloth_hand == 9508)
											{
												int newgpoints = currentgpoints + 60;
												ofstream guildstream3("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
												guildstream3 << newgpoints;
												guildstream3.close();
											}
											else {
												int newgpoints = currentgpoints + 30;
												ofstream guildstream3("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
												guildstream3 << newgpoints;
												guildstream3.close();
											}
											// M CONTRIBUTION
											int currentplayercontribution = 0;
											namespace fs = std::experimental::filesystem;
											if (!fs::is_directory("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild) || !fs::exists("guildrewards / contribution / " + ((PlayerInfo*)(peer->data))->guild)) {
												fs::create_directory("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild);
												ifstream mcontr("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												mcontr >> currentplayercontribution;
												mcontr.close();
												if (((PlayerInfo*)(peer->data))->cloth_hand == 9508)
												{
													int newcontr = currentplayercontribution + 60;
													ofstream savecon("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													savecon << newcontr;
													savecon.close();
												}
												else {
													int newcontr = currentplayercontribution + 30;
													ofstream savecon("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													savecon << newcontr;
													savecon.close();
												}
											}
											else {
												ifstream mcontr("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												mcontr >> currentplayercontribution;
												mcontr.close();
												if (((PlayerInfo*)(peer->data))->cloth_hand == 9508)
												{
													int newcontr = currentplayercontribution + 60;
													ofstream savecon("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													savecon << newcontr;
													savecon.close();
												}
												else {
													int newcontr = currentplayercontribution + 30;
													ofstream savecon("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													savecon << newcontr;
													savecon.close();
												}
											}
											if (((PlayerInfo*)(peer->data))->chatnotifications == true)
											{
												if (((PlayerInfo*)(peer->data))->cloth_hand == 9508)
												{
													Player::OnConsoleMessage(peer, "`8[GPOINTS] `^You have obtained `@60 `^Guild Points!");
												}
												else {
													Player::OnConsoleMessage(peer, "`8[GPOINTS] `^You have obtained `@30 `^Guild Points!");
												}
											}
										}
									}
								}
								if (btn == "yesconvertsmaraged") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontainsss = false;
									SearchInventoryItem(peer, 3606, 100, iscontainsss);
									if (!iscontainsss)
									{
										Player::OnConsoleMessage(peer, "`4Anticheat marked you as suspicious!");
										continue;
									}
									else {
										Player::OnTextOverlay(peer, "`9You Have Shattered 100 `1Diamond `9Stones!");
										RemoveInventoryItem(3606, 100, peer);
										string crystaluMas[26] = { "gold", "sapphire", "sapphire", "diamond", "diamond", "diamond", "rubble", "rubble", "opal", "opal", "sapphire", "opal", "gold", "amber", "amber", "emerald", "amber", "emerald", "amber", "amber", "amber", "emerald", "gold", "gold", "gold", "amber" };
										int crystalChance = rand() % 35;
										int randIndex = rand() % 26;
										string crystalName = crystaluMas[randIndex];
										GiveChestPrizeCrystal(peer, crystalName, crystalChance);
										int gemChance = rand() % 50000;
										GiveChestPrizeGems(peer, gemChance);
										int effect = 224;
										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										Player::OnParticleEffect(peer, effect, x, y, 0);

										if (((PlayerInfo*)(peer->data))->guild != "")
										{
											int currentgpoints = 0;
											ifstream guildstream1("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
											guildstream1 >> currentgpoints;
											guildstream1.close();
											if (((PlayerInfo*)(peer->data))->cloth_hand == 9508)
											{
												int newgpoints = currentgpoints + 80;
												ofstream guildstream3("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
												guildstream3 << newgpoints;
												guildstream3.close();
											}
											else {
												int newgpoints = currentgpoints + 40;
												ofstream guildstream3("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
												guildstream3 << newgpoints;
												guildstream3.close();
											}
											// M CONTRIBUTION
											int currentplayercontribution = 0;
											namespace fs = std::experimental::filesystem;
											if (!fs::is_directory("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild) || !fs::exists("guildrewards / contribution / " + ((PlayerInfo*)(peer->data))->guild)) {
												fs::create_directory("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild);
												ifstream mcontr("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												mcontr >> currentplayercontribution;
												mcontr.close();
												if (((PlayerInfo*)(peer->data))->cloth_hand == 9508)
												{
													int newcontr = currentplayercontribution + 80;
													ofstream savecon("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													savecon << newcontr;
													savecon.close();
												}
												else {
													int newcontr = currentplayercontribution + 40;
													ofstream savecon("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													savecon << newcontr;
													savecon.close();
												}
											}
											else {
												ifstream mcontr("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												mcontr >> currentplayercontribution;
												mcontr.close();
												if (((PlayerInfo*)(peer->data))->cloth_hand == 9508)
												{
													int newcontr = currentplayercontribution + 80;
													ofstream savecon("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													savecon << newcontr;
													savecon.close();
												}
												else {
													int newcontr = currentplayercontribution + 40;
													ofstream savecon("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													savecon << newcontr;
													savecon.close();
												}
											}
											if (((PlayerInfo*)(peer->data))->chatnotifications == true)
											{
												if (((PlayerInfo*)(peer->data))->cloth_hand == 9508)
												{
													Player::OnConsoleMessage(peer, "`8[GPOINTS] `^You have obtained `@80 `^Guild Points!");
												}
												else {
													Player::OnConsoleMessage(peer, "`8[GPOINTS] `^You have obtained `@40 `^Guild Points!");
												}
											}
										}
									}
								}
								if (btn == "yesconvertpinkdiamond") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontainsss = false;
									SearchInventoryItem(peer, 3146, 100, iscontainsss);
									if (!iscontainsss)
									{
										Player::OnConsoleMessage(peer, "`4Anticheat marked you as suspicious!");
										continue;
									}
									else {
										Player::OnTextOverlay(peer, "`9You Have Shattered 100 `#Rainbow Crystal Block!");
										RemoveInventoryItem(3146, 100, peer);
										string crystaluMas[26] = { "gold", "sapphire", "sapphire", "diamond", "diamond", "diamond", "rubble", "rubble", "opal", "opal", "sapphire", "opal", "gold", "amber", "amber", "emerald", "amber", "emerald", "amber", "amber", "amber", "emerald", "gold", "gold", "gold", "amber" };
										int crystalChance = rand() % 35;
										int randIndex = rand() % 26;
										string crystalName = crystaluMas[randIndex];
										GiveChestPrizeCrystal(peer, crystalName, crystalChance);
										int gemChance = rand() % 60000;
										GiveChestPrizeGems(peer, gemChance);
										int effect = 224;
										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										Player::OnParticleEffect(peer, effect, x, y, 0);

										if (((PlayerInfo*)(peer->data))->guild != "")
										{
											int currentgpoints = 0;
											ifstream guildstream1("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
											guildstream1 >> currentgpoints;
											guildstream1.close();
											if (((PlayerInfo*)(peer->data))->cloth_hand == 9508)
											{
												int newgpoints = currentgpoints + 100;
												ofstream guildstream3("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
												guildstream3 << newgpoints;
												guildstream3.close();
											}
											else {
												int newgpoints = currentgpoints + 50;
												ofstream guildstream3("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
												guildstream3 << newgpoints;
												guildstream3.close();
											}
											// M CONTRIBUTION
											int currentplayercontribution = 0;
											namespace fs = std::experimental::filesystem;
											if (!fs::is_directory("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild) || !fs::exists("guildrewards / contribution / " + ((PlayerInfo*)(peer->data))->guild)) {
												fs::create_directory("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild);
												ifstream mcontr("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												mcontr >> currentplayercontribution;
												mcontr.close();
												if (((PlayerInfo*)(peer->data))->cloth_hand == 9508)
												{
													int newcontr = currentplayercontribution + 100;
													ofstream savecon("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													savecon << newcontr;
													savecon.close();
												}
												else {
													int newcontr = currentplayercontribution + 50;
													ofstream savecon("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													savecon << newcontr;
													savecon.close();
												}
											}
											else {
												ifstream mcontr("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												mcontr >> currentplayercontribution;
												mcontr.close();
												if (((PlayerInfo*)(peer->data))->cloth_hand == 9508)
												{
													int newcontr = currentplayercontribution + 100;
													ofstream savecon("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													savecon << newcontr;
													savecon.close();
												}
												else {
													int newcontr = currentplayercontribution + 50;
													ofstream savecon("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													savecon << newcontr;
													savecon.close();
												}
											}
											if (((PlayerInfo*)(peer->data))->chatnotifications == true)
											{
												if (((PlayerInfo*)(peer->data))->cloth_hand == 9508)
												{
													Player::OnConsoleMessage(peer, "`8[GPOINTS] `^You have obtained `@100 `^Guild Points!");
												}
												else {
													Player::OnConsoleMessage(peer, "`8[GPOINTS] `^You have obtained `@50 `^Guild Points!");
												}
											}
										}
									}
								}
								//cout << "#21539" << endl;

								//CHESTU RANDOMIZACIJA CHESTU RANDOMIZACIJA CHESTU RANDOMIZACIJA
								if (btn == "openbronze") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 6204, 1, iscontains);
									if (!iscontains)
									{
										autoBan(peer, true, 1, "btn openbronze -> doesnt contains 6204 item");
										continue;
									}
									else {
										RemoveInventoryItem(6204, 1, peer);
										int kuriPrizaDuot = rand() % 3 + 1;
										if (kuriPrizaDuot == 1)
										{
											int gemChance = rand() % 20000;
											GiveChestPrizeGems(peer, gemChance);
										}
										if (kuriPrizaDuot == 2)
										{
											string crystaluMas[26] = { "gold", "sapphire", "sapphire", "diamond", "rubble", "rubble", "rubble", "rubble", "opal", "opal", "opal", "opal", "gold", "amber", "amber", "amber", "amber", "amber", "amber", "amber", "amber", "emerald", "gold", "gold", "gold", "amber" };
											int crystalChance = rand() % 15;
											int randIndex = rand() % 26;
											string crystalName = crystaluMas[randIndex];
											GiveChestPrizeCrystal(peer, crystalName, crystalChance);
										}
										if (kuriPrizaDuot == 3)
										{
											int itemuMas[5] = { 7912, 7912, 7912, 5078, 8834 };
											int ItemChance = 1;
											int randIndex = rand() % 5;
											int itemId = itemuMas[randIndex];
											GiveChestPrizeItem(peer, itemId, ItemChance, 30);
										}
									}
								}
								if (btn == "opensilver") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 6202, 1, iscontains);
									if (!iscontains)
									{
										autoBan(peer, true, 1, "btn opensilver -> doesnt contains 6202 item");
										continue;
									}
									else {
										RemoveInventoryItem(6202, 1, peer);
										int kuriPrizaDuot = rand() % 3 + 1;
										if (kuriPrizaDuot == 1)
										{
											int gemChance = rand() % 70000;
											GiveChestPrizeGems(peer, gemChance);
										}
										if (kuriPrizaDuot == 2)
										{
											string crystaluMas[25] = { "gold", "sapphire", "sapphire", "sapphire", "diamond", "diamond", "rubble", "rubble", "rubble", "opal", "opal", "opal", "opal", "gold", "amber", "amber", "amber", "amber", "amber", "emerald", "emerald", "gold", "gold", "gold", "gold" };
											int crystalChance = rand() % 20;
											int randIndex = rand() % 25;
											string crystalName = crystaluMas[randIndex];
											GiveChestPrizeCrystal(peer, crystalName, crystalChance);
										}
										if (kuriPrizaDuot == 3)
										{
											int itemuMas[5] = { 7912, 5078, 5078, 5078, 8834 };
											int ItemChance = 1;
											int randIndex = rand() % 5;
											int itemId = itemuMas[randIndex];
											GiveChestPrizeItem(peer, itemId, ItemChance, 50);
										}
									}
								}
								if (btn == "opengold") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 6200, 1, iscontains);
									if (!iscontains)
									{
										autoBan(peer, true, 1, "btn opengold -> doesnt contains 6200 item");
										continue;
									}
									else {
										RemoveInventoryItem(6200, 1, peer);
										int kuriPrizaDuot = rand() % 3 + 1;
										if (kuriPrizaDuot == 1)
										{
											int gemChance = rand() % 120000;
											GiveChestPrizeGems(peer, gemChance);
										}
										if (kuriPrizaDuot == 2)
										{
											string crystaluMas[19] = { "gold", "sapphire", "sapphire", "gold", "diamond", "diamond", "rubble", "diamond", "rubble", "opal", "opal", "gold", "amber", "emerald", "amber", "emerald", "emerald", "gold" };
											int crystalChance = rand() % 25;
											int randIndex = rand() % 19;
											string crystalName = crystaluMas[randIndex];
											GiveChestPrizeCrystal(peer, crystalName, crystalChance);
										}
										if (kuriPrizaDuot == 3)
										{
											int itemuMas[8] = { 7912, 7912, 7912, 7912, 5078, 5078, 5078, 8834 };
											int ItemChance = 1;
											int randIndex = rand() % 8;
											int itemId = itemuMas[randIndex];
											GiveChestPrizeItem(peer, itemId, ItemChance, 70);
										}
									}
								}
								if (btn == "openwinter") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 7484, 1, iscontains);
									if (!iscontains)
									{
										autoBan(peer, true, 1, "btn openwinter -> doesnt contains 7484 item");
										continue;
									}
									else {
										RemoveInventoryItem(7484, 1, peer);
										int kuriPrizaDuot = rand() % 3 + 1;
										if (kuriPrizaDuot == 1)
										{
											int gemChance = rand() % 170000;
											GiveChestPrizeGems(peer, gemChance);
										}
										if (kuriPrizaDuot == 2)
										{
											string crystaluMas[18] = { "gold", "sapphire", "sapphire", "sapphire","diamond", "diamond", "diamond", "diamond", "rubble", "opal", "opal", "gold", "amber", "emerald", "emerald", "emerald", "emerald", "gold" };
											int crystalChance = rand() % 30;
											int randIndex = rand() % 18;
											string crystalName = crystaluMas[randIndex];
											GiveChestPrizeCrystal(peer, crystalName, crystalChance);
										}
										if (kuriPrizaDuot == 3)
										{
											int itemuMas[12] = { 7912, 7912, 7912, 7912, 5078, 5078, 5078, 8834, 8834, 8834, 8834, 8834 };
											int ItemChance = 1;
											int randIndex = rand() % 12;
											int itemId = itemuMas[randIndex];
											GiveChestPrizeItem(peer, itemId, ItemChance, 90);
										}
									}
								}
								if (btn == "openspring") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 7954, 1, iscontains);
									if (!iscontains)
									{
										autoBan(peer, true, 1, "btn openspring -> doesnt contains 7954 item");
										continue;
									}
									else {
										RemoveInventoryItem(7954, 1, peer);
										int kuriPrizaDuot = rand() % 3 + 1;
										if (kuriPrizaDuot == 1)
										{
											int gemChance = rand() % 200000;
											GiveChestPrizeGems(peer, gemChance);
										}
										if (kuriPrizaDuot == 2)
										{
											string crystaluMas[18] = { "gold", "sapphire", "sapphire", "sapphire","diamond", "diamond", "diamond", "diamond", "rubble", "opal", "opal", "gold", "amber", "emerald", "emerald", "emerald", "emerald", "gold" };
											int crystalChance = rand() % 30;
											int randIndex = rand() % 18;
											string crystalName = crystaluMas[randIndex];
											GiveChestPrizeCrystal(peer, crystalName, crystalChance);
										}
										if (kuriPrizaDuot == 3)
										{
											int itemuMas[12] = { 7912, 7912, 7912, 7912, 5078, 5078, 5078, 8834, 8834, 8834, 8834, 8834 };
											int ItemChance = 1;
											int randIndex = rand() % 12;
											int itemId = itemuMas[randIndex];
											GiveChestPrizeItem(peer, itemId, ItemChance, 95);
										}
									}
								}
								if (btn == "warptosb") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->isCursed == true)
									{
										GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are cursed now!"));
										ENetPacket* packet0 = enet_packet_create(p0.data,
											p0.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet0);
										delete p0.data;
										continue;
									}
									string act = ((PlayerInfo*)(peer->data))->lastSdbWorld;
									if (act == "") {
										GamePacket po = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Unable to track down the location of the broadcast."));
										ENetPacket* packet = enet_packet_create(po.data,
											po.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
									}
									else if (act == ((PlayerInfo*)(peer->data))->currentWorld) {
										GamePacket po = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Sorry, but you are already in the world!"));
										ENetPacket* packet = enet_packet_create(po.data,
											po.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
									}
									else {
										sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
										joinWorld(peer, act, 0, 0);
									}
								}
								//cout << "#21751" << endl;
								if (btn == "okgo") {
									((PlayerInfo*)(peer->data))->isBot = false;
									/*GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`#Server Released!```|left|8|\n\nadd_spacer|small|\nadd_label|small|`^Now we can confirm that our server will be running for long time`9!|left|4|\nend_dialog|goodbye222||`2Close|\n"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									enet_host_flush(server);
									delete p.data;*/
								}
								if (btn == "sutikimas") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`@Create Your `#Grow-ID`@!``|left|1048|\n\nadd_spacer|small|\nadd_text_input|username|GrowID: ||100|\nadd_text_input|password|Password: ||100|\nadd_text_input|code|Code: ||5|\nend_dialog|register||`2Complete!|\n"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									enet_host_flush(server);
									delete p.data;
								}
								if (btn == "atsaukimas") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									enet_peer_disconnect_later(peer, 0);
								}
								if (btn == "rankup") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									int Pgems = 0;
									ifstream gemfd("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									gemfd >> Pgems;
									gemfd.close();
									string nextlvlName = ((PlayerInfo*)(peer->data))->rankupInfo.nextlvlName;
									int nextlvl = ((PlayerInfo*)(peer->data))->rankupInfo.nextRankId;
									int gems = ((PlayerInfo*)(peer->data))->rankupInfo.gems;
									int amber = ((PlayerInfo*)(peer->data))->rankupInfo.amber;
									int opal = ((PlayerInfo*)(peer->data))->rankupInfo.opal;
									int gold = ((PlayerInfo*)(peer->data))->rankupInfo.gold;
									int ruby = ((PlayerInfo*)(peer->data))->rankupInfo.ruby;
									int sapphire = ((PlayerInfo*)(peer->data))->rankupInfo.sapphire;
									int diamond = ((PlayerInfo*)(peer->data))->rankupInfo.diamond;
									int emerald = ((PlayerInfo*)(peer->data))->rankupInfo.emerald;
									int Pruby = ((PlayerInfo*)(peer->data))->rubble;
									int Pamber = ((PlayerInfo*)(peer->data))->amber;
									int Pgold = ((PlayerInfo*)(peer->data))->gold;
									int Pdiamond = ((PlayerInfo*)(peer->data))->diamond;
									int Popal = ((PlayerInfo*)(peer->data))->opal;
									int Psapphire = ((PlayerInfo*)(peer->data))->sapphire;
									int Pemerald = ((PlayerInfo*)(peer->data))->emerald;
									if (Pamber >= amber && Pgems >= gems && Popal >= opal && Pgold >= gold && Pruby >= ruby && Psapphire >= sapphire && Pdiamond >= diamond && Pemerald >= emerald)
									{
										((PlayerInfo*)(peer->data))->amber -= amber;
										((PlayerInfo*)(peer->data))->opal -= opal;
										((PlayerInfo*)(peer->data))->rubble -= ruby;
										((PlayerInfo*)(peer->data))->gold -= gold;
										((PlayerInfo*)(peer->data))->sapphire -= sapphire;
										((PlayerInfo*)(peer->data))->diamond -= diamond;
										((PlayerInfo*)(peer->data))->emerald -= emerald;
										((PlayerInfo*)(peer->data))->valgem -= gems;
										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have been promoted to `4" + nextlvlName + "`o!"), "audio/hub_open.wav"), 0));
										ENetPacket* packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete ps2.data;
										ENetPeer* currentPeer;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message: `oPlayer `8" + ((PlayerInfo*)(peer->data))->rawName + "`w `oJust got promoted to the `8" + nextlvlName + " `oRank!"));
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
										}
										delete p.data;
										if (((PlayerInfo*)(peer->data))->isIn)
										{
											if (((PlayerInfo*)(peer->data))->haveGrowId) {
												try {
													std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
													PlayerInfo* p = ((PlayerInfo*)(peer->data));
													string username = PlayerDB::getProperName(p->rawName);
													p->adminLevel = nextlvl;
													if (ifff.fail()) {
														ifff.close();
													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load
													j["amberxp"] = p->amberxp;
													j["amber"] = p->amber;
													j["opalxp"] = p->opalxp;
													j["opal"] = p->opal;
													j["goldxp"] = p->goldxp;
													j["gold"] = p->gold;
													j["rubblexp"] = p->rubblexp;
													j["rubble"] = p->rubble;
													j["sapphirexp"] = p->sapphirexp;
													j["sapphire"] = p->sapphire;
													j["diamondxp"] = p->diamondxp;
													j["diamond"] = p->diamond;
													j["emeraldxp"] = p->emeraldxp;
													j["emerald"] = p->emerald;
													j["adminLevel"] = p->adminLevel;
													std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}
													o << j << std::endl;
													Pgems -= gems;
													ofstream gemof("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													gemof << Pgems;
													gemof.close();
												}
												catch (std::exception& e)
												{
													std::cerr << e.what() << std::endl;
												}
												catch (const std::out_of_range& e) {
													cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
												}
												catch (...) {
													cout << "reading file violation" << endl;
												}
											}
										}
										enet_peer_disconnect_later(peer, 0);
									}
									else
									{
										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You don't have enought crystals."), "audio/hub_open.wav"), 0));
										ENetPacket* packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete ps2.data;
									}
								}
								if (btn == "nukeyes") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 3764, 1, iscontains);
									if (!iscontains)
									{
										autoBan(peer, true, 1, "btn nukeyes -> doesnt contains 3764 item");
										continue;
									}
									else {
										if (((PlayerInfo*)(peer->data))->rawName == world->owner) {
											int effect = 92;
											int x = ((PlayerInfo*)(peer->data))->x;
											int y = ((PlayerInfo*)(peer->data))->y;
											Player::OnParticleEffect(peer, effect, x, y, 0);
											Player::OnConsoleMessage(peer, "`4Huge explosion appears!");
											RemoveInventoryItem(3764, 1, peer);
											vector<WorldInfo> worlds;
											WorldInfo* wrld = getPlyersWorld(peer);
											PlayerMoving data2;
											data2.packetType = 0x3;
											data2.characterState = 0x0; // animation
											data2.x = 3040;
											data2.y = 736;
											data2.punchX = 0;
											data2.punchY = 0;
											data2.XSpeed = 0;
											data2.YSpeed = 0;
											data2.netID = ((PlayerInfo*)(peer->data))->netID;
											data2.plantingTree = 0;
											PlayerMoving data;
											data.packetType = 0x3;
											data.characterState = 0x0; // animation
											data.x = 3040;
											data.y = 736;
											data.punchX = 0;
											data.punchY = 0;
											data.XSpeed = 0;
											data.YSpeed = 0;
											data.netID = ((PlayerInfo*)(peer->data))->netID;
											data.plantingTree = 6864;
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
												{
													for (int i = 0; i < world->width * world->height; i++)
													{
														if (world->items[i].foreground == 6) {
														}
														else if (world->items[i].foreground == 8) {
														}
														else if (world->items[i].foreground == 242) {
														}
														else if (world->items[i].foreground == 2408) {
														}
														else if (world->items[i].foreground == 9504) {
														}
														else if (world->items[i].foreground == 1796) {
														}
														else if (world->items[i].foreground == 4428) {
														}
														else if (world->items[i].foreground == 7188) {
														}
														else if (world->items[i].foreground == 9308) {
														}
														else {
															world->items[i].foreground = 0;
															world->items[i].background = 0;
															data.x = (i % world->width) * 32;
															data.y = (i / world->width) * 32;
															data2.x = (i % world->width) * 32;
															data2.y = (i / world->width) * 32;
															data.punchX = (i % world->width) * 1;
															data.punchY = (i / world->width) * 1;
															data2.punchX = (i % world->width) * 1;
															data2.punchY = (i / world->width) * 1;
															if (isHere(peer, currentPeer)) {
																SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
																SendPacketRaw(4, packPlayerMoving(&data2), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
																//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
															}
														}
													}
												}
											}
										}
									}
								}
								if (btn == "invitemenu") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(peer->data))->rawName) {
										continue;
									}
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`5Invite Options|left|1366|\n\nadd_spacer|small|\nadd_button|addfriendrnbutton|`9Add To Friends|0|0|\nadd_button|inviteguildbutton|`9Invite To Guild|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								//cout << "#21992" << endl;
								if (btn == "inviteguildbutton") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->guild != "") {
										int number = ((PlayerInfo*)(peer->data))->guildmatelist.size();
										if (number > 9) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ERROR: `oYou already have `450 `ofriends! Please remove some before adding new ones!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (isHere(peer, currentPeer))
											{
												if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) {
													string name = ((PlayerInfo*)(currentPeer->data))->rawName;
													if (((PlayerInfo*)(currentPeer->data))->guild != "") {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3GUILD ERROR: `w" + ((PlayerInfo*)(currentPeer->data))->displayName + "`o is already in a Guild!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													else {
														GamePacket p4 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`5[`wGuild request sent to `2" + ((PlayerInfo*)(currentPeer->data))->displayName + "`5]"));
														ENetPacket* packet4 = enet_packet_create(p4.data,
															p4.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet4);
														delete p4.data;
														string text = "action|play_sfx\nfile|audio/tip_start.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length());
														memcpy(data + 4 + text.length(), &zero, 1);
														ENetPacket* packet2 = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet2);
														delete data;
														((PlayerInfo*)(currentPeer->data))->guildlast = ((PlayerInfo*)(peer->data))->guild;
														((PlayerInfo*)(currentPeer->data))->isinvited = true;
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD REQUEST] `oYou've been invited to join `2" + ((PlayerInfo*)(peer->data))->guild + "`o by `w" + ((PlayerInfo*)(peer->data))->displayName + "`o! To accept, `wwrench yourself `oand then choose `2Join " + ((PlayerInfo*)(peer->data))->guild + "`o."));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet);
														delete p.data;
													}
												}
											}
										}
									}
									else {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ERROR] `oYou must be in a Guild as a Elder or higher in order to invite players!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
								}
								if (btn == "viewbackpack") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wMy Backpack|left|1458|\nadd_spacer|\nadd_button|viewcrystals|`wView `9Crystals``|\nadd_button|viewfragments|`wView `9Fragments``|\nadd_spacer|\nadd_quick_exit|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;
								}
								if (btn == "viewcrystals") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									int levels = ((PlayerInfo*)(peer->data))->level;
									int xp = ((PlayerInfo*)(peer->data))->xp;
									int rubble = ((PlayerInfo*)(peer->data))->rubble;
									int amber = ((PlayerInfo*)(peer->data))->amber;
									int opal = ((PlayerInfo*)(peer->data))->opal;
									int gold = ((PlayerInfo*)(peer->data))->gold;
									int sapphire = ((PlayerInfo*)(peer->data))->sapphire;
									int diamond = ((PlayerInfo*)(peer->data))->diamond;
									int emerald = ((PlayerInfo*)(peer->data))->emerald;
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wMy Crystals|left|1458|\nadd_spacer|\nadd_label_with_icon|small|`oYou have: `@" + to_string(rubble) + " `4Ruby's`0!|left|828|\nadd_label_with_icon|small|`oYou have: `@" + to_string(amber) + " `8Amber's`0!|left|3948|\nadd_label_with_icon|small|`oYou have: `@" + to_string(opal) + " `!Opal's`0!|left|5270|\nadd_label_with_icon|small|`oYou have: `@" + to_string(gold) + " `9Gold's`0!|left|3424|\nadd_label_with_icon|small|`oYou have: `@" + to_string(sapphire) + " `bSapphire's`0!|left|2812|\nadd_label_with_icon|small|`oYou have: `@" + to_string(diamond) + " `1Diamond's`0!|left|262|\nadd_label_with_icon|small|`oYou have: `@" + to_string(emerald) + " `2Emerald's`0!|left|826|\nadd_spacer|Back|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;
								}
								if (btn == "viewfragments") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									UpdateLocalPlayerFragments(peer);
									int earthfragment = ((PlayerInfo*)(peer->data))->fEarth;
									int darkfragment = ((PlayerInfo*)(peer->data))->fDark;
									int firefragment = ((PlayerInfo*)(peer->data))->fFire;
									int waterfragment = ((PlayerInfo*)(peer->data))->fWater;
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wMy Fragments|left|1458|\nadd_spacer|\nadd_label_with_icon|small|`oYou have: `@" + to_string(earthfragment) + " `2Earth `9Fragment's`0!|left|5050|\nadd_label_with_icon|small|`oYou have: `@" + to_string(darkfragment) + " `bDark `9Fragment's`0!|left|5052|\nadd_label_with_icon|small|`oYou have: `@" + to_string(firefragment) + " `4Fire `9Fragment's`0!|left|5046|\nadd_label_with_icon|small|`oYou have: `@" + to_string(waterfragment) + " `1Water `9Fragment's`0!|left|5048|\nadd_spacer|Back|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;
								}
								if (btn == "worldgenmachine") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->haveGrowId == true)
									{
										Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`5Building Machine``|left|6946|0|0|\n\nadd_spacer|small|\nadd_text_input|worldname|`$World Name``||18|\nadd_text_input|worldheight|`$World Height``||18|\nadd_text_input|worldwidth|`$World Width``||18|\nadd_text_input|worldforeground|`$World Foreground``||18|\nadd_text_input|worldbackground|`$World Background``||18|\nadd_text_input|worldbedrock|`$World Bedrock``||18|\nend_dialog|wgmgen|Cancel|Generate|");
									}
									else {
										autoBan(peer, true, 1, "btn worldgenmachine -> doesnt has growID");
										continue;
									}
								}
								if (btn == "passbutton") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->haveGrowId == true)
									{
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wChange Password|left|1280|\nadd_spacer|small|\nadd_text_input|oldpass|`$Current Password``||18|\nadd_text_input|newpass|`$New Password``||18|\nadd_text_input|verifypass|`$Verify Password``||18|\nend_dialog|pssdia|`wCancel``|`wConfirm!``|"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;
										continue;
									}
									else {
										autoBan(peer, true, 1, "btn passbutton -> doesnt not has growID");
										continue;
									}
								}
								if (btn == "joinguild") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									vector<string> gmembers;
									string guildname = PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guildlast);
									if (guildname != "") {
										try {
											std::ifstream ifff("guilds/" + guildname + ".json");
											if (ifff.fail()) {
												ifff.close();
												cout << "Failed loading guilds/" + guildname + ".json! From " + ((PlayerInfo*)(peer->data))->displayName + "." << endl;
											}
											json j;
											ifff >> j;
											int glevel;
											glevel = j["GuildLevel"];
											for (int i = 0; i < j["Member"].size(); i++) {
												gmembers.push_back(j["Member"][i]);
											}
											ifff.close();
											int membercount = gmembers.size();
											int maxmembers = 15;
											if (glevel == 2)
											{
												maxmembers = 20;
											}
											else if (glevel == 3)
											{
												maxmembers = 25;
											}
											else if (glevel == 4)
											{
												maxmembers = 30;
											}
											else if (glevel == 5)
											{
												maxmembers = 35;
											}
											else if (glevel == 6)
											{
												maxmembers = 40;
											}
											else if (glevel == 7)
											{
												maxmembers = 45;
											}
											else if (glevel == 8)
											{
												maxmembers = 50;
											}
											if (membercount >= maxmembers) {
												Player::OnConsoleMessage(peer, "`5[GUILD ALERT] `oThat guild is already full!");
												continue;
											}
											else {
												((PlayerInfo*)(peer->data))->guild = ((PlayerInfo*)(peer->data))->guildlast;
												((PlayerInfo*)(peer->data))->guildlast = "";
												((PlayerInfo*)(peer->data))->isinvited = false;
												((PlayerInfo*)(peer->data))->joinguild = true;
												updateInvis(peer);
												std::ifstream ifff("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
												if (ifff.fail()) {
													ifff.close();
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oGuild does not exist! If you are seeing this message, please take a screenshot and send it to a developer!"));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
													continue;
												}
												if (ifff.is_open()) {
												}
												json j;
												ifff >> j; //load
												vector<string> gmlist;
												for (int i = 0; i < j["Member"].size(); i++) {
													gmlist.push_back(j["Member"][i]);
												}
												gmlist.push_back(((PlayerInfo*)(peer->data))->rawName);
												j["Member"] = gmlist; //edit
												std::ofstream o("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json"); //save
												if (!o.is_open()) {
													cout << GetLastError() << endl;
													_getch();
												}
												o << j << std::endl;
												std::ifstream iffff2("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
												json jj2;
												if (iffff2.fail()) {
													iffff2.close();
													continue;
												}
												if (iffff2.is_open()) {
												}
												iffff2 >> jj2; //load
												std::ofstream oo2("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
												if (!oo2.is_open()) {
													cout << GetLastError() << endl;
													_getch();
												}
												jj2["guild"] = ((PlayerInfo*)(peer->data))->guild;
												jj2["joinguild"] = true;
												oo2 << jj2 << std::endl;
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (((PlayerInfo*)(currentPeer->data))->guild == ((PlayerInfo*)(peer->data))->guild)
													{
														updateGuild(peer);
														updateGuild(currentPeer);
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `2" + ((PlayerInfo*)(peer->data))->displayName + " `ojoined the guild!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet);
														delete p.data;
														updateInvis(peer);
													}
												}
											}
										}
										catch (std::exception& e)
										{
											std::cerr << e.what() << std::endl;
										}
										catch (const std::out_of_range& e) {
											cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
										}
										catch (...) {
											cout << "reading file violation" << endl;
										}
									}
								}
								if (btn == "showguild") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									string onlinegmlist = "";
									string grole = "";
									int onlinecount = 0;
									string guildname = PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild);
									if (guildname != "") {
										std::ifstream ifff("guilds/" + guildname + ".json");
										if (ifff.fail()) {
											ifff.close();
											cout << "Failed loading guilds/" + guildname + ".json! From " + ((PlayerInfo*)(peer->data))->displayName + "." << endl;
											((PlayerInfo*)(peer->data))->guild = "";
										}
										json j;
										ifff >> j;
										int gfbg, gffg, guildlvl, guildxp;
										string gstatement, gleader;
										vector<string> gmembers;
										gfbg = j["backgroundflag"];
										gffg = j["foregroundflag"];
										gstatement == j["GuildStatement"];
										gleader == j["Leader"];
										guildlvl = j["GuildLevel"];
										guildxp = j["GuildExp"];
										for (int i = 0; i < j["Member"].size(); i++) {
											gmembers.push_back(j["Member"][i]);
										}
										((PlayerInfo*)(peer->data))->guildlevel = guildlvl;
										((PlayerInfo*)(peer->data))->guildexp = guildxp;
										((PlayerInfo*)(peer->data))->guildBg = gfbg;
										((PlayerInfo*)(peer->data))->guildFg = gffg;
										((PlayerInfo*)(peer->data))->guildStatement = gstatement;
										((PlayerInfo*)(peer->data))->guildLeader = gleader;
										((PlayerInfo*)(peer->data))->guildMembers = gmembers;
										ifff.close();
									}
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										string name = ((PlayerInfo*)(currentPeer->data))->rawName;
										if (find(((PlayerInfo*)(peer->data))->guildMembers.begin(), ((PlayerInfo*)(peer->data))->guildMembers.end(), name) != ((PlayerInfo*)(peer->data))->guildMembers.end()) {
											if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->guildLeader) {
												onlinegmlist += "\nadd_button|onlinegm_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + " `e(GL)``|0|0|";
												onlinecount++;
											}
											else {
												onlinegmlist += "\nadd_button|onlinegm_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + " " + grole + "``|0|0|";
												onlinecount++;
											}
										}
									}
									int guildsize = 15;
									if (((PlayerInfo*)(peer->data))->guildlevel == 2)
									{
										guildsize = 20;
									}
									else if (((PlayerInfo*)(peer->data))->guildlevel == 3)
									{
										guildsize = 25;
									}
									else if (((PlayerInfo*)(peer->data))->guildlevel == 4)
									{
										guildsize = 30;
									}
									else if (((PlayerInfo*)(peer->data))->guildlevel == 5)
									{
										guildsize = 35;
									}
									else if (((PlayerInfo*)(peer->data))->guildlevel == 6)
									{
										guildsize = 40;
									}
									else if (((PlayerInfo*)(peer->data))->guildlevel == 7)
									{
										guildsize = 45;
									}
									else if (((PlayerInfo*)(peer->data))->guildlevel == 8)
									{
										guildsize = 50;
									}
									if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(peer->data))->guildLeader) {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_dual_layer_icon_label|big|`wGuild Home|left|" + std::to_string(((PlayerInfo*)(peer->data))->guildBg) + "|" + std::to_string(((PlayerInfo*)(peer->data))->guildFg) + "|1.0|0|\n\nadd_spacer|small|\nadd_textbox|" + ((PlayerInfo*)(peer->data))->guildStatement + "``|\nadd_textbox|`oGuild size: " + to_string(guildsize) + " members|\nadd_textbox|`oGuild Level: " + std::to_string(((PlayerInfo*)(peer->data))->guildlevel) + "|\n\nadd_spacer|small|\nadd_button|guildoffline|`wShow offline too``|0|0|\nadd_button|goguildhome|`wGo to Guild Home``|0|0|\nadd_button|guildleveluper|`wUpgrade Guild``|0|0|\nadd_button|leavefromguild|`4Abandon Guild``|0|0|\n\nadd_spacer|small|\nadd_textbox|`5" + std::to_string(onlinecount) + " of " + std::to_string(((PlayerInfo*)(peer->data))->guildMembers.size()) + " `wGuild Members Online|" + onlinegmlist + "\n\nadd_spacer|small|\nadd_button||`wClose``|0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_dual_layer_icon_label|big|`wGuild Home|left|" + std::to_string(((PlayerInfo*)(peer->data))->guildBg) + "|" + std::to_string(((PlayerInfo*)(peer->data))->guildFg) + "|1.0|0|\n\nadd_spacer|small|\nadd_textbox|" + ((PlayerInfo*)(peer->data))->guildStatement + "``|\nadd_textbox|`oGuild size: " + to_string(guildsize) + " members|\nadd_textbox|`oGuild Level: " + std::to_string(((PlayerInfo*)(peer->data))->guildlevel) + "|\n\nadd_spacer|small|\nadd_button|guildoffline|`wShow offline too``|0|0|\nadd_button|goguildhome|`wGo to Guild Home``|0|0|\nadd_button|leavefromguild|`4Leave from guild``|0|0|\n\nadd_spacer|small|\nadd_textbox|`5" + std::to_string(onlinecount) + " of " + std::to_string(((PlayerInfo*)(peer->data))->guildMembers.size()) + " `wGuild Members Online|" + onlinegmlist + "\n\nadd_spacer|small|\nadd_button||`wClose``|0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
								if (btn == "guildrewards")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->guild == "")
									{
										continue;
									}
									int gpoints = 0;
									ifstream guildstream1("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
									guildstream1 >> gpoints;
									guildstream1.close();
									int personalpoints = 0;
									ifstream guildstream3("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									guildstream3 >> personalpoints;
									guildstream3.close();
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`9Guild Rewards And Challenges``|left|7340|\nadd_label|small|`5Your guild currently have: `^" + std::to_string(gpoints) + " `5Points.|left|4||\nadd_label|small|`5Your personal contribution are: `^" + std::to_string(personalpoints) + " `5Points.|left|4||\nadd_spacer|small|\nadd_button|grewards|`wSpend Guild Points``|0|0|\nadd_button|gcontribution|`wMembers Contribution``|0|0|\nadd_spacer|small|\nadd_textbox|`2Guild `^Points `5Are `@Obtainable `5From those `9Activities`5: Usage of `9Magic Machine`5, Breaking `9Farmable Blocks`5.|\nadd_spacer|small|\nadd_button|cl0se|`wClose|\nadd_quick_exit|");
								}
								if (btn == "grewards")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->guild == "")
									{
										continue;
									}
									int gpoints = 0;
									ifstream guildstream1("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
									guildstream1 >> gpoints;
									guildstream1.close();
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`9Spend Guild Points``|left|752|\nadd_spacer|small|\nadd_button_with_icon|pirmasitemas||staticBlueFrame|9502|\nadd_button_with_icon|antrasitemas||staticBlueFrame|9504|\nadd_button_with_icon|treciasitemas||staticBlueFrame|9506|\nadd_button_with_icon|ketvirtasitemas||staticBlueFrame|9508|\nadd_button_with_icon|penktasitemas||staticBlueFrame|8774|\nadd_quick_exit|");
								}
								if (btn == "gcontribution")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->guild == "")
									{
										continue;
									}
									int gpoints = 0;
									ifstream guildstream1("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
									guildstream1 >> gpoints;
									guildstream1.close();
									vector<string>allMembers = ((PlayerInfo*)(peer->data))->guildMembers;
									vector<string>names;
									vector<int>points;
									int point = 0;
									int kiekYra = 0;

									for (int i = 0; i < allMembers.size(); i++)
									{
										if (std::experimental::filesystem::exists("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + allMembers[i] + ".txt"))
										{
											ifstream get("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + allMembers[i] + ".txt");
											get >> point;
											get.close();

											names.push_back(allMembers[i]);
											points.push_back(point);
											kiekYra++;
										}
									}

									for (int i = 0; i < kiekYra; i++)
									{
										for (int j = i + 1; j < kiekYra; j++)
										{
											if (points[j] > points[i])
											{
												swap(points[j], points[i]);
												swap(names[j], names[i]);
											}
										}
									}
									string allList = "";
									int topCount = 0;
									for (int i = 0; i < kiekYra; i++)
									{
										if (names[i] != "")
										{
											topCount++;
											if (topCount == 1)
											{
												allList += "|\n\nadd_label_with_icon|small|`2" + names[i] + " `9Contribution: `^" + std::to_string(points[i]) + " `9Points.|left|6138||";
											}
											else if (topCount == 2)
											{
												allList += "|\n\nadd_label_with_icon|small|`2" + names[i] + " `9Contribution: `^" + std::to_string(points[i]) + " `9Points.|left|6136||";
											}
											else if (topCount == 3)
											{
												allList += "|\n\nadd_label_with_icon|small|`2" + names[i] + " `9Contribution: `^" + std::to_string(points[i]) + " `9Points.|left|6134||";
											}
											else
											{
												allList += "|\n\nadd_label_with_icon|small|`2" + names[i] + " `oContribution: `^" + std::to_string(points[i]) + " `9Points.|left|7970||";
											}
										}
									}

									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`9Guild Members Contribution``|left|7340|\nadd_label|small|`5Your guild currently have: `^" + std::to_string(gpoints) + " `5Points.|left|4||\nadd_spacer|small|" + allList + "\nadd_quick_exit|");
								}
								if (btn == "pirmasitemas")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->guild == "")
									{
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Claim `2Emerald Scythe`6!``|left|9502|\nadd_textbox|`5This item is available for limited time!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Name: `2Emerald Scythe`9.|\nadd_textbox|`9Damage: `260`9.|\nadd_textbox|`9Rarity: `4Exclusive`9.|\nadd_textbox|`9Speed: `2Super Fast`9.|\nadd_spacer|small|\nadd_button|buyemeraldscythe|`7Claim `2Emerald Scythe `7[`4900K`8 GPoints`7]|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "antrasitemas")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->guild == "")
									{
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Claim `4Ban Lock`6!``|left|9504|\nadd_textbox|`5This item is available for limited time!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Special and `8Rare `9item, Obtainable only during `5Week I `9Of Guild Rewards, This item is `^Animated`9!|\nadd_spacer|small|\nadd_button|buybanlock|`7Claim `4Ban Lock `7[`41.2M`8 GPoints`7]|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "treciasitemas")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->guild == "")
									{
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Claim `7Bat Wings`6!``|left|9506|\nadd_textbox|`5This item is available for limited time!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Awesome `^Item`9, Gives you `^Small Chance `9To obtain `bOnyx Blocks `9While breaking `2Dirt `9Blocks`9!|\nadd_spacer|small|\nadd_button|buybatwings|`7Claim `7Bat Wings `7[`42M`8 GPoints`7]|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "ketvirtasitemas")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->guild == "")
									{
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Claim `2Guild Spade`6!``|left|9508|\nadd_textbox|`5This item is available for limited time!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Most `^Insane `9Item that are made for `5Guild`9, This item grants you `41 HIT `9And double `5Guild Points`9!|\nadd_spacer|small|\nadd_button|buyguilddigger|`7Claim `2Guild Spade `7[`43.6M`8 GPoints`7]|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "penktasitemas")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->guild == "")
									{
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Claim `#Finale Ticket`6!``|left|8774|\nadd_textbox|`5This item is available for limited time!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9This `#Ticket `9Grants you a `^Random `4Expensive `^Reward`9!`9!|\nadd_spacer|small|\nadd_button|buyfinaleticket|`7Claim `#Finale Ticket `7[`45M`8 GPoints`7]|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "buyguilddigger")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->guild == "")
									{
										continue;
									}
									int spended = 0;
									ifstream testcount("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									testcount >> spended;
									testcount.close();

									if (spended < 30000)
									{
										Player::OnTextOverlay(peer, "`@You Must Earn `430000 `@Points`@!");
										continue;
									}
									string ispurchasedalr = "false";
									ifstream guildstream132("claimedrewards/guildspade/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									guildstream132 >> ispurchasedalr;
									guildstream132.close();
									if (ispurchasedalr == "true")
									{
										Player::OnTextOverlay(peer, "`@You Already Claimed `2Guild Spade`@!");
										continue;
									}
									int gpoints = 0;
									ifstream guildstream1("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
									guildstream1 >> gpoints;
									guildstream1.close();
									if (gpoints < 3600000)
									{
										Player::OnTextOverlay(peer, "`9You `@Don't `9Have enought `8Guild Points`9!");
									}
									else {
										bool success = false;
										SaveShopsItemMoreTimes(9508, 1, peer, success);
										if (success)
										{
											ofstream guildstream132("claimedrewards/guildspade/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											guildstream132 << "true";
											guildstream132.close();
											Player::OnTextOverlay(peer, "`9You have obtained `2Guild Spade`9!");
											Player::OnParticleEffect(peer, 363, ((PlayerInfo*)(peer->data))->x, ((PlayerInfo*)(peer->data))->y, 0);
										}
									}
								}
								if (btn == "buyemeraldscythe")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->guild == "")
									{
										continue;
									}
									int spended = 0;
									ifstream testcount("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									testcount >> spended;
									testcount.close();

									if (spended < 30000)
									{
										Player::OnTextOverlay(peer, "`@You Must Earn `430000 `@Points`@!");
										continue;
									}
									string ispurchasedalr = "false";
									ifstream guildstream132("claimedrewards/emeraldscythe/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									guildstream132 >> ispurchasedalr;
									guildstream132.close();
									if (ispurchasedalr == "true")
									{
										Player::OnTextOverlay(peer, "`@You Already Claimed `2Emerald Scythe`@!");
										continue;
									}
									int gpoints = 0;
									ifstream guildstream1("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
									guildstream1 >> gpoints;
									guildstream1.close();
									if (gpoints < 900000)
									{
										Player::OnTextOverlay(peer, "`9You `@Don't `9Have enought `8Guild Points`9!");
									}
									else {
										bool success = false;
										SaveShopsItemMoreTimes(9502, 1, peer, success);
										if (success)
										{
											ofstream guildstream132("claimedrewards/emeraldscythe/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											guildstream132 << "true";
											guildstream132.close();
											Player::OnTextOverlay(peer, "`9You have obtained `2Emerald Scythe`9!");
											Player::OnParticleEffect(peer, 363, ((PlayerInfo*)(peer->data))->x, ((PlayerInfo*)(peer->data))->y, 0);
										}
									}
								}
								if (btn == "buybanlock")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->guild == "")
									{
										continue;
									}
									int spended = 0;
									ifstream testcount("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									testcount >> spended;
									testcount.close();

									if (spended < 30000)
									{
										Player::OnTextOverlay(peer, "`@You Must Earn `430000 `@Points`@!");
										continue;
									}
									string ispurchasedalr = "false";
									ifstream guildstream132("claimedrewards/banlock/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									guildstream132 >> ispurchasedalr;
									guildstream132.close();
									if (ispurchasedalr == "true")
									{
										Player::OnTextOverlay(peer, "`@You Already Claimed `4Ban Lock`@!");
										continue;
									}
									int gpoints = 0;
									ifstream guildstream1("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
									guildstream1 >> gpoints;
									guildstream1.close();
									if (gpoints < 1200000)
									{
										Player::OnTextOverlay(peer, "`9You `@Don't `9Have enought `8Guild Points`9!");
									}
									else {
										bool success = false;
										SaveShopsItemMoreTimes(9504, 1, peer, success);
										if (success)
										{
											ofstream guildstream132("claimedrewards/banlock/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											guildstream132 << "true";
											guildstream132.close();
											Player::OnTextOverlay(peer, "`9You have obtained `4Ban Lock`9!");
											Player::OnParticleEffect(peer, 363, ((PlayerInfo*)(peer->data))->x, ((PlayerInfo*)(peer->data))->y, 0);
										}
									}
								}
								if (btn == "buybatwings")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->guild == "")
									{
										continue;
									}
									int spended = 0;
									ifstream testcount("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									testcount >> spended;
									testcount.close();

									if (spended < 30000)
									{
										Player::OnTextOverlay(peer, "`@You Must Earn `430000 `@Points`@!");
										continue;
									}

									string ispurchasedalr = "false";
									ifstream guildstream132("claimedrewards/batwing/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									guildstream132 >> ispurchasedalr;
									guildstream132.close();
									if (ispurchasedalr == "true")
									{
										Player::OnTextOverlay(peer, "`@You Already Claimed `7Bat Wings`@!");
										continue;
									}
									int gpoints = 0;
									ifstream guildstream1("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
									guildstream1 >> gpoints;
									guildstream1.close();
									if (gpoints < 2000000)
									{
										Player::OnTextOverlay(peer, "`9You `@Don't `9Have enought `8Guild Points`9!");
									}
									else {
										bool success = false;
										SaveShopsItemMoreTimes(9506, 1, peer, success);
										if (success)
										{
											ofstream guildstream132("claimedrewards/batwing/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											guildstream132 << "true";
											guildstream132.close();
											Player::OnTextOverlay(peer, "`9You have obtained `7Bat Wings`9!");
											Player::OnParticleEffect(peer, 363, ((PlayerInfo*)(peer->data))->x, ((PlayerInfo*)(peer->data))->y, 0);
										}
									}
								}
								if (btn == "buyfinaleticket")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->guild == "")
									{
										continue;
									}
									int spended = 0;
									ifstream testcount("guildrewards/contribution/" + ((PlayerInfo*)(peer->data))->guild + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									testcount >> spended;
									testcount.close();

									if (spended < 30000)
									{
										Player::OnTextOverlay(peer, "`@You Must Earn `430000 `@Points`@!");
										continue;
									}

									string ispurchasedalr = "false";
									ifstream guildstream132("claimedrewards/finaleticket/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									guildstream132 >> ispurchasedalr;
									guildstream132.close();
									if (ispurchasedalr == "true")
									{
										Player::OnTextOverlay(peer, "`@You Already Claimed `#Finale Ticket`@!");
										continue;
									}
									int gpoints = 0;
									ifstream guildstream1("guildrewards/guildpoints/" + ((PlayerInfo*)(peer->data))->guild + ".txt");
									guildstream1 >> gpoints;
									guildstream1.close();
									if (gpoints < 5000000)
									{
										Player::OnTextOverlay(peer, "`9You `@Don't `9Have enought `8Guild Points`9!");
									}
									else {
										bool success = false;
										SaveShopsItemMoreTimes(8774, 1, peer, success);
										if (success)
										{
											ofstream guildstream132("claimedrewards/finaleticket/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											guildstream132 << "true";
											guildstream132.close();
											Player::OnTextOverlay(peer, "`9You have obtained `#Finale Ticket`9!");
											Player::OnParticleEffect(peer, 363, ((PlayerInfo*)(peer->data))->x, ((PlayerInfo*)(peer->data))->y, 0);
										}
									}
								}
								if (btn == "guildleveluper")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->guild == "")
									{
										continue;
									}

									int needdls = ((PlayerInfo*)(peer->data))->guildlevel * 30;
									if (((PlayerInfo*)(peer->data))->guildlevel <= 6)
									{
										Player::OnDialogRequest(peer, "set_default_color|`o\nadd_dual_layer_icon_label|big|`wUpgrade Your Guild|left|" + std::to_string(((PlayerInfo*)(peer->data))->guildBg) + "|" + std::to_string(((PlayerInfo*)(peer->data))->guildFg) + "|1.0|0|\n\nadd_spacer|small|\nadd_textbox|`5Upgrading your guild unlocks new features such as increased member slots and various boosts, buffs!|\nadd_textbox|`5Your current guild level: `^" + to_string(((PlayerInfo*)(peer->data))->guildlevel) + "``|\nadd_spacer|small|\nadd_textbox|`5To `^Upgrade `5Your `9Guild `5You Need:|\nadd_label_with_icon|small|`2" + std::to_string(needdls) + " `!Diamond Locks``|left|1796|\nadd_spacer|small|\nadd_button|upgradeguildnow|`9Upgrade!``|0|0||\nadd_button||`wClose``|0|0|\nadd_quick_exit|");
									}
									else {
										Player::OnTextOverlay(peer, "your guild at max level!");
									}

								}
								if (btn == "upgradeguildnow")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->guild == "")
									{
										continue;
									}
									int needdls = ((PlayerInfo*)(peer->data))->guildlevel * 30;
									bool iscontains = false;
									SearchInventoryItem(peer, 1796, needdls, iscontains);
									if (!iscontains)
									{
										Player::OnTextOverlay(peer, "`9You `@Don't `9Have enought `eDiamond Locks`9!");
									}
									else {
										RemoveInventoryItem(1796, needdls, peer);
										int guildlevelnow = ((PlayerInfo*)(peer->data))->guildlevel;
										guildlevelnow += 1;
										if (guildlevelnow == 7)
										{
											Player::OnTextOverlay(peer, "`9Your guild is at `2max level`9!");
											continue;
										}
										((PlayerInfo*)(peer->data))->guildlevel = guildlevelnow;
										Player::OnTextOverlay(peer, "`0You have `9Upgraded your `^Guild `0To `9Level `2" + std::to_string(guildlevelnow) + "`0!");
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->guild == ((PlayerInfo*)(peer->data))->guild) {
												try {
													std::ifstream ifff("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
													if (ifff.fail()) {
														ifff.close();
														GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oGuild does not exist! If you are seeing this message, please take a screenshot and send it to a developer!"));
														ENetPacket* packet = enet_packet_create(ps.data,
															ps.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete ps.data;
														continue;
													}
													if (ifff.is_open()) {
													}
													json j;
													ifff >> j; //load
													j["GuildLevel"] = guildlevelnow; //edit
													std::ofstream o("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json"); //save
													if (!o.is_open()) {
														cout << GetLastError() << endl;
														_getch();
													}
													o << j << std::endl;
												}
												catch (std::exception& e)
												{
													std::cerr << e.what() << std::endl;
												}
												catch (const std::out_of_range& e) {
													cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
												}
												catch (...) {
													cout << "reading file violation" << endl;
												}
												updateGuild(currentPeer);
												Player::OnConsoleMessage(currentPeer, "`5[GUILD ALERT] `2Your guild have been upgraded to level " + std::to_string(guildlevelnow) + "!");
											}
										}

									}

								}
								if (btn == "leavefromguild")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(peer->data))->guildLeader) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`8Are you sure?``|left|6204|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAfter `4Abandon `ofrom the guild, all guild's members will be `4kicked out `oand the guild will be `4destroyed`o!|left|8|\nadd_spacer|small|\nadd_button|confirmguildleaderleave|`4Yes, Abandon!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
									else {
										try {
											std::ifstream ifff("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
											if (ifff.fail()) {
												ifff.close();
												GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oGuild does not exist! If you are seeing this message, please take a screenshot and send it to a developer!"));
												ENetPacket* packet = enet_packet_create(ps.data,
													ps.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete ps.data;
												continue;
											}
											if (ifff.is_open()) {
											}
											remove(("guildrewards/contribution/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + "/" + ((PlayerInfo*)(peer->data))->rawName + ".txt").c_str());
											json j;
											ifff >> j; //load
											vector<string> gmlist;
											for (int i = 0; i < j["Member"].size(); i++) {
												gmlist.push_back(j["Member"][i]);
											}
											gmlist.erase(std::remove(gmlist.begin(), gmlist.end(), ((PlayerInfo*)(peer->data))->rawName), gmlist.end());
											j["Member"] = gmlist; //edit
											std::ofstream o("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json"); //save
											if (!o.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}
											o << j << std::endl;
										}
										catch (std::exception& e)
										{
											std::cerr << e.what() << std::endl;
										}
										catch (const std::out_of_range& e) {
											cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
										}
										catch (...) {
											cout << "reading file violation" << endl;
										}
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->guild == ((PlayerInfo*)(peer->data))->guild) {
												updateGuild(currentPeer);
												/*GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `2" + ((PlayerInfo*)(peer->data))->rawName + "`o has left the guild!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												delete p.data;*/
												updateInvis(currentPeer);
											}

										}
										((PlayerInfo*)(peer->data))->guildBg = 0;
										((PlayerInfo*)(peer->data))->guildFg = 0;
										((PlayerInfo*)(peer->data))->guildLeader = "";
										((PlayerInfo*)(peer->data))->guild = "";
										((PlayerInfo*)(peer->data))->guildStatement = "";
										((PlayerInfo*)(peer->data))->guildlast = "";
										((PlayerInfo*)(peer->data))->lastgm = "";
										((PlayerInfo*)(peer->data))->lastgmname = "";
										((PlayerInfo*)(peer->data))->joinguild = false;
										((PlayerInfo*)(peer->data))->lastgmworld = "";
										((PlayerInfo*)(peer->data))->guildMembers.clear();
										updateInvis(peer);
										try {
											std::ifstream iffff2("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
											json jj2;
											if (iffff2.fail()) {
												iffff2.close();
												continue;
											}
											if (iffff2.is_open()) {
											}
											iffff2 >> jj2; //load
											std::ofstream oo2("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
											if (!oo2.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}
											jj2["guild"] = "";
											jj2["joinguild"] = false;
											oo2 << jj2 << std::endl;
										}
										catch (std::exception& e)
										{
											std::cerr << e.what() << std::endl;
										}
										catch (const std::out_of_range& e) {
											cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
										}
										catch (...) {
											cout << "reading file violation" << endl;
										}
									}
								}
								if (btn == "confirmguildleaderleave")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									//Player::OnConsoleMessage(peer, "Abandoned");
									try {
										std::ifstream ifff("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
										if (ifff.fail()) {
											ifff.close();
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oGuild does not exist! If you are seeing this message, please take a screenshot and send it to a developer!"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										json j;
										ifff >> j; //load
										ifff.close();
										vector<string> gmlist;
										for (int i = 0; i < j["Member"].size(); i++) {
											gmlist.push_back(j["Member"][i]);
										}
										const int result = remove(("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json").c_str());
										remove(("guildrewards/guildpoints/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".txt").c_str());
										namespace fs = std::experimental::filesystem;
										fs::remove_all("guildrewards/contribution/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild));
										if (result == 0) {

										}
										else {
											cout << "ERROR deleting file, when " << ((PlayerInfo*)(peer->data))->rawName + " abandoned from the guild" << endl;
											cout << "His guild is: guilds/" << PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) << ".json" << endl;
											cout << (("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json").c_str());
										}
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (find(gmlist.begin(), gmlist.end(), ((PlayerInfo*)(currentPeer->data))->rawName) != gmlist.end()) {
												((PlayerInfo*)(currentPeer->data))->guildBg = 0;
												((PlayerInfo*)(currentPeer->data))->guildFg = 0;
												((PlayerInfo*)(currentPeer->data))->guildLeader = "";
												((PlayerInfo*)(currentPeer->data))->guild = "";
												((PlayerInfo*)(currentPeer->data))->guildStatement = "";
												//((PlayerInfo*)(currentPeer->data))->guildRole = 0;
												((PlayerInfo*)(currentPeer->data))->guildlast = "";
												((PlayerInfo*)(currentPeer->data))->lastgm = "";
												((PlayerInfo*)(currentPeer->data))->lastgmname = "";
												((PlayerInfo*)(currentPeer->data))->joinguild = false;
												((PlayerInfo*)(currentPeer->data))->lastgmworld = "";
												((PlayerInfo*)(currentPeer->data))->guildMembers.clear();
												updateInvis(currentPeer);
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `4Unfortunately, `obut guild's leader `4abandoned `ofrom the guild and you were `4kicked out`o."));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												delete p.data;
											}
										}
										for (int i = 0; i < gmlist.size(); i++)
										{
											std::ifstream iffff2("players/" + gmlist[i] + ".json");
											json jj2;
											if (iffff2.fail()) {
												iffff2.close();
												continue;
											}
											if (iffff2.is_open()) {
											}
											iffff2 >> jj2; //load
											std::ofstream oo2("players/" + gmlist[i] + ".json");
											if (!oo2.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}
											jj2["guild"] = "";
											jj2["joinguild"] = false;
											oo2 << jj2 << std::endl;
										}
									}
									catch (std::exception& e)
									{
										std::cerr << e.what() << std::endl;
									}
									catch (const std::out_of_range& e) {
										cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
									}
									catch (...) {
										cout << "reading file violation" << endl;
									}
								}
								if (btn == "guildoffline") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									string onlinegmlist = "";
									string offname, offlinegm;
									string grole = "";
									int onlinecount = 0;
									int totalcount = ((PlayerInfo*)(peer->data))->guildMembers.size();
									string gstatement = ((PlayerInfo*)(peer->data))->guildLeader;
									string bg = std::to_string(((PlayerInfo*)(peer->data))->guildBg);
									string fg = std::to_string(((PlayerInfo*)(peer->data))->guildFg);
									string guildname = ((PlayerInfo*)(peer->data))->guild;
									string guildleader = ((PlayerInfo*)(peer->data))->guildLeader;
									string guildlvl = "0";
									string guildexp = "0";
									ENetPeer* currentPeer;
									vector<string>offlineguild = ((PlayerInfo*)(peer->data))->guildMembers;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										string name = ((PlayerInfo*)(currentPeer->data))->rawName;
										if (find(((PlayerInfo*)(peer->data))->guildMembers.begin(), ((PlayerInfo*)(peer->data))->guildMembers.end(), name) != ((PlayerInfo*)(peer->data))->guildMembers.end()) {
											if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->guildLeader) {
												onlinegmlist += "\nadd_button|onlinegm_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + " `e(GL)``|0|0|";
												onlinecount++;
											}
											else {
												onlinegmlist += "\nadd_button|onlinegm_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + " " + grole + "``|0|0|";
												onlinecount++;
												offlineguild.erase(std::remove(offlineguild.begin(), offlineguild.end(), name), offlineguild.end());
											}
										}
									}
									for (std::vector<string>::const_iterator i = offlineguild.begin(); i != offlineguild.end(); ++i) {
										offname = *i;
										offlinegm += "\nadd_button|offlinegm_" + offname + "|`4OFFLINE: `o" + offname + "``|0|0|";
									}
									int guildsize = 15;
									if (((PlayerInfo*)(peer->data))->guildlevel == 2)
									{
										guildsize = 20;
									}
									else if (((PlayerInfo*)(peer->data))->guildlevel == 3)
									{
										guildsize = 25;
									}
									else if (((PlayerInfo*)(peer->data))->guildlevel == 4)
									{
										guildsize = 30;
									}
									else if (((PlayerInfo*)(peer->data))->guildlevel == 5)
									{
										guildsize = 35;
									}
									else if (((PlayerInfo*)(peer->data))->guildlevel == 6)
									{
										guildsize = 40;
									}
									else if (((PlayerInfo*)(peer->data))->guildlevel == 7)
									{
										guildsize = 45;
									}
									else if (((PlayerInfo*)(peer->data))->guildlevel == 8)
									{
										guildsize = 50;
									}
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_dual_layer_icon_label|big|`wGuild Home|left|" + std::to_string(((PlayerInfo*)(peer->data))->guildBg) + "|" + std::to_string(((PlayerInfo*)(peer->data))->guildFg) + "|1.0|0|\n\nadd_spacer|small|\nadd_textbox|" + ((PlayerInfo*)(peer->data))->guildStatement + "``|\nadd_textbox|`oGuild size: " + std::to_string(guildsize) + " members|\nadd_textbox|`oGuild Level: " + std::to_string(((PlayerInfo*)(peer->data))->guildlevel) + "|\n\nadd_spacer|small|\nadd_button|goguildhome|`wGo to Guild Home``|0|0|\nadd_button|leavefromguild|`4Leave from guild``|0|0|\n\nadd_spacer|small|\nadd_textbox|`5" + std::to_string(onlinecount) + " of " + std::to_string(((PlayerInfo*)(peer->data))->guildMembers.size()) + " `wGuild Members Online|" + offlinegm + "\n\nadd_spacer|small|\nadd_button||`wClose``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (btn == "goguildhome") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									string gworld;
									string guildName = ((PlayerInfo*)(peer->data))->guild;
									try {
										std::ifstream ifs("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
										if (ifs.is_open()) {
											json j;
											ifs >> j;
											gworld == j["GuildWorld"];
										}
									}
									catch (std::exception& e)
									{
										std::cerr << e.what() << std::endl;
									}
									catch (const std::out_of_range& e) {
										cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
									}
									catch (...) {
										cout << "reading file violation" << endl;
									}
									sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
									joinWorld(peer, gworld, 0, 0);
								}
								if (btn == "worldPublic") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool islegitnow = true;
									for (int i = 0; i < world->width * world->height; i++)
									{
										if (world->items[i].foreground == 1790) {
											Player::OnTextOverlay(peer, "`@You `4Cannot `@Make World `9Public `@With `4Untradeable `@Blocks!");
											islegitnow = false;
											continue;
										}
									}
									if (islegitnow == true)
									{
										if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner)
										{
											getPlyersWorld(peer)->isPublic = true;
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer))
												{
													Player::OnConsoleMessage(currentPeer, ((PlayerInfo*)(peer->data))->displayName + " `ohas set the `$World Lock `oto `$PUBLIC");
												}
											}
										}
									}
								}
								if (btn == "createguildinfo") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wGrow Guilds|left|242|\nadd_label|small|`9Welcome to Grow Guilds where you can create a Guild! With a Guild you can level up the Guild to add more members!``|left|4|\n\nadd_spacer|small|\nadd_textbox|`9You will be charged `6250,000 `9Gems!``|\nadd_spacer|small|\nadd_button|createguild|`oCreate a Guild``|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (btn == "createguild") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wGrow Guild Creation``|left|242|\nadd_spacer|small|\nadd_text_input|gname|Guild Name: ||20|\nadd_text_input|gstatement|Guild Statement: ||100|\nadd_text_input|ggcflagbg|`oGuild Flag Background ID:``||5|\nadd_text_input|ggcflagfg|`oGuild Flag Foreground ID:``||5|\nadd_spacer|small|\nadd_textbox|`oConfirm your guild settings by selecting `2Create Guild `obelow to create your guild.|\nadd_spacer|small|\nadd_textbox|`8Remember`o: A guild can only be created in a world owned by you and locked with a `5World Lock`o!|\nadd_spacer|small|\nadd_textbox|`4Warning! `oThe guild name cannot be changed once you have confirmed the guild settings!|\nadd_quick_exit|\nadd_spacer|small|\nend_dialog|guildconfirm|Cancel|Create Guild|\n"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (btn.substr(0, 10) == "offlinegm_") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									((PlayerInfo*)(peer->data))->lastgm = btn.substr(10, cch.length() - 10 - 1);
									if (btn.substr(10, cch.length() - 10 - 1) == ((PlayerInfo*)(peer->data))->guildLeader) {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_dual_layer_icon_label|big|`w" + ((PlayerInfo*)(peer->data))->lastgm + "|left|" + std::to_string(((PlayerInfo*)(peer->data))->guildBg) + "|" + std::to_string(((PlayerInfo*)(peer->data))->guildFg) + "|1.0|0|\n\nadd_spacer|small|\nadd_textbox|`oRank: Leader|\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgm + " is `4offline`o.``|\nadd_spacer|small|\nadd_button|guildoffline|`oBack``|0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(peer->data))->guildLeader) {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_dual_layer_icon_label|big|`w" + ((PlayerInfo*)(peer->data))->lastgm + "|left|" + std::to_string(((PlayerInfo*)(peer->data))->guildBg) + "|" + std::to_string(((PlayerInfo*)(peer->data))->guildFg) + "|1.0|0|\n\nadd_spacer|small|\nadd_textbox|`oRank: Member|\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgm + " is `4offline`o.``|\nadd_spacer|small|\nadd_button|removegmoffline|`oKick from the guild``|0|0|\nadd_button|guildoffline|`oBack``|0|0|\nadd_quick_exit|"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_dual_layer_icon_label|big|`w" + ((PlayerInfo*)(peer->data))->lastgm + "|left|" + std::to_string(((PlayerInfo*)(peer->data))->guildBg) + "|" + std::to_string(((PlayerInfo*)(peer->data))->guildFg) + "|1.0|0|\n\nadd_spacer|small|\nadd_textbox|`oRank: Member|\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgm + " is `4offline`o.``|\nadd_spacer|small|\nadd_button|guildoffline|`oBack``|0|0|\nadd_quick_exit|"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
								}
								if (btn == "removegmoffline") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->guild == ((PlayerInfo*)(peer->data))->guild) {
											try {
												std::ifstream ifff("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
												if (ifff.fail()) {
													ifff.close();
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oGuild does not exist! If you are seeing this message, please take a screenshot and send it to a developer!"));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
													continue;
												}
												if (ifff.is_open()) {
												}
												json j;
												ifff >> j; //load
												vector<string> gmlist;
												for (int i = 0; i < j["Member"].size(); i++) {
													gmlist.push_back(j["Member"][i]);
												}
												gmlist.erase(std::remove(gmlist.begin(), gmlist.end(), ((PlayerInfo*)(peer->data))->lastgm), gmlist.end());
												j["Member"] = gmlist; //edit
												std::ofstream o("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json"); //save
												if (!o.is_open()) {
													cout << GetLastError() << endl;
													_getch();
												}
												o << j << std::endl;
												std::ifstream iffff2("players/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->lastgm) + ".json");
												json jj2;
												if (iffff2.fail()) {
													iffff2.close();
													continue;
												}
												if (iffff2.is_open()) {
												}
												iffff2 >> jj2; //load
												std::ofstream oo2("players/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->lastgm) + ".json");
												if (!oo2.is_open()) {
													cout << GetLastError() << endl;
													_getch();
												}
												jj2["guild"] = "";
												jj2["joinguild"] = false;
												oo2 << jj2 << std::endl;
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `2" + ((PlayerInfo*)(peer->data))->lastgm + "`o has been kicked from the guild!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												delete p.data;
											}
											catch (std::exception& e)
											{
												std::cerr << e.what() << std::endl;
											}
											catch (const std::out_of_range& e) {
												cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
											}
											catch (...) {
												cout << "reading file violation" << endl;
											}
										}
									}
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`4Guild Member removed``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgm + " is no longer in the guild.``|\n\nadd_spacer|small|\nadd_button|guildportalbutton|`oOK``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (btn == "removegmonline") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastgm) {
											try {
												std::ifstream ifff("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
												if (ifff.fail()) {
													ifff.close();
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oGuild does not exist! If you are seeing this message, please take a screenshot and send it to a developer!"));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
													continue;
												}
												if (ifff.is_open()) {
												}
												json j;
												ifff >> j; //load
												vector<string> gmlist;
												for (int i = 0; i < j["Member"].size(); i++) {
													gmlist.push_back(j["Member"][i]);
												}
												gmlist.erase(std::remove(gmlist.begin(), gmlist.end(), ((PlayerInfo*)(peer->data))->lastgm), gmlist.end());
												j["Member"] = gmlist; //edit
												std::ofstream o("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json"); //save
												if (!o.is_open()) {
													cout << GetLastError() << endl;
													_getch();
												}
												o << j << std::endl;
												((PlayerInfo*)(currentPeer->data))->guildBg = 0;
												((PlayerInfo*)(currentPeer->data))->guildFg = 0;
												((PlayerInfo*)(currentPeer->data))->guildLeader = "";
												((PlayerInfo*)(currentPeer->data))->guild = "";
												((PlayerInfo*)(currentPeer->data))->guildStatement = "";
												//((PlayerInfo*)(currentPeer->data))->guildRole = 0;
												((PlayerInfo*)(currentPeer->data))->guildlast = "";
												((PlayerInfo*)(currentPeer->data))->lastgm = "";
												((PlayerInfo*)(currentPeer->data))->lastgmname = "";
												((PlayerInfo*)(currentPeer->data))->joinguild = false;
												((PlayerInfo*)(currentPeer->data))->lastgmworld = "";
												((PlayerInfo*)(currentPeer->data))->guildMembers.clear();
												updateInvis(currentPeer);
												updateInvis(peer);
												std::ifstream iffff2("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");
												json jj2;
												if (iffff2.fail()) {
													iffff2.close();
													continue;
												}
												if (iffff2.is_open()) {
												}
												iffff2 >> jj2; //load
												std::ofstream oo2("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");
												if (!oo2.is_open()) {
													cout << GetLastError() << endl;
													_getch();
												}
												jj2["guild"] = "";
												jj2["joinguild"] = false;
												oo2 << jj2 << std::endl;
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `oYou have been kicked from the guild by `2" + ((PlayerInfo*)(peer->data))->displayName + "`o."));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												delete p.data;
											}
											catch (std::exception& e)
											{
												std::cerr << e.what() << std::endl;
											}
											catch (const std::out_of_range& e) {
												cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
											}
											catch (...) {
												cout << "reading file violation" << endl;
											}
										}
										if (((PlayerInfo*)(currentPeer->data))->guild == ((PlayerInfo*)(peer->data))->guild) {
											updateGuild(currentPeer);
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `2" + ((PlayerInfo*)(peer->data))->lastgmname + "`o has been kicked from the guild!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											delete p.data;
										}
									}
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`4Guild Member removed``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgmname + " is no longer in the guild.``|\n\nadd_spacer|small|\nadd_button|guildportalbutton|`oOK``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								//cout << "#22795" << endl;
								if (btn == "confirmcreateguild") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));
									int b = atoi(content.c_str());
									if (b > 249000)
									{
										int gemcalc10k = b - 250000;
										ofstream myfile2;
										myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										myfile2 << std::to_string(gemcalc10k);
										myfile2.close();
										std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string contentx((std::istreambuf_iterator<char>(ifszi)),
											(std::istreambuf_iterator<char>()));
										int updgem = atoi(contentx.c_str());
										GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
										ENetPacket* packetpp = enet_packet_create(pp.data,
											pp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packetpp);
										delete pp.data;
										GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You created guild!"));
										ENetPacket* packetto = enet_packet_create(pto.data,
											pto.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packetto);
										delete pto.data;
										string guildName = ((PlayerInfo*)(peer->data))->createGuildName;
										string guildStatement = ((PlayerInfo*)(peer->data))->createGuildStatement;
										string fixedguildName = PlayerDB::getProperName(guildName);
										string guildFlagbg = ((PlayerInfo*)(peer->data))->createGuildFlagBg;
										string guildFlagfg = ((PlayerInfo*)(peer->data))->createGuildFlagFg;
										try {
											std::ofstream o("guilds/" + fixedguildName + ".json");
											if (!o.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}
											json j;
											vector<string> test1s;
											vector<string>test2s;
											((PlayerInfo*)(peer->data))->guildMembers.push_back(((PlayerInfo*)(peer->data))->rawName);
											j["GuildName"] = ((PlayerInfo*)(peer->data))->createGuildName;
											j["GuildRawName"] = fixedguildName;
											j["GuildStatement"] = ((PlayerInfo*)(peer->data))->createGuildStatement;
											j["Leader"] = ((PlayerInfo*)(peer->data))->rawName;
											j["Co-Leader"] = test1s;
											j["Elder-Leader"] = test2s;
											j["Member"] = ((PlayerInfo*)(peer->data))->guildMembers;
											j["GuildLevel"] = 1;
											j["GuildExp"] = 0;
											j["GuildWorld"] = ((PlayerInfo*)(peer->data))->currentWorld;
											j["backgroundflag"] = stoi(((PlayerInfo*)(peer->data))->createGuildFlagBg);
											j["foregroundflag"] = stoi(((PlayerInfo*)(peer->data))->createGuildFlagFg);
											o << j << std::endl;
											std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
											json jj;
											if (iffff.fail()) {
												iffff.close();
												continue;
											}
											if (iffff.is_open()) {
											}
											iffff >> jj; //load
											std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
											if (!oo.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}
											jj["guild"] = guildName;
											jj["joinguild"] = true;
											oo << jj << std::endl;
											//oo.close();
											updateInvis(peer);
											((PlayerInfo*)(peer->data))->guild = guildName;
											((PlayerInfo*)(peer->data))->joinguild = true;
											Player::OnAddNotification(peer, "`2You successfully created a guild!", "audio/hub_open.wav", "interface/science_button.rttex");
											enet_peer_disconnect_later(peer, 0);
										}
										catch (std::exception& e)
										{
											std::cerr << e.what() << std::endl;
										}
										catch (const std::out_of_range& e) {
											cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
										}
										catch (...) {
											cout << "reading file violation" << endl;
										}
									}
									else {
										GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You don't have enough gems."));
										ENetPacket* packetto = enet_packet_create(pto.data,
											pto.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packetto);
										delete pto.data;
									}
								}
								if (btn == "dotradedialog")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wTrade Menu``|left|242|\nadd_label|small|\nadd_button_with_icon|dotrade|Do the Trade!|noflags|1424||\nadd_button|decline|`4Cancel/Decline|noflags||\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "decline")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									string sellerName = ((PlayerInfo*)(peer->data))->lastSeller;
									string sellingworld = ((PlayerInfo*)(peer->data))->lastSellWorld;
									int gemsforworld = ((PlayerInfo*)(peer->data))->lastTradeAmount;
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->rawName == sellerName) {
											if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Player `3'" + ((PlayerInfo*)(peer->data))->rawName + "'`4 declined `2your world '" + sellingworld + "'trading!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											delete p.data;
											((PlayerInfo*)(currentPeer->data))->lastSeller = "";
											((PlayerInfo*)(currentPeer->data))->lastSellWorld = "";
											((PlayerInfo*)(currentPeer->data))->lastTradeAmount = 99999999999;
											((PlayerInfo*)(currentPeer->data))->lastBuyer = "";
											break;
										}
									}
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You successfully `4decline`2 this world called '" + sellingworld + "' trading"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									((PlayerInfo*)(peer->data))->lastSeller = "";
									((PlayerInfo*)(peer->data))->lastSellWorld = "";
									((PlayerInfo*)(peer->data))->lastTradeAmount = 99999999999;
									((PlayerInfo*)(peer->data))->lastBuyer = "";
								}
								if (btn == "dotrade")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									string sellerName = ((PlayerInfo*)(peer->data))->lastSeller;
									if (sellerName != world->owner)
									{
										Player::OnConsoleMessage(peer, "if you see this report to the owner.");
										continue;
									}
									string sellingworld = ((PlayerInfo*)(peer->data))->lastSellWorld;
									int gemsforworld = ((PlayerInfo*)(peer->data))->lastTradeAmount;
									string lastbuyerName = ((PlayerInfo*)(peer->data))->rawName;
									ifstream fdseller("gemdb/" + sellerName + ".txt");
									ifstream fdbuyer("gemdb/" + lastbuyerName + ".txt");
									int nowseller;
									int nowbuyer;
									fdseller >> nowseller;
									fdbuyer >> nowbuyer;
									fdseller.close();
									fdbuyer.close();
									if (nowbuyer < gemsforworld)
									{
										GamePacket pError = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You don't how enought gems`3 to buy '`2" + sellingworld + "`3' world for `2" + to_string(gemsforworld) + "`3 gems"));
										ENetPacket* packetError = enet_packet_create(pError.data,
											pError.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packetError);
										delete pError.data;
										((PlayerInfo*)(peer->data))->lastSeller = "";
										((PlayerInfo*)(peer->data))->lastSellWorld = "";
										((PlayerInfo*)(peer->data))->lastTradeAmount = 99999999999;
										((PlayerInfo*)(peer->data))->lastBuyer = "";
										ENetPeer* currentPeerError;
										for (currentPeerError = server->peers;
											currentPeerError < &server->peers[server->peerCount];
											++currentPeerError)
										{
											if (currentPeerError->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeerError->data))->rawName == sellerName) {
												if (((PlayerInfo*)(currentPeerError->data))->haveGrowId == false) continue;
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`7Player `3" + ((PlayerInfo*)(peer->data))->rawName + "`4 doesn't have '`8" + to_string(gemsforworld) + "`7' to buy your world '`8" + sellingworld + "'"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeerError, 0, packet);
												delete p.data;
												((PlayerInfo*)(currentPeerError->data))->lastSeller = "";
												((PlayerInfo*)(currentPeerError->data))->lastSellWorld = "";
												((PlayerInfo*)(currentPeerError->data))->lastTradeAmount = 99999999999;
												((PlayerInfo*)(currentPeerError->data))->lastBuyer = "";
												break;
											}
										}
										continue;
									}
									nowseller += gemsforworld;
									nowbuyer -= gemsforworld;
									ofstream ofseller("gemdb/" + sellerName + ".txt");
									ofseller << nowseller;
									ofseller.close();
									ofstream ofbuyer("gemdb/" + lastbuyerName + ".txt");
									ofbuyer << nowbuyer;
									ofbuyer.close();
									string text = "action|play_sfx\nfile|audio/keypad_hit.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPacket* packettrd = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);
									ENetPeer* currentPeerp;
									for (currentPeerp = server->peers;
										currentPeerp < &server->peers[server->peerCount];
										++currentPeerp)
									{
										if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeerp))
											enet_peer_send(currentPeerp, 0, packettrd);
									}
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->rawName == sellerName) {
											if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;
											GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), nowseller));
											ENetPacket* packetpp2 = enet_packet_create(pp.data,
												pp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetpp2);
											delete pp.data;

											if (find(((PlayerInfo*)(currentPeer->data))->worldsowned.begin(), ((PlayerInfo*)(currentPeer->data))->worldsowned.end(), sellingworld) != ((PlayerInfo*)(currentPeer->data))->worldsowned.end()) {
												((PlayerInfo*)(currentPeer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(currentPeer->data))->worldsowned.begin(), ((PlayerInfo*)(currentPeer->data))->worldsowned.end(), sellingworld), ((PlayerInfo*)(currentPeer->data))->worldsowned.end());
											}

											Player::OnConsoleMessage(currentPeer, "`2You successfully sold your world called '`8" + sellingworld + "`2' for `8" + to_string(gemsforworld) + "`2 gems");
											((PlayerInfo*)(currentPeer->data))->lastSeller = "";
											((PlayerInfo*)(currentPeer->data))->lastSellWorld = "";
											((PlayerInfo*)(currentPeer->data))->lastTradeAmount = 99999999999;
											((PlayerInfo*)(currentPeer->data))->lastBuyer = "";
											sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
											sendWorldOffers(currentPeer);
											((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";
											break;
										}
									}
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), nowbuyer));
									ENetPacket* packetpp2 = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packetpp2);
									delete pp.data;
									WorldInfo* boughtworld = getPlyersWorld(peer);
									boughtworld->owner = ((PlayerInfo*)(peer->data))->rawName;
									boughtworld->Displayowner = ((PlayerInfo*)(peer->data))->rawName;
									boughtworld->isPublic = false;
									((PlayerInfo*)(peer->data))->worldsowned.push_back(sellingworld);
									try {
										std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
										if (ifff.fail()) {
											ifff.close();
										}
										if (ifff.is_open()) {
										}
										json j;
										ifff >> j; //load
										j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned; //edit
										std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
										if (!o.is_open()) {
											cout << GetLastError() << endl;
											_getch();
										}
										o << j << std::endl;
									}
									catch (std::exception& e)
									{
										std::cerr << e.what() << std::endl;
									}
									catch (const std::out_of_range& e) {
										cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
									}
									catch (...) {
										cout << "reading file violation" << endl;
									}
									Player::OnConsoleMessage(peer, "`2You successfully bought this world called '`8" + sellingworld + "`2' for `8" + to_string(gemsforworld) + "`2 gems");
									((PlayerInfo*)(peer->data))->lastSeller = "";
									((PlayerInfo*)(peer->data))->lastSellWorld = "";
									((PlayerInfo*)(peer->data))->lastTradeAmount = 99999999999;
									((PlayerInfo*)(peer->data))->lastBuyer = "";
									sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
									sendWorldOffers(peer);
									((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
								}
								if (btn == "btnitemstrade")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnTextOverlay(peer, "`#Under Development!");
								}
								if (btn == "btntradeworld") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(peer->data))->rawName) {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->level < 10)
									{
										Player::OnTextOverlay(peer, "`^This Feature Only `9Available `^For `9Level 10 `^And `@Higher!");
										continue;
									}
									if (((PlayerInfo*)(peer->data))->rawName == world->owner)
									{
										Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`wTrade Options``||18||\nadd_textbox|`oHow many gems for this world?: |\nadd_text_input|worldoffer|||7|\nend_dialog|reqoffer|Cancel|SEND TRADE|\n");
									}
									else
									{
										Player::OnConsoleMessage(peer, "`^This Feature Only `9Available `^For The `2Owner `^Of The World!");
									}
								}
								if (btn == "worldPrivate") {
									if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT") {
										if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner) {
											getPlyersWorld(peer)->isPublic = false;
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer))
												{
													Player::OnConsoleMessage(currentPeer, ((PlayerInfo*)(peer->data))->displayName + " `ohas set the `$World Lock `oto `4PRIVATE");
												}
											}
										}
									}
								}
								if (btn == "allowMod") {
									if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT") {
										if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner)
										{
											getPlyersWorld(peer)->allowMod = true;
											Player::OnConsoleMessage(peer, "`wWorld properties changed. World flags modified -> ALLOW-MOD = TRUE!");
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT") {
													if (((PlayerInfo*)(peer->data))->currentWorld == ((PlayerInfo*)(currentPeer->data))->currentWorld) {
														Player::OnConsoleMessage(currentPeer, "`2Owner `ohas `2enabled `5Mod-Noclip `oin this world.");
														if (((PlayerInfo*)(currentPeer->data))->adminLevel < 777)
														{
															((PlayerInfo*)(currentPeer->data))->canWalkInBlocks = true;
															((PlayerInfo*)(currentPeer->data))->skinColor = atoi("-155");
															sendClothes(currentPeer);
															sendState(currentPeer);
														}
													}
												}
											}
										}
									}
								}
								if (btn == "allowMod1")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT") {
										if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner) {
											getPlyersWorld(peer)->allowMod = false;
											Player::OnConsoleMessage(peer, "`wWorld properties changed. World flags modified -> ALLOW-MOD = FALSE!");
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT") {
													if (((PlayerInfo*)(peer->data))->currentWorld == ((PlayerInfo*)(currentPeer->data))->currentWorld) {
														Player::OnConsoleMessage(currentPeer, "`2Owner `ohas `4disabled `5Mod-Noclip `oin this world.");
														if (((PlayerInfo*)(currentPeer->data))->adminLevel < 777)
														{
															((PlayerInfo*)(currentPeer->data))->canWalkInBlocks = false;
															((PlayerInfo*)(currentPeer->data))->skinColor = 0x8295C3FF;
															sendClothes(currentPeer);
															sendState(currentPeer);
														}
													}
												}
											}
										}
									}
								}
								if (isFindDialog && btn.substr(0, 4) == "tool") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									int id = atoi(btn.substr(4, btn.length() - 4).c_str());
									size_t invsize = ((PlayerInfo*)(peer->data))->currentInventorySize;
									if (id == 242 || id == 764 || id == 782 || id == 1796 || id == 2408 || id == 3606 || id == 3764 || id == 4428 || id == 3948 || id == 3146 || id == 5086 || id == 9240 || id == 5480 || id == 9306 || id == 9290 || id == 7328 || id == 9416 || id == 9410 || id == 1458 || id == 9408 || id == 9360 || id == 6866 || id == 6868 || id == 6870 || id == 6872 || id == 6874 || id == 6876 || id == 4762 || id == 7382 || id == 6878 || id == 2480 || id == 8452 || id == 5132 || id == 7166 || id == 5078 || id == 5080 || id == 5082 || id == 5084 || id == 5126 || id == 5128 || id == 5130 || id == 5144 || id == 5146 || id == 5148 || id == 5150 || id == 5162 || id == 5164 || id == 5166 || id == 5168 || id == 5180 || id == 5182 || id == 5184 || id == 5186 || id == 7168 || id == 7170 || id == 7172 || id == 7174 || id == 8834 || id == 7912 || id == 9212 || id == 5134 || id == 5152 || id == 5170 || id == 5188 || id == 6946) {
										Player::OnDialogRequest(peer, "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSorry! You must first `2purchase `othis item to use it!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|");
										continue;
									}
									if (id == 1874 || id == 1876 || id == 1904 || id == 1932 || id == 1900 || id == 1986 || id == 1996 || id == 2970 || id == 3140 || id == 3174 || id == 6028 || id == 6846 || id == 8962) {
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|small|`#Welcome To `4Ring's `2Store`w!``|left|1900|\nadd_button_with_icon|ringofforce||staticBlueFrame|1874|\nadd_button_with_icon|ringofwinds||staticBlueFrame|1876|\nadd_button_with_icon|ringofwater||staticBlueFrame|2970|\nadd_button_with_icon|ringofgemini||staticBlueFrame|1986|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_button_with_icon|ringoffistful||staticBlueFrame|1932|\nadd_button_with_icon|ringofwisdom||staticBlueFrame|1996|\nadd_button_with_icon|ringofsavings||staticBlueFrame|3140|\nadd_button_with_icon|ringofnature||staticBlueFrame|6846|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_button_with_icon|ringofsmithing||staticBlueFrame|3174|\nadd_button_with_icon|ringofnight||staticBlueFrame|8962|\nadd_button_with_icon|ringofshrinking||staticBlueFrame|6028|\nadd_button_with_icon|theonering||staticBlueFrame|1904|\nadd_quick_exit|");
										continue;
									}
									if (id == 980 || id == 6312 || id == 9310 || id == 6 || id == 9492 || id == 1782 || id == 1780 || id == 8306 || id == 202 || id == 204 || id == 206 || id == 2950 || id == 4802 || id == 4994 || id == 5260 || id == 5814 || id == 5980 || id == 7734 || id == 2592 || id == 2242 || id == 1794 || id == 1792 || id == 778 || id == 9510 || id == 1790 || id == 8774 || id == 2568 || id == 9512 || id == 9502 || id == 9482 || id == 2250 || id == 2248 || id == 2244 || id == 2246 || id == 2286 || id == 9508 || id == 9504 || id == 9506 || id == 274 || id == 276 || id == 9476 || id == 1486 || id == 1672 || id == 4426 || id == 9496 || id == 278 || id == 9494 || id == 9490 || id == 2410 || id == 9488 || id == 7956 || id == 9716 || id == 1738 || id == 9456 || id == 732 || id == 9458 || id == 6336 || id == 112 || id == 8 || id == 3760 || id == 7372 || id == 9438 || id == 9462 || id == 9440 || id == 9442 || id == 9444 || id == 7960 || id == 7628 || id == 8552 || id == 10128 || id == 2398)
									{
										Player::OnDialogRequest(peer, "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSorry! this item is unobtainable`o!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|");
										continue;
									}
									if (id == 8286 || id == 1970 || id == 1784)
									{
										Player::OnDialogRequest(peer, "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSorry! this item is only obtainable from Mystery Block`o!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|");
										continue;
									}
									if (id == 7188)
									{
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Buy `!Blue Gem Lock``|left|7188|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9This Item is like world lock, allows you to lock any world, you can convert this item back to `@100 `1Diamond Locks `9At any time!|\nadd_spacer|small|\nadd_button|buybgl|`7Buy `!BGL `7[`4100`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 9308)
									{
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `4Lava Lock`6!``|left|9308|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9This Item is like `5World Lock`9, allows you to `cLock `9Any world, it comes with cool `cAnimations`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `@300 `4Fire `9Fragment's`o!|left|1458|\nadd_spacer|small|\nadd_button|craftlavalock|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 1486)
									{
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `@Growtokens`6!``|left|1486|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Tokens! `^Those `9Tokens `^Are second currency just like `9Gems `^And are obtainable by spending `625 `^Real `2WLS `^But also can be `9Obtained `^For being `9online `^Every `^3 `9Hours!|\nadd_spacer|small|\nadd_button|cch101001|`9Close|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 9500)
									{
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `9Golden `@Growtokens`6!``|left|9500|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Tokens! `^Those `9Tokens `^Are obtainable by `9Buying `^Them For `@100 `2Regular `@Growtokens `^And can be used as second currency just like `9Gems`^!|\nadd_spacer|small|\nadd_button|purchasegoldenstoretoken|`7Buy `9GStoken `7[`4100`@ STokens`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 4174)
									{
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `8Death Mystery box`6!``|left|4174|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9This Block Will give you random number of `^Gems `9Starting from `250k `9And up to `2300k`9 Or maybe even something more `1Rare`9?|\nadd_spacer|small|\nadd_button|buymysterybox|`7Buy `8Mystery Box `7[`430`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 4992)
									{
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `2Anti Gravity`6!``|left|4992|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9This Block Will allow you to `^Unlimited Jump `9In your own world`9!|\nadd_spacer|small|\nadd_button|buyantigravity|`7Buy `2Anti Gravity `7[`430`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 9484)
									{
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `8Damned Knife`6!``|left|9484|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Name: `8Damned Knife`9.|\nadd_textbox|`9Damage: `@25`9.|\nadd_textbox|`9Rarity: `1Common`9.|\nadd_textbox|`9Speed: `2Fast`9.|\nadd_spacer|small|\nadd_button|buydamnedknife|`7Buy `8Damned Knife `7[`43`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 2204)
									{
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `wGeiger Counter`6!``|left|2204|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`^This `9Item `^Lets you search for `@Stuff `^In any world, There is no `9Cooldown`^!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `420 `@Growtoken's`o!|left|1458|\nadd_spacer|small|\nadd_button|buygeigercounter|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 9486)
									{
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `eSapphire Knife`6!``|left|9486|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Name: `eSapphire Knife`9.|\nadd_textbox|`9Damage: `^30`9.|\nadd_textbox|`9Rarity: `2Rare`9.|\nadd_textbox|`9Speed: `2Fast`9.|\nadd_spacer|small|\nadd_button|buysapphireknife|`7Buy `eSapphire Knife `7[`410`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 9494)
									{
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `1Dual Blades`6!``|left|9494|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Name: `1Dual Blades`9.|\nadd_textbox|`9Damage: `^50`9.|\nadd_textbox|`9Rarity: `8Legendary`9.|\nadd_textbox|`9Speed: `2Super Fast`9.|\nadd_spacer|small|\nadd_button|buydualblades|`7Buy `1Dual Blades `7[`460`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 8428)
									{
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `5Uranus Blast`6!``|left|8428|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Adventures! `^Theres a lot of to `9Explore `^Behind this item, `9Purchase `^One to create an `9Amazing `5Uranus `^World`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `410 `@Growtoken's`o!|left|1458|\nadd_spacer|small|\nadd_button|crafturanusblast|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 9428)
									{
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `2XP Necklace`6!``|left|9428|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Buffs! `^This awesome `2Emerald `^Covered `9Necklace `^Will give you `2Double XP `^For all `9Blocks`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `430 `@Growtoken's`o!|left|1458|\nadd_spacer|small|\nadd_button|craftxpnecklace|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 9434)
									{
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `eRGB Wings`6!``|left|9434|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Rainbow! `^Nothing much to expect from this item, but it is `9Rainbow `^And has `@Movement Effects`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `49 `@Growtoken's`o!|left|1458|\nadd_spacer|small|\nadd_button|craftrgbwings|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 5136)
									{
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `@Fenix Wings`6!``|left|5136|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Damn! `^Those wings are made from pure `4Fire `^Gives `@Red Skin Colour `^And `@Movement Effects`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `490 `@Growtoken's`o!|left|1458|\nadd_spacer|small|\nadd_button|craftfenixwings|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 2264)
									{
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `!Aqua `1Crystal Wings`6!``|left|2264|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Freeze! `^Pretty well `9Designed `^Wings, gives you `9Double Jump `^And `@Movement Effects`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `4120 `1Winter Token's`o!|left|1458|\nadd_spacer|small|\nadd_button|craftwinterwings|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 9758)
									{
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `9Neptune Trident's`6!``|left|9758|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Neptune Trident`o Is pretty same to the `9Normal `^One, but there is one `9Big Difference `^It can break `@2x2`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `4200 `@Growtoken's`o!|left|1458|\nadd_spacer|small|\nadd_button|craftneptunetrident|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 5638)
									{
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Buy `9Magplant``|left|5638|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`^One of the `9Endgame `^Items! Take a look at that golden `9Thing!`^ Pretty expensive but worth that, collects `9Gems `^and stores them!|\nadd_spacer|small|\nadd_button|buymagplant|`7Buy `9magplant `7[`420`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 9170) {
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Buy `9Magic Machine``|left|9170|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Really heavy and powerfull machine! `9Who knows what it does?... But the creators are sure that it will lead to profit!|\nadd_spacer|small|\nadd_button|buymagicmachine|`7Buy `9Magic Machine `7[`415`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 6946) {
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Buy `5Building Machine``|left|6946|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Generate Any World You Wish! `9This `^Machine `9Allows you to `@Create `9Any `^World `9You want! You can choose the `^Height, Width, Blocks `9And much more!|\nadd_spacer|small|\nadd_button|buywgm|`7Buy `5WGM `7[`430`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 1008) {
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Buy `eATM `3Machine``|left|1008|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`3ATM Machines `1Can give you over `45-10 `2Gems `1Per PUNCH`^!|\nadd_spacer|small|\nadd_button|buyatm|`7Buy `eATM Machine `7[`410`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 9466)
									{
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `2Bush Wings`6!``|left|9466|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Earth! `^Those wings are pure made by the `9Earth `^Gives `8TRIPLE `1XP `@BUFF`^, `2Green Skin Colour `^And `2Movement Effects`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `430 `@Growtoken's`o, `2Emerald Lock`o, `@300k `2Earth `9Fragment's`o!|left|1458|\nadd_spacer|small|\nadd_button|craftbushwings|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 1636) {
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Buy `#Unicorn``|left|1636|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`#Unicorns `1Can give you over `40-3 `9Crystals `1Per PUNCH`^! `#This item is permanent`^!|\nadd_spacer|small|\nadd_button|buyunicorn|`7Buy `#Unicorn `7[`49`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 6950) {
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Buy `#Gem Storage``|left|6950|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`^Really usefull block! Allows you to `9Store Gems`^! Theres `@No Limits`^ For it!|\nadd_spacer|small|\nadd_button|buygemstorage|`7Buy `#Gem Storage `7[`425`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 3402) {
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Buy `9Golden Booty Chest``|left|3402|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`^Only `9Obtainable `^During `#Valentine`^, Gives `4Great `9Loot`^!|\nadd_spacer|small|\nadd_button|buygbc|`7Buy `9GBC `7[`41`e WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 2478) {
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Buy `eLocke Box``|left|2478|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`^Only `9Obtainable `^During `#February, March, April, May`^, Gives `4Great `9Loot`^! `9Small Chance To Obtain `4Rare `9Items `w[`eLocke Wings`9, `eLocke Sword`w]|\nadd_spacer|small|\nadd_button|buyLocke|`7Buy `9Locke Chest `7[`410`e WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 6204 || id == 6202 || id == 6200 || id == 7484 || id == 7954) {
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|small|`#Welcome To `oChest's `2Store`w!``|left|5954|\nadd_button_with_icon|bronzechest||staticBlueFrame|6204|\nadd_button_with_icon|silverchest||staticBlueFrame|6202|\nadd_button_with_icon|goldchest||staticBlueFrame|6200|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_label_with_icon|small|`5Special `oChest's``|left|5954|\nadd_button_with_icon|winterchest||staticBlueFrame|7484|\nadd_button_with_icon|springchest||staticBlueFrame|7954|\nadd_quick_exit|");
										continue;
									}
									if (id == 8470) {
										int emerald = ((PlayerInfo*)(peer->data))->emerald;
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Craft `2Dirt Lock`6!``|left|8470|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oYou have: `1" + to_string(emerald) + " `2Emerald's`0!|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9First ever in the game custom Lock! The `2Dirt Lock! `9Amazing looking + Special floating effects!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo craft this item you need `910 `2Emerald's`o!|left|8|\nadd_spacer|small|\nadd_button|craftdirtlock|`9Craft Item!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 120) {
										if (((PlayerInfo*)(peer->data))->isCreator == true) {
											Player::OnTextOverlay(peer, "`^You Have Obtained `^200 `bThe Dark Stones`^!");
											bool success = false;
											SaveItemMoreTimes(120, 200, peer, success);
										}
										else {
											Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Buy `9Mystery `oBlock`|left|120|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`bDark Dark Dark! `^Gives you `9Random Item `^From the whole server!|\nadd_spacer|small|\nadd_button|buydarkstones|`7Buy `bThe Dark Stones `7[`4300000`2 Gems`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
											continue;
										}
									}
									if (id == 2952) {
										Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Buy `9Digger's `oSpade``|left|2952|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9This Item allows you to break any `^Blocks `41 HIT`9, Can be `^Used `9To `2Upgrade `9Digger's `oSpades!|\nadd_spacer|small|\nadd_button|buydiggersspade|`7Buy `9Digger's `oSpade `7[`430`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
										continue;
									}
									if (id == 9356) {
										if (((PlayerInfo*)(peer->data))->isCreator == true) {
											Player::OnTextOverlay(peer, "`^You Have Obtained `#Dyro Wings`^!");
											bool success = false;
											SaveItemMoreTimes(9356, 1, peer, success);
										}
										else {
											Player::OnDialogRequest(peer, "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSorry! This item is `4Unobtainable`o!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|");
											continue;
										}
									}
									if (getItemDef(id).blockType == BlockTypes::FOREGROUND || getItemDef(id).blockType == BlockTypes::BACKGROUND)
									{
										if (((PlayerInfo*)(peer->data))->inventory.items.size() == invsize) {
											Player::OnDialogRequest(peer, "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! Your inventory is full! You can purchase an inventory upgrade in the shop.|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|");
											continue;
										}
										bool iscontains = false;
										for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
										{
											if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == id) {
												Player::OnDialogRequest(peer, "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! Your inventory already contains this item!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|");
												iscontains = true;
											}
										}
										if (iscontains)
										{
											iscontains = false;
											continue;
										}
										Player::OnConsoleMessage(peer, "`1You Received `4" + getItemDef(id).name + "'s `1.");
										SaveFindsItem(id, 200, peer);
									}
									else {
										int kaina;
										ItemDefinition itemDef = getItemDef(id);
										if (getItemDef(id).rarity == 999 && getItemDef(id).name.find("Golden") != string::npos)
										{
											kaina = 9000;
											Player::OnDialogRequest(peer, "add_label_with_icon|big|`9Purchase `c" + getItemDef(id).name + " `9(`c" + to_string(getItemDef(id).rarity) + "`9)|left|" + to_string(id) + "|\nadd_spacer|small|\nadd_textbox|`5You are preparing to buy `c" + getItemDef(id).name + "`5!|\nadd_textbox|`5This item is Very Rare`5!|\nadd_spacer|small||\nadd_textbox|`5This item cost `41`c/`4" + to_string(kaina) + " `$World Locks|\nadd_spacer|small||\nadd_textbox|`5How much you want to buy? |\nadd_text_input|buyitembyrarityid_" + to_string(id) + "_" + to_string(kaina) + "|||7||\nend_dialog|buyitembyrarity|`wCancel|`^Purchase!|");
										}									
										else if (itemDef.properties & Property_Untradable) 
										{
											kaina = 3000;
											Player::OnDialogRequest(peer, "add_label_with_icon|big|`9Purchase `c" + getItemDef(id).name + " `9(`c" + to_string(getItemDef(id).rarity) + "`9)|left|" + to_string(id) + "|\nadd_spacer|small|\nadd_textbox|`5You are preparing to buy `c" + getItemDef(id).name + "`5!|\nadd_textbox|`5This item is Rare`5!|\nadd_spacer|small||\nadd_textbox|`5This item cost `41`c/`4" + to_string(kaina) + " `$World Locks|\nadd_spacer|small||\nadd_textbox|`5How much you want to buy? |\nadd_text_input|buyitembyrarityid_" + to_string(id) + "_" + to_string(kaina) + "|||7||\nend_dialog|buyitembyrarity|`wCancel|`^Purchase!|");
										}
										else if (id == 10012)
										{
											kaina = 1800;
											Player::OnDialogRequest(peer, "add_label_with_icon|big|`9Purchase `c" + getItemDef(id).name + " `9(`c" + to_string(getItemDef(id).rarity) + "`9)|left|" + to_string(id) + "|\nadd_spacer|small|\nadd_textbox|`5You are preparing to buy `c" + getItemDef(id).name + "`5!|\nadd_textbox|`5This item is made by Shirogane`5!|\nadd_spacer|small||\nadd_textbox|`5This item cost `41`c/`4" + to_string(kaina) + " `$World Locks|\nadd_spacer|small||\nadd_textbox|`5How much you want to buy? |\nadd_text_input|buyitembyrarityid_" + to_string(id) + "_" + to_string(kaina) + "|||7||\nend_dialog|buyitembyrarity|`wCancel|`^Purchase!|");
										}
										else if (id == 10016)
										{
											kaina = 3500;
											Player::OnDialogRequest(peer, "add_label_with_icon|big|`9Purchase `c" + getItemDef(id).name + " `9(`c" + to_string(getItemDef(id).rarity) + "`9)|left|" + to_string(id) + "|\nadd_spacer|small|\nadd_textbox|`5You are preparing to buy `c" + getItemDef(id).name + "`5!|\nadd_textbox|`5This item is made by Fads`5!|\nadd_spacer|small||\nadd_textbox|`5This item cost `41`c/`4" + to_string(kaina) + " `$World Locks|\nadd_spacer|small||\nadd_textbox|`5How much you want to buy? |\nadd_text_input|buyitembyrarityid_" + to_string(id) + "_" + to_string(kaina) + "|||7||\nend_dialog|buyitembyrarity|`wCancel|`^Purchase!|");
										}
										else if (id == 10018)
										{
											kaina = 1200;
											Player::OnDialogRequest(peer, "add_label_with_icon|big|`9Purchase `c" + getItemDef(id).name + " `9(`c" + to_string(getItemDef(id).rarity) + "`9)|left|" + to_string(id) + "|\nadd_spacer|small|\nadd_textbox|`5You are preparing to buy `c" + getItemDef(id).name + "`5!|\nadd_textbox|`5This item is made by Shiina`5!|\nadd_spacer|small||\nadd_textbox|`5This item cost `41`c/`4" + to_string(kaina) + " `$World Locks|\nadd_spacer|small||\nadd_textbox|`5How much you want to buy? |\nadd_text_input|buyitembyrarityid_" + to_string(id) + "_" + to_string(kaina) + "|||7||\nend_dialog|buyitembyrarity|`wCancel|`^Purchase!|");
										}
										else if (getItemDef(id).clothType == ClothTypes::BACK && getItemDef(id).rarity == 999)
										{
											kaina = 900;
											Player::OnDialogRequest(peer, "add_label_with_icon|big|`9Purchase `c" + getItemDef(id).name + " `9(`c" + to_string(getItemDef(id).rarity) + "`9)|left|" + to_string(id) + "|\nadd_spacer|small|\nadd_textbox|`5You are preparing to buy `c" + getItemDef(id).name + "`5!|\nadd_spacer|small||\nadd_textbox|`5This item cost `41`c/`4" + to_string(kaina) + " `$World Locks|\nadd_spacer|small||\nadd_textbox|`5How much you want to buy? |\nadd_text_input|buyitembyrarityid_" + to_string(id) + "_" + to_string(kaina) + "|||7||\nend_dialog|buyitembyrarity|`wCancel|`^Purchase!|");
										}
										else if (id == 10014)
										{
											kaina = 1500;
											Player::OnDialogRequest(peer, "add_label_with_icon|big|`9Purchase `c" + getItemDef(id).name + " `9(`c" + to_string(getItemDef(id).rarity) + "`9)|left|" + to_string(id) + "|\nadd_spacer|small|\nadd_textbox|`5You are preparing to buy `c" + getItemDef(id).name + "`5!|\nadd_textbox|`5This item is made by Shiina`5!|\nadd_spacer|small||\nadd_textbox|`5This item cost `41`c/`4" + to_string(kaina) + " `$World Locks|\nadd_spacer|small||\nadd_textbox|`5How much you want to buy? |\nadd_text_input|buyitembyrarityid_" + to_string(id) + "_" + to_string(kaina) + "|||7||\nend_dialog|buyitembyrarity|`wCancel|`^Purchase!|");
										}
										else if (id == 2946)
										{
											kaina = 5;
											Player::OnDialogRequest(peer, "add_label_with_icon|big|`9Purchase `c" + getItemDef(id).name + " `9(`c" + to_string(getItemDef(id).rarity) + "`9)|left|" + to_string(id) + "|\nadd_spacer|small|\nadd_textbox|`5You are preparing to buy `c" + getItemDef(id).name + "`5!|\nadd_textbox|`5This block can store blocks and items in it`5!|\nadd_spacer|small||\nadd_textbox|`5This item cost `41`c/`4" + to_string(kaina) + " `$World Locks|\nadd_spacer|small||\nadd_textbox|`5How much you want to buy? |\nadd_text_input|buyitembyrarityid_" + to_string(id) + "_" + to_string(kaina) + "|||7||\nend_dialog|buyitembyrarity|`wCancel|`^Purchase!|");
										}
										else if (id == 1404)
										{
											kaina = 15;
											Player::OnDialogRequest(peer, "add_label_with_icon|big|`9Purchase `c" + getItemDef(id).name + " `9(`c" + to_string(getItemDef(id).rarity) + "`9)|left|" + to_string(id) + "|\nadd_spacer|small|\nadd_textbox|`5You are preparing to buy `c" + getItemDef(id).name + "`5!|\nadd_textbox|`5This item allows you to move white door`5!|\nadd_spacer|small||\nadd_textbox|`5This item cost `41`c/`4" + to_string(kaina) + " `$World Locks|\nadd_spacer|small||\nadd_textbox|`5How much you want to buy? |\nadd_text_input|buyitembyrarityid_" + to_string(id) + "_" + to_string(kaina) + "|||7||\nend_dialog|buyitembyrarity|`wCancel|`^Purchase!|");
										}
										else if (getItemDef(id).rarity == 999)
										{
											kaina = 600;
											Player::OnDialogRequest(peer, "add_label_with_icon|big|`9Purchase `c" + getItemDef(id).name + " `9(`c" + to_string(getItemDef(id).rarity) + "`9)|left|" + to_string(id) + "|\nadd_spacer|small|\nadd_textbox|`5You are preparing to buy `c" + getItemDef(id).name + "`5!|\nadd_spacer|small||\nadd_textbox|`5This item cost `41`c/`4" + to_string(kaina) + " `$World Locks|\nadd_spacer|small||\nadd_textbox|`5How much you want to buy? |\nadd_text_input|buyitembyrarityid_" + to_string(id) + "_" + to_string(kaina) + "|||7||\nend_dialog|buyitembyrarity|`wCancel|`^Purchase!|");
										}
										else {
											kaina = round((float)getItemDef(id).rarity / 10 * 5);
											Player::OnDialogRequest(peer, "add_label_with_icon|big|`9Purchase `c" + getItemDef(id).name + " `9(`c" + to_string(getItemDef(id).rarity) + "`9)|left|" + to_string(id) + "|\nadd_spacer|small|\nadd_textbox|`5You are preparing to buy `c" + getItemDef(id).name + "`5!|\nadd_spacer|small||\nadd_textbox|`5This item cost `41`c/`4" + to_string(kaina) + " `$World Locks|\nadd_spacer|small||\nadd_textbox|`5How much you want to buy? |\nadd_text_input|buyitembyrarityid_" + to_string(id) + "_" + to_string(kaina) + "|||7||\nend_dialog|buyitembyrarity|`wCancel|`^Purchase!|");
										}
									}


								}
								else if (isFindDialog) {
									string itemLower2;
									vector<ItemDefinition> itemDefsfind;
									for (char c : itemFind) if (c < 0x20 || c>0x7A) goto SKIPFind;
									if (itemFind.length() < 3) goto SKIPFind3;
									for (const ItemDefinition& item : itemDefs)
									{
										string itemLower;
										for (char c : item.name) if (c < 0x20 || c>0x7A) goto SKIPFind2;
										if (!(item.id % 2 == 0)) goto SKIPFind2;
										itemLower2 = item.name;
										std::transform(itemLower2.begin(), itemLower2.end(), itemLower2.begin(), ::tolower);
										if (itemLower2.find(itemLower) != std::string::npos) {
											itemDefsfind.push_back(item);
										}
									SKIPFind2:;
									}
								SKIPFind3:;
									string listMiddle = "";
									string listFull = "";
									for (const ItemDefinition& item : itemDefsfind)
									{
										string kys = item.name;
										std::transform(kys.begin(), kys.end(), kys.begin(), ::tolower);
										string kms = itemFind;
										std::transform(kms.begin(), kms.end(), kms.begin(), ::tolower);
										if (kys.find(kms) != std::string::npos)
											listMiddle += "add_button_with_icon|tool" + to_string(item.id) + "|`$" + item.name + "``|left|" + to_string(item.id) + "||\n";
									}
									if (itemFind.length() < 3) {
										listFull = "add_textbox|`4Word is less than 3 letters!``|\n";
										showWrong(peer, listFull, itemFind);
									}
									else if (itemDefsfind.size() == 0) {
										showWrong(peer, listFull, itemFind);
									}
									else {
										Player::OnDialogRequest(peer, "add_label_with_icon|big|`9Found item : " + itemFind + "``|left|3146|\nadd_textbox|Enter a word below to find the item|\nadd_text_input|item|Item Name||20|\nend_dialog|findid|Cancel|Find the item!|\nadd_spacer|big|\n" + listMiddle + "add_quick_exit|\n");
									}
								}
							SKIPFind:;
								if (btn == "magplantdisable")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner)
									{
										std::ofstream outfile("magplant/status/" + ((PlayerInfo*)(peer->data))->currentWorld + ".txt");
										outfile << 0;
										outfile.close();
										Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "`wYou disabled the magplant!", 0, true);
									}
									else {
										autoBan(peer, true, 1, "btn magplantdisable -> is not world owner");
										continue;
									}
								}
								if (btn == "magplantcollect")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner)
									{
										int gemgemsgemmer = 0;
										ifstream savemag("magplant/gems/" + ((PlayerInfo*)(peer->data))->currentWorld + ".txt");
										savemag >> gemgemsgemmer;
										savemag.close();
										Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "`wCollected `2" + std::to_string(gemgemsgemmer) + " `wGems From the magplant!", 0, true);
										std::ofstream outfile("magplant/gems/" + ((PlayerInfo*)(peer->data))->currentWorld + ".txt");
										outfile << 0;
										outfile.close();
										std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string content((std::istreambuf_iterator<char>(ifsz)),
											(std::istreambuf_iterator<char>()));
										int gembux = atoi(content.c_str());
										int fingembux = gembux + gemgemsgemmer;
										ofstream myfile;
										myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										myfile << fingembux;
										myfile.close();
										int gemcalc = gembux + gemgemsgemmer;
										Player::OnSetBux(peer, gemcalc, 0);
									}
									else {
										autoBan(peer, true, 1, "btn magplantcollect -> is not world owner");
										continue;
									}
								}
								if (btn == "magplantenable")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner)
									{
										std::ofstream outfile("magplant/status/" + ((PlayerInfo*)(peer->data))->currentWorld + ".txt");
										outfile << 1;
										outfile.close();
										Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "`wYou enabled the magplant!", 0, true);
									}
									else {
										autoBan(peer, true, 1, "btn magplantenable -> is not world owner");
										continue;
									}
								}

								if (btn == "suspend")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if ((((PlayerInfo*)(peer->data))->lastInfo == "lim")) {
										ENetPeer* currentPeer;
										string name = ((PlayerInfo*)(peer->data))->rawName;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
										}
										delete p.data;
										Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from GrowLand for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
										autoBan(peer, false, 3, "btn suspend -> autoban used on lim");
										continue;
									}
									if (((PlayerInfo*)(peer->data))->isCreator) {
										GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `4banned `w" + ((PlayerInfo*)(peer->data))->lastInfoname + " `#** `o(`4/rules `oto see the rules!)"));
										ENetPeer* currentPeer;
										cout << "Administrator: " << ((PlayerInfo*)(peer->data))->rawName << " used SUSPEND in wrench on " << ((PlayerInfo*)(peer->data))->lastInfo << endl;
										time_t now = time(0);
										char* dt = ctime(&now);
										ofstream wrench("chatLogs/wrench.txt", std::ios_base::app);
										wrench << dt << "Administrator " << ((PlayerInfo*)(peer->data))->rawName << " used SUSPEND on " << ((PlayerInfo*)(peer->data))->lastInfo << endl << endl;
										wrench.close();
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) {
												if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;
												GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`0Warning from `4System`0: You've been `4BANNED `0from GrowLand for 730 days"), "audio/hub_open.wav"), 0));
												ENetPacket* packet2 = enet_packet_create(ps2.data,
													ps2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet2);
												GamePacket ps3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWarning from `4System`o: You've been `4BANNED `ofrom GrowLand for 730 days"));
												ENetPacket* packet3 = enet_packet_create(ps3.data,
													ps3.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet3);
												GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Applied punishment on " + ((PlayerInfo*)(peer->data))->lastInfoname + "."));
												ENetPacket* packetto = enet_packet_create(pto.data,
													pto.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packetto);
												if (((PlayerInfo*)(currentPeer->data))->haveGrowId) {
													PlayerInfo* p = ((PlayerInfo*)(currentPeer->data));
													p->ban = 1;
													string username = PlayerDB::getProperName(p->rawName);
													try {
														std::ifstream ifff("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");
														if (ifff.fail()) {
															ifff.close();
														}
														if (ifff.is_open()) {
														}
														json j;
														ifff >> j;
														int effect = p->effect;
														j["isBanned"] = 1;
														std::ofstream o("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json"); //save
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														o << j << std::endl;
														string bannamed = str.substr(5, cch.length() - 5 - 1);
														std::ofstream outfile("bans/" + bannamed + ".txt");
														outfile << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName;
														outfile.close();
													}
													catch (std::exception& e)
													{
														std::cerr << e.what() << std::endl;
													}
													catch (const std::out_of_range& e) {
														cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
													}
													catch (...) {
														cout << "reading file violation" << endl;
													}
												}
												enet_peer_disconnect_later(currentPeer, 0);
											}
											ENetPacket* packet7 = enet_packet_create(p7.data,
												p7.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								if (btn == "disconnect")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if ((((PlayerInfo*)(peer->data))->lastInfo == "lim")) {
										//cout << "[WARNING]" << endl;
										ENetPeer* currentPeer;
										string name = ((PlayerInfo*)(peer->data))->rawName;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											//((PlayerInfo*)(currentPeer->data))->isDuctaped = true;
										}
										delete p.data;
										Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from GrowLand for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
										autoBan(peer, false, 3, "btn disconnect -> disconnect used on lim");
										continue;
									}
									if (((PlayerInfo*)(peer->data))->adminLevel >= 777)
									{
										cout << "[WARNING]: Player " << ((PlayerInfo*)(peer->data))->rawName << " Used Disconnect On " << ((PlayerInfo*)(peer->data))->lastInfo << "!" << endl;
										time_t now = time(0);
										char* dt = ctime(&now);
										//ofstream wrench("chatLogs/wrench.txt", std::ios_base::app);
										//wrench << dt << "Administrator " << ((PlayerInfo*)(peer->data))->rawName << " used DISCONNECT on " << ((PlayerInfo*)(peer->data))->lastInfo << endl << endl;
										//wrench.close();
										ENetPeer* currentPeerp;
										for (currentPeerp = server->peers;
											currentPeerp < &server->peers[server->peerCount];
											++currentPeerp)
										{
											if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(currentPeerp->data))->rawName)
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Fake disconnected player from server."));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												enet_peer_disconnect_later(currentPeerp, 0);
											}
										}
									}
								}
								if (btn == "freeze")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if ((((PlayerInfo*)(peer->data))->lastInfo == "lim")) {
										//cout << "[WARNING]" << endl;
										ENetPeer* currentPeer;
										string name = ((PlayerInfo*)(peer->data))->rawName;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											//((PlayerInfo*)(currentPeer->data))->isDuctaped = true;
										}
										delete p.data;
										Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from GrowLand for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
										autoBan(peer, false, 3, "btn freeze -> freeze used on lim");
										continue;
									}
									if (((PlayerInfo*)(peer->data))->adminLevel >= 777)
									{
										time_t now = time(0);
										char* dt = ctime(&now);
										ENetPeer* currentPeerp;
										for (currentPeerp = server->peers;
											currentPeerp < &server->peers[server->peerCount];
											++currentPeerp)
										{
											if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(currentPeerp->data))->rawName)
											{
												if (((PlayerInfo*)(currentPeerp->data))->isFrozen == false)
												{
													((PlayerInfo*)(currentPeerp->data))->isFrozen = true;
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wUsed `!Freeze`w mod on `w" + ((PlayerInfo*)(currentPeerp->data))->displayName));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
													((PlayerInfo*)(currentPeerp->data))->skinColor = -37500;
													sendClothes(currentPeerp);
													sendFrozenState(currentPeerp);
													GamePacket pf = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wSHUSH... pretty cold here. `!(Frozen)`w mod added."));
													ENetPacket* packetf = enet_packet_create(pf.data,
														pf.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeerp, 0, packetf);
													delete pf.data;
												}
												else
												{
													((PlayerInfo*)(currentPeerp->data))->isFrozen = false;
													sendResetState(currentPeerp);
													GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnSetFreezeState"), 0));
													memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeerp->data))->netID), 4);
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeerp, 0, packet2);
													delete p2.data;
													((PlayerInfo*)(currentPeerp->data))->skinColor = 0x8295C3FF;
													sendClothes(currentPeerp);
													Player::OnConsoleMessage(currentPeerp, "`wLiking it warm... `!(Frozen)`w mod removed.");
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`!Unfrozen `wplayer `w" + ((PlayerInfo*)(currentPeerp->data))->displayName));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
												}
											}
											string text = "action|play_sfx\nfile|audio/freeze.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
											memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
											ENetPacket* packetso = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);
											if (isHere(peer, currentPeerp))
											{
												enet_peer_send(currentPeerp, 0, packetso);
											}
										}
									}
								}
								if (btn == "tape")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if ((((PlayerInfo*)(peer->data))->lastInfo == "lim")) {
										//cout << "[WARNING]" << endl;
										ENetPeer* currentPeer;
										string name = ((PlayerInfo*)(peer->data))->rawName;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											//((PlayerInfo*)(currentPeer->data))->isDuctaped = true;
										}
										delete p.data;
										Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from GrowLand for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
										autoBan(peer, false, 3, "btn tape -> tape used onLim");
										continue;
									}
									if (((PlayerInfo*)(peer->data))->adminLevel >= 777)
									{
										time_t now = time(0);
										char* dt = ctime(&now);
										//ofstream wrench("chatLogs/wrench.txt", std::ios_base::app);
										//wrench << dt << "Administrator " << ((PlayerInfo*)(peer->data))->rawName << " used MUTE on " << ((PlayerInfo*)(peer->data))->lastInfo << endl << endl;
										//wrench.close();
										GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave duct-taped `w" + ((PlayerInfo*)(peer->data))->lastInfoname + "`o's mouth. `#** `o(`4/rules `oto see the rules!)"));
										ENetPeer* currentPeerp;
										for (currentPeerp = server->peers;
											currentPeerp < &server->peers[server->peerCount];
											++currentPeerp)
										{
											if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
												continue;
											ENetPacket* packet7 = enet_packet_create(p7.data,
												p7.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeerp, 0, packet7);
											if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(currentPeerp->data))->rawName)
											{
												if (((PlayerInfo*)(currentPeerp->data))->taped == false)
												{
													((PlayerInfo*)(currentPeerp->data))->taped = true;
													((PlayerInfo*)(currentPeerp->data))->isDuctaped = true;
													((PlayerInfo*)(currentPeerp->data))->cantsay = true;
													sendState(currentPeerp);
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wUsed `btape`w mod on `w" + ((PlayerInfo*)(currentPeerp->data))->displayName));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
												}
												else
												{
													((PlayerInfo*)(currentPeerp->data))->taped = false;
													((PlayerInfo*)(currentPeerp->data))->isDuctaped = false;
													((PlayerInfo*)(currentPeerp->data))->cantsay = false;
													sendState(currentPeerp);
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wUn`btaped`w player."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
												}
												GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Applied punishment on " + ((PlayerInfo*)(peer->data))->lastInfo));
												//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
												ENetPacket* packetto = enet_packet_create(pto.data,
													pto.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packetto);
											}
											//enet_host_flush(server);
											string text = "action|play_sfx\nfile|audio/lightning.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
											memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
											ENetPacket* packetso = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);
											if (isHere(peer, currentPeerp))
											{
												enet_peer_send(currentPeerp, 0, packetso);
											}
										}
									}
								}
								if (btn == "punishview")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(peer->data))->rawName) {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish/View player|left|1432|\nadd_spacer|small|\nadd_button|banmenu|`1Punish `w(`4Ban`1/`4Kick`1/`4Fake Disconnect`w)|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|\n"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish/View player|left|1432|\nadd_spacer|small|\nadd_button|banmenu|`1Punish `w(`4Ban`1/`4Kick`1/`4Fake Disconnect`w)|\nadd_button|warnmenu|`1Warn `w(`4Swearing`1/`4Spamming`w)|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|\n"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish/View player|left|1432|\nadd_spacer|small|\nadd_button|banmenu|`1Punish `w(`4Ban`1/`4Kick`1/`4Fake Disconnect`w)|\nadd_button|warnmenu|`1Warn `w(`4Swearing`1/`4Spamming`w)|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|\n"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish/View player|left|1432|\nadd_spacer|small|\nadd_button|banmenu|`1Punish `w(`4Ban`1/`4Kick`1/`4Fake Disconnect`w)|\nadd_button|warnmenu|`1Warn `w(`4Swearing`1/`4Spamming`w)|\nadd_button|view|`1View `w(`4Check IP`1/`4Information`w)|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|\n"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish/View player|left|1432|\nadd_spacer|small|\nadd_button|banmenu|`1Punish `w(`4Ban`1/`4Kick`1/`4Fake Disconnect`w)|\nadd_button|warnmenu|`1Warn `w(`4Swearing`1/`4Spamming`w)|\nadd_button|view|`1View `w(`4Check IP`1/`4Information`w)|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|\n"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
								if (btn == "warnmenu")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish player|left|1432|\nadd_spacer|small|\nadd_label_with_icon|small|`oEnter the reason below and click Warn Player!|left|486|\nadd_spacer|small|\nadd_text_input|warntext|||50|\nend_dialog|sendwarn|Cancel|Warn Player!|\n");
								}
								if (btn == "view")
								{
									if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(peer->data))->rawName) {
										continue;
									}

									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										string name = ((PlayerInfo*)(currentPeer->data))->rawName;
										int pullX = ((PlayerInfo*)(peer->data))->x;
										int pullY = ((PlayerInfo*)(peer->data))->y;
										if (name == ((PlayerInfo*)(peer->data))->lastInfo)
										{
											string showplatid = ((PlayerInfo*)(currentPeer->data))->platformID;
											string showplatidplain;
											if (showplatid == "4")
											{
												showplatidplain = "Android";
											}
											else if (showplatid == "0")
											{
												showplatidplain = "PC (Windows)";
											}
											else if (showplatid == "6")
											{
												showplatidplain = "Mac (OS X)";
											}
											else
											{
												showplatidplain = " UNIX (Linux, iOS (most likely), FreeBSD etc.) ";
											}
											Player::OnDialogRequest(peer, "set_default_color|`w\n\nadd_label_with_icon|big|`1View player|left|1432|\nadd_spacer|small|\nadd_label|small|`oIP: " + ((PlayerInfo*)(currentPeer->data))->charIP + "|left|\nadd_label|small|`oPlatform: " + showplatidplain + "|left|\nadd_label|small|`oGame Version: " + ((PlayerInfo*)(currentPeer->data))->gameversion + "|left|\nadd_spacer|small|\nadd_button|punishview|`wBack|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|\n");
										}
									}
								}
								if (btn == "banmenu")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish player|left|1432|\nadd_spacer|small|\nadd_button|suspend|`4Suspend|noflags|732|\nadd_button|tape|`bTape player|noflags|408|\nadd_button|disconnect|`6Disconnect|noflags|276|\nadd_button|freeze|`1Freeze|noflags|274|\nadd_spacer|small|\nadd_button|punishview|`wBack|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|");
								}
								if (btn == "wban")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(peer->data))->rawName) {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->haveGrowId && ((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || ((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 998 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888)
									{
										ENetPeer* currentPeerp;
										for (currentPeerp = server->peers;
											currentPeerp < &server->peers[server->peerCount];
											++currentPeerp)
										{
											if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
												continue;
											string name = ((PlayerInfo*)(peer->data))->displayName;
											string kickname = ((PlayerInfo*)(peer->data))->lastInfoname;
											//string kickname = ((PlayerInfo*)(peer->data))->displayName;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `4world bans " + "`o" + kickname + " from `w" + world->name + "`o!"));
											string text = "action|play_sfx\nfile|audio/repair.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);
											if (isHere(peer, currentPeerp))
											{
												ENetPacket* packetsou = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeerp, 0, packetsou);
												enet_peer_send(currentPeerp, 0, packet);
												delete data;
												delete p.data;
												if (((PlayerInfo*)(currentPeerp->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) // if last wrench
												{
													namespace fs = std::experimental::filesystem;
													if (!fs::is_directory("worldbans/" + getPlyersWorld(peer)->name) || !fs::exists("worldbans/" + getPlyersWorld(peer)->name)) {
														fs::create_directory("worldbans/" + getPlyersWorld(peer)->name);
														std::ofstream outfile("worldbans/" + getPlyersWorld(peer)->name + "/" + ((PlayerInfo*)(currentPeerp->data))->rawName);
														outfile << "worldbanned by: " + ((PlayerInfo*)(peer->data))->rawName;
														outfile.close();
													}
													else
													{
														std::ofstream outfile("worldbans/" + getPlyersWorld(peer)->name + "/" + ((PlayerInfo*)(currentPeerp->data))->rawName);
														outfile << "worldbanned by: " + ((PlayerInfo*)(peer->data))->rawName;
														outfile.close();
													}
													sendPlayerLeave(currentPeerp, (PlayerInfo*)(currentPeerp->data));
													sendWorldOffers(currentPeerp);
													((PlayerInfo*)(currentPeerp->data))->currentWorld = "EXIT";
												}
											}
										}
									}
								}
								if (btn == "accountsecurity")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									string codeInfo = "0";
									string statusText = "";
									if (((PlayerInfo*)(peer->data))->isUseCode)
									{
										codeInfo = "`@Disable `wPIN Code.";
										statusText = "`wAt the moment, you have PIN code protection `1Enabled`w.";
									}
									else
									{
										codeInfo = "`1Enable `wPIN Code.";
										statusText = "`wAt the moment, you have PIN code protection `@Disabled`w.";
									}
									Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`5Secure My Account``|left|1436|\n\nadd_spacer|small|\nadd_label|small|`5Hello you can control you account security here!|left|\nadd_label|small|`wYour email/code will be used to retrieve your lost password|left|\n\nadd_spacer|small|\nadd_button|passbutton|`wChange Password|\n\nadd_spacer|small|\nadd_label_with_icon|small|`1Secret Code: " + ((PlayerInfo*)(peer->data))->registercode + "|left|1424|\nadd_spacer|small|\n\nadd_button|changecode|`wChange Code```|\n\nadd_spacer|small|\nadd_label|small|" + statusText + "|left|small|\nadd_spacer|small|\nadd_button|enableordisablecode|" + codeInfo + "`|4|\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|");
								}
								if (btn == "enableordisablecode")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									string tekstasFalseArTrue = "";
									if (((PlayerInfo*)(peer->data))->isUseCode == false)
									{
										((PlayerInfo*)(peer->data))->isUseCode = true;
										Player::OnConsoleMessage(peer, "`1Successfully `^Enabled `1Account protection.");
										tekstasFalseArTrue = "true";
									}
									else
									{
										((PlayerInfo*)(peer->data))->isUseCode = false;
										Player::OnConsoleMessage(peer, "`1Successfully `@Disabled `1Account protection.");
										tekstasFalseArTrue = "false";
									}
									ofstream fsCode("accountSecurity/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									fsCode << tekstasFalseArTrue << endl;
									fsCode << ((PlayerInfo*)(peer->data))->registercode << endl;
									fsCode << ((PlayerInfo*)(peer->data))->registermac << endl;
									fsCode << ((PlayerInfo*)(peer->data))->registerrid << endl;
									fsCode << ((PlayerInfo*)(peer->data))->registersid << endl;
									fsCode << ((PlayerInfo*)(peer->data))->registergid << endl;
									fsCode << ((PlayerInfo*)(peer->data))->registervid << endl;
									fsCode << ((PlayerInfo*)(peer->data))->registeraid << endl;
									fsCode << ((PlayerInfo*)(peer->data))->registerIP << endl;
									fsCode.close();
								}
								if (btn == "scan12") {
									string tex = "";
									int pp = 0;
									int count1 = 0;
									bool found = false;
									for (int j = 0; j < world->droppedItems.size(); j++) {
										pp = world->droppedItems.at(j).id;
										count1 = world->droppedItems.at(j).count;
										tex += "\nadd_label_with_icon_button|gay22|`w" + getItemDef(pp).name + "|gay22|" + to_string(pp) + "|gay22|";
										found = true;
									}

									if (found) {
										sendDialog(peer, "add_label_with_icon|big|`wFloating items``|left|6016|\nadd_textbox|`oPress on to be directed to the location of the item.|left|\nadd_spacer|small|" + tex + "\nend_dialog|lel|`wClose||");

									}
									else {
										sendDialog(peer, "add_label_with_icon|big|`wFloating items``|left|6016|\nadd_textbox|`oNo item has dropped!|left|\nend_dialog|lolol|`wClose||");

									}
								}
								if (btn == "floatingitems") {

									string additems = "";

									for (int i = 0; i < world->droppedItems.size(); i++)
									{
										//if (world->droppedItems.at(i).uid)
										int id = world->droppedItems.at(i).id;
										additems += "\nadd_label_with_icon_button||`w" + GetItemDef(id).name + ": " + to_string(world->droppedItems.at(i).count) + "|left|" + to_string(world->droppedItems.at(i).id) + "|item" + to_string(id) + "|";
									}

									Player::OnDialogRequest(peer, "set_default_color|`o\nadd_label_with_icon|big|`wWorld Items``|left|6016|\nadd_spacer|small|\nadd_textbox|`oPress on the icon to be directed to the location of the item.|\nadd_spacer|small|" + additems + "\nadd_spacer|small|\nadd_button|goback|Back|\nend_dialog|growscan_float|||\n");

								}
								if (btn == "changecode")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`5Change Security Code``|left|32|\n\nadd_spacer|small|\nadd_label_with_icon|small|`1Your current PIN code is: `@" + ((PlayerInfo*)(peer->data))->registercode + " |left|1424|\n\nadd_spacer|small|\nadd_label|small|`oEnter a `w5-character code. Write your code in `wnotepad `oto not forget it, otherwise, the account will be difficult to recover.|left|\n\nadd_spacer|small||\nadd_text_input|changeCodeText|Code||5|\n\nadd_spacer|small|\nend_dialog|changeCodeDialog|Cancel|OK|\n");
								}
								if (btn == "kick")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(peer->data))->rawName) {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || ((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 998 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888)
									{
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->isCreator == true) { continue; }
											string name = ((PlayerInfo*)(peer->data))->displayName;
											string kickname = ((PlayerInfo*)(peer->data))->lastInfoname;
											//string kickname = ((PlayerInfo*)(peer->data))->displayName;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `4kicks " + "`w" + kickname));
											string text = "action|play_sfx\nfile|audio/male_scream.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);
											if (isHere(peer, currentPeer))
											{
												ENetPacket* packetsou = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packetsou);
												enet_peer_send(currentPeer, 0, packet);
												int x = 3040;
												int y = 736;
												for (int i = 0; i < world->width * world->height; i++)
												{
													if (world->items[i].foreground == 6) {
														x = (i % world->width) * 32;
														y = (i / world->width) * 32;
													}
												}
												GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
												memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo)
												{
													enet_peer_send(currentPeer, 0, packet2);
												}
												delete p2.data;
												delete p.data;
												delete data;
											}
										}
									}
								}
								if (btn == "pull")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(peer->data))->rawName) {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || ((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 998 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888)
									{
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->isCreator == true) { continue; }
											string name = ((PlayerInfo*)(currentPeer->data))->rawName;
											int pullX = ((PlayerInfo*)(peer->data))->x;
											int pullY = ((PlayerInfo*)(peer->data))->y;
											if (name == ((PlayerInfo*)(peer->data))->lastInfo)
											{
												if (isHere(peer, currentPeer) && getPlyersWorld(peer)->name != "EXIT")
												{
													string name = ((PlayerInfo*)(peer->data))->displayName;
													string pullname = ((PlayerInfo*)(currentPeer->data))->displayName;
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `5pulls " + "`w" + pullname));
													string text = "action|play_sfx\nfile|audio/object_spawn.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length());
													memcpy(data + 4 + text.length(), &zero, 1);
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet);
													enet_peer_send(peer, 0, packet);
													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packetsou);
													enet_peer_send(peer, 0, packetsou);
													GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), pullX, pullY));
													memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet2);
													GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You have been pulled by " + ((PlayerInfo*)(peer->data))->displayName));
													//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
													ENetPacket* packetto = enet_packet_create(pto.data,
														pto.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packetto);
													delete pto.data;
													delete p2.data;
													delete p.data;
												}
											}
										}
									}
								}
								if (btn == "backsocialportal") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->joinguild == true) {
										Player::OnDialogRequest(peer, "set_default_color|`w\n\nadd_label_with_icon|big|Social Portal``|left|1366|\n\nadd_spacer|small|\nadd_button|backonlinelist|Show Friends``|0|0|\nadd_button|showguild|Show Guild Members``|0|0|\nadd_button|guildrewards|Guild Rewards``|0|0|\nend_dialog||OK||\nadd_quick_exit|");
									}
									else {
										Player::OnDialogRequest(peer, "set_default_color|`w\n\nadd_label_with_icon|big|Social Portal``|left|1366|\n\nadd_spacer|small|\nadd_button|backonlinelist|Show Friends``|0|0|\nadd_button|createguildinfo|Create Guild``|0|0|\nend_dialog||OK||\nadd_quick_exit|");
									}
								}
								if (btn == "backonlinelist") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									string onlinefrnlist = "";
									int onlinecount = 0;
									int totalcount = ((PlayerInfo*)(peer->data))->friendinfo.size();
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										string name = ((PlayerInfo*)(currentPeer->data))->rawName;
										if (find(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), name) != ((PlayerInfo*)(peer->data))->friendinfo.end()) {
											onlinefrnlist += "\nadd_button|onlinefrns_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->tankIDName + "``|0|0|";
											onlinecount++;
										}
									}
									if (totalcount == 0) {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online``|left|1366|\n\nadd_spacer|small|\nadd_label|small|`1To add friends in `4GrowLand `1Click on someone's name and click add as a friend!`o.``|left|4|\n\nadd_spacer|small|\nadd_button||`5Close``|0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else if (onlinecount == 0) {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online``|left|1366|\n\nadd_spacer|small|\nadd_button|chc0|`wClose``|0|0|\nadd_label|small|`oNone of your friends are currently online.``|left|4|\n\nadd_spacer|small|\nadd_button|showoffline|`5Show offline``|0|0|\nadd_button||`5Close``|0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online``|left|1366|\n\nadd_spacer|small|\nadd_button|chc0|`wClose``|0|0|" + onlinefrnlist + "\n\nadd_spacer|small|\nadd_button|showoffline|`5Show offline``|0|0|\nadd_button||`oClose``|0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
								if (btn.substr(0, 9) == "onlinegm_") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->rawName == btn.substr(9, cch.length() - 9 - 1)) {
											((PlayerInfo*)(peer->data))->lastgmworld = ((PlayerInfo*)(currentPeer->data))->currentWorld;
											((PlayerInfo*)(peer->data))->lastgmname = ((PlayerInfo*)(currentPeer->data))->displayName;
											((PlayerInfo*)(peer->data))->lastgm = ((PlayerInfo*)(currentPeer->data))->rawName;
										}
									}
									if (btn.substr(9, cch.length() - 9 - 1) == ((PlayerInfo*)(peer->data))->rawName) {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastgmname + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|This is you!|\n\nadd_spacer|small|\nadd_button|showguild|`oBack``|0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(peer->data))->guildLeader) {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastgmname + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgmname + " is `2online `onow in the world `5" + ((PlayerInfo*)(peer->data))->lastgmworld + "`o.|\n\nadd_spacer|small|\nadd_button|gmwarpbutton|`oWarp to `5" + ((PlayerInfo*)(peer->data))->lastgmworld + "``|0|0|\nadd_button|gmmsgbutton|`5Send message``|0|0|\n\nadd_spacer|small|\nadd_button|removegmonline|Kick from guild|0|0|\nadd_button|showguild|`oBack``|0|0|\nadd_quick_exit|"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastgmname + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgmname + " is `2online `onow in the world `5" + ((PlayerInfo*)(peer->data))->lastgmworld + "`o.|\n\nadd_spacer|small|\nadd_button|gmwarpbutton|`oWarp to `5" + ((PlayerInfo*)(peer->data))->lastgmworld + "``|0|0|\nadd_button|gmmsgbutton|`5Send message``|0|0|\n\nadd_spacer|small|\nadd_button|showguild|`oBack``|0|0|\nadd_quick_exit|"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
								}
								if (btn == "showoffline") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									string onlinelist = "";
									string offlinelist = "";
									string offname = "";
									int onlinecount = 0;
									int totalcount = ((PlayerInfo*)(peer->data))->friendinfo.size();
									vector<string>offliness = ((PlayerInfo*)(peer->data))->friendinfo;
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										string name = ((PlayerInfo*)(currentPeer->data))->rawName;
										if (find(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), name) != ((PlayerInfo*)(peer->data))->friendinfo.end()) {
											onlinelist += "\nadd_button|onlinefrns_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + "``|0|0|";
											onlinecount++;
											offliness.erase(std::remove(offliness.begin(), offliness.end(), name), offliness.end());
										}
									}
									for (std::vector<string>::const_iterator i = offliness.begin(); i != offliness.end(); ++i) {
										offname = *i;
										offlinelist += "\nadd_button|offlinefrns_" + offname + "|`4OFFLINE: `o" + offname + "``|0|0|";
									}
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online|left|1366|\n\nadd_spacer|small|\nadd_button|chc0|`wClose``|0|0|\nadd_spacer|small|" + offlinelist + "\nadd_spacer|small|\n\nadd_button|frnoption|`oFriend Options``|0|0|\nadd_button|backonlinelist|Back``|0|0|\nadd_button||`oClose``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (btn == "removecon") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastFrn) {
											((PlayerInfo*)(peer->data))->friendinfo.erase(std::remove(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), ((PlayerInfo*)(peer->data))->lastFrn), ((PlayerInfo*)(peer->data))->friendinfo.end());
											((PlayerInfo*)(currentPeer->data))->friendinfo.erase(std::remove(((PlayerInfo*)(currentPeer->data))->friendinfo.begin(), ((PlayerInfo*)(currentPeer->data))->friendinfo.end(), ((PlayerInfo*)(peer->data))->rawName), ((PlayerInfo*)(currentPeer->data))->friendinfo.end());
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ALERT: `2" + ((PlayerInfo*)(peer->data))->displayName + " `ohas removed you as a friend."));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											delete p.data;
										}
									}
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`4Friend removed``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`oOk, you are no longer friends with `o" + ((PlayerInfo*)(peer->data))->lastFrnName + ".``|\n\nadd_spacer|small|\nadd_button||`oOK``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (btn == "removeconoff") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									((PlayerInfo*)(peer->data))->friendinfo.erase(std::remove(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), ((PlayerInfo*)(peer->data))->lastFrn), ((PlayerInfo*)(peer->data))->friendinfo.end());
									try {
										std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->lastFrn + ".json");
										if (ifff.fail()) {
											ifff.close();
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oPlayer `5" + ((PlayerInfo*)(peer->data))->lastFrn + " `odoes not exist!"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										if (ifff.is_open()) {
										}
										json j;
										ifff >> j; //load
										vector<string> friends;
										for (int i = 0; i < j["friends"].size(); i++) {
											friends.push_back(j["friends"][i]);
										}
										friends.erase(std::remove(friends.begin(), friends.end(), ((PlayerInfo*)(peer->data))->rawName), friends.end());
										j["friends"] = friends; //edit
										std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->lastFrn + ".json"); //save
										if (!o.is_open()) {
											cout << GetLastError() << endl;
											_getch();
										}
										o << j << std::endl;
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`4Friend removed``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`oOk, you are no longer friends with `o" + ((PlayerInfo*)(peer->data))->lastFrn + ".``|\n\nadd_spacer|small|\nadd_button||`oOK``|0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									catch (std::exception& e)
									{
										std::cerr << e.what() << std::endl;
									}
									catch (const std::out_of_range& e) {
										cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
									}
									catch (...) {
										cout << "reading file violation" << endl;
									}
								}
								if (btn.substr(0, 11) == "onlinefrns_") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->rawName == btn.substr(11, cch.length() - 11 - 1)) {
											((PlayerInfo*)(peer->data))->lastFrnWorld = ((PlayerInfo*)(currentPeer->data))->currentWorld;
											((PlayerInfo*)(peer->data))->lastFrnName = ((PlayerInfo*)(currentPeer->data))->tankIDName;
											((PlayerInfo*)(peer->data))->lastFrn = ((PlayerInfo*)(currentPeer->data))->rawName;
										}
									}
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastFrnName + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastFrnName + " is `2online `onow in the world `5" + ((PlayerInfo*)(peer->data))->lastFrnWorld + "`o.|\n\nadd_spacer|small|\nadd_button|frnwarpbutton|`oWarp to `5" + ((PlayerInfo*)(peer->data))->lastFrnWorld + "``|0|0|\nadd_button|msgbutton|`5Send message``|0|0|\n\nadd_spacer|small|\nadd_button|removecon|`oRemove as friend``|0|0|\nadd_button|backonlinelist|`oBack``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (btn == "frnwarpbutton") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->isCursed == true)
									{
										GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are cursed now!"));
										ENetPacket* packet0 = enet_packet_create(p0.data,
											p0.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet0);
										delete p0.data;
										continue;
									}
									if (((PlayerInfo*)(peer->data))->lastFrnWorld == "SERVER")
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4 You cannot warp to your friend now! `7Try it later."));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
									else if (((PlayerInfo*)(peer->data))->lastFrnWorld == "EXIT" || ((PlayerInfo*)(peer->data))->lastFrnWorld == "exit")
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4 You cannot warp to your friend because he is in `2EXIT `4world."));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
									else
									{
										sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
										joinWorld(peer, ((PlayerInfo*)(peer->data))->lastFrnWorld, 0, 0);
									}
								}
								if (btn == "msgbutton") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`5Message to `o" + ((PlayerInfo*)(peer->data))->lastFrnName + "|left|660|\nadd_spacer|small|\nadd_text_input|msgtext|||50|\nend_dialog|msgdia|Cancel|`5Send``| \nadd_spacer|big|\nadd_button|backonlinelist|`oBack``|0|0|\nadd_quick_exit|\n"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (btn.substr(0, 12) == "offlinefrns_") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									((PlayerInfo*)(peer->data))->lastFrn = btn.substr(12, cch.length() - 12 - 1);
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastFrn + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastFrn + " is `4offline`o.``|\nadd_spacer|small|\nadd_button|removeconoff|`oRemove as friend``|0|0|\nadd_button|showoffline|`oBack``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (btn == "addfriendrnbutton") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									if (((PlayerInfo*)(peer->data))->haveGrowId == true)
									{
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) { // if last wrench
												if (((PlayerInfo*)(peer->data))->lastfriend == ((PlayerInfo*)(currentPeer->data))->rawName) { // last  h friend
													((PlayerInfo*)(peer->data))->friendinfo.push_back(((PlayerInfo*)(currentPeer->data))->rawName); //add
													((PlayerInfo*)(currentPeer->data))->friendinfo.push_back(((PlayerInfo*)(peer->data))->rawName);
													string text = "action|play_sfx\nfile|audio/love_in.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length());
													memcpy(data + 4 + text.length(), &zero, 1);
													ENetPacket* packet2 = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet2);
													enet_peer_send(peer, 0, packet2);
													delete data;
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ADDED: `oYou're now friends with `w" + ((PlayerInfo*)(peer->data))->rawName + "`o!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet);
													delete p.data;
													GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ADDED: `oYou're now friends with `w" + ((PlayerInfo*)(currentPeer->data))->rawName + "`o!"));
													ENetPacket* packet3 = enet_packet_create(p3.data,
														p3.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet3);
													delete p3.data;
													try {
														std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
														if (ifff.fail()) {
															ifff.close();
														}
														if (ifff.is_open()) {
														}
														json j;
														ifff >> j; //load
														j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo; //edit
														std::ifstream ifff2("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");
														if (ifff2.fail()) {
															ifff2.close();
														}
														if (ifff2.is_open()) {
														}
														json x;
														ifff2 >> x; //load
														x["friends"] = ((PlayerInfo*)(currentPeer->data))->friendinfo; //edit
														std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														o << j << std::endl;
														std::ofstream a("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json"); //save
														if (!a.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														a << x << std::endl;
													}
													catch (std::exception& e)
													{
														std::cerr << e.what() << std::endl;
													}
													catch (const std::out_of_range& e) {
														cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
													}
													catch (...) {
														cout << "reading file violation" << endl;
													}
												}
												else {
													GamePacket p4 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`5[`wFriend request sent to " + ((PlayerInfo*)(currentPeer->data))->tankIDName + "`5]"));
													ENetPacket* packet4 = enet_packet_create(p4.data,
														p4.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet4);
													delete p4.data;
													string text = "action|play_sfx\nfile|audio/tip_start.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length());
													memcpy(data + 4 + text.length(), &zero, 1);
													ENetPacket* packet2 = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet2);
													delete data;
													((PlayerInfo*)(currentPeer->data))->lastfriend = ((PlayerInfo*)(peer->data))->rawName;
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND REQUEST: `oYou've received a `wfriend request `ofrom `w" + ((PlayerInfo*)(peer->data))->rawName + "`o! To accept, click the `wwrench by his/her name `oand then choose `wAdd as friend`o."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet);
													delete p.data;
												}
											}
										}
									}
									else {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`@Create Your `#Grow-ID`@!``|left|1048|\n\nadd_spacer|small|\nadd_text_input|username|GrowID: ||100|\nadd_text_input|password|Password: ||100|\nadd_text_input|code|Code: ||5|\nend_dialog|register||`2Complete!|\n"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										enet_host_flush(server);
										delete p.data;
									}
								}
								if (btn == "g_virus")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `2G-Virus`6!``|left|764|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9This Item Allows you to `@Infect `9Any Player In `^Growtopia `9By giving them `2Zombie `9Effect!|\nadd_spacer|small|\nadd_button|yesg_virus|`7Buy `2G-Virus `7[`430`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "antidote")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `8Antidote`6!``|left|782|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9This Item Allows you to `^Cure `9Any Player In `^Growtopia `9By removing `2Zombie `9Effect!|\nadd_spacer|small|\nadd_button|yesantidote|`7Buy `8Antidote `7[`410`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "hammer")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Super Special items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `bWar hammer``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `bWar hammer `wand get 10-15 gems per block``|left|\nadd_spacer|small|\nadd_button|yeswar|`9Purchase for - `1200.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "rayman")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Super Special items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `5Rayman``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `wRayman and gives you 3 far when breaking blocks!``|left|\nadd_spacer|small|\nadd_button|yesrayman|`9Purchase for - `2150.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "phoenixsword")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Wea`4pons``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `4Phoenix `osword``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `wPhoenix sword and gives you double xp when breaking blocks!``|left|\nadd_spacer|small|\nadd_button|yesphoenix|`9Purchase for - `21.000.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "butler")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`9Mechanical Butler``|left|10128|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `4Mechanical Butler``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `wMechanical Butler Awesome IOTM``|left|\nadd_spacer|small|\nadd_button|yesbutler|`9Purchase for - `2200.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "burnished")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Super Special items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `5Burnished Sword``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `wBurnished Sword and gives you 3 far no cooldown when breaking blocks!``|left|\nadd_spacer|small|\nadd_button|yesburnished|`9Purchase for - `23.000.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "tk69")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Super Special items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `5Tk69 mystical board``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `wTK69 and got 5-13 gems when breaking blocks!``|left|\nadd_spacer|small|\nadd_button|yestk|`9Purchase for - `2350.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "ances")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Super Special items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `6Ancestral``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `6Ancestral `wand get 8-20 gems per blocks + /ssb!``|left|\nadd_spacer|small|\nadd_button|yesaac|`9Purchase for - `2950000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "spd")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Super Special items``|left|1486|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `bDigger Spade``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `bDigger spade `wand 2 hit when breaking block``|left|\nadd_spacer|small|\nadd_button|yesspd|`9Purchase for - `250000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "megaphone")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Megaphone is now available on Locke the Salesman!"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;
								}
								if (btn == "chc0") {
								}
								if (btn == "craftatomic")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									int amber = ((PlayerInfo*)(peer->data))->amber;
									int gold = ((PlayerInfo*)(peer->data))->gold;
									if (amber >= 75 && gold >= 15)
									{
										try {
											std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
											json jj;
											if (iffff.fail()) {
												iffff.close();
												cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko atomic!" << endl;
											}
											if (iffff.is_open()) {
											}
											iffff >> jj; //load
											std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
											if (!oo.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}
											int dabarTuri = jj["amber"];
											dabarTuri -= 75;
											jj["amber"] = dabarTuri;
											int dabarTuris = jj["gold"];
											dabarTuris -= 15;
											jj["gold"] = dabarTuris;
											oo << jj << std::endl;
											//oo.close();
										}
										catch (std::exception& e)
										{
											std::cerr << e.what() << std::endl;
										}
										catch (const std::out_of_range& e) {
											cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
										}
										catch (...) {
											cout << "reading file violation" << endl;
										}
										((PlayerInfo*)(peer->data))->amber = ((PlayerInfo*)(peer->data))->amber - 75;
										((PlayerInfo*)(peer->data))->gold = ((PlayerInfo*)(peer->data))->gold - 15;
										bool success = true;
										SaveShopsItemMoreTimes(3764, 1, peer, success); // aposition, itemid, quantity, peer, success
										if (!success)continue;
										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have crafted `4Atomic Fireball`0!"), "audio/hub_open.wav"), 0));
										ENetPacket* packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete ps2.data;
									}
									else
									{
										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You don't have enought crystals."), "audio/hub_open.wav"), 0));
										ENetPacket* packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete ps2.data;
									}
								}
								if (btn == "craftlavalock")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									UpdateLocalPlayerFragments(peer);
									int firefragment = ((PlayerInfo*)(peer->data))->fFire;
									if (firefragment >= 300)
									{
										bool success = true;
										SaveShopsItemMoreTimes(9308, 1, peer, success);
										RemovePlayerFragmentFire(peer, 300);
										Player::OnTextOverlay(peer, "`9You have bought `4Lava Lock`9!");
									}
									else
									{
										Player::OnTextOverlay(peer, "`4Sorry`9, But you don't have enought `4Fire `9Fragments!");
									}
								}
								if (btn == "craftdirtlock")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									int emerald = ((PlayerInfo*)(peer->data))->emerald;
									if (emerald >= 10)
									{
										try {
											std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
											json jj;
											if (iffff.fail()) {
												iffff.close();
												cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko dirt lock!" << endl;
											}
											if (iffff.is_open()) {
											}
											iffff >> jj; //load
											std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
											if (!oo.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}
											int dabarTuri = jj["emerald"];
											dabarTuri -= 10;
											jj["emerald"] = dabarTuri;
											oo << jj << std::endl;
											//oo.close();
										}
										catch (std::exception& e)
										{
											std::cerr << e.what() << std::endl;
										}
										catch (const std::out_of_range& e) {
											cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
										}
										catch (...) {
											cout << "reading file violation" << endl;
										}
										((PlayerInfo*)(peer->data))->emerald = ((PlayerInfo*)(peer->data))->emerald - 10;
										bool success = true;
										SaveShopsItemMoreTimes(8470, 1, peer, success); // aposition, itemid, quantity, peer, success
										if (!success)continue;
										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have crafted `9The `2Dirt Lock`0!"), "audio/hub_open.wav"), 0));
										ENetPacket* packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete ps2.data;
									}
									else
									{
										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You don't have enought crystals."), "audio/hub_open.wav"), 0));
										ENetPacket* packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete ps2.data;
									}
								}
								if (btn == "craftvoid")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									int gold = ((PlayerInfo*)(peer->data))->gold;
									int sapphire = ((PlayerInfo*)(peer->data))->sapphire;
									if (gold >= 120 && sapphire >= 60)
									{
										try {
											std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
											json jj;
											if (iffff.fail()) {
												iffff.close();
												cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko void hands!" << endl;
											}
											if (iffff.is_open()) {
											}
											iffff >> jj; //load
											std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
											if (!oo.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}
											int dabarTuri = jj["gold"];
											dabarTuri -= 120;
											jj["gold"] = dabarTuri;
											int dabarTuris = jj["sapphire"];
											dabarTuris -= 60;
											jj["sapphire"] = dabarTuris;
											oo << jj << std::endl;
											//oo.close();
										}
										catch (std::exception& e)
										{
											std::cerr << e.what() << std::endl;
										}
										catch (const std::out_of_range& e) {
											cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
										}
										catch (...) {
											cout << "reading file violation" << endl;
										}
										((PlayerInfo*)(peer->data))->gold = ((PlayerInfo*)(peer->data))->gold - 120;
										((PlayerInfo*)(peer->data))->sapphire = ((PlayerInfo*)(peer->data))->sapphire - 60;
										bool success = true;
										SaveShopsItem(8452, 1, peer, success); // aposition, itemid, quantity, peer, success
										if (!success)continue;
										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have crafted `bThe Void Hands`0!"), "audio/hub_open.wav"), 0));
										ENetPacket* packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete ps2.data;
									}
									else
									{
										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You don't have enought crystals."), "audio/hub_open.wav"), 0));
										ENetPacket* packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete ps2.data;
									}
								}
								if (btn == "buydarkstones")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`6Buying `bThe Mystery Block `9Options``||120||\nadd_textbox|`oHow many `bMystery Blocks `odo you want to buy? |\nadd_text_input|darkstoneoffer|||7|\nend_dialog|reqdarkstoneoffer|Cancel|`2Purchase!|\n"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "buywl")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`6Buying `9World Lock `9Options``||242||\nadd_textbox|`oHow many `9World Locks `odo you want to buy? |\nadd_text_input|worldlockoffer|||7|\nend_dialog|reqworldlockoffer|Cancel|`2Purchase!|\n"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "buydl")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`6Buying `1Diamond Lock `9Options``||1796||\nadd_textbox|`oHow many `1Diamond Locks `odo you want to buy? |\nadd_text_input|diamondlockoffer|||7|\nend_dialog|reqdiamondlockoffer|Cancel|`2Purchase!|\n"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "confirmamber")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`6Buying `8Amber `9Options``||3948||\nadd_textbox|`oHow many `8Ambers `odo you want to buy? |\nadd_text_input|ambersoffer|||7|\nend_dialog|reqambersoffer|Cancel|`2Purchase!|\n"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "confirmopal")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`6Buying `1Opal `9Options``||5270||\nadd_textbox|`oHow many `1Opals `odo you want to buy?: |\nadd_text_input|opalsoffer|||7|\nend_dialog|reqopalsoffer|Cancel|`2Purchase!|\n"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "confirmgold")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`6Buying `9Gold `9Options``||3424||\nadd_textbox|`oHow many `9Gold `odo you want to buy?: |\nadd_text_input|goldoffer|||7|\nend_dialog|reqgoldoffer|Cancel|`2Purchase!|\n"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "confirmruby")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`6Buying `4Ruby `9Options``||828||\nadd_textbox|`oHow many `4Rubies `odo you want to buy? |\nadd_text_input|rubiesoffer|||7|\nend_dialog|reqrubiesoffer|Cancel|`2Purchase!|\n"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "confirmsapphire")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`6Buying `bSapphire `9Options``||2812||\nadd_textbox|`oHow many `bSapphires `odo you want to buy?: |\nadd_text_input|sapphiresoffer|||7|\nend_dialog|reqsapphiresoffer|Cancel|`2Purchase!|\n"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "confirmdiamond")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`6Buying `eDiamond `9Options``||262||\nadd_textbox|`oHow many `eDiamonds `odo you want to buy?: |\nadd_text_input|diamondsoffer|||7|\nend_dialog|reqdiamondsoffer|Cancel|`2Purchase!|\n"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "confirmemerald")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`6Buying `2Emerald `9Options``||826||\nadd_textbox|`oHow many `2Emeralds `odo you want to buy?: |\nadd_text_input|emeraldsoffer|||7|\nend_dialog|reqemeraldsoffer|Cancel|`2Purchase!|\n"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "buygeigercounter") //BAISIOS NESAMONES ATSARGIAU!
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1486, 20, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `@Growtoken's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;
										SaveShopsItemMoreTimes(2204, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1486, 20, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`0You have purchased `wGeiger Counter`0!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
								}
								if (btn == "lockebuymega") //PRO ITEM ...
								{
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 10, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2 Growtoken`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = true;
										if (success)
										{
											RemoveInventoryItem(242, 10, peer);
											SaveShopsItemMoreTimes(2480, 1, peer, success);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You Purchased `2Megaphone!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
								}
								if (btn == "lockebuytoken") {
									bool iscontains = false;
									SearchInventoryItem(peer, 1796, 3, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = true;
										if (success)
											RemoveInventoryItem(1796, 3, peer);
										SaveShopsItemMoreTimes(1486, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You Purchased `2Growtoken!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;

									}
								}
								if (btn == "lockebuyeyes") {
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 30, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = true;
										if (success)
											RemoveInventoryItem(242, 30, peer);
										SaveShopsItemMoreTimes(2476, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You Purchased `2Burning Eyes!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;

									}
								}
								if (btn == "crafturanusblast") //BAISIOS NESAMONES ATSARGIAU!
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1486, 10, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `@Growtoken's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;
										SaveShopsItemMoreTimes(8428, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1486, 10, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`0You have purchased `5Uranus Blast`0!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
								}
								if (btn == "craftxpnecklace") //BAISIOS NESAMONES ATSARGIAU!
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1486, 30, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `@Growtoken's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;
										SaveShopsItemMoreTimes(9428, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1486, 30, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`0You have purchased `2XP Necklace`0!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
								}
								if (btn == "craftneptunetrident") //BAISIOS NESAMONES ATSARGIAU!
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1486, 200, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `@Growtoken's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;
										SaveShopsItemMoreTimes(9758, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1486, 200, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`0You have purchased `9The Neptune Trident's`0!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
								}
								if (btn == "craftrgbwings") //BAISIOS NESAMONES ATSARGIAU!
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1486, 9, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `@Growtoken's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;
										SaveShopsItemMoreTimes(9434, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1486, 9, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`0You have purchased `9The `eRGB Wings`0!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
								}
								if (btn == "craftbushwings") //BAISIOS NESAMONES ATSARGIAU!
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1486, 30, iscontains);
									if (!iscontains)
									{
										Player::OnTextOverlay(peer, "`9You `@Don't `9Have enought `@Growtoken's`9!");
									}
									else {
										bool iscontains = false;
										SearchInventoryItem(peer, 2408, 1, iscontains);
										if (!iscontains)
										{
											Player::OnTextOverlay(peer, "`9You `@Don't `9Have `2Emerald Lock`9!");
										}
										else {
											UpdateLocalPlayerFragments(peer);
											int earthfragment = ((PlayerInfo*)(peer->data))->fEarth;
											if (earthfragment >= 300000)
											{
												bool success = false;
												SaveShopsItemMoreTimes(9466, 1, peer, success);
												if (success)
												{
													RemoveInventoryItem(1486, 30, peer);
													RemoveInventoryItem(2408, 1, peer);
													RemovePlayerFragmentEarth(peer, 300000);
													Player::OnTextOverlay(peer, "`0You have purchased `9The `2Bush Wings`0!");
												}
											}
											else
											{
												Player::OnTextOverlay(peer, "`4Sorry`9, But you don't have enought `2Earth `9Fragments!");
											}
										}
									}
								}
								if (btn == "craftwinterwings") //BAISIOS NESAMONES ATSARGIAU!
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 7328, 120, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `1Winter Token's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;
										SaveShopsItemMoreTimes(2264, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(7328, 120, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`0You have purchased `9The `!Aqua `1Crystal Wings`0!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
								}
								if (btn == "craftfenixwings") //BAISIOS NESAMONES ATSARGIAU!
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1486, 90, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `@Growtoken's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;
										SaveShopsItemMoreTimes(5136, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1486, 90, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`0You have purchased `9The `4Fenix Wings`0!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
								}
								if (btn == "purchaseyellowcrystal")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 2244, 15, iscontains);
									if (!iscontains)
									{
										Player::OnTextOverlay(peer, "`9You `@Don't `9Have enought `2Green Crystal's`9!");
									}
									else {
										bool success = false;



										SaveShopsItemMoreTimes(9510, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(2244, 15, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`0You have purchased `9The `9Golden `@Growtoken`0!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}

									}
								}
								if (btn == "purchaselegendaryorb")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 8774, 1, iscontains);
									if (!iscontains)
									{
										Player::OnTextOverlay(peer, "`9You `@Don't `9Have `cSummer Clash Ticket`9!");
									}
									else {
										bool success = false;



										SaveShopsItemMoreTimes(1794, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(8774, 1, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`0You have purchased `9The `8Legendary Orb`0!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}

									}
								}
								if (btn == "purchasegoldenstoretoken")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1486, 100, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `@Growtoken's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(9500, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1486, 100, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`0You have purchased `9The `9Golden `@Growtoken`0!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}

									}
								}
								if (btn == "craftpurplephoenix") //BAISIOS NESAMONES ATSARGIAU!
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1458, 6, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `6Golden Heart Crystal's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(9410, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1458, 6, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`0You have crafted `9The `#Purple `4Phoenix Wings`0!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}

									}
								}
								if (btn == "buyamethyst")
								{
									//cout << "#11" << endl;
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 15, iscontains);
									if (!iscontains)
									{
										bool iscontainss = false;
										SearchInventoryItem(peer, 1796, 1, iscontainss);
										if (!iscontainss)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											bool success = false;

											bool iscontainssss = false;
											SearchInventoryItem(peer, 4762, 1, iscontainssss);
											if (!iscontainssss)
											{

												//RemoveInventoryItem(1796, 1, peer);
												SaveShopsItem(4762, 200, peer, success);
												if (success)
												{
													RemoveInventoryItem(1796, 1, peer);
													SaveShopsItemMoreTimesLoginis(242, 85, peer, success);
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `8200 `#Amethyst `9Blocks!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
												}

											}
											else {
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Your inventory already contains `#Amethyst `9blocks!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}

										}
									}
									else {
										bool success = false;

										bool iscontainssss = false;
										SearchInventoryItem(peer, 4762, 1, iscontainssss);
										if (!iscontainssss)
										{

											SaveShopsItem(4762, 200, peer, success);
											if (success)
											{
												RemoveInventoryItem(242, 15, peer);
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `8200 `#Amethyst `9Blocks!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}

										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Your inventory already contains `#Amethyst `9Blocks!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
									//cout << "#15" << endl;
								}
								if (btn == "buybgl") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1796, 100, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eDiamond Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(7188, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1796, 100, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `!Blue Gem Lock!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buydiggersspade") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1796, 30, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eDiamond Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(2952, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1796, 30, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `9Digger's `oSpade!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buyldrags") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 7188, 3, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eDiamond Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(1782, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(7188, 3, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `9Legendary `oDragon!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buylwings") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 7188, 5, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eBlue Gem Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(1784, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(7188, 5, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `9Legendary `oWings!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buylbots") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 7188, 5, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eBlue Gem Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(1780, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(7188, 5, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `9Legendary `oBot!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buylkatana") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 7188, 10, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eBlue Gem Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(2592, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(7188, 5, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `9Legendary `oKatana!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buyldragwing") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 7188, 6, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eBlue Gem Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(7734, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(7188, 6, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `9Legendary `oDragon!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buydualblades") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1796, 60, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eDiamond Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(9494, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1796, 60, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `1Dual Blades`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buysapphireknife") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1796, 10, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eDiamond Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(9486, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1796, 10, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `eSapphire Knife`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buydamnedknife") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1796, 3, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eDiamond Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(9484, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1796, 3, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `8Damned Knife`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buymysterybox") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 30, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(4174, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(242, 30, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `8Mystery Box`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buylegendwizard")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1796, 150, iscontains);
									if (!iscontains)
									{
										Player::OnTextOverlay(peer, "`9You `@Don't `9Have enought `eDiamond Locks`9!");
									}
									else {
										bool success = false;
										SaveShopsItemMoreTimes(1790, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1796, 150, peer);
											Player::OnTextOverlay(peer, "`9You have bought `#Legendary Wizard`9!");
										}
									}
								}
								if (btn == "buyantigravity") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 30, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(4992, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(242, 30, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `2Anti Gravity`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buywgm") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1796, 30, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eDiamond Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(6946, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1796, 30, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `5Building Machine`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buymagicmachine") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1796, 15, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eDiamond Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(9170, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1796, 15, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `9Magic Machine!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buyatm")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 20, iscontains);
									if (!iscontains)
									{
										bool iscontainss = false;
										SearchInventoryItem(peer, 1796, 1, iscontainss);
										if (!iscontainss)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											bool success = false;

											SaveShopsItemMoreTimes(1008, 1, peer, success);
											if (success)
											{

												RemoveInventoryItem(1796, 1, peer);
												SaveShopsItemMoreTimes(242, 80, peer, success);
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `eATM Machine`9!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}


										}
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(1008, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(242, 20, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `eATM Machine!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}

									}
								}

								if (btn == "buygbc") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 1, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;
										SaveShopsItemMoreTimes(3402, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(242, 1, peer);
										}
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `9Golden Booty Chest!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
								if (btn == "buymagplant") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1796, 20, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eDiamond Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(5638, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1796, 20, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `9magplant`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buygemstorage") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1796, 25, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eDiamond Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(6950, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1796, 25, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `#Gem Storage`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buyLocke") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 10, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;

										SaveShopsItemMoreTimes(2478, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(242, 10, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `eLocke `9Chest!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}

									}

								}
								if (btn == "buyunicorn") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1796, 9, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eDiamond Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(1636, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1796, 9, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `#Unicorn!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}

									}
								}

								if (btn == "buybanwand")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") { continue; }
									bool iscontains = false;
									SearchInventoryItem(peer, 1796, 200, iscontains);
									if (!iscontains)
									{
										Player::OnTextOverlay(peer, "`9You `@Don't `9Have enought `eDiamond Locks`9!");
									}
									else {
										bool success = false;
										SaveShopsItemMoreTimes(732, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1796, 200, peer);
											Player::OnTextOverlay(peer, "`9You have bought `4Ban Wand`9!");
										}
									}
								}

								if (btn == "buycursewand")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") { continue; }
									bool iscontains = false;
									SearchInventoryItem(peer, 1796, 120, iscontains);
									if (!iscontains)
									{
										Player::OnTextOverlay(peer, "`9You `@Don't `9Have enought `eDiamond Locks`9!");
									}
									else {
										bool success = false;
										SaveShopsItemMoreTimes(278, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1796, 120, peer);
											Player::OnTextOverlay(peer, "`9You have bought `bCurse Wand`9!");
										}
									}
								}

								if (btn == "buyfirewand")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") { continue; }
									bool iscontains = false;
									SearchInventoryItem(peer, 1796, 15, iscontains);
									if (!iscontains)
									{
										Player::OnTextOverlay(peer, "`9You `@Don't `9Have enought `eDiamond Locks`9!");
									}
									else {
										bool success = false;
										SaveShopsItemMoreTimes(276, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1796, 15, peer);
											Player::OnTextOverlay(peer, "`9You have bought `@Fire Wand`9!");
										}
									}
								}

								if (btn == "buyfreezewand")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") { continue; }
									bool iscontains = false;
									SearchInventoryItem(peer, 1796, 3, iscontains);
									if (!iscontains)
									{
										Player::OnTextOverlay(peer, "`9You `@Don't `9Have enought `eDiamond Locks`9!");
									}
									else {
										bool success = false;
										SaveShopsItemMoreTimes(274, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(1796, 3, peer);
											Player::OnTextOverlay(peer, "`9You have bought `!Freeze Wand`9!");
										}
									}
								}

								if (btn == "buypinkdiamond")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 1796, 2, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eDiamond Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimesLoginis(3146, 200, peer, success);
										if (success)
										{
											RemoveInventoryItem(1796, 2, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `8200 `#Rainbow Crystal Block`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}

									}
								}
								if (btn == "buydiamondstone") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 90, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimesLoginis(3606, 200, peer, success);
										if (success)
										{
											RemoveInventoryItem(242, 90, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `8200 `1Diamond `9Stones!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}

									}
								}

								if (btn == "buysmaraged") //PRO ITEM ...
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 50, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimesLoginis(3948, 200, peer, success);
										if (success)
										{
											RemoveInventoryItem(242, 50, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `8200 `2Amber `9Blocks!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}

									}
								}

								if (btn == "buyonyx") //BAISIOS NESAMONES ATSARGIAU!
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 30, iscontains);
									if (!iscontains)
									{
										bool iscontainss = false;
										SearchInventoryItem(peer, 1796, 1, iscontainss);
										if (!iscontainss)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											bool success = false;

											bool iscontainssss = false;
											SearchInventoryItem(peer, 7382, 1, iscontainssss);
											if (!iscontainssss)
											{

												SaveShopsItem(7382, 200, peer, success);
												if (success)
												{
													RemoveInventoryItem(1796, 1, peer);
													SaveShopsItemMoreTimesLoginis(242, 70, peer, success);
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `8200 `bOnyx `9Blocks!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
												}

											}
											else {
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Your inventory already contains `bOnyx `9blocks!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}

										}
									}
									else {
										bool success = false;

										bool iscontainssss = false;
										SearchInventoryItem(peer, 7382, 1, iscontainssss);
										if (!iscontainssss)
										{

											SaveShopsItem(7382, 200, peer, success);
											if (success)
											{
												RemoveInventoryItem(242, 30, peer);
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `8200 `bOnyx `9Blocks!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}

										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Your inventory already contains `bOnyx `9blocks!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}

									}
								}
								if (btn == "buybronzechest") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 30, iscontains);
									if (!iscontains)
									{
										bool iscontainss = false;
										SearchInventoryItem(peer, 1796, 1, iscontainss);
										if (!iscontainss)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											bool success = false;


											SaveShopsItemMoreTimes(6204, 1, peer, success);
											if (success)
											{
												RemoveInventoryItem(1796, 1, peer);
												SaveShopsItemMoreTimes(242, 70, peer, success);
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `8Bronze `oChest`9!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}


										}
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(6204, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(242, 30, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `8Bronze `oChest`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}

									}

								}
								if (btn == "buyinvupgrade") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 30, iscontains);
									if (!iscontains)
									{
										bool iscontainss = false;
										SearchInventoryItem(peer, 1796, 1, iscontainss);
										if (!iscontainss)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											bool success = true;
											short nextSpace = 0;
											if (((PlayerInfo*)(peer->data))->currentInventorySize + 30 > 200)
											{
												nextSpace = 200;
											}
											else
											{
												nextSpace = ((PlayerInfo*)(peer->data))->currentInventorySize + 30;
											}
											ofstream fs("usersinventorysize/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											fs << nextSpace;
											fs.close();
											if (success)
											{
												RemoveInventoryItem(1796, 1, peer);
												SaveShopsItemMoreTimes(242, 70, peer, success);
												GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`2Successfully upgraded your inventory to `8" + to_string(nextSpace) + " `2spaces."), "audio/hub_open.wav"), 0));
												ENetPacket* packet2 = enet_packet_create(ps2.data,
													ps2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete ps2.data;
												enet_peer_disconnect_later(peer, 0);
											}
										}
									}
									else {
										bool success = true;
										short nextSpace = 0;
										if (((PlayerInfo*)(peer->data))->currentInventorySize + 30 > 200)
										{
											nextSpace = 200;
										}
										else
										{
											nextSpace = ((PlayerInfo*)(peer->data))->currentInventorySize + 30;
										}
										ofstream fs("usersinventorysize/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										fs << nextSpace;
										fs.close();
										if (success)
										{
											RemoveInventoryItem(242, 30, peer);
											GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`2Successfully upgraded your inventory to `8" + to_string(nextSpace) + " `2spaces."), "audio/hub_open.wav"), 0));
											ENetPacket* packet2 = enet_packet_create(ps2.data,
												ps2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete ps2.data;
											enet_peer_disconnect_later(peer, 0);
										}
									}
								}
								if (btn == "buysilverchest") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 50, iscontains);
									if (!iscontains)
									{
										bool iscontainss = false;
										SearchInventoryItem(peer, 1796, 1, iscontainss);
										if (!iscontainss)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											bool success = false;

											SaveShopsItemMoreTimes(6202, 1, peer, success);
											if (success)
											{
												RemoveInventoryItem(1796, 1, peer);
												SaveShopsItemMoreTimes(242, 50, peer, success);
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `sSilver `oChest`9!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}

										}

									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(6202, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(242, 50, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `sSilver `oChest`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buygoldchest") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 70, iscontains);
									if (!iscontains)
									{
										bool iscontainss = false;
										SearchInventoryItem(peer, 1796, 1, iscontainss);
										if (!iscontainss)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											bool success = false;


											SaveShopsItemMoreTimes(6200, 1, peer, success);
											if (success)
											{
												RemoveInventoryItem(1796, 1, peer);
												SaveShopsItemMoreTimes(242, 30, peer, success);
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `9Gold `oChest`9!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}


										}
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(6200, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(242, 70, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `9Gold `oChest`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buywinterchest") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 90, iscontains);
									if (!iscontains)
									{
										bool iscontainss = false;
										SearchInventoryItem(peer, 1796, 1, iscontainss);
										if (!iscontainss)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											bool success = false;


											SaveShopsItemMoreTimes(7484, 1, peer, success);
											if (success)
											{
												RemoveInventoryItem(1796, 1, peer);
												SaveShopsItemMoreTimes(242, 10, peer, success);
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `qWinter `oChest`9!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}


										}
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(7484, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(242, 90, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `qWinter `oChest`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buyspringchest") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 95, iscontains);
									if (!iscontains)
									{
										bool iscontainss = false;
										SearchInventoryItem(peer, 1796, 1, iscontainss);
										if (!iscontainss)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											bool success = false;

											SaveShopsItemMoreTimes(7954, 1, peer, success);
											if (success)
											{

												RemoveInventoryItem(1796, 1, peer);
												SaveShopsItemMoreTimes(242, 5, peer, success);
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `2Spring `oChest`9!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}


										}
									}
									else {
										bool success = false;

										SaveShopsItemMoreTimes(7954, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(242, 95, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `2Spring `oChest`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buyringofforce")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 60, iscontains);
									if (!iscontains)
									{
										bool iscontainss = false;
										SearchInventoryItem(peer, 1796, 1, iscontainss);
										if (!iscontainss)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											bool success = false;

											SaveShopsItemMoreTimes(1874, 1, peer, success);
											if (success)
											{
												RemoveInventoryItem(1796, 1, peer);
												SaveShopsItemMoreTimes(242, 40, peer, success);
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `4Ring `#Of `8Force`9!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}


										}
									}
									else {
										bool success = true;
										if (success)
										{

											SaveShopsItemMoreTimes(1874, 1, peer, success);
											if (success)
											{
												RemoveInventoryItem(242, 60, peer);
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `4Ring `#Of `8Force`9!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}

										}
									}
								}
								if (btn == "buyringofwinds")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 90, iscontains);
									if (!iscontains)
									{
										bool iscontainss = false;
										SearchInventoryItem(peer, 1796, 1, iscontainss);
										if (!iscontainss)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											bool success = false;

											SaveShopsItemMoreTimes(1876, 1, peer, success);
											if (success)
											{
												RemoveInventoryItem(1796, 1, peer);
												SaveShopsItemMoreTimes(242, 10, peer, success);
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `4Ring `#Of `!Winds`9!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}

										}

									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(1876, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(242, 90, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `4Ring `#Of `!Winds`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buyringofwater")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 30, iscontains);
									if (!iscontains)
									{
										bool iscontainss = false;
										SearchInventoryItem(peer, 1796, 1, iscontainss);
										if (!iscontainss)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											bool success = false;


											SaveShopsItemMoreTimes(2970, 1, peer, success);
											if (success)
											{
												RemoveInventoryItem(1796, 1, peer);
												SaveShopsItemMoreTimes(242, 70, peer, success);
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `4Ring `#Of `eWater`9!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}


										}
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(2970, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(242, 30, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `4Ring `#Of `eWater`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "buyringofgemini")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 90, iscontains);
									if (!iscontains)
									{
										bool iscontainss = false;
										SearchInventoryItem(peer, 1796, 1, iscontainss);
										if (!iscontainss)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											bool success = false;

											SaveShopsItemMoreTimes(1986, 1, peer, success);
											if (success)
											{
												RemoveInventoryItem(1796, 1, peer);
												SaveShopsItemMoreTimes(242, 10, peer, success);
											}
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `4Ring `#Of `2Gemini`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;

										}
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(1986, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(242, 90, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `4Ring `#Of `2Gemini`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}
								}
								if (btn == "diamondlock")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `1Diamond `^Locks``|left|1796|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`1Diamond `^Lock `0Allows you to lock any free world! `4WARNING! `1Diamond `^Lock `oCosts `2100000 Gems!|\nadd_spacer|small|\nadd_button|buydl|`9Buy `1Diamond `^Lock!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "ringofshrinking")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Coming Soon!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "theonering")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Coming Soon!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "ringofnight")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Coming Soon!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "ringofsmithing")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Coming Soon!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "ringofnature")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Coming Soon!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "ringofsavings")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Coming Soon!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "ringofwisdom")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Coming Soon!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "ringoffistful")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Coming Soon!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "ringofgemini")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `4Ring `#Of `2Gemini``|left|1986|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`4Ring `#Of `2Gemini `^Gives a clone effect for your player`^!|\nadd_spacer|small|\nadd_button|buyringofgemini|`9Purchase `7[`490`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "ringofwater")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `4Ring `#Of `eWater``|left|2970|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`4Ring `#Of `eWater `^Allows you to move faster in water`^!|\nadd_spacer|small|\nadd_button|buyringofwater|`9Purchase `7[`430`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "ringofwinds")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `4Ring `#Of `!Winds``|left|1876|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`4Ring `#Of `!Winds `^Gives you exclusive floating effects and allows you to move faster`^!|\nadd_spacer|small|\nadd_button|buyringofwinds|`9Purchase `7[`490`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "ringofforce")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `4Ring `#Of `8Force``|left|1874|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`4Ring `#Of `8Force `^Gives you exclusive breaking effects`^!|\nadd_spacer|small|\nadd_button|buyringofforce|`9Purchase `7[`460`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "amethyst")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `#Amethyst `^Blocks``|left|4762|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`#Amethyst `^Blocks `1Gives you over `450-100 `2Gems `1Per block`^!|\nadd_spacer|small|\nadd_button|buyamethyst|`7Buy `9200 `7Blocks [`415`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "atm")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `eATM `3Machine``|left|1008|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`3ATM Machines `1Can give you over `45-10 `2Gems `1Per PUNCH`^! `#This item is permanent`^!|\nadd_spacer|small|\nadd_button|buyatm|`7Buy `eATM Machine `7[`420`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "unicorn")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `#Unicorn``|left|1636|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`#Unicorns `1Can give you over `40-3 `9Crystals `1Per PUNCH`^! `#This item is permanent`^!|\nadd_spacer|small|\nadd_button|buyunicorn|`7Buy `#Unicorn `7[`49`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "gbc")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `9Golden Booty Chest``|left|3402|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`^Only `9Obtainable `^During `#Valentine`^, Gives `4Great `9Loot`^!|\nadd_spacer|small|\nadd_button|buygbc|`7Buy `9GBC `7[`41`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (btn == "gemstorage1") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `#Gem Storage``|left|6950|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`^Really usefull block! Allows you to `9Store Gems`^! Theres `@No Limits`^ For it!|\nadd_spacer|small|\nadd_button|buygemstorage|`7Buy `#Gem Storage `7[`425`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (btn == "magplant") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `9magplant``|left|5638|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`^One of the `9Endgame `^Items! Take a look at that golden `9Thing!`^ Pretty expensive but worth that, collects `9Gems `^and stores them!|\nadd_spacer|small|\nadd_button|buymagplant|`7Buy `9magplant `7[`420`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (btn == "Lockebox")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `eLocke Chest``|left|2478|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`^Only `9Obtainable `^During `#February, March, April, May`^, Gives `4Great `9Loot`^! `9Small Chance To Obtain `4Rare `9Items `w[`eLocke Wings`9, `eLocke Sword`w]|\nadd_spacer|small|\nadd_button|buyLocke|`7Buy `9Locke Chest `7[`410`e WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "magicmchn")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `9Magic Machine``|left|9170|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Really heavy and powerfull machine! `9Who knows what it does?... But the creators are sure that it will lead to profit!|\nadd_spacer|small|\nadd_button|buymagicmachine|`7Buy `9Magic Machine `7[`415`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (btn == "wgm")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `5Building Machine``|left|6946|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Generate Any World You Wish! `9This `^Machine `9Allows you to `@Create `9Any `^World `9You want! You can choose the `^Height, Width, Blocks `9And much more!|\nadd_spacer|small|\nadd_button|buywgm|`7Buy `5WGM `7[`430`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (btn == "diggerspade")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `9Digger's `oSpade``|left|2952|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9This Item allows you to break any `^Blocks `41 HIT`9, Can be `^Used `9To `2Upgrade `9Digger's `oSpades!|\nadd_spacer|small|\nadd_button|buydiggersspade|`7Buy `9Digger's `oSpade `7[`430`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (btn == "ldrags")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `9Legendary `oDragon``|left|2952|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Fkin cool drags|\nadd_spacer|small|\nadd_button|buyldrags|`7Buy `9Legendary `oDragon `7[`43`e BGLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (btn == "lwings")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `9Legendary `oWings``|left|2952|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Fkin cool wings|\nadd_spacer|small|\nadd_button|buylwings|`7Buy `9Legendary `oWings `7[`45`e BGLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (btn == "lbots")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `9Legendary `oBot``|left|2952|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Fkin cool bot|\nadd_spacer|small|\nadd_button|buylbots|`7Buy `9Legendary `oBot `7[`45`e BGLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (btn == "ldragwings")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `9Legendary `oBot``|left|2952|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Fkin cool wings|\nadd_spacer|small|\nadd_button|buyldragwing|`7Buy `9Legendary `oDragon Wings `7[`46`e BGLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (btn == "lkatana")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `9Legendary `oKatana``|left|2952|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Fkin cool sword|\nadd_spacer|small|\nadd_button|buylkatana|`7Buy `9Legendary `oKatana `7[`410`e BGLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (btn == "bgllock")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `!Blue Gem Lock``|left|7188|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9This Item is like world lock, allows you to lock any world, you can convert this item back to `@100 `1Diamond Locks `9At any time!|\nadd_spacer|small|\nadd_button|buybgl|`7Buy `!BGL `7[`4100`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (btn == "lavalock")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `4Lava Lock`6!``|left|9308|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9This Item is like `5World Lock`9, allows you to `cLock `9Any world, it comes with cool `cAnimations`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `@300 `4Fire `9Fragment's`o!|left|1458|\nadd_spacer|small|\nadd_button|craftlavalock|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "darkstone")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `bThe Dark Stones``|left|120|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`bDark Dark Dark! `^Gives you `9Random Item `^From the whole server!|\nadd_spacer|small|\nadd_button|buydarkstones|`7Buy `9The Mystery `oBlock `7[`4300000`2 Gems`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (btn == "smaraged")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `2Amber `^Blocks``|left|3948|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`2Amber `^Blocks `1Gives you over `4700-800 `2Gems `1Per block`^! And a chance to obtain `2Emerald Shard`^!|\nadd_spacer|small|\nadd_button|buysmaraged|`7Buy `9200 `7Blocks [`450`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "diamondstone")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `1Topaz `^Block``|left|3606|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`1Topaz `^Block `1Gives you over `41200-1400 `2Gems `1Per stone`^! And a lot of `!XP`^!|\nadd_spacer|small|\nadd_button|buydiamondstone|`7Buy `9200 `7Stones [`490`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "pinkdiamond")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `#Rainbow Crystal Block``|left|3146|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`#Rainbow Crystal Block `1Gives you over `42600-3000 `2Gems `1Per block`^! And a chance to obtain `4Ruby Shard`^!|\nadd_spacer|small|\nadd_button|buypinkdiamond|`7Buy `9200 `#Diamonds `7[`42`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "onyx")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `bOnyx `^Blocks``|left|7382|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`bOnyx `^Blocks `1Gives you over `4150-200 `2Gems `1Per block`^! And a chance to obtain `#Fragment Crystal `^!|\nadd_spacer|small|\nadd_button|buyonyx|`7Buy `9200 `7Blocks [`430`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "worldlock")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `2World `^Locks``|left|242|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`2World `^Lock `0Allows you to lock any free world! `4WARNING! `2World `^Lock `oCosts `21000 Gems!|\nadd_spacer|small|\nadd_button|buywl|`9Buy `2World `^Lock!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "voidhands")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									int gold = ((PlayerInfo*)(peer->data))->gold;
									int sapphire = ((PlayerInfo*)(peer->data))->sapphire;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Craft `bVoid Hands`6!``|left|8452|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oYou have: `1" + to_string(gold) + " `9Gold's`0!|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oYou have: `1" + to_string(sapphire) + " `bSapphire's`0!|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oA hands made by the `bVoid`o! `oHas exclusive `9Effects `o `2Allows `oTo break `bBedrocks `o& `wMain Doors`o! This `3Item `oIs `2PERMANENT `oAnd `4Untradeable!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo craft this item you need `9120 `9Gold's`o!|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo craft this item you need `960 `bSapphire's`o!|left|8|\nadd_spacer|small|\nadd_button|craftvoid|`9Craft Item!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "darklock")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Craft `bDark Lock`6!``|left|9290|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9The `bDark Lock `9Amazing `2Lock `9With Cool `^Effects`9! `9But not `^Everyone `9Can get it, probably the `^Rarest Lock`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo craft this item you need `9100 `aBedrock's`o!|left|8|\nadd_spacer|small|\nadd_button|craftdarklock|`9Craft Item!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "dirtlock")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									int emerald = ((PlayerInfo*)(peer->data))->emerald;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Craft `2Dirt Lock`6!``|left|8470|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oYou have: `1" + to_string(emerald) + " `2Emerald's`0!|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9First ever in the game custom Lock! The `2Dirt Lock! `9Amazing looking + Special floating effects!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo craft this item you need `910 `2Emerald's`o!|left|8|\nadd_spacer|small|\nadd_button|craftdirtlock|`9Craft Item!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "fenixwings")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Purchase `@Fenix Wings`6!``|left|5136|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Damn! `^Those wings are made from pure `4Fire `^Gives `@Red Skin Colour `^And `@Movement Effects`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `490 `@Growtoken's`o!|left|1458|\nadd_spacer|small|\nadd_button|craftfenixwings|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "aquacrysalwings")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Purchase `!Aqua `1Crystal Wings`6!``|left|2264|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Freeze! `^Pretty well `9Designed `^Wings, gives you `9Double Jump `^And `@Movement Effects`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `4120 `1Winter Token's`o!|left|1458|\nadd_spacer|small|\nadd_button|craftwinterwings|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "mysterybox")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `4Death `9Mystery `2Box`6!``|left|4174|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9This Block Will give you random number of `^Gems `9Starting from `21k `9And up to `2300k`9 Or maybe even something more `1Rare`9?|\nadd_spacer|small|\nadd_button|buymysterybox|`7Buy `8Mystery Box `7[`430`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "antigravity")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `2Anti Gravity`6!``|left|4992|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9This Block Will allow you to `^Unlimited Jump `9In your own world`9!|\nadd_spacer|small|\nadd_button|buyantigravity|`7Buy `2Anti Gravity `7[`430`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "legendwizard")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `#Legendary Wizard`6!``|left|1790|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9This Block Will allow you to complete `^Quests `9For `5Very Rare `9Items`9!|\nadd_spacer|small|\nadd_button|buylegendwizard|`7Buy `#Legendary Wizard `7[`4150`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "bushwings")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `2Bush Wings`6!``|left|9466|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Earth! `^Those wings are pure made by the `9Earth `^Gives `8TRIPLE `1XP `@BUFF`^, `2Green Skin Colour `^And `2Movement Effects`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `430 `@Growtoken's`o, `2Emerald Lock`o, `@300k `2Earth `9Fragment's`o!|left|1458|\nadd_spacer|small|\nadd_button|craftbushwings|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "banwand")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `4Ban Wand`6!``|left|732|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`@Wand! `^This `9Wand `^Allows you to `4Ban `^Anyone from the `9Game`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `@200 `1Diamond Locks`o!|left|1458|\nadd_spacer|small|\nadd_button|buybanwand|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "cursewand")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `bCurse Wand`6!``|left|278|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`@Wand! `^This `9Wand `^Allows you to `bCurse `^Anyone`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `@120 `1Diamond Locks`o!|left|1458|\nadd_spacer|small|\nadd_button|buycursewand|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "firewand")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `@Fire Wand`6!``|left|276|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`@Wand! `^This `9Wand `^Allows you to `@Kill `^Anyone in `9World`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `@15 `1Diamond Locks`o!|left|1458|\nadd_spacer|small|\nadd_button|buyfirewand|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "freezewand")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `!Freeze Wand`6!``|left|274|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`@Wand! `^This `9Wand `^Allows you to `!Freeze `^Anyone in the `9World`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `@3 `1Diamond Locks`o!|left|1458|\nadd_spacer|small|\nadd_button|buyfreezewand|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "uranusblast")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `5Uranus Blast`6!``|left|8428|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Adventures! `^Theres a lot of to `9Explore `^Behind this item, `9Purchase `^One to create an `9Amazing `5Uranus `^World`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `410 `@Growtoken's`o!|left|1458|\nadd_spacer|small|\nadd_button|crafturanusblast|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "geigercounter")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `wGeiger Counter`6!``|left|2204|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`^This `9Item `^Lets you search for `@Stuff `^In any world, There is no `9Cooldown`^!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `420 `@Growtoken's`o!|left|1458|\nadd_spacer|small|\nadd_button|buygeigercounter|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "rgbwings")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `eRGB Wings`6!``|left|9434|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Rainbow! `^Nothing much to expect from this item, but it is `9Rainbow `^And has `@Movement Effects`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `49 `@Growtoken's`o!|left|1458|\nadd_spacer|small|\nadd_button|craftrgbwings|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "ntrident")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `9Neptune Trident`6!``|left|9758|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Golden! `^This Digger's Spade Is pretty same to the `9Normal `^One, but there is one `9Big Difference `^It can break `@2x2`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `4120 `@Growtoken's`o!|left|1458|\nadd_spacer|small|\nadd_button|craftneptunetrident|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "xpnecklace")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Purchase `2XP Necklace`6!``|left|9428|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Buffs! `^This awesome `2Emerald `^Covered `9Necklace `^Will give you `2Double XP `^For all `9Blocks`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo purchase this item you need `430 `@Growtoken's`o!|left|1458|\nadd_spacer|small|\nadd_button|craftxpnecklace|`9Purchase!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "storetokensss")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Purchase `@Growtokens`6!``|left|1486|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Tokens! `^Those `9Tokens `^Are second currency just like `9Gems `^And are obtainable by spending `625 `^Real `2WLS `^But also can be `9Obtained `^For being `9online `^Every `^3 `9Hours!|\nadd_spacer|small|\nadd_spacer|small|\nadd_button|cch101001|`9Close|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "goldentoken")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `9Golden `@Growtokens`6!``|left|9500|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Tokens! `^Those `9Tokens `^Are obtainable by `9Buying `^Them For `@100 `2Regular `@Growtokens `^And can be used as second currency just like `9Gems`^!|\nadd_spacer|small|\nadd_button|purchasegoldenstoretoken|`7Buy `9GStoken `7[`4100`@ STokens`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");

								}
								if (btn == "purplephoenix")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Craft `#Purple `4Phoenix Wings`6!``|left|9410|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Woah! Take A Look At Those `8Bright `#Purple `4Phoenix Wings `9Hurry! `^Theres Only `63 `9Of Them `^In The `2Game`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo craft this item you need `46 `6Golden Heart Crystals's`o!|left|1458|\nadd_spacer|small|\nadd_button|craftpurplephoenix|`9Craft Item!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "atomic")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									int amber = ((PlayerInfo*)(peer->data))->amber;
									int gold = ((PlayerInfo*)(peer->data))->gold;
									int diamond = ((PlayerInfo*)(peer->data))->diamond;
									int emerald = ((PlayerInfo*)(peer->data))->emerald;
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Craft `4Atomic Fireball`6!``|left|3764|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oYou have: `1" + to_string(amber) + " `8Amber's`0!|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oYou have: `1" + to_string(gold) + " `9Gold's`0!|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAtomic Fireball allows you to break whole world within seconds! `4Warning! `oBy crafting this item you will get 1 piece!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo craft this item you need `975 `8Amber's`o!|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo craft this item you need `915 `9Gold's`o!|left|8|\nadd_spacer|small|\nadd_button|craftatomic|`9Craft Item!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "resources")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									int gemu = 0;
									ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									gemdb >> gemu;
									gemdb.close();
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `9Crystals`6!``|left|1792|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oHere you can purchase `1crystals`o! Everything here costs `9gem's`o! If you searching for something `2free `othis place is not for you!|\nadd_spacer|small|\nadd_button|buyruby|`@Buy `4Ruby's `@[`21/1K`@]|\nadd_spacer|small|\nadd_button|buyamber|`@Buy `8Amber's `@[`21/3K`@]|\nadd_spacer|small|\nadd_button|buyopal|`@Buy `1Opal's `@[`21/10K`@]|\nadd_spacer|small|\nadd_button|buygold|`@Buy `9Gold's `@[`21/20K`@]|\nadd_spacer|small|\nadd_button|buysapphire|`@Buy `bSapphires's `@[`21/30K`@]|\nadd_spacer|small|\nadd_button|buydiamond|`@Buy `3Diamond's `@[`21/100K`@]|\nadd_spacer|small|\nadd_button|buyemerald|`@Buy `2Emerald's `@[`21/300K`@]|\nadd_spacer|small|\nadd_button|store|`#Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "buyruby")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									int gemu = 0;
									ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									gemdb >> gemu;
									gemdb.close();
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `4Ruby's`6!``|left|828|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase `4Rubies? `oOne `4Ruby `ocosts `21000 Gems`o!|\nadd_spacer|small|\nadd_button|confirmruby|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "buyamber")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									int gemu = 0;
									ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									gemdb >> gemu;
									gemdb.close();
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `8Amber's`6!``|left|3948|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase `8Ambers? `oOne `8Amber `ocosts `23000 Gems`o!|\nadd_spacer|small|\nadd_button|confirmamber|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "buyopal")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									int gemu = 0;
									ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									gemdb >> gemu;
									gemdb.close();
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `1Opal's`6!``|left|5270|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase `1Opals? `oOne `1Opal `ocosts `210000 Gems`o!|\nadd_spacer|small|\nadd_button|confirmopal|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "buygold")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									int gemu = 0;
									ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									gemdb >> gemu;
									gemdb.close();
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `9Gold's`6!``|left|3424|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase `9Gold? `oOne `9Gold `ocosts `220000 Gems`o!|\nadd_spacer|small|\nadd_button|confirmgold|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "buysapphire")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									int gemu = 0;
									ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									gemdb >> gemu;
									gemdb.close();
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `bSapphire's`6!``|left|2812|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase `bSapphires? `oOne `bSapphire `ocosts `230000 Gems`o!|\nadd_spacer|small|\nadd_button|confirmsapphire|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "buydiamond")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									int gemu = 0;
									ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									gemdb >> gemu;
									gemdb.close();
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `3Diamond's`6!``|left|262|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase `3Diamonds? `oOne `3Diamond `ocosts `2100000 Gems`o!|\nadd_spacer|small|\nadd_button|confirmdiamond|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "buyemerald")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									int gemu = 0;
									ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									gemdb >> gemu;
									gemdb.close();
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `2Emerald's`6!``|left|826|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase `2Emeralds? `oOne `2Emerald `ocosts `2300000 Gems`o!|\nadd_spacer|small|\nadd_button|confirmemerald|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "tokenstore")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wWelcome To `@Token `4Store`w!|left|5016|\nadd_button_with_icon|storetokensss||staticBlueFrame|1486|\nadd_button_with_icon|xpnecklace||staticBlueFrame|9428|\nadd_button_with_icon|ntrident||staticBlueFrame|9758|\nadd_button_with_icon|rgbwings||staticBlueFrame|9434|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_button_with_icon|bushwings||staticBlueFrame|9466|\nadd_button_with_icon|geigercounter||staticBlueFrame|2204|\nadd_quick_exit|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "winterstore")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label|big|`wWelcome To `1Winter `4Store`w!|left|5016|\nadd_button_with_icon|aquacrysalwings||staticBlueFrame|2264|\nadd_quick_exit|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "armorystore")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label|big|`wWelcome To `@Armory `4Store`w!|left|8950|\nadd_label_with_icon|small|`1Common Knifes``|left|9294|\nadd_button_with_icon|damnedknifeinfo||staticBlueFrame|9484|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_label_with_icon|small|`2Rare Knifes``|left|9294|0|0|\nadd_button_with_icon|sapphireknifeinfo||staticBlueFrame|9486|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_label_with_icon|small|`#Epic Knifes``|left|9294|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_label_with_icon|small|`8Legendary Knifes``|left|9294|\nadd_button_with_icon|dualbladesinfo||staticBlueFrame|9494|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_label_with_icon|small|`4Mythic Knifes``|left|9294|\nadd_quick_exit|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "defaultstore")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label|big|`wWelcome To `6GrowLand `0market!|left|5016|\n\nadd_spacer|small|small|\nadd_button|no|`wPurchase `eItems|noflags|3233|small|left|212|\nadd_button|litem|`wPurchase `9Legendary|noflags|1794||small|\nadd_button|iotmstore|`wPurchase `9IOTM`o|noflags|1232|\nadd_button|ringstore|`wPurchase `4Rings|noflags|1232|small|\nadd_button|chests|`wPurchase `oChests|noflags|1232|small|\nadd_button|blocks|`wPurchase `@Blocks|noflags|3233|small|\nadd_button|resources|`wPurchase `9Crystals|noflags|3233|\nadd_button|consumables|`wPurchase `#Consumables|noflags|3233|\nadd_button|storeinvupgrade|`wPurchase `4Inventory Upgrade|noflags|3233|\nadd_spacer|\nadd_button|close|`2Close|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "craft")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`8Legendary Craftable `cItems``|left|1790|\nadd_button_with_icon|atomic||staticBlueFrame|3764|\nadd_button_with_icon|voidhands||staticBlueFrame|8452|\nadd_button_with_icon|purplephoenix||staticBlueFrame|9410|\nadd_quick_exit|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "ringstore")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`#Welcome To `4Ring's `2Store`w!``|left|1900|\nadd_button_with_icon|ringofforce||staticBlueFrame|1874|\nadd_button_with_icon|ringofwinds||staticBlueFrame|1876|\nadd_button_with_icon|ringofwater||staticBlueFrame|2970|\nadd_button_with_icon|ringofgemini||staticBlueFrame|1986|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_button_with_icon|ringoffistful||staticBlueFrame|1932|\nadd_button_with_icon|ringofwisdom||staticBlueFrame|1996|\nadd_button_with_icon|ringofsavings||staticBlueFrame|3140|\nadd_button_with_icon|ringofnature||staticBlueFrame|6846|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_button_with_icon|ringofsmithing||staticBlueFrame|3174|\nadd_button_with_icon|ringofnight||staticBlueFrame|8962|\nadd_button_with_icon|ringofshrinking||staticBlueFrame|6028|\nadd_button_with_icon|theonering||staticBlueFrame|1904|\nadd_quick_exit|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "litem")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`#Welcome To `4Legendary's `2Store`w!``|left|1794||\nadd_button_with_icon|ldrags||staticBlueFrame|1782||\nadd_button_with_icon|lwings||staticBlueFrame|1784|\nadd_button_with_icon|lbots||staticBlueFrame|1780|\nadd_button_with_icon|lkatana||staticBlueFrame|2592|\nadd_button_with_icon|ldragwings||staticBlueFrame|7734|\nadd_quick_exit|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "iotmstore")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`#Welcome To `4IOTM's `2Store`w!``|left|10128|\nadd_button_with_icon|butler||staticBlueFrame|10128|\nadd_quick_exit|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "chests")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`#Welcome To `oChest's `2Store`w!``|left|5954|\nadd_button_with_icon|bronzechest||staticBlueFrame|6204|\nadd_button_with_icon|silverchest||staticBlueFrame|6202|\nadd_button_with_icon|goldchest||staticBlueFrame|6200|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_label_with_icon|small|`5Special `oChest's``|left|5954|\nadd_button_with_icon|winterchest||staticBlueFrame|7484|\nadd_button_with_icon|springchest||staticBlueFrame|7954|\nadd_quick_exit|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "storeinvupgrade")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									short nextSpace = 0;
									if (((PlayerInfo*)(peer->data))->currentInventorySize + 30 > 200)
									{
										nextSpace = 200;
									}
									else
									{
										nextSpace = ((PlayerInfo*)(peer->data))->currentInventorySize + 30;
									}
									if (((PlayerInfo*)(peer->data))->currentInventorySize == 200)
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Purchase `8Inventory Upgrade`2!``|left|6204|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`4Your inventory spaces are full upgraded!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Purchase `8Inventory Upgrade`2!``|left|6204|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oYour inventory space is`8 " + to_string(((PlayerInfo*)(peer->data))->currentInventorySize) + " `onow.|\nadd_label|small|\nadd_textbox|`9After purchasing an inventory upgrade, your inventory will have`2 " + to_string(nextSpace) + "`9 spaces.|left|8|\nadd_spacer|small|\nadd_button|buyinvupgrade|`9Purchase `7[`430`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
								}
								if (btn == "blocks")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`wSpecial Premium `@Blocks``|left|2590|\nadd_button_with_icon|wgm||staticBlueFrame|6946|\nadd_button_with_icon|darkstone||staticBlueFrame|120|\nadd_button_with_icon|magplant||staticBlueFrame|5638|\nadd_button_with_icon|magicmchn||staticBlueFrame|9170|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_button_with_icon|atm||staticBlueFrame|1008|\nadd_button_with_icon|unicorn||staticBlueFrame|1636|\nadd_button_with_icon|gbc||staticBlueFrame|3402|\nadd_button_with_icon|Lockechest||staticBlueFrame|2478|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_button_with_icon|gemstorage1||staticBlueFrame|6950|\nadd_button_with_icon|mysterybox||staticBlueFrame|4174|\nadd_button_with_icon|antigravity||staticBlueFrame|4992|\nadd_button_with_icon|legendwizard||staticBlueFrame|1790|\nadd_quick_exit|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "farmstore") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label|big|`wWelcome To `@Farmables `4Store`w!|left|8950|\nadd_label_with_icon|small|`^Tier I Farmables``|left|9294|\nadd_button_with_icon|amethyst||staticBlueFrame|4762|\nadd_button_with_icon|onyx||staticBlueFrame|7382|\nadd_button_with_icon|smaraged||staticBlueFrame|3948|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_label_with_icon|small|`2Tier II Farmables``|left|9294|\nadd_button_with_icon|diamondstone||staticBlueFrame|3606|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_label_with_icon|small|`8Tier III Farmables``|left|9294|\nadd_button_with_icon|pinkdiamond||staticBlueFrame|3146|\nadd_quick_exit|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "lockstore") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label|big|`wWelcome To `cLocks `4Store`w!|left|8950|\nadd_label_with_icon|small|`^Tier I Locks``|left|9294|\nadd_button_with_icon|worldlock||staticBlueFrame|242||\nadd_button_with_icon|dirtlock||staticBlueFrame|8470||\nadd_button_with_icon|lavalock||staticBlueFrame|9308||\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_label_with_icon|small|`2Tier II Locks``|left|9294|\nadd_button_with_icon|diamondlock||staticBlueFrame|1796||\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_label_with_icon|small|`8Tier III Locks``|left|9294|\nadd_button_with_icon|bgllock||staticBlueFrame|7188|\nadd_quick_exit|");
								}
								//CHESTAI CIA CHESTAI CIA CHESTAI CIA
								if (btn == "bronzechest")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Purchase `8Bronze `oChest`2!``|left|6204|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oThe `eChances `ofor `8Bronze `oChest are:|\nadd_label|small|\nadd_textbox|`9Gems -> `#80% `9[`4MAX `620000`2 Gems!`9]|left|8|\nadd_label|small|\nadd_textbox|`9Crystals -> `#60%|left|8|\nadd_label|small|\nadd_textbox|`9Fragments -> `#35%|left|8|\nadd_label|small|\nadd_textbox|`9Special Blocks -> `#10%|left|8|\nadd_label|small|\nadd_textbox|`9Items -> `#4%|left|8|\nadd_spacer|small|\nadd_button|buybronzechest|`9Purchase `7[`430`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "silverchest")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Purchase `sSilver `oChest`2!``|left|6202|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oThe `eChances `ofor `sSilver `oChest are:|\nadd_label|small|\nadd_textbox|`9Gems -> `#40% `9[`4MAX `670000`2 Gems!`9]|left|8|\nadd_label|small|\nadd_textbox|`9Crystals -> `#70%|left|8|\nadd_label|small|\nadd_textbox|`9Fragments -> `#55%|left|8|\nadd_label|small|\nadd_textbox|`9Special Blocks -> `#20%|left|8|\nadd_label|small|\nadd_textbox|`9Items -> `#15%|left|8|\nadd_spacer|small|\nadd_button|buysilverchest|`9Purchase `7[`450`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "goldchest")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Purchase `9Gold `oChest`2!``|left|6200|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oThe `eChances `ofor `9Gold `oChest are:|\nadd_label|small|\nadd_textbox|`9Gems -> `#20% `9[`4MAX `6120000`2 Gems!`9]|left|8|\nadd_label|small|\nadd_textbox|`9Crystals -> `#45%|left|8|\nadd_label|small|\nadd_textbox|`9Fragments -> `#65%|left|8|\nadd_label|small|\nadd_textbox|`9Special Blocks -> `#70%|left|8|\nadd_label|small|\nadd_textbox|`9Items -> `#30%|left|8|\nadd_spacer|small|\nadd_button|buygoldchest|`9Purchase `7[`470`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "winterchest")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Purchase `qWinter `oChest`2!``|left|7484|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oThe `eChances `ofor `qWinter `oChest are:|\nadd_label|small|\nadd_textbox|`9Gems -> `#15% `9[`4MAX `6170000`2 Gems!`9]|left|8|\nadd_label|small|\nadd_textbox|`9Crystals -> `#30%|left|8|\nadd_label|small|\nadd_textbox|`9Fragments -> `#60%|left|8|\nadd_label|small|\nadd_textbox|`9Special Blocks -> `#75%|left|8|\nadd_label|small|\nadd_textbox|`9Items -> `#50%|left|8|\nadd_spacer|small|\nadd_button|buywinterchest|`9Purchase `7[`490`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "damnedknifeinfo")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `8Damned Knife`6!``|left|9484|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Name: `8Damned Knife`9.|\nadd_textbox|`9Damage: `@25`9.|\nadd_textbox|`9Rarity: `1Common`9.|\nadd_textbox|`9Speed: `2Fast`9.|\nadd_spacer|small|\nadd_button|buydamnedknife|`7Buy `8Damned Knife `7[`43`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "sapphireknifeinfo")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `eSapphire Knife`6!``|left|9486|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Name: `eSapphire Knife`9.|\nadd_textbox|`9Damage: `^30`9.|\nadd_textbox|`9Rarity: `2Rare`9.|\nadd_textbox|`9Speed: `2Fast`9.|\nadd_spacer|small|\nadd_button|buysapphireknife|`7Buy `eSapphire Knife `7[`410`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "dualbladesinfo")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|big|`6Purchase `1Dual Blades`6!``|left|9494|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Name: `1Dual Blades`9.|\nadd_textbox|`9Damage: `^50`9.|\nadd_textbox|`9Rarity: `8Legendary`9.|\nadd_textbox|`9Speed: `2Super Fast`9.|\nadd_spacer|small|\nadd_button|buydualblades|`7Buy `1Dual Blades `7[`460`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|");
								}
								if (btn == "springchest")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Purchase `^Spring `oChest`2!``|left|7954|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oThe `eChances `ofor `^Spring `oChest are:|\nadd_label|small|\nadd_textbox|`9Gems -> `#15% `9[`4MAX `6200000`2 Gems!`9]|left|8|\nadd_label|small|\nadd_textbox|`9Crystals -> `#30%|left|8|\nadd_label|small|\nadd_textbox|`9Fragments -> `#60%|left|8|\nadd_label|small|\nadd_textbox|`9Special Blocks -> `#75%|left|8|\nadd_label|small|\nadd_textbox|`9Items -> `#50%|left|8|\nadd_spacer|small|\nadd_button|buyspringchest|`9Purchase `7[`495`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "consumables")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`#Consumable `eItems``|left|828|\nadd_button_with_icon|megaphone||staticBlueFrame|2480|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_label_with_icon|small|`#Wands``|left|278|\nadd_button_with_icon|firewand||staticBlueFrame|276|\nadd_button_with_icon|freezewand||staticBlueFrame|274|\nadd_button_with_icon|cursewand||staticBlueFrame|278|\nadd_button_with_icon|banwand||staticBlueFrame|732|\nadd_quick_exit|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "no")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`1Purchasable `eItems``|left|1438|\nadd_button_with_icon|rayman||staticBlueFrame|5480|150000|\nadd_button_with_icon|\nadd_button_with_icon|hammer||staticBlueFrame|7912|100000|\nadd_button_with_icon|ances||staticBlueFrame|5078|950000|\nadd_button_with_icon|tk69||staticBlueFrame|8834|350000|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_label_with_icon|small|`9Wea`4pons``|left|9294|\nadd_button_with_icon|phoenixsword||staticBlueFrame|6312|\nadd_button_with_icon|burnished||staticBlueFrame|7956|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_label_with_icon|small|`9Special `eItems``|left|9294|\nadd_button_with_icon|diggerspade||staticBlueFrame|2952|\nadd_button_with_icon|g_virus||staticBlueFrame|764|\nadd_button_with_icon|antidote||staticBlueFrame|782|\nadd_quick_exit|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								if (btn == "anticrash") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Your `@Set `@Have Been `4Removed`#!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									((PlayerInfo*)(peer->data))->cloth_hair = 0;
									((PlayerInfo*)(peer->data))->cloth_shirt = 0;
									((PlayerInfo*)(peer->data))->cloth_pants = 0;
									((PlayerInfo*)(peer->data))->cloth_feet = 0;
									((PlayerInfo*)(peer->data))->cloth_face = 0;
									((PlayerInfo*)(peer->data))->cloth_hand = 0;
									((PlayerInfo*)(peer->data))->cloth_back = 0;
									((PlayerInfo*)(peer->data))->cloth_mask = 0;
									((PlayerInfo*)(peer->data))->cloth_necklace = 0;
									((PlayerInfo*)(peer->data))->cloth_ances = 0;
									sendClothes(peer);
									enet_peer_disconnect_later(peer, 0);
								}
								if (btn == "yesrayman") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));
									int b = atoi(content.c_str());
									if (b > 149999)
									{
										bool success = true;
										SaveShopsItem(5480, 1, peer, success); // aposition, itemid, quantity, peer, success
										if (!success)continue;
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `wRayman's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										int gemcalc10k = b - 150000;
										ofstream myfile2;
										myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										myfile2 << std::to_string(gemcalc10k);
										myfile2.close();
										std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string contentx((std::istreambuf_iterator<char>(ifszi)),
											(std::istreambuf_iterator<char>()));
										int updgem = atoi(contentx.c_str());
										GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
										ENetPacket* packetpp = enet_packet_create(pp.data,
											pp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packetpp);
										delete pp.data;
										string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
										memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
										ENetPacket* packetsou = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packetsou);
									}
									else
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
								if (btn == "yesburnished") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));
									int b = atoi(content.c_str());
									if (b > 3000000)
									{
										bool success = true;
										SaveShopsItem(7956, 1, peer, success); // aposition, itemid, quantity, peer, success
										if (!success)continue;
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `wBurnished Sword's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										int gemcalc10k = b -3000000;
										ofstream myfile2;
										myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										myfile2 << std::to_string(gemcalc10k);
										myfile2.close();
										std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string contentx((std::istreambuf_iterator<char>(ifszi)),
											(std::istreambuf_iterator<char>()));
										int updgem = atoi(contentx.c_str());
										GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
										ENetPacket* packetpp = enet_packet_create(pp.data,
											pp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packetpp);
										delete pp.data;
										string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
										memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
										ENetPacket* packetsou = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packetsou);
									}
									else
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
								if (btn == "yesphoenix") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));
									int b = atoi(content.c_str());
									if (b > 1000000)
									{
										bool success = true;
										SaveShopsItem(6312, 1, peer, success); // aposition, itemid, quantity, peer, success
										if (!success)continue;
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `wPhoenix Sword's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										int gemcalc10k = b - 1000000;
										ofstream myfile2;
										myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										myfile2 << std::to_string(gemcalc10k);
										myfile2.close();
										std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string contentx((std::istreambuf_iterator<char>(ifszi)),
											(std::istreambuf_iterator<char>()));
										int updgem = atoi(contentx.c_str());
										GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
										ENetPacket* packetpp = enet_packet_create(pp.data,
											pp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packetpp);
										delete pp.data;
										string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
										memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
										ENetPacket* packetsou = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packetsou);
									}
									else
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
								if (btn == "yesbutler") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));
									int b = atoi(content.c_str());
									if (b > 200000)
									{
										bool success = true;
										SaveShopsItem(10128, 1, peer, success); // aposition, itemid, quantity, peer, success
										if (!success)continue;
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `wMechanical Butler's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										int gemcalc10k = b - 200000;
										ofstream myfile2;
										myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										myfile2 << std::to_string(gemcalc10k);
										myfile2.close();
										std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string contentx((std::istreambuf_iterator<char>(ifszi)),
											(std::istreambuf_iterator<char>()));
										int updgem = atoi(contentx.c_str());
										GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
										ENetPacket* packetpp = enet_packet_create(pp.data,
											pp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packetpp);
										delete pp.data;
										string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
										memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
										ENetPacket* packetsou = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packetsou);
									}
									else
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
								if (btn == "yestk") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));
									int b = atoi(content.c_str());
									if (b > 349999)
									{
										bool success = true;
										SaveShopsItem(8834, 1, peer, success); // aposition, itemid, quantity, peer, success
										if (!success)continue;
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `#TK69 Board's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										int gemcalc10k = b - 350000;
										ofstream myfile2;
										myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										myfile2 << std::to_string(gemcalc10k);
										myfile2.close();
										std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string contentx((std::istreambuf_iterator<char>(ifszi)),
											(std::istreambuf_iterator<char>()));
										int updgem = atoi(contentx.c_str());
										GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
										ENetPacket* packetpp = enet_packet_create(pp.data,
											pp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packetpp);
										delete pp.data;
										string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
										memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
										ENetPacket* packetsou = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packetsou);
									}
									else
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
								if (btn == "yesaac") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));
									int b = atoi(content.c_str());
									if (b > 949999)
									{
										bool success = true;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`^Select `9Ancestral `^Color``|left|5080|\nadd_button_with_icon|wisdom||staticBlueFrame|5078|\nadd_button_with_icon|dimensions||staticBlueFrame|5080|\nadd_button_with_icon|life||staticBlueFrame|5082|\nadd_button_with_icon|riches||staticBlueFrame|5084|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_button_with_icon|orb||staticBlueFrame|7166|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										if (!success)continue;
										string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
										memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
										ENetPacket* packetsou = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packetsou);
									}
									else
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
								if (btn == "wisdom")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool success = true;
									SaveShopsItemMoreTimes(5078, 1, peer, success);
									if (!success) continue;
									std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));
									int b = atoi(content.c_str());
									int gemcalc10k = b - 950000;
									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();
									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));
									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packetpp);
									delete pp.data;

									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have `2Claimed `3Ancestral Of Wisdom `1Successfully`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (btn == "dimensions")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool success = true;
									SaveShopsItemMoreTimes(5080, 1, peer, success);
									if (!success) continue;
									std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));
									int b = atoi(content.c_str());
									int gemcalc10k = b - 950000;
									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();
									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));
									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packetpp);
									delete pp.data;

									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have `2Claimed `3Ancestral Of Dimensions `1Successfully`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (btn == "life")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool success = true;
									SaveShopsItemMoreTimes(5082, 1, peer, success);
									if (!success) continue;
									std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));
									int b = atoi(content.c_str());
									int gemcalc10k = b - 950000;
									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();
									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));
									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packetpp);
									delete pp.data;

									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have `2Claimed `3Ancestral Of Life `1Successfully`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (btn == "riches")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool success = true;
									SaveShopsItemMoreTimes(5084, 1, peer, success);
									if (!success) continue;
									std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));
									int b = atoi(content.c_str());
									int gemcalc10k = b - 950000;
									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();
									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));
									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packetpp);
									delete pp.data;

									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have `2Claimed `3Ancestral Of Riches `1Successfully`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (btn == "orb")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool success = true;
									SaveShopsItemMoreTimes(7166, 1, peer, success);
									if (!success) continue;
									std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));
									int b = atoi(content.c_str());
									int gemcalc10k = b - 950000;
									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();
									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));
									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packetpp);
									delete pp.data;

									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have `2Claimed `3Ancestral Of Orb `1Successfully`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (btn == "yesg_virus")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 30, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eWorld Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(764, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(242, 30, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `9g-Virus!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}

								}
								if (btn == "yesantidote")
								{
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									bool iscontains = false;
									SearchInventoryItem(peer, 242, 10, iscontains);
									if (!iscontains)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eWorld Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = false;


										SaveShopsItemMoreTimes(782, 1, peer, success);
										if (success)
										{
											RemoveInventoryItem(242, 10, peer);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `9Antidote!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}


									}

								}
								if (btn == "yeswar") {
									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
										continue;
									}
									std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));
									int b = atoi(content.c_str());
									if (b > 199999)
									{
										bool success = true;
										SaveShopsItem(7912, 1, peer, success); // aposition, itemid, quantity, peer, success
										if (!success)continue;
										sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `3War Hammer's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										int gemcalc10k = b - 200000;
										ofstream myfile2;
										myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										myfile2 << std::to_string(gemcalc10k);
										myfile2.close();
										std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string contentx((std::istreambuf_iterator<char>(ifszi)),
											(std::istreambuf_iterator<char>()));
										int updgem = atoi(contentx.c_str());
										GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
										ENetPacket* packetpp = enet_packet_create(pp.data,
											pp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packetpp);
										delete pp.data;
										string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
										memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
										ENetPacket* packetsou = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packetsou);
									}
									else
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
								if (isPasswordDialog) {
									if (((PlayerInfo*)(peer->data))->tankIDPass != oldpass) {
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wChange Password|left|1280|\nadd_spacer|small|\nadd_textbox|`4Oops! `oThe Current Password you have entered is incorrect!``|\nadd_spacer|small|\nadd_text_input|oldpass|`$Current Password``||18|\nadd_text_input|newpass|`$New Password``||18|\nadd_text_input|verifypass|`$Verify Password``||18|\nend_dialog|pssdia|`wCancel``|`wConfirm!``|"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;
									}
									else if (password2 != password2verify) {
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wChange Password|left|1280|\nadd_spacer|small|\nadd_textbox|`4Oops! `oThe Password Verify failed.``|\nadd_spacer|small|\nadd_text_input|oldpass|`$Current Password``||18|\nadd_text_input|newpass|`$New Password``||18|\nadd_text_input|verifypass|`$Verify Password``||18|\nend_dialog|pssdia|`wCancel``|`wConfirm!``|"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;
									}
									else {
										((PlayerInfo*)(peer->data))->tankIDPass = password2;
										try {
											std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
											if (ifff.fail()) {
												ifff.close();
											}
											if (ifff.is_open()) {
											}
											json j;
											ifff >> j; //load
											j["password"] = hashPassword(((PlayerInfo*)(peer->data))->tankIDPass); //edit
											std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
											if (!o.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}
											o << j << std::endl;
											GamePacket p3 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), 1), ((PlayerInfo*)(peer->data))->rawName), password2));
											ENetPacket* packet3 = enet_packet_create(p3.data,
												p3.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet3);
											GamePacket p9 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Your password has been changed!"));
											ENetPacket* packet9 = enet_packet_create(p9.data,
												p9.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet9);
											delete p9.data;
											enet_peer_disconnect_later(peer, 0);
										}
										catch (std::exception& e)
										{
											std::cerr << e.what() << std::endl;
										}
										catch (const std::out_of_range& e) {
											cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
										}
										catch (...) {
											cout << "reading file violation" << endl;
										}
									}
								}
								if (isGrowidDialog) {
									std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));
									int b = atoi(content.c_str());
									if (b > 19999)
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Your growid has been changed!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										int gemcalc10k = b - 20000;
										ofstream myfile2;
										myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										myfile2 << std::to_string(gemcalc10k);
										myfile2.close();
										std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string contentx((std::istreambuf_iterator<char>(ifszi)),
											(std::istreambuf_iterator<char>()));
										int updgem = atoi(contentx.c_str());
										GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
										ENetPacket* packetpp = enet_packet_create(pp.data,
											pp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packetpp);
										delete pp.data;
										((PlayerInfo*)(peer->data))->tankIDName = newgrowid;
										std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
										if (ifff.fail()) {
											ifff.close();
										}
										if (ifff.is_open()) {
										}
										json j;
										ifff >> j; //load
										j["username"] = (((PlayerInfo*)(peer->data))->tankIDName); //edit
										std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
										if (!o.is_open()) {
											cout << GetLastError() << endl;
											_getch();
										}
										o << j << std::endl;
										GamePacket p3 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), 1), ((PlayerInfo*)(peer->data))->rawName), newgrowid));
										ENetPacket* packet3 = enet_packet_create(p3.data,
											p3.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet3);
										string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
										memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4
										ENetPacket* packetsou = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packetsou);
									}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rYou need to have enough gems to change `2name`w!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
								}
#ifdef REGISTRATION
								if (isRegisterDialog) {
									int regState = PlayerDB::playerRegister(peer, username, password, passwordverify, discord, pin);
									if (regState == 1) {
										std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string acontent((std::istreambuf_iterator<char>(ifsz)),
											(std::istreambuf_iterator<char>()));
										int arda = 0;
										ofstream myfile;
										myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										myfile << arda;
										myfile.close();
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^Your account has been created!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										GamePacket p8 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), 1), username), password));
										ENetPacket* packet8 = enet_packet_create(p8.data,
											p8.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet8);
										//enet_host_flush(server);
										delete p8.data;
										enet_peer_disconnect_later(peer, 0);
										GamePacket p7 = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), 0));
										ENetPacket* packet7 = enet_packet_create(p7.data,
											p7.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet7);
										GamePacket p3 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), 1), username), password));
										ENetPacket* packet3 = enet_packet_create(p3.data,
											p3.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet3);
										//enet_host_flush(server);
										delete p3.data;
										string nam1e = "```0" + username;
										((PlayerInfo*)(event.peer->data))->displayName = username;
										((PlayerInfo*)(event.peer->data))->tankIDName = username;
										((PlayerInfo*)(event.peer->data))->tankIDPass = password;
										((PlayerInfo*)(event.peer->data))->rawName = PlayerDB::getProperName(((PlayerInfo*)(event.peer->data))->tankIDName);
										((PlayerInfo*)(event.peer->data))->msgName = PlayerDB::getProperName(((PlayerInfo*)(event.peer->data))->tankIDName);
										((PlayerInfo*)(event.peer->data))->haveGrowId = true;
										GamePacket p4 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), nam1e));
										memcpy(p4.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
										ENetPacket* packet4 = enet_packet_create(p4.data,
											p4.len,
											ENET_PACKET_FLAG_RELIABLE);
										string text = "action|play_sfx\nfile|audio/piano_nice.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);
										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
									}
									else if (regState == -1) {
										Player::OnConsoleMessage(peer, "`@Account creation failed, because it already exists!``");
									}
									else if (regState == -2) {
										Player::OnConsoleMessage(peer, "`@Account creation failed, because the name is too short!``");
									}
									else if (regState == -3) {
										Player::OnConsoleMessage(peer, "`@Passwords mismatch!``");
									}
									else if (regState == -4) {
										Player::OnConsoleMessage(peer, "`@Account creation failed, because email address is invalid!``");
									}
									else if (regState == -5) {
										Player::OnConsoleMessage(peer, "`@Account creation failed, because Discord ID is invalid!``");
									}
									else if (regState == -6) {
										Player::OnConsoleMessage(peer, "`@Account creation failed due to account name that is being used by system!``");
									}
									else if (regState == -7) {
										Player::OnConsoleMessage(peer, "`@Oops! `9Looks like players data have been resetted, `wmake sure to use your `bPIN `wthat you used when creating your account. `2For help, message `w! Lim#1000 on Discord!`w``");
									}
									else if (regState == -8) {
										Player::OnConsoleMessage(peer, "`@Oops! `9Looks like `wPIN `9is not in a range of 1000-9999. Choose a `wPIN `9from 1000-9999!``");
									}
									else if (regState == -9) {
										Player::OnConsoleMessage(peer, "`@Oops! `9Looks like `wPIN `9contains text, only numbers. Choose a `wPIN `9from 1000-9999!``");
									}
									else if (regState == -10) {
										Player::OnConsoleMessage(peer, "`@Player name contains illegal characters.``");
									}
									else if (regState == -11) {
										Player::OnConsoleMessage(peer, "`@Your connection have been cancelled!``");
									}
									else if (regState == -12) {
										Player::OnConsoleMessage(peer, "`@Account creation failed, because `4Code`@ contains illegal characters! Use only numbers and letters.``");
									}
									else if (regState == -13) {
										Player::OnConsoleMessage(peer, "`@Account creation failed, because the `4Code `@must consist of `25 `@characters.``");
									}
									else if (regState == -14) {
										Player::OnConsoleMessage(peer, "`@Account creation failed. `4Too many accounts created from this IP address.``");
									}
#endif
								}
							}

							if (cch.find("action|dialog_return\ndialog_name|trade_confirm\nbuttonClicked|back") == 0) {
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer))
									{

										if (((PlayerInfo*)(currentPeer->data))->netID == ((PlayerInfo*)(peer->data))->lastTradeNetID)
										{
											if (((PlayerInfo*)(currentPeer->data))->lastTradeNetID != ((PlayerInfo*)(peer->data))->netID)
											{
												Player::OnTextOverlay(peer, ((PlayerInfo*)(currentPeer->data))->displayName + " `whas canceled the trade");
											}
											if (((PlayerInfo*)(currentPeer->data))->isTradingWithUser == 1)
											{
												Player::OnConsoleMessage(peer, "`6[```4Trade canceled by`w " + ((PlayerInfo*)(peer->data))->displayName + "``!```6]``");
												SendTalkSelf(currentPeer, "`6[```4Trade canceled by`w " + ((PlayerInfo*)(peer->data))->displayName + "``!```6]``");
												((PlayerInfo*)(peer->data))->currentTradeItems = "";
												((PlayerInfo*)(currentPeer->data))->currentTradeItems = "";
												((PlayerInfo*)(peer->data))->lastTradeAcceptCount = 0;
												((PlayerInfo*)(currentPeer->data))->lastTradeAcceptCount = 0;
												((PlayerInfo*)(peer->data))->lastTradeNetID = 0;
												((PlayerInfo*)(currentPeer->data))->lastTradeNetID = 0;
												((PlayerInfo*)(peer->data))->isTradingWithUser = 0;
												((PlayerInfo*)(currentPeer->data))->isTradingWithUser = 0;
												((PlayerInfo*)(peer->data))->isDoTrade = 0;
												((PlayerInfo*)(currentPeer->data))->isDoTrade = 0;
												((PlayerInfo*)(peer->data))->lastTD1 = 0;
												((PlayerInfo*)(peer->data))->lastTD2 = 0;
												((PlayerInfo*)(peer->data))->lastTD3 = 0;
												((PlayerInfo*)(peer->data))->lastTD4 = 0;
												((PlayerInfo*)(peer->data))->lastCT1 = 0;
												((PlayerInfo*)(peer->data))->lastCT2 = 0;
												((PlayerInfo*)(peer->data))->lastCT3 = 0;
												((PlayerInfo*)(peer->data))->lastCT4 = 0;
												((PlayerInfo*)(currentPeer->data))->lastTD1 = 0;
												((PlayerInfo*)(currentPeer->data))->lastTD2 = 0;
												((PlayerInfo*)(currentPeer->data))->lastTD3 = 0;
												((PlayerInfo*)(currentPeer->data))->lastTD4 = 0;
												((PlayerInfo*)(currentPeer->data))->lastCT1 = 0;
												((PlayerInfo*)(currentPeer->data))->lastCT2 = 0;
												((PlayerInfo*)(currentPeer->data))->lastCT3 = 0;
												((PlayerInfo*)(currentPeer->data))->lastCT4 = 0;
											}
											else
											{
												Player::OnTextOverlay(peer, "The other person left the trade!");
												((PlayerInfo*)(peer->data))->currentTradeItems = "";
												((PlayerInfo*)(peer->data))->lastTradeAcceptCount = 0;
												((PlayerInfo*)(peer->data))->lastTradeNetID = 0;
												((PlayerInfo*)(peer->data))->isTradingWithUser = 0;
												((PlayerInfo*)(peer->data))->isDoTrade = 0;
												((PlayerInfo*)(peer->data))->lastTD1 = 0;
												((PlayerInfo*)(peer->data))->lastTD2 = 0;
												((PlayerInfo*)(peer->data))->lastTD3 = 0;
												((PlayerInfo*)(peer->data))->lastTD4 = 0;
												((PlayerInfo*)(peer->data))->lastCT1 = 0;
												((PlayerInfo*)(peer->data))->lastCT2 = 0;
												((PlayerInfo*)(peer->data))->lastCT3 = 0;
												((PlayerInfo*)(peer->data))->lastCT4 = 0;
											}
										}

									}

								}
							}
							if (cch.find("action|dialog_return\ndialog_name|trade_confirm\nbuttonClicked|accept") == 0) {
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer))
									{

										if (((PlayerInfo*)(currentPeer->data))->netID == ((PlayerInfo*)(peer->data))->lastTradeNetID)
										{
											if (((PlayerInfo*)(currentPeer->data))->isTradingWithUser == 1)
											{
												((PlayerInfo*)(peer->data))->isDoTrade++;
												int accept = ((PlayerInfo*)(peer->data))->isDoTrade + ((PlayerInfo*)(currentPeer->data))->isDoTrade;
												bool success = true;
												if (accept == 2)
												{
													int netID = ((PlayerInfo*)(peer->data))->netID;
													PlayAudioWorld(peer, "audio/keypad_hit.wav");
													string peertraded = "Nothing!";
													string cpeertraded = "Nothing!";
													if (((PlayerInfo*)(peer->data))->lastTD1 == 0)
													{
														RemoveItemFromInv(peer, ((PlayerInfo*)(currentPeer->data))->lastTD1, ((PlayerInfo*)(currentPeer->data))->lastCT2, true);
														SaveShopsItemMoreTimes(((PlayerInfo*)(peer->data))->lastTD1, ((PlayerInfo*)(peer->data))->lastCT2, peer, success);
													}
													if (((PlayerInfo*)(peer->data))->lastTD2 == 0)
													{
														RemoveItemFromInv(peer, ((PlayerInfo*)(currentPeer->data))->lastTD2, ((PlayerInfo*)(currentPeer->data))->lastCT2, true);
														SaveShopsItemMoreTimes(((PlayerInfo*)(peer->data))->lastTD2, ((PlayerInfo*)(peer->data))->lastCT2, peer, success);
													}
													if (((PlayerInfo*)(peer->data))->lastTD3 == 0)
													{
														RemoveItemFromInv(peer, ((PlayerInfo*)(currentPeer->data))->lastTD2, ((PlayerInfo*)(currentPeer->data))->lastCT3, true);
														SaveShopsItemMoreTimes(((PlayerInfo*)(peer->data))->lastTD2, ((PlayerInfo*)(peer->data))->lastCT3, peer, success);
													}
													if (((PlayerInfo*)(peer->data))->lastTD4 == 0)
													{
														RemoveItemFromInv(peer, ((PlayerInfo*)(currentPeer->data))->lastTD2, ((PlayerInfo*)(currentPeer->data))->lastCT4, true);
														SaveShopsItemMoreTimes(((PlayerInfo*)(peer->data))->lastTD2, ((PlayerInfo*)(peer->data))->lastCT4, peer, success);
													}
													if (((PlayerInfo*)(peer->data))->lastTD1 != 0)
													{

														peertraded = to_string(((PlayerInfo*)(peer->data))->lastCT1) + " " + GetItemDef(((PlayerInfo*)(peer->data))->lastTD1).name;
														RemoveItemFromInv(peer, ((PlayerInfo*)(currentPeer->data))->lastTD1, ((PlayerInfo*)(currentPeer->data))->lastCT1, true);
														SendTradeEffect(peer, ((PlayerInfo*)(peer->data))->lastTD1, netID, ((PlayerInfo*)(currentPeer->data))->netID, 180);
														SendTradeEffect(currentPeer, ((PlayerInfo*)(peer->data))->lastTD1, netID, ((PlayerInfo*)(currentPeer->data))->netID, 180);
														SaveShopsItemMoreTimes(((PlayerInfo*)(peer->data))->lastTD1, ((PlayerInfo*)(peer->data))->lastCT1, peer, success);
													}
													if (((PlayerInfo*)(peer->data))->lastTD2 != 0)
													{
														peertraded += ", " + to_string(((PlayerInfo*)(peer->data))->lastCT2) + " " + GetItemDef(((PlayerInfo*)(peer->data))->lastTD2).name;
														RemoveItemFromInv(peer, ((PlayerInfo*)(currentPeer->data))->lastTD2, ((PlayerInfo*)(currentPeer->data))->lastCT2, true);
														SendTradeEffect(peer, ((PlayerInfo*)(peer->data))->lastTD2, netID, ((PlayerInfo*)(currentPeer->data))->netID, 180);
														SendTradeEffect(currentPeer, ((PlayerInfo*)(peer->data))->lastTD2, netID, ((PlayerInfo*)(currentPeer->data))->netID, 180);

														SaveShopsItemMoreTimes(((PlayerInfo*)(peer->data))->lastTD2, ((PlayerInfo*)(peer->data))->lastCT2, peer, success);
													}
													if (((PlayerInfo*)(peer->data))->lastTD3 != 0)
													{
														peertraded += ", " + to_string(((PlayerInfo*)(peer->data))->lastCT3) + " " + GetItemDef(((PlayerInfo*)(peer->data))->lastTD3).name;
														RemoveItemFromInv(peer, ((PlayerInfo*)(currentPeer->data))->lastTD3, ((PlayerInfo*)(currentPeer->data))->lastCT3, true);
														SendTradeEffect(peer, ((PlayerInfo*)(peer->data))->lastTD3, netID, ((PlayerInfo*)(currentPeer->data))->netID, 180);
														SendTradeEffect(currentPeer, ((PlayerInfo*)(peer->data))->lastTD3, netID, ((PlayerInfo*)(currentPeer->data))->netID, 180);

														SaveShopsItemMoreTimes(((PlayerInfo*)(peer->data))->lastTD3, ((PlayerInfo*)(peer->data))->lastCT3, peer, success);
													}
													if (((PlayerInfo*)(peer->data))->lastTD4 != 0)
													{
														peertraded += ", " + to_string(((PlayerInfo*)(peer->data))->lastCT4) + " " + GetItemDef(((PlayerInfo*)(peer->data))->lastTD4).name;
														RemoveItemFromInv(peer, ((PlayerInfo*)(currentPeer->data))->lastTD4, ((PlayerInfo*)(currentPeer->data))->lastCT4, true);
														SendTradeEffect(peer, ((PlayerInfo*)(peer->data))->lastTD4, netID, ((PlayerInfo*)(currentPeer->data))->netID, 180);
														SendTradeEffect(currentPeer, ((PlayerInfo*)(peer->data))->lastTD4, netID, ((PlayerInfo*)(currentPeer->data))->netID, 180);

														SaveShopsItemMoreTimes(((PlayerInfo*)(peer->data))->lastTD4, ((PlayerInfo*)(peer->data))->lastCT4, peer, success);
													}
													//EndPeer
													//CurrentPeer
													if (((PlayerInfo*)(currentPeer->data))->lastTD1 == 0)
													{
														RemoveItemFromInv(currentPeer, ((PlayerInfo*)(peer->data))->lastTD1, ((PlayerInfo*)(peer->data))->lastCT1, true);
														SaveShopsItemMoreTimes(((PlayerInfo*)(currentPeer->data))->lastTD1, ((PlayerInfo*)(currentPeer->data))->lastCT1, currentPeer, success);
													}
													if (((PlayerInfo*)(currentPeer->data))->lastTD2 == 0)
													{
														RemoveItemFromInv(currentPeer, ((PlayerInfo*)(peer->data))->lastTD2, ((PlayerInfo*)(peer->data))->lastCT2, true);
														SaveShopsItemMoreTimes(((PlayerInfo*)(currentPeer->data))->lastTD2, ((PlayerInfo*)(currentPeer->data))->lastCT2, currentPeer, success);
													}
													if (((PlayerInfo*)(currentPeer->data))->lastTD3 == 0)
													{
														RemoveItemFromInv(currentPeer, ((PlayerInfo*)(peer->data))->lastTD3, ((PlayerInfo*)(peer->data))->lastCT3, true);
														SaveShopsItemMoreTimes(((PlayerInfo*)(currentPeer->data))->lastTD3, ((PlayerInfo*)(currentPeer->data))->lastCT3, currentPeer, success);
													}
													if (((PlayerInfo*)(currentPeer->data))->lastTD4 == 0)
													{
														RemoveItemFromInv(currentPeer, ((PlayerInfo*)(peer->data))->lastTD4, ((PlayerInfo*)(peer->data))->lastCT4, true);
														SaveShopsItemMoreTimes(((PlayerInfo*)(currentPeer->data))->lastTD4, ((PlayerInfo*)(currentPeer->data))->lastCT4, currentPeer, success);
													}
													if (((PlayerInfo*)(currentPeer->data))->lastTD1 != 0)
													{
														cpeertraded = to_string(((PlayerInfo*)(currentPeer->data))->lastCT1) + " " + GetItemDef(((PlayerInfo*)(currentPeer->data))->lastTD1).name;
														RemoveItemFromInv(currentPeer, ((PlayerInfo*)(peer->data))->lastTD1, ((PlayerInfo*)(peer->data))->lastCT1, true);

														SendTradeEffect(peer, ((PlayerInfo*)(currentPeer->data))->lastTD1, ((PlayerInfo*)(currentPeer->data))->netID, netID, 180);
														SendTradeEffect(currentPeer, ((PlayerInfo*)(currentPeer->data))->lastTD1, ((PlayerInfo*)(currentPeer->data))->netID, netID, 180);

														SaveShopsItemMoreTimes(((PlayerInfo*)(currentPeer->data))->lastTD1, ((PlayerInfo*)(currentPeer->data))->lastCT1, currentPeer, success);
													}
													if (((PlayerInfo*)(currentPeer->data))->lastTD2 != 0)
													{
														cpeertraded += ", " + to_string(((PlayerInfo*)(currentPeer->data))->lastCT2) + " " + GetItemDef(((PlayerInfo*)(currentPeer->data))->lastTD2).name;
														RemoveItemFromInv(currentPeer, ((PlayerInfo*)(peer->data))->lastTD2, ((PlayerInfo*)(peer->data))->lastCT2, true);
														SendTradeEffect(peer, ((PlayerInfo*)(currentPeer->data))->lastTD2, ((PlayerInfo*)(currentPeer->data))->netID, netID, 180);
														SendTradeEffect(currentPeer, ((PlayerInfo*)(currentPeer->data))->lastTD2, ((PlayerInfo*)(currentPeer->data))->netID, netID, 180);

														SaveShopsItemMoreTimes(((PlayerInfo*)(currentPeer->data))->lastTD2, ((PlayerInfo*)(currentPeer->data))->lastCT2, currentPeer, success);
													}
													if (((PlayerInfo*)(currentPeer->data))->lastTD3 != 0)
													{
														cpeertraded += ", " + to_string(((PlayerInfo*)(currentPeer->data))->lastCT3) + " " + GetItemDef(((PlayerInfo*)(currentPeer->data))->lastTD3).name;
														RemoveItemFromInv(currentPeer, ((PlayerInfo*)(peer->data))->lastTD3, ((PlayerInfo*)(peer->data))->lastCT3, true);
														SendTradeEffect(peer, ((PlayerInfo*)(currentPeer->data))->lastTD3, ((PlayerInfo*)(currentPeer->data))->netID, netID, 180);
														SendTradeEffect(currentPeer, ((PlayerInfo*)(currentPeer->data))->lastTD3, ((PlayerInfo*)(currentPeer->data))->netID, netID, 180);


														SaveShopsItemMoreTimes(((PlayerInfo*)(currentPeer->data))->lastTD3, ((PlayerInfo*)(currentPeer->data))->lastCT3, currentPeer, success);
													}
													if (((PlayerInfo*)(currentPeer->data))->lastTD4 != 0)
													{
														cpeertraded += ", " + to_string(((PlayerInfo*)(currentPeer->data))->lastCT4) + " " + GetItemDef(((PlayerInfo*)(currentPeer->data))->lastTD4).name;
														RemoveItemFromInv(currentPeer, ((PlayerInfo*)(peer->data))->lastTD4, ((PlayerInfo*)(peer->data))->lastCT4, true);
														SendTradeEffect(peer, ((PlayerInfo*)(currentPeer->data))->lastTD4, ((PlayerInfo*)(currentPeer->data))->netID, netID, 180);
														SendTradeEffect(currentPeer, ((PlayerInfo*)(currentPeer->data))->lastTD4, ((PlayerInfo*)(currentPeer->data))->netID, netID, 180);

														SaveShopsItemMoreTimes(((PlayerInfo*)(currentPeer->data))->lastTD4, ((PlayerInfo*)(currentPeer->data))->lastCT4, currentPeer, success);
													}

													if (((PlayerInfo*)(peer->data))->cloth_ances == ((PlayerInfo*)(peer->data))->lastTD1)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD1)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT1 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_ances = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_ances == ((PlayerInfo*)(peer->data))->lastTD2)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD2)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT2 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_ances = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_ances == ((PlayerInfo*)(peer->data))->lastTD3)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD3)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT3 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_ances = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_ances == ((PlayerInfo*)(peer->data))->lastTD4)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD4)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT4 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_ances = 0;
															sendClothes(peer);
														}
													}

													if (((PlayerInfo*)(peer->data))->cloth_back == ((PlayerInfo*)(peer->data))->lastTD1)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD1)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														Player::OnConsoleMessage(peer, "OKE1");
														Player::OnConsoleMessage(peer, "CurrentItem: " + to_string(currentItemCount) + " LASTCT1: " + to_string(((PlayerInfo*)(peer->data))->lastCT1));
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT1 == 0)
														{
															Player::OnConsoleMessage(peer, "OK2");
															((PlayerInfo*)(peer->data))->cloth_back = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_back == ((PlayerInfo*)(peer->data))->lastTD2)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD2)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT2 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_back = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_back == ((PlayerInfo*)(peer->data))->lastTD3)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD3)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT3 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_back = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_back == ((PlayerInfo*)(peer->data))->lastTD4)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD4)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT4 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_back = 0;
															sendClothes(peer);
														}
													}

													if (((PlayerInfo*)(peer->data))->cloth_face == ((PlayerInfo*)(peer->data))->lastTD1)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD1)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT1 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_face = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_face == ((PlayerInfo*)(peer->data))->lastTD2)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD2)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT2 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_face = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_face == ((PlayerInfo*)(peer->data))->lastTD3)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD3)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT3 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_face = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_face == ((PlayerInfo*)(peer->data))->lastTD4)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD4)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT4 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_face = 0;
															sendClothes(peer);
														}
													}

													if (((PlayerInfo*)(peer->data))->cloth_feet == ((PlayerInfo*)(peer->data))->lastTD1)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD1)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT1 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_feet = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_feet == ((PlayerInfo*)(peer->data))->lastTD2)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD2)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT2 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_feet = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_feet == ((PlayerInfo*)(peer->data))->lastTD3)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD3)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT3 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_feet = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_feet == ((PlayerInfo*)(peer->data))->lastTD4)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD4)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT4 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_feet = 0;
															sendClothes(peer);
														}
													}

													if (((PlayerInfo*)(peer->data))->cloth_hair == ((PlayerInfo*)(peer->data))->lastTD1)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD1)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT1 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_hair = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_hair == ((PlayerInfo*)(peer->data))->lastTD2)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD2)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT2 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_hair = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_hair == ((PlayerInfo*)(peer->data))->lastTD3)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD3)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT3 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_hair = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_hair == ((PlayerInfo*)(peer->data))->lastTD4)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD4)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT4 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_hair = 0;
															sendClothes(peer);
														}
													}

													if (((PlayerInfo*)(peer->data))->cloth_hand == ((PlayerInfo*)(peer->data))->lastTD1)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD1)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT1 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_hand = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_hand == ((PlayerInfo*)(peer->data))->lastTD2)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD2)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT2 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_hand = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_hand == ((PlayerInfo*)(peer->data))->lastTD3)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD3)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT3 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_hand = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_hand == ((PlayerInfo*)(peer->data))->lastTD4)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD4)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT4 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_hand = 0;
															sendClothes(peer);
														}
													}

													if (((PlayerInfo*)(peer->data))->cloth_mask == ((PlayerInfo*)(peer->data))->lastTD1)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD1)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT1 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_mask = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_mask == ((PlayerInfo*)(peer->data))->lastTD2)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD2)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT2 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_mask = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_mask == ((PlayerInfo*)(peer->data))->lastTD3)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD3)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT3 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_mask = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_mask == ((PlayerInfo*)(peer->data))->lastTD4)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD4)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT4 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_mask = 0;
															sendClothes(peer);
														}
													}

													if (((PlayerInfo*)(peer->data))->cloth_necklace == ((PlayerInfo*)(peer->data))->lastTD1)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD1)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT1 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_necklace = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_necklace == ((PlayerInfo*)(peer->data))->lastTD2)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD2)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT2 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_necklace = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_necklace == ((PlayerInfo*)(peer->data))->lastTD3)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD3)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT3 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_necklace = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_necklace == ((PlayerInfo*)(peer->data))->lastTD4)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD4)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT4 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_necklace = 0;
															sendClothes(peer);
														}
													}

													if (((PlayerInfo*)(peer->data))->cloth_shirt == ((PlayerInfo*)(peer->data))->lastTD1)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD1)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT1 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_shirt = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_shirt == ((PlayerInfo*)(peer->data))->lastTD2)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD2)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT2 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_shirt = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_shirt == ((PlayerInfo*)(peer->data))->lastTD3)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD3)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT3 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_shirt = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_shirt == ((PlayerInfo*)(peer->data))->lastTD4)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD4)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT4 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_shirt = 0;
															sendClothes(peer);
														}
													}

													if (((PlayerInfo*)(peer->data))->cloth_pants == ((PlayerInfo*)(peer->data))->lastTD1)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD1)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT1 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_pants = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_pants == ((PlayerInfo*)(peer->data))->lastTD2)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD2)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT2 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_pants = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_pants == ((PlayerInfo*)(peer->data))->lastTD3)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD3)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT3 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_pants = 0;
															sendClothes(peer);
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_pants == ((PlayerInfo*)(peer->data))->lastTD4)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastTD4)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(peer->data))->lastCT4 == 0)
														{
															((PlayerInfo*)(peer->data))->cloth_pants = 0;
															sendClothes(peer);
														}
													}
													//End Peer
													//Current Peer
													if (((PlayerInfo*)(currentPeer->data))->cloth_ances == ((PlayerInfo*)(currentPeer->data))->lastTD1)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD1)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT1 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_ances = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_ances == ((PlayerInfo*)(currentPeer->data))->lastTD2)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD2)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT2 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_ances = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_ances == ((PlayerInfo*)(currentPeer->data))->lastTD3)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD3)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT3 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_ances = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_ances == ((PlayerInfo*)(currentPeer->data))->lastTD4)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD4)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT4 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_ances = 0;
															sendClothes(currentPeer);
														}
													}

													if (((PlayerInfo*)(currentPeer->data))->cloth_back == ((PlayerInfo*)(currentPeer->data))->lastTD1)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD1)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT1 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_back = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_back == ((PlayerInfo*)(currentPeer->data))->lastTD2)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD2)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT2 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_back = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_back == ((PlayerInfo*)(currentPeer->data))->lastTD3)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD3)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT3 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_back = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_back == ((PlayerInfo*)(currentPeer->data))->lastTD4)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD4)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT4 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_back = 0;
															sendClothes(currentPeer);
														}
													}

													if (((PlayerInfo*)(currentPeer->data))->cloth_face == ((PlayerInfo*)(currentPeer->data))->lastTD1)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD1)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT1 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_face = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_face == ((PlayerInfo*)(currentPeer->data))->lastTD2)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD2)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT2 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_face = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_face == ((PlayerInfo*)(currentPeer->data))->lastTD3)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD3)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT3 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_face = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_face == ((PlayerInfo*)(currentPeer->data))->lastTD4)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD4)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT4 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_face = 0;
															sendClothes(currentPeer);
														}
													}

													if (((PlayerInfo*)(currentPeer->data))->cloth_feet == ((PlayerInfo*)(currentPeer->data))->lastTD1)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD1)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT1 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_feet = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_feet == ((PlayerInfo*)(currentPeer->data))->lastTD2)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD2)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT2 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_feet = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_feet == ((PlayerInfo*)(currentPeer->data))->lastTD3)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD3)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT3 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_feet = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_feet == ((PlayerInfo*)(currentPeer->data))->lastTD4)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD4)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT4 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_feet = 0;
															sendClothes(currentPeer);
														}
													}

													if (((PlayerInfo*)(currentPeer->data))->cloth_hair == ((PlayerInfo*)(currentPeer->data))->lastTD1)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD1)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT1 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_hair = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_hair == ((PlayerInfo*)(currentPeer->data))->lastTD2)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD2)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT2 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_hair = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_hair == ((PlayerInfo*)(currentPeer->data))->lastTD3)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD3)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT3 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_hair = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_hair == ((PlayerInfo*)(currentPeer->data))->lastTD4)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD4)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT4 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_hair = 0;
															sendClothes(currentPeer);
														}
													}

													if (((PlayerInfo*)(currentPeer->data))->cloth_hand == ((PlayerInfo*)(currentPeer->data))->lastTD1)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD1)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT1 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_hand = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_hand == ((PlayerInfo*)(currentPeer->data))->lastTD2)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD2)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT2 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_hand = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_hand == ((PlayerInfo*)(currentPeer->data))->lastTD3)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD3)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT3 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_hand = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_hand == ((PlayerInfo*)(currentPeer->data))->lastTD4)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD4)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT4 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_hand = 0;
															sendClothes(currentPeer);
														}
													}

													if (((PlayerInfo*)(currentPeer->data))->cloth_mask == ((PlayerInfo*)(currentPeer->data))->lastTD1)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD1)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT1 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_mask = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_mask == ((PlayerInfo*)(currentPeer->data))->lastTD2)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD2)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT2 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_mask = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_mask == ((PlayerInfo*)(currentPeer->data))->lastTD3)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD3)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT3 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_mask = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_mask == ((PlayerInfo*)(currentPeer->data))->lastTD4)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD4)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT4 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_mask = 0;
															sendClothes(currentPeer);
														}
													}

													if (((PlayerInfo*)(currentPeer->data))->cloth_necklace == ((PlayerInfo*)(currentPeer->data))->lastTD1)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD1)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT1 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_necklace = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_necklace == ((PlayerInfo*)(currentPeer->data))->lastTD2)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD2)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT2 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_necklace = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_necklace == ((PlayerInfo*)(currentPeer->data))->lastTD3)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD3)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT3 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_necklace = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_necklace == ((PlayerInfo*)(currentPeer->data))->lastTD4)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD4)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT4 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_necklace = 0;
															sendClothes(currentPeer);
														}
													}

													if (((PlayerInfo*)(currentPeer->data))->cloth_shirt == ((PlayerInfo*)(currentPeer->data))->lastTD1)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD1)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT1 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_shirt = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_shirt == ((PlayerInfo*)(currentPeer->data))->lastTD2)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD2)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT2 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_shirt = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_shirt == ((PlayerInfo*)(currentPeer->data))->lastTD3)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD3)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT3 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_shirt = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_shirt == ((PlayerInfo*)(currentPeer->data))->lastTD4)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD4)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT4 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_shirt = 0;
															sendClothes(currentPeer);
														}
													}

													if (((PlayerInfo*)(currentPeer->data))->cloth_pants == ((PlayerInfo*)(currentPeer->data))->lastTD1)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD1)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT1 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_pants = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_pants == ((PlayerInfo*)(currentPeer->data))->lastTD2)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD2)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT2 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_pants = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_pants == ((PlayerInfo*)(currentPeer->data))->lastTD3)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD3)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT3 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_pants = 0;
															sendClothes(currentPeer);
														}
													}
													else if (((PlayerInfo*)(currentPeer->data))->cloth_pants == ((PlayerInfo*)(currentPeer->data))->lastTD4)
													{
														short int currentItemCount = 0;
														for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
														{
															if (((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(currentPeer->data))->lastTD4)
															{
																currentItemCount = (unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount;
																if (currentItemCount < 0)
																{
																	currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount);
																}
															}
														}
														if (currentItemCount - ((PlayerInfo*)(currentPeer->data))->lastCT4 == 0)
														{
															((PlayerInfo*)(currentPeer->data))->cloth_pants = 0;
															sendClothes(currentPeer);
														}
													}
													//End Current Peer
													OnConsoleMessageAll(peer, "`w" + ((PlayerInfo*)(peer->data))->displayName + " `1traded " + cpeertraded + " to `w" + ((PlayerInfo*)(currentPeer->data))->displayName);
													OnConsoleMessageAll(peer, "`w" + ((PlayerInfo*)(currentPeer->data))->displayName + " `1traded " + peertraded + " to `w" + ((PlayerInfo*)(peer->data))->displayName);
													((PlayerInfo*)(peer->data))->lastTradeAcceptCount = 0;
													((PlayerInfo*)(currentPeer->data))->lastTradeAcceptCount = 0;
													((PlayerInfo*)(peer->data))->lastTradeNetID = 0;
													((PlayerInfo*)(currentPeer->data))->lastTradeNetID = 0;
													((PlayerInfo*)(peer->data))->isTradingWithUser = 0;
													((PlayerInfo*)(currentPeer->data))->isTradingWithUser = 0;
													((PlayerInfo*)(peer->data))->isDoTrade = 0;
													((PlayerInfo*)(currentPeer->data))->isDoTrade = 0;
													((PlayerInfo*)(peer->data))->lastTD1 = 0;
													((PlayerInfo*)(peer->data))->lastTD2 = 0;
													((PlayerInfo*)(peer->data))->lastTD3 = 0;
													((PlayerInfo*)(peer->data))->lastTD4 = 0;
													((PlayerInfo*)(peer->data))->lastCT1 = 0;
													((PlayerInfo*)(peer->data))->lastCT2 = 0;
													((PlayerInfo*)(peer->data))->lastCT3 = 0;
													((PlayerInfo*)(peer->data))->lastCT4 = 0;
													((PlayerInfo*)(currentPeer->data))->lastTD1 = 0;
													((PlayerInfo*)(currentPeer->data))->lastTD2 = 0;
													((PlayerInfo*)(currentPeer->data))->lastTD3 = 0;
													((PlayerInfo*)(currentPeer->data))->lastTD4 = 0;
													((PlayerInfo*)(currentPeer->data))->lastCT1 = 0;
													((PlayerInfo*)(currentPeer->data))->lastCT2 = 0;
													((PlayerInfo*)(currentPeer->data))->lastCT3 = 0;
													((PlayerInfo*)(currentPeer->data))->lastCT4 = 0;
												}
												else
												{
													Player::OnConsoleMessage(peer, "`6[``Trade accepted, waiting for other player to accept`6]``");
													SendTalkSelf(currentPeer, "`6[``Trade accepted, waiting for other player to accept`6]``");
												}
											}
											else
											{
												Player::OnTextOverlay(peer, "The other person left the trade!");
												((PlayerInfo*)(peer->data))->currentTradeItems = "";
												((PlayerInfo*)(peer->data))->lastTradeAcceptCount = 0;
												((PlayerInfo*)(peer->data))->lastTradeNetID = 0;
												((PlayerInfo*)(peer->data))->isTradingWithUser = 0;
												((PlayerInfo*)(peer->data))->isDoTrade = 0;
												((PlayerInfo*)(peer->data))->lastTD1 = 0;
												((PlayerInfo*)(peer->data))->lastTD2 = 0;
												((PlayerInfo*)(peer->data))->lastTD3 = 0;
												((PlayerInfo*)(peer->data))->lastTD4 = 0;
												((PlayerInfo*)(peer->data))->lastCT1 = 0;
												((PlayerInfo*)(peer->data))->lastCT2 = 0;
												((PlayerInfo*)(peer->data))->lastCT3 = 0;
												((PlayerInfo*)(peer->data))->lastCT4 = 0;
											}

										}
									}

								}
							}
							if (cch.find("action|trade_started") == 0) { // trading
								((PlayerInfo*)(peer->data))->isTradingWithUser++;
								((PlayerInfo*)(peer->data))->currentTradeItems = "";
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer))
									{

										if (((PlayerInfo*)(currentPeer->data))->netID == ((PlayerInfo*)(peer->data))->lastTradeNetID)
										{
											((PlayerInfo*)(peer->data))->currentTradeItems = "";
											if (((PlayerInfo*)(currentPeer->data))->isTradingWithUser == 1)
											{
												Player::OnTradeStatus(peer, ((PlayerInfo*)(currentPeer->data))->netID, ((PlayerInfo*)(currentPeer->data))->displayName + "`o", ((PlayerInfo*)(currentPeer->data))->currentTradeItems);
												Player::OnTradeStatus(currentPeer, ((PlayerInfo*)(peer->data))->netID, ((PlayerInfo*)(peer->data))->displayName + "`o", ((PlayerInfo*)(peer->data))->currentTradeItems);
											}
										}
									}

								}

							}
							if (cch.find("action|trade_cancel") == 0) { // trading
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer))
									{
										if (((PlayerInfo*)(currentPeer->data))->netID == ((PlayerInfo*)(peer->data))->lastTradeNetID && ((PlayerInfo*)(currentPeer->data))->lastTradeNetID == ((PlayerInfo*)(peer->data))->netID)
										{
											if (((PlayerInfo*)(currentPeer->data))->isTradingWithUser > 0) {
												Player::OnTextOverlay(peer, ((PlayerInfo*)(peer->data))->displayName + "`` has canceled the trade");
												Player::OnTextOverlay(currentPeer, ((PlayerInfo*)(peer->data))->displayName + "`` has canceled the trade");
												Player::OnForceTradeEnd(currentPeer);
												((PlayerInfo*)(peer->data))->currentTradeItems = "";
												((PlayerInfo*)(currentPeer->data))->currentTradeItems = "";
												((PlayerInfo*)(peer->data))->lastTradeAcceptCount = 0;
												((PlayerInfo*)(currentPeer->data))->lastTradeAcceptCount = 0;
												((PlayerInfo*)(peer->data))->lastTradeNetID = 0;
												((PlayerInfo*)(currentPeer->data))->lastTradeNetID = 0;
												((PlayerInfo*)(peer->data))->isTradingWithUser = 0;
												((PlayerInfo*)(currentPeer->data))->isTradingWithUser = 0;
												((PlayerInfo*)(peer->data))->isDoTrade = 0;
												((PlayerInfo*)(currentPeer->data))->isDoTrade = 0;
												((PlayerInfo*)(peer->data))->lastTD1 = 0;
												((PlayerInfo*)(peer->data))->lastTD2 = 0;
												((PlayerInfo*)(peer->data))->lastTD3 = 0;
												((PlayerInfo*)(peer->data))->lastTD4 = 0;
												((PlayerInfo*)(peer->data))->lastCT1 = 0;
												((PlayerInfo*)(peer->data))->lastCT2 = 0;
												((PlayerInfo*)(peer->data))->lastCT3 = 0;
												((PlayerInfo*)(peer->data))->lastCT4 = 0;
												((PlayerInfo*)(currentPeer->data))->lastTD1 = 0;
												((PlayerInfo*)(currentPeer->data))->lastTD2 = 0;
												((PlayerInfo*)(currentPeer->data))->lastTD3 = 0;
												((PlayerInfo*)(currentPeer->data))->lastTD4 = 0;
												((PlayerInfo*)(currentPeer->data))->lastCT1 = 0;
												((PlayerInfo*)(currentPeer->data))->lastCT2 = 0;
												((PlayerInfo*)(currentPeer->data))->lastCT3 = 0;
												((PlayerInfo*)(currentPeer->data))->lastCT4 = 0;
											}
											else
											{
												Player::OnForceTradeEnd(peer);
												((PlayerInfo*)(peer->data))->currentTradeItems = "";
												((PlayerInfo*)(peer->data))->lastTradeAcceptCount = 0;
												((PlayerInfo*)(peer->data))->lastTradeNetID = 0;
												((PlayerInfo*)(peer->data))->isTradingWithUser = 0;
												((PlayerInfo*)(peer->data))->isDoTrade = 0;
												((PlayerInfo*)(peer->data))->lastTD1 = 0;
												((PlayerInfo*)(peer->data))->lastTD2 = 0;
												((PlayerInfo*)(peer->data))->lastTD3 = 0;
												((PlayerInfo*)(peer->data))->lastTD4 = 0;
												((PlayerInfo*)(peer->data))->lastCT1 = 0;
												((PlayerInfo*)(peer->data))->lastCT2 = 0;
												((PlayerInfo*)(peer->data))->lastCT3 = 0;
												((PlayerInfo*)(peer->data))->lastCT4 = 0;
											}
										}
									}
								}
							}
							if (cch.find("action|mod_trade") == 0) {
								std::stringstream ss(cch);
								std::string to;
								int itemid = -1;
								while (std::getline(ss, to, '\n')) {
									vector<string> infoDat = explode("|", to);
									if (infoDat.size() == 2) {

										if (infoDat[0] == "itemID") itemid = atoi(infoDat[1].c_str());

									}
								}
								if (itemid == -1) continue;
								if (itemDefs.size() < itemid || itemid < 0) continue;
								if (itemid == 18 || itemid == 32)
								{
									Player::OnTextOverlay(peer, "You'd be sorry if you lost that!");
									Player::PlayAudio(peer, "audio/cant_place_tile.wav", 0);
									continue;
								}
								((PlayerInfo*)(peer->data))->lastTradeItem = itemid;
								short int currentItemCount = 0;
								for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
								{
									if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == itemid)
									{
										currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
										if (currentItemCount < 0)
										{
											currentItemCount = FixCountItem((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount);
										}
									}
								}
								sendDialog(peer, "set_default_color|`o\nadd_label_with_icon|big|`2Trade`` `w" + itemDefs.at(itemid).name + " ``|left|" + std::to_string(itemid) + "|\nadd_textbox|`2Trade how many?``|left|\nadd_text_input|trditemcount||" + to_string(currentItemCount) + "|5|\nend_dialog|trade_item|Cancel|OK|");
							}
							if (cch.find("action|trade_accept") == 0) {

								if (((PlayerInfo*)(peer->data))->currentTradeItems.find("accepted|1") != std::string::npos)
								{
									replace(((PlayerInfo*)(peer->data))->currentTradeItems, "accepted|1", "accepted|0");
									((PlayerInfo*)(peer->data))->lastTradeAcceptCount--;
								}
								else if (((PlayerInfo*)(peer->data))->currentTradeItems.find("accepted|0") != std::string::npos)
								{
									replace(((PlayerInfo*)(peer->data))->currentTradeItems, "accepted|0", "accepted|1");
									((PlayerInfo*)(peer->data))->lastTradeAcceptCount++;
								}
								else
								{
									((PlayerInfo*)(peer->data))->currentTradeItems += "accepted|1";
									((PlayerInfo*)(peer->data))->lastTradeAcceptCount++;
								}
								((PlayerInfo*)(peer->data))->lastTradeItems1 = cch;

								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer))
									{

										if (((PlayerInfo*)(currentPeer->data))->netID == ((PlayerInfo*)(peer->data))->lastTradeNetID)
										{
											Player::OnTradeStatus(currentPeer, ((PlayerInfo*)(peer->data))->netID, ((PlayerInfo*)(peer->data))->displayName, ((PlayerInfo*)(peer->data))->currentTradeItems);
											int accept = ((PlayerInfo*)(currentPeer->data))->lastTradeAcceptCount + ((PlayerInfo*)(peer->data))->lastTradeAcceptCount;
											if (accept == 2)
											{
												Player::OnForceTradeEnd(peer);
												Player::OnForceTradeEnd(currentPeer);
												((PlayerInfo*)(peer->data))->lastTradeAcceptCount = 0;
												string tradeitems = ((PlayerInfo*)(peer->data))->lastTradeItems1;
												string tradeitems1 = ((PlayerInfo*)(currentPeer->data))->lastTradeItems1;
												replace(tradeitems, "action|trade_accept", "");
												replace(tradeitems, "status|1", "");
												replace(tradeitems1, "action|trade_accept", "");
												replace(tradeitems1, "status|1", "");
												string tradeforitems;
												string tradeforitemspeer;
												string counttrade = "item|";
												int itemscount = countFreq(counttrade, tradeitems);
												int itemscountpeer = countFreq(counttrade, tradeitems1);
												//Peer
												if (itemscount == 0)
												{
													tradeforitems += "\nadd_label_with_icon|small|`oNothing!|left|1398|\nadd_spacer|small";
												}
												if (itemscount >= 1)
												{
													vector<string> itemsraw = explode("item|", tradeitems);
													vector<string> itemsraw1 = explode("|", itemsraw[1]);
													stringstream str_strms;
													str_strms << itemsraw1[0]; //convert the string s into stringstream
													string temp_strs;
													int temp_ints;
													while (!str_strms.eof()) {
														str_strms >> temp_strs; //take words into temp_str one by one
														if (stringstream(temp_strs) >> temp_ints) { //try to convert string to int
															cout << temp_ints << " ";
														}
														temp_strs = ""; //clear temp string
													}
													stringstream str_strm;
													str_strm << itemsraw1[1]; //convert the string s into stringstream
													string temp_str;
													int temp_int;
													while (!str_strm.eof()) {
														str_strm >> temp_str; //take words into temp_str one by one
														if (stringstream(temp_str) >> temp_int) { //try to convert string to int
															cout << temp_int << " ";
														}
														temp_str = ""; //clear temp string
													}
													int itemid = temp_ints;
													int itemcount = temp_int;
													string itemname = GetItemDef(itemid).name;
													tradeforitems += "\nadd_label_with_icon|small|(`w" + to_string(itemcount) + "``) " + itemname + "|left|" + to_string(itemid) + "|\n";
													((PlayerInfo*)(peer->data))->lastTD1 = itemid;
													((PlayerInfo*)(peer->data))->lastCT1 = itemcount;
													if (itemid == 1424) {
														string sellerName = ((PlayerInfo*)(peer->data))->rawName = getPlyersWorld(peer)->owner;
														string lastbuyerName = ((PlayerInfo*)(peer->data))->rawName;
														string sellingworld = ((PlayerInfo*)(peer->data))->lastSellWorld = getPlyersWorld(peer)->name;
														if (((PlayerInfo*)(currentPeer->data))->rawName == sellerName) {
															if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;
															((PlayerInfo*)(currentPeer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(currentPeer->data))->worldsowned.begin(), ((PlayerInfo*)(currentPeer->data))->worldsowned.end(), sellingworld), ((PlayerInfo*)(currentPeer->data))->worldsowned.end());
															sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
															sendWorldOffers(currentPeer);
															((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";
															break;
														}
													}
												}
												if (itemscount >= 2)
												{
													vector<string> itemsraw = explode("item|", tradeitems);
													vector<string> itemsraw1 = explode("|", itemsraw[2]);
													stringstream str_strms;
													str_strms << itemsraw1[0]; //convert the string s into stringstream
													string temp_strs;
													int temp_ints;
													while (!str_strms.eof()) {
														str_strms >> temp_strs; //take words into temp_str one by one
														if (stringstream(temp_strs) >> temp_ints) { //try to convert string to int
															cout << temp_ints << " ";
														}
														temp_strs = ""; //clear temp string
													}
													stringstream str_strm;
													str_strm << itemsraw1[1]; //convert the string s into stringstream
													string temp_str;
													int temp_int;
													while (!str_strm.eof()) {
														str_strm >> temp_str; //take words into temp_str one by one
														if (stringstream(temp_str) >> temp_int) { //try to convert string to int
															cout << temp_int << " ";
														}
														temp_str = ""; //clear temp string
													}
													int itemid = temp_ints;
													int itemcount = temp_int;
													string itemname = GetItemDef(itemid).name;
													tradeforitems += "\nadd_label_with_icon|small|(`w" + to_string(itemcount) + "``) " + itemname + "|left|" + to_string(itemid) + "|\n";
													((PlayerInfo*)(peer->data))->lastTD2 = itemid;
													((PlayerInfo*)(peer->data))->lastCT2 = itemcount;
													if (itemid == 1424) {
														string sellerName = ((PlayerInfo*)(peer->data))->rawName = getPlyersWorld(peer)->owner;
														string lastbuyerName = ((PlayerInfo*)(peer->data))->rawName;
														string sellingworld = ((PlayerInfo*)(peer->data))->lastSellWorld = getPlyersWorld(peer)->name;
														if (((PlayerInfo*)(currentPeer->data))->rawName == sellerName) {
															if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;
															((PlayerInfo*)(currentPeer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(currentPeer->data))->worldsowned.begin(), ((PlayerInfo*)(currentPeer->data))->worldsowned.end(), sellingworld), ((PlayerInfo*)(currentPeer->data))->worldsowned.end());
															sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
															sendWorldOffers(currentPeer);
															((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";
															break;
														}
													}
												}
												if (itemscount >= 3)
												{
													vector<string> itemsraw = explode("item|", tradeitems);
													vector<string> itemsraw1 = explode("|", itemsraw[3]);
													stringstream str_strms;
													str_strms << itemsraw1[0]; //convert the string s into stringstream
													string temp_strs;
													int temp_ints;
													while (!str_strms.eof()) {
														str_strms >> temp_strs; //take words into temp_str one by one
														if (stringstream(temp_strs) >> temp_ints) { //try to convert string to int
															cout << temp_ints << " ";
														}
														temp_strs = ""; //clear temp string
													}
													stringstream str_strm;
													str_strm << itemsraw1[1]; //convert the string s into stringstream
													string temp_str;
													int temp_int;
													while (!str_strm.eof()) {
														str_strm >> temp_str; //take words into temp_str one by one
														if (stringstream(temp_str) >> temp_int) { //try to convert string to int
															cout << temp_int << " ";
														}
														temp_str = ""; //clear temp string
													}
													int itemid = temp_ints;
													int itemcount = temp_int;
													string itemname = GetItemDef(itemid).name;
													tradeforitems += "\nadd_label_with_icon|small|(`w" + to_string(itemcount) + "``) " + itemname + "|left|" + to_string(itemid) + "|\n";
													((PlayerInfo*)(peer->data))->lastTD3 = itemid;
													((PlayerInfo*)(peer->data))->lastCT3 = itemcount;
													if (itemid == 1424) {
														string sellerName = ((PlayerInfo*)(peer->data))->rawName = getPlyersWorld(peer)->owner;
														string lastbuyerName = ((PlayerInfo*)(peer->data))->rawName;
														string sellingworld = ((PlayerInfo*)(peer->data))->lastSellWorld = getPlyersWorld(peer)->name;
														if (((PlayerInfo*)(currentPeer->data))->rawName == sellerName) {
															if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;
															((PlayerInfo*)(currentPeer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(currentPeer->data))->worldsowned.begin(), ((PlayerInfo*)(currentPeer->data))->worldsowned.end(), sellingworld), ((PlayerInfo*)(currentPeer->data))->worldsowned.end());
															sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
															sendWorldOffers(currentPeer);
															((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";
															break;
														}
													}
												}
												if (itemscount == 4)
												{
													vector<string> itemsraw = explode("item|", tradeitems);
													vector<string> itemsraw1 = explode("|", itemsraw[4]);
													stringstream str_strms;
													str_strms << itemsraw1[0]; //convert the string s into stringstream
													string temp_strs;
													int temp_ints;
													while (!str_strms.eof()) {
														str_strms >> temp_strs; //take words into temp_str one by one
														if (stringstream(temp_strs) >> temp_ints) { //try to convert string to int
															cout << temp_ints << " ";
														}
														temp_strs = ""; //clear temp string
													}
													stringstream str_strm;
													str_strm << itemsraw1[1]; //convert the string s into stringstream
													string temp_str;
													int temp_int;
													while (!str_strm.eof()) {
														str_strm >> temp_str; //take words into temp_str one by one
														if (stringstream(temp_str) >> temp_int) { //try to convert string to int
															cout << temp_int << " ";
														}
														temp_str = ""; //clear temp string
													}
													int itemid = temp_ints;
													int itemcount = temp_int;
													string itemname = GetItemDef(itemid).name;
													tradeforitems += "\nadd_label_with_icon|small|(`w" + to_string(itemcount) + "``) " + itemname + "|left|" + to_string(itemid) + "|\n";
													((PlayerInfo*)(peer->data))->lastTD4 = itemid;
													((PlayerInfo*)(peer->data))->lastCT4 = itemcount;
													if (itemid == 1424) {
														string sellerName = ((PlayerInfo*)(peer->data))->rawName = getPlyersWorld(peer)->owner;
														string lastbuyerName = ((PlayerInfo*)(peer->data))->rawName;
														string sellingworld = ((PlayerInfo*)(peer->data))->lastSellWorld = getPlyersWorld(peer)->name;
														if (((PlayerInfo*)(currentPeer->data))->rawName == sellerName) {
															if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;
															((PlayerInfo*)(currentPeer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(currentPeer->data))->worldsowned.begin(), ((PlayerInfo*)(currentPeer->data))->worldsowned.end(), sellingworld), ((PlayerInfo*)(currentPeer->data))->worldsowned.end());
															sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
															sendWorldOffers(currentPeer);
															((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";
															break;
														}
													}
												}
												//End Peer
												//Current Peer
												if (itemscountpeer == 0)
												{
													tradeforitemspeer += "\nadd_label_with_icon|small|`oNothing!|left|1398|\nadd_spacer|small";
												}
												if (itemscountpeer >= 1)
												{
													vector<string> itemsraw = explode("item|", tradeitems1);
													vector<string> itemsraw1 = explode("|", itemsraw[1]);
													stringstream str_strms;
													str_strms << itemsraw1[0]; //convert the string s into stringstream
													string temp_strs;
													int temp_ints;
													while (!str_strms.eof()) {
														str_strms >> temp_strs; //take words into temp_str one by one
														if (stringstream(temp_strs) >> temp_ints) { //try to convert string to int
															cout << temp_ints << " ";
														}
														temp_strs = ""; //clear temp string
													}
													stringstream str_strm;
													str_strm << itemsraw1[1]; //convert the string s into stringstream
													string temp_str;
													int temp_int;
													while (!str_strm.eof()) {
														str_strm >> temp_str; //take words into temp_str one by one
														if (stringstream(temp_str) >> temp_int) { //try to convert string to int
															cout << temp_int << " ";
														}
														temp_str = ""; //clear temp string
													}
													int itemid = temp_ints;
													int itemcount = temp_int;
													string itemname = GetItemDef(itemid).name;
													tradeforitemspeer += "\nadd_label_with_icon|small|(`w" + to_string(itemcount) + "``) " + itemname + "|left|" + to_string(itemid) + "|\n";
													((PlayerInfo*)(currentPeer->data))->lastTD1 = itemid;
													((PlayerInfo*)(currentPeer->data))->lastCT1 = itemcount;
													if (itemid == 1424) {
														string sellerName = ((PlayerInfo*)(peer->data))->rawName = getPlyersWorld(peer)->owner;
														string lastbuyerName = ((PlayerInfo*)(peer->data))->rawName;
														string sellingworld = ((PlayerInfo*)(peer->data))->lastSellWorld = getPlyersWorld(peer)->name;
														if (((PlayerInfo*)(currentPeer->data))->rawName == sellerName) {
															if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;
															((PlayerInfo*)(currentPeer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(currentPeer->data))->worldsowned.begin(), ((PlayerInfo*)(currentPeer->data))->worldsowned.end(), sellingworld), ((PlayerInfo*)(currentPeer->data))->worldsowned.end());
															sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
															sendWorldOffers(currentPeer);
															((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";
															break;
														}
													}
												}
												if (itemscountpeer >= 2)
												{
													vector<string> itemsraw = explode("item|", tradeitems1);
													vector<string> itemsraw1 = explode("|", itemsraw[2]);
													stringstream str_strms;
													str_strms << itemsraw1[0]; //convert the string s into stringstream
													string temp_strs;
													int temp_ints;
													while (!str_strms.eof()) {
														str_strms >> temp_strs; //take words into temp_str one by one
														if (stringstream(temp_strs) >> temp_ints) { //try to convert string to int
															cout << temp_ints << " ";
														}
														temp_strs = ""; //clear temp string
													}
													stringstream str_strm;
													str_strm << itemsraw1[1]; //convert the string s into stringstream
													string temp_str;
													int temp_int;
													while (!str_strm.eof()) {
														str_strm >> temp_str; //take words into temp_str one by one
														if (stringstream(temp_str) >> temp_int) { //try to convert string to int
															cout << temp_int << " ";
														}
														temp_str = ""; //clear temp string
													}
													int itemid = temp_ints;
													int itemcount = temp_int;
													string itemname = GetItemDef(itemid).name;
													tradeforitemspeer += "\nadd_label_with_icon|small|(`w" + to_string(itemcount) + "``) " + itemname + "|left|" + to_string(itemid) + "|\n";
													((PlayerInfo*)(currentPeer->data))->lastTD2 = itemid;
													((PlayerInfo*)(currentPeer->data))->lastCT2 = itemcount;
													if (itemid == 1424) {
														string sellerName = ((PlayerInfo*)(peer->data))->rawName = getPlyersWorld(peer)->owner;
														string lastbuyerName = ((PlayerInfo*)(peer->data))->rawName;
														string sellingworld = ((PlayerInfo*)(peer->data))->lastSellWorld = getPlyersWorld(peer)->name;
														if (((PlayerInfo*)(currentPeer->data))->rawName == sellerName) {
															if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;
															((PlayerInfo*)(currentPeer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(currentPeer->data))->worldsowned.begin(), ((PlayerInfo*)(currentPeer->data))->worldsowned.end(), sellingworld), ((PlayerInfo*)(currentPeer->data))->worldsowned.end());
															sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
															sendWorldOffers(currentPeer);
															((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";
															break;
														}
													}
												}
												if (itemscountpeer >= 3)
												{
													vector<string> itemsraw = explode("item|", tradeitems1);
													vector<string> itemsraw1 = explode("|", itemsraw[3]);
													stringstream str_strms;
													str_strms << itemsraw1[0]; //convert the string s into stringstream
													string temp_strs;
													int temp_ints;
													while (!str_strms.eof()) {
														str_strms >> temp_strs; //take words into temp_str one by one
														if (stringstream(temp_strs) >> temp_ints) { //try to convert string to int
															cout << temp_ints << " ";
														}
														temp_strs = ""; //clear temp string
													}
													stringstream str_strm;
													str_strm << itemsraw1[1]; //convert the string s into stringstream
													string temp_str;
													int temp_int;
													while (!str_strm.eof()) {
														str_strm >> temp_str; //take words into temp_str one by one
														if (stringstream(temp_str) >> temp_int) { //try to convert string to int
															cout << temp_int << " ";
														}
														temp_str = ""; //clear temp string
													}
													int itemid = temp_ints;
													int itemcount = temp_int;
													string itemname = GetItemDef(itemid).name;
													tradeforitemspeer += "\nadd_label_with_icon|small|(`w" + to_string(itemcount) + "``) " + itemname + "|left|" + to_string(itemid) + "|\n";
													((PlayerInfo*)(currentPeer->data))->lastTD3 = itemid;
													((PlayerInfo*)(currentPeer->data))->lastCT3 = itemcount;
													if (itemid == 1424) {
														string sellerName = ((PlayerInfo*)(peer->data))->rawName = getPlyersWorld(peer)->owner;
														string lastbuyerName = ((PlayerInfo*)(peer->data))->rawName;
														string sellingworld = ((PlayerInfo*)(peer->data))->lastSellWorld = getPlyersWorld(peer)->name;
														if (((PlayerInfo*)(currentPeer->data))->rawName == sellerName) {
															if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;
															((PlayerInfo*)(currentPeer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(currentPeer->data))->worldsowned.begin(), ((PlayerInfo*)(currentPeer->data))->worldsowned.end(), sellingworld), ((PlayerInfo*)(currentPeer->data))->worldsowned.end());
															sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
															sendWorldOffers(currentPeer);
															((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";
															break;
														}
													}
												}
												if (itemscountpeer == 4)
												{
													vector<string> itemsraw = explode("item|", tradeitems1);
													vector<string> itemsraw1 = explode("|", itemsraw[4]);
													stringstream str_strms;
													str_strms << itemsraw1[0]; //convert the string s into stringstream
													string temp_strs;
													int temp_ints;
													while (!str_strms.eof()) {
														str_strms >> temp_strs; //take words into temp_str one by one
														if (stringstream(temp_strs) >> temp_ints) { //try to convert string to int
															cout << temp_ints << " ";
														}
														temp_strs = ""; //clear temp string
													}
													stringstream str_strm;
													str_strm << itemsraw1[1]; //convert the string s into stringstream
													string temp_str;
													int temp_int;
													while (!str_strm.eof()) {
														str_strm >> temp_str; //take words into temp_str one by one
														if (stringstream(temp_str) >> temp_int) { //try to convert string to int
															cout << temp_int << " ";
														}
														temp_str = ""; //clear temp string
													}
													int itemid = temp_ints;
													int itemcount = temp_int;
													string itemname = GetItemDef(itemid).name;
													tradeforitemspeer += "\nadd_label_with_icon|small|(`w" + to_string(itemcount) + "``) " + itemname + "|left|" + to_string(itemid) + "|\n";
													((PlayerInfo*)(currentPeer->data))->lastTD4 = itemid;
													((PlayerInfo*)(currentPeer->data))->lastCT4 = itemcount;
													if (itemid == 1424) {
														string sellerName = ((PlayerInfo*)(peer->data))->rawName = getPlyersWorld(peer)->owner;
														string lastbuyerName = ((PlayerInfo*)(peer->data))->rawName;
														string sellingworld = ((PlayerInfo*)(peer->data))->lastSellWorld = getPlyersWorld(peer)->name;
														if (((PlayerInfo*)(currentPeer->data))->rawName == sellerName) {
															if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;
															((PlayerInfo*)(currentPeer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(currentPeer->data))->worldsowned.begin(), ((PlayerInfo*)(currentPeer->data))->worldsowned.end(), sellingworld), ((PlayerInfo*)(currentPeer->data))->worldsowned.end());
															sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
															sendWorldOffers(currentPeer);
															((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";
															break;
														}
													}
												}
												//End Current Peer
												sendDialog(peer, "set_default_color|`o\nadd_label_with_icon|big|`wTrade Confirmation``|left|1366|\nadd_spacer|small|\nadd_textbox|`4You'll give:``|left|add_spacer|small|" + tradeforitemspeer + "add_spacer|small|\nadd_textbox|`2You'll get:``|left|" + tradeforitems + "add_spacer|\nadd_button|accept|Do The Trade!|noflags|0|0|\nadd_button|backcanceltrade|Cancel|noflags|0|0|\nend_dialog|trade_confirm|||");
												sendDialog(currentPeer, "set_default_color|`o\nadd_label_with_icon|big|`wTrade Confirmation``|left|1366|\nadd_spacer|small|\nadd_textbox|`4You'll give:``|left|add_spacer|small|" + tradeforitems + "add_spacer|small|\nadd_textbox|`2You'll get:``|left|" + tradeforitemspeer + "add_spacer|\nadd_button|accept|Do The Trade!|noflags|0|0|\nadd_button|backcanceltrade|Cancel|noflags|0|0|\nend_dialog|trade_confirm|||");

											}
										}
									}
								}
							}
							if (cch.find("action|rem_trade") == 0) {
								std::stringstream ss(cch);
								std::string to;
								int itemid = -1;
								int count = 0;
								while (std::getline(ss, to, '\n')) {
									vector<string> infoDat = explode("|", to);
									if (infoDat.size() == 2) {

										if (infoDat[0] == "itemID") itemid = atoi(infoDat[1].c_str());
										if (infoDat[0] == "count") count = atoi(infoDat[1].c_str());

									}
								}
								if (itemid == -1) continue;
								if (itemDefs.size() < itemid || itemid < 0) continue;
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer))
									{
										if (((PlayerInfo*)(currentPeer->data))->netID == ((PlayerInfo*)(peer->data))->lastTradeNetID)
										{
											if (((PlayerInfo*)(peer->data))->lastTD1 == itemid)
											{
												((PlayerInfo*)(peer->data))->lastTD1 = 0;
												((PlayerInfo*)(peer->data))->lastCT1 = 0;
											}
											else if (((PlayerInfo*)(peer->data))->lastTD2 == itemid)
											{
												((PlayerInfo*)(peer->data))->lastTD2 = 0;
												((PlayerInfo*)(peer->data))->lastCT2 = 0;
											}
											else if (((PlayerInfo*)(peer->data))->lastTD3 == itemid)
											{
												((PlayerInfo*)(peer->data))->lastTD3 = 0;
												((PlayerInfo*)(peer->data))->lastCT3 = 0;
											}
											else if (((PlayerInfo*)(peer->data))->lastTD4 == itemid)
											{
												((PlayerInfo*)(peer->data))->lastTD4 = 0;
												((PlayerInfo*)(peer->data))->lastCT4 = 0;
											}
											replace(((PlayerInfo*)(peer->data))->currentTradeItems, "add_slot|" + to_string(itemid), "");
											Player::OnTradeStatus(peer, ((PlayerInfo*)(peer->data))->netID, ((PlayerInfo*)(peer->data))->displayName, ((PlayerInfo*)(peer->data))->currentTradeItems);
											Player::OnTradeStatus(currentPeer, ((PlayerInfo*)(peer->data))->netID, ((PlayerInfo*)(peer->data))->displayName, ((PlayerInfo*)(peer->data))->currentTradeItems);
											Player::OnTextOverlay(peer, "The deal has changed");
											Player::OnTextOverlay(currentPeer, "The deal has changed");
											Player::PlayAudio(peer, "audio/tile_removed.wav", 0);
										Player::PlayAudio(currentPeer, "audio/tile_removed.wav", 0);
										}

									}
								}
							}


							string dropText = "action|drop\n|itemID|"; // drop funkcianalumas
							if (cch.find(dropText) == 0)
							{
								//cout << "#dropas" << endl;
								if (((PlayerInfo*)(peer->data))->haveGrowId == true) {
									if (((PlayerInfo*)(peer->data))->level < 10)
									{
										Player::OnTextOverlay(peer, "`^This Feature Only `9Available `^For `9Level 10 `^And `@Higher!");
										continue;
									}
									if (((PlayerInfo*)(peer->data))->isCursed == true)
									{
										Player::OnConsoleMessage(peer, "`4You are cursed now!");
										continue;
									}
									std::stringstream ss(cch);
									std::string to;
									int idx = -1;
									int count = -1;
									while (std::getline(ss, to, '\n')) {
										vector<string> infoDat = explode("|", to);
										if (infoDat.size() == 3) {
											if (infoDat[1] == "itemID") idx = atoi(infoDat[2].c_str());
											if (infoDat[1] == "count") count = atoi(infoDat[2].c_str());
										}
									}
									((PlayerInfo*)(peer->data))->lastdropitem = idx;
									((PlayerInfo*)(peer->data))->lastdropitemcount = count;
									if (idx == -1) continue;
									if (itemDefs.size() < idx || idx < 0) continue;
									if (((PlayerInfo*)(peer->data))->lastdropitem == 18 || ((PlayerInfo*)(peer->data))->lastdropitem == 32 || ((PlayerInfo*)(peer->data))->lastdropitem == 6336 || ((PlayerInfo*)(peer->data))->lastdropitem == 8552 || ((PlayerInfo*)(peer->data))->lastdropitem == 1738 || ((PlayerInfo*)(peer->data))->lastdropitem == 9482 || ((PlayerInfo*)(peer->data))->lastdropitem == 9356 || ((PlayerInfo*)(peer->data))->lastdropitem == 9492 || ((PlayerInfo*)(peer->data))->lastdropitem == 1672 || ((PlayerInfo*)(peer->data))->lastdropitem == 8774 || ((PlayerInfo*)(peer->data))->lastdropitem == 1790 || ((PlayerInfo*)(peer->data))->lastdropitem == 2592 || ((PlayerInfo*)(peer->data))->lastdropitem == 1784 || ((PlayerInfo*)(peer->data))->lastdropitem == 1792 || ((PlayerInfo*)(peer->data))->lastdropitem == 1794 || ((PlayerInfo*)(peer->data))->lastdropitem == 7734 || ((PlayerInfo*)(peer->data))->lastdropitem == 8306 || ((PlayerInfo*)(peer->data))->lastdropitem == 9458) {
										Player::OnTextOverlay(peer, "You can't drop that.");
										continue;
									}
									else {
										Player::OnDialogRequest(peer, "add_label_with_icon|big|`wDrop " + itemDefs.at(idx).name + "``|left|" + std::to_string(idx) + "|\nadd_textbox|`oHow many to drop?|\nadd_text_input|dropitemcount|||3||\nadd_textbox|`4Warning: `oAny player who asks you to drop items is scamming you. We cannot restore scammed items.|\nend_dialog|dropdialog|Cancel|Ok|\n");
										continue;
									}
								}
								else {
									Player::OnTextOverlay(peer, "`^This Feature Only `9Available `^For Registered Players!");
								}
							}
							string trashText = "action|trash\n|itemID|"; // drop funkcianalumas
							if (cch.find(trashText) == 0)
							{
								//cout << "#trashas" << endl;
								std::stringstream ss(cch);
								std::string to;
								int idx = -1;
								int count = -1;
								while (std::getline(ss, to, '\n')) {
									vector<string> infoDat = explode("|", to);
									if (infoDat.size() == 3) {
										if (infoDat[1] == "itemID") idx = atoi(infoDat[2].c_str());
										if (infoDat[1] == "count") count = atoi(infoDat[2].c_str());
									}
								}
								((PlayerInfo*)(peer->data))->lasttrashitem = idx;
								((PlayerInfo*)(peer->data))->lasttrashitemcount = count;
								if (idx == -1) continue;
								if (itemDefs.size() < idx || idx < 0) continue;
								if (((PlayerInfo*)(peer->data))->lasttrashitem == 18 || ((PlayerInfo*)(peer->data))->lasttrashitem == 32 || ((PlayerInfo*)(peer->data))->lasttrashitem == 6336 || ((PlayerInfo*)(peer->data))->lasttrashitem == 8552 || ((PlayerInfo*)(peer->data))->lasttrashitem == 1738 || ((PlayerInfo*)(peer->data))->lasttrashitem == 9482 || ((PlayerInfo*)(peer->data))->lasttrashitem == 9356 || ((PlayerInfo*)(peer->data))->lasttrashitem == 9492 || ((PlayerInfo*)(peer->data))->lasttrashitem == 1672 || ((PlayerInfo*)(peer->data))->lasttrashitem == 8774 || ((PlayerInfo*)(peer->data))->lasttrashitem == 1790 || ((PlayerInfo*)(peer->data))->lasttrashitem == 2592 || ((PlayerInfo*)(peer->data))->lasttrashitem == 1784 || ((PlayerInfo*)(peer->data))->lasttrashitem == 1792 || ((PlayerInfo*)(peer->data))->lasttrashitem == 1794 || ((PlayerInfo*)(peer->data))->lasttrashitem == 7734 || ((PlayerInfo*)(peer->data))->lasttrashitem == 8306 || ((PlayerInfo*)(peer->data))->lasttrashitem == 9458) {
									Player::OnTextOverlay(peer, "You can't trash that.");
									continue;
								}
								else {
									Player::OnDialogRequest(peer, "add_label_with_icon|big|`wTrash " + itemDefs.at(idx).name + "``|left|" + std::to_string(idx) + "|\nadd_textbox|`oHow many to trash?|\nadd_text_input|trashitemcount|||3|\nend_dialog|trashdialog|Cancel|Ok|\n");
								}
							}
							if (cch.find("text|") != std::string::npos) {
								bool canchat = true;
								PlayerInfo* pData = ((PlayerInfo*)(peer->data));
								if (str.length() > 120)
								{
									Player::OnConsoleMessage(peer, "`4Too many symbols");
									continue;
								}
								if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") {
									break;
								}
								if (str.length() && str[0] == '/')
								{
									sendAction(peer, ((PlayerInfo*)(peer->data))->netID, str);
									if (str.find("/msg") != string::npos) {
										Player::OnConsoleMessage(peer, "CP:_PL:0_OID:_CT:[MSG]_ `6" + str);
									}
									else if (str.find("/r") != string::npos) {
										Player::OnConsoleMessage(peer, "CP:_PL:0_OID:_CT:[MSG]_ `6" + str);
									}
									else if (str.find("/sb") != string::npos) {
										Player::OnConsoleMessage(peer, "CP:_PL:0_OID:_CT:[SB]_ `6" + str);
									}
									else if (str.find("/ssb") != string::npos) {
										Player::OnConsoleMessage(peer, "CP:_PL:0_OID:_CT:[CB]_ `6" + str);
									}
									else {
										Player::OnConsoleMessage(peer, "`6" + str);
									}
								}
								else if (((PlayerInfo*)(peer->data))->taped == false) {
									sendChatMessage(peer, ((PlayerInfo*)(peer->data))->netID, str);
								}
								else {
									for (char c : str)
										if (c < 0x18 || std::all_of(str.begin(), str.end(), isspace))
										{
											canchat = false;
										}
									if (canchat)
									{
										if (std::experimental::filesystem::exists("timemuted/" + ((PlayerInfo*)(peer->data))->rawName + ".txt"))
										{
											using namespace std::chrono;

											int kiekDar = ((PlayerInfo*)(peer->data))->lastMuted - (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
											Player::OnConsoleMessage(peer, "`4You are muted now.`8 Your mute will expire in `2" + OutputBanTime(kiekDar / 1000) + "");
											const string mf[4] = { "mf ff mf fm","f fmf fmfmf fmm","mfm ff mf mf","mff ffmf mf " };
											string word = mf[rand() % 4];
											sendChatMessage(peer, ((PlayerInfo*)(peer->data))->netID, word);
											continue;
										}
										else
										{
											((PlayerInfo*)(peer->data))->taped = false;
											((PlayerInfo*)(peer->data))->isDuctaped = false;
											((PlayerInfo*)(peer->data))->cantsay = false;
											sendState(peer);
											sendClothes(peer);
										}
									}
								}
								if (((PlayerInfo*)(peer->data))->haveGrowId == true)
								{
									if (str == "/mod")
									{
										if (((PlayerInfo*)(peer->data))->adminLevel <= 777) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9MOD `^And `@Higher `^ranks!");
											continue;
										}
										if (world->name == "HELL") {
											Player::OnConsoleMessage(peer, "`^This World Is Too `bCursed `^For That...");
											continue;
										}
										if (getPlyersWorld(peer)->allowMod == false && ((PlayerInfo*)(peer->data))->rawName != world->owner) {
											if (((PlayerInfo*)(peer->data))->adminLevel >= 666) {
												((PlayerInfo*)(peer->data))->skinColor = atoi("-155");
												sendClothes(peer);
												((PlayerInfo*)(peer->data))->canDoubleJump = true;
												((PlayerInfo*)(peer->data))->canWalkInBlocks = true;
												sendState(peer);
												Player::OnConsoleMessage(peer, "`^Moderator Mode `2Enabled`^!``");
												continue;
											}
											Player::OnConsoleMessage(peer, "`9/mod `^Is `4Disabled `^In This World!");
										}
										else
										{
											((PlayerInfo*)(peer->data))->skinColor = atoi("-155");
											sendClothes(peer);
											((PlayerInfo*)(peer->data))->canDoubleJump = true;
											((PlayerInfo*)(peer->data))->canWalkInBlocks = true;
											sendState(peer);
										}
										Player::OnConsoleMessage(peer, "`^Moderator Mode `2Enabled`^!``");
										string text = "action|play_sfx\nfile|audio/secret.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);
										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete data;
									}
									else if (str == "/news")
									{
										sendnews(peer);
									}
									else if (str == "/mods") {
										if (((PlayerInfo*)(peer->data))->adminLevel <= 0) {
											Player::OnConsoleMessage(peer, "`9If you see this text, report it to Lim#1000!");
											continue;
										}
										string x;
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->adminLevel >= 777) {
												x.append("`^" + ((PlayerInfo*)(currentPeer->data))->tankIDName + "``, ");
											}
										}
										x = x.substr(0, x.length() - 2);
										Player::OnConsoleMessage(peer, "`5Moderators online: " + x);
									}
									else if (str == "/nicked") {
										if (((PlayerInfo*)(peer->data))->adminLevel >= 777) {
											string x = "";
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->adminLevel > 333) {
													if (((PlayerInfo*)(currentPeer->data))->isCreator == false) {
														string name = ((PlayerInfo*)(currentPeer->data))->displayName;
														if ((((PlayerInfo*)(currentPeer->data))->isNicked == true))
														{
															x.append("`w'" + ((PlayerInfo*)(currentPeer->data))->displayName + " " + "->" + ((PlayerInfo*)(currentPeer->data))->rawName + "``, ");
														}
													}
												}
											}
											x = x.substr(0, x.length() - 2);
											if (x == "")
											{
												Player::OnConsoleMessage(peer, "``Nicked vips/mods/devs: None visible.");
											}
											else
											{
												Player::OnConsoleMessage(peer, "``Nicked vips/mods/devs: " + x);
											}
										}
									}
									else if (str == "/go")
									{
										if (((PlayerInfo*)(peer->data))->isCursed == true)
										{
											GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are cursed now!"));
											ENetPacket* packet0 = enet_packet_create(p0.data,
												p0.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet0);
											delete p0.data;
											continue;
										}
										string act = ((PlayerInfo*)(peer->data))->lastSbbWorld;
										if (act == "") {
											GamePacket po = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Unable to track down the location of the broadcast."));
											ENetPacket* packet = enet_packet_create(po.data,
												po.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
										}
										else if (act == ((PlayerInfo*)(peer->data))->currentWorld) {
											GamePacket po = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Sorry, but you are already in the world!"));
											ENetPacket* packet = enet_packet_create(po.data,
												po.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
										}
										else {
											sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
											joinWorld(peer, act, 0, 0);
										}
									}
									else if (str == "/find")
									{
										Player::OnTextOverlay(peer, "`cThis command is now called `4/buy`c!");
									}
									else if (str == "/buy")
									{
										if (((PlayerInfo*)(peer->data))->haveGrowId)
										{
											if (((PlayerInfo*)(peer->data))->dotrade == true || ((PlayerInfo*)(peer->data))->istrading == true)
											{
												Player::OnTextOverlay(peer, "You cant do that while trading!");
												continue;
											}
											Player::OnDialogRequest(peer, "add_label_with_icon|big|`9Item Finder``|left|3146|\nadd_textbox|`^Enter a word below to Find the item!|\nadd_text_input|item|`^Item Name||30|\nend_dialog|findid|Cancel|Find the item!|\nadd_quick_exit|\n");
										}
									}
									else if (str == "/online") {
										string online = "";
										int total = 0;
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->adminLevel >= 0) {
												online += ((PlayerInfo*)(currentPeer->data))->displayName + "`o, `w";
												total++;
											}
										}
										Player::OnConsoleMessage(peer, "`5Players online [`wTotal: `2" + to_string(total) + "`5]: `w" + online);
									}
									else if (str.substr(0, 8) == "/summon ") {
										if (str.substr(8, cch.length() - 8 - 1) == "") continue;
										if (((PlayerInfo*)(peer->data))->rawName == str.substr(8, cch.length() - 8 - 1)) {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You can't summon yourself!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel >= 777) {
											string name = str.substr(8, str.length());
											ENetPeer* currentPeer;
											bool found = false;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->isCreator == true) { continue; }
												string name2 = ((PlayerInfo*)(currentPeer->data))->rawName;
												std::transform(name.begin(), name.end(), name.begin(), ::tolower);
												std::transform(name2.begin(), name2.end(), name2.begin(), ::tolower);
												if (name == name2) {
													if (((PlayerInfo*)(currentPeer->data))->currentWorld == "HELL" || ((PlayerInfo*)(currentPeer->data))->currentWorld == "EXIT" || ((PlayerInfo*)(currentPeer->data))->isCreator)
													{
														found = false;
													}
													else
													{
														GamePacket pox = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^You were `@Summoned `^By `#Moderator`^!"));
														ENetPacket* packetpox = enet_packet_create(pox.data,
															pox.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packetpox);
														int x = ((PlayerInfo*)(peer->data))->x;
														int y = ((PlayerInfo*)(peer->data))->y;
														string world = ((PlayerInfo*)(peer->data))->currentWorld;
														sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
														joinWorld(currentPeer, world, x, y);
														found = true;
													}
												}
											}
											if (found) {
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Summoning Player..."));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
											else {
												Player::OnConsoleMessage(peer, "`@Player `4Not Found `@Or Summoning the player is `4Prohibited`@!");
											}
										}
										else
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Only for admin and higher!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
									else if (str.substr(0, 6) == "/test ")
									{
											string a = str.substr(6, cch.length() - 6 - 1);
											GTDialog playerStore;
											playerStore.addItemWithCustomText(to_string(3), a, "askdganslda");
											//playerStore.addN();
											playerStore.addSpacer(SPACER_SMALL);
											playerStore.addSmallText("`$Item price:");
											playerStore.addSmallText("`$Item price:");
											playerStore.addSmallText("`$Item price:");
											playerStore.addSmallText("`$Item price:");
											playerStore.addSmallText("`$Item price:");
											
											playerStore.addSpacer(SPACER_SMALL);
											playerStore.addQuickExit();
											playerStore.endDialog("Close", "", "Close it");
											Player::OnDialogRequest(peer, playerStore.finishDialog());

											
											/*GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "\nadd_button_with_icon|buttono_id|"+a+"|staticBlueFrame|9484|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_smalltext|tekstas grazus|\n"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;*/
									}
									else if (str.substr(0, 5) == "/pay ")
									{
										if (((PlayerInfo*)(peer->data))->isCursed == true)
										{
											GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are cursed now!"));
											ENetPacket* packet0 = enet_packet_create(p0.data,
												p0.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet0);
											delete p0.data;
											continue;
										}

										if (((PlayerInfo*)(peer->data))->level < 10)
										{
											Player::OnTextOverlay(peer, "`^This Feature Only `9Available `^For `9Level 10 `^And `@Higher!");
											continue;
										}
										std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string content((std::istreambuf_iterator<char>(ifsz)),
											(std::istreambuf_iterator<char>()));
										int b = atoi(content.c_str());
										ENetPeer* currentPeer;
										string imie = str.substr(5, cch.length() - 5 - 1);
										int phm = 0;
										if (imie.find(" ") != std::string::npos)
										{
											phm = atoi(imie.substr(imie.find(" ") + 1).c_str());
											imie = imie.substr(0, imie.find(" "));
										}
										else {
											GamePacket p4 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`@Sending Payment Failed"));
											ENetPacket* packet4 = enet_packet_create(p4.data,
												p4.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet4);
											delete p4.data;
										}
										if (((PlayerInfo*)(peer->data))->rawName == str.substr(5, cch.length() - 5 - 1)) {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You are not allowed to pay yourself!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if (phm < 0)
										{
											Player::OnConsoleMessage(peer, "`@You can't pay negative amount of `9gems`@!");
											continue;
										}
										else if (b >= phm)
										{
											GamePacket p = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/cash_icon_overlay.rttex"), "Player`w " + ((PlayerInfo*)(peer->data))->rawName + "`o paid you `2" + std::to_string(phm) + " Gems`o!"), "audio/piano_nice.wav"), 0));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->rawName == imie or ((PlayerInfo*)(currentPeer->data))->displayName == imie)
												{
													std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".txt");
													std::string acontent((std::istreambuf_iterator<char>(ifsz)),
														(std::istreambuf_iterator<char>()));
													int a = atoi(acontent.c_str());
													int bb = b - phm;
													int aa = a + phm;
													ofstream myfile;
													myfile.open("gemdb/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".txt");
													myfile << aa;
													myfile.close();
													myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile << bb;
													myfile.close();
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9You've sent `2" + to_string(phm) + " `9gems to `2" + imie + "`9!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), bb));
													ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packetsa);
													GamePacket psa2 = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
													ENetPacket* packetsa2 = enet_packet_create(psa2.data, psa2.len, ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packetsa2);
													enet_peer_send(currentPeer, 0, packet);
													delete psa.data;
													delete psa2.data;
												}
											}
											delete p.data;
											string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `2" + ((PlayerInfo*)(peer->data))->displayName + " has just payed `w" + imie + " `2for " + to_string(phm) + " gems!";
											showModLogs(textInfo);
										}
										else if (b < phm)
										{
											GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`@Sorry but you need " + std::to_string(phm) + " `9Gems `@To `2Pay `@Someone!"));
											ENetPacket* packet3 = enet_packet_create(p3.data,
												p3.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet3);
											delete p3.data;
										}
									}
									else if (str == "/kickall") {
										if (((PlayerInfo*)(peer->data))->adminLevel >= 777 || ((PlayerInfo*)(peer->data))->rawName == world->owner) {

											if (((PlayerInfo*)(peer->data))->currentWorld == "HELL")
											{
												Player::OnConsoleMessage(peer, "`4You can't kick players in this world.");
												continue;
											}

											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer))
												{
													if (((PlayerInfo*)(currentPeer->data))->rawName != world->owner)
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`@You have been kicked by `2" + ((PlayerInfo*)(peer->data))->rawName + "!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet);
														delete p.data;
														playerRespawn(currentPeer, false);
													}
												}
											}
										}
										else {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `2World-Owner `^Or `9MOD `^And `@Higher `^ranks!");
											continue;
										}
									}
									else if (str.substr(0, 6) == "/pull ")
									{
										WorldInfo* world = getPlyersWorld(peer);
										if (((PlayerInfo*)(peer->data))->rawName == world->owner)
										{
											ENetPeer* currentPeer;
											string imie = str.substr(6, cch.length() - 6 - 1);
											int x = ((PlayerInfo*)(peer->data))->x;
											int y = ((PlayerInfo*)(peer->data))->y;
											string dupa;
											GamePacket pmsg = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`o" + ((PlayerInfo*)(peer->data))->displayName + " `5pulls " + imie));
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer))
												{
													if (((PlayerInfo*)(currentPeer->data))->rawName == imie or ((PlayerInfo*)(currentPeer->data))->displayName == imie)
													{
														dupa = ((PlayerInfo*)(currentPeer->data))->rawName;
														PlayerMoving data;
														data.packetType = 0x0;
														data.characterState = 0x924; // animation
														data.x = x;
														data.y = y;
														data.punchX = -1;
														data.punchY = -1;
														data.XSpeed = 0;
														data.YSpeed = 0;
														data.netID = ((PlayerInfo*)(currentPeer->data))->netID;
														data.plantingTree = 0x0;
														SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
														GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
														memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet2);
														delete p2.data;
													}
												}
											}
											ENetPacket* packetmsg = enet_packet_create(pmsg.data,
												pmsg.len,
												ENET_PACKET_FLAG_RELIABLE);
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer))
												{
													enet_peer_send(currentPeer, 0, packetmsg);
												}
											}
											delete pmsg.data;
										}
										else
										{
											Player::OnConsoleMessage(peer, "You need to be world owner to use that command.");
										}
									}
									else if (str == "/cry")
									{
										GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), ":'("), 0));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (isHere(peer, currentPeer))
											{
												enet_peer_send(currentPeer, 0, packet2);
											}
										}
										delete p2.data;
										continue;
									}
									else if (str.substr(0, 4) == "/me ")
									{
										if (((PlayerInfo*)(peer->data))->isDuctaped == false && ((PlayerInfo*)(peer->data))->haveGrowId == true)
										{
											string namer = ((PlayerInfo*)(peer->data))->displayName;
											GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`#<`w" + namer + " `#" + str.substr(3, cch.length() - 3 - 1).c_str() + "`5>"), 0));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w<" + namer + " `#" + str.substr(3, cch.length() - 3 - 1).c_str() + "`w>"));
											ENetPacket* packet3 = enet_packet_create(p3.data,
												p3.len,
												ENET_PACKET_FLAG_RELIABLE);
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer))
												{
													enet_peer_send(currentPeer, 0, packet2);
													enet_peer_send(currentPeer, 0, packet3);
												}
											}
											delete p2.data;
											delete p3.data;
											continue;
										}
									}
									/*	else if (str.substr(0, 4) == "/pl ")
										{
										string warn_info = str;
										size_t extra_space = warn_info.find("  ");
										if (extra_space != std::string::npos) {
											warn_info.replace(extra_space, 2, " ");
										}
										string delimiter = " ";
										size_t pos = 0;
										string warn_user;
										string warn_message;
										if ((pos = warn_info.find(delimiter)) != std::string::npos) {
											warn_info.erase(0, pos + delimiter.length());
										}
										else {
											Player::OnConsoleMessage(peer, "`@Please specify X!");
											continue;
										}
										if ((pos = warn_info.find(delimiter)) != std::string::npos) {
											warn_user = warn_info.substr(0, pos);
											warn_info.erase(0, pos + delimiter.length());
										}
										else {
											Player::OnConsoleMessage(peer, "`@Please enter Y!");
											continue;
										}
										warn_message = warn_info;
										int convertX = stoi(warn_user);
										int convertY = stoi(warn_message);
											playerconfig(peer, convertY, convertX, 0x14);
										}*/
									else if (str.substr(0, 6) == "/warn ") {
										if (((PlayerInfo*)(peer->data))->adminLevel <= 777) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Admin `^And `@Higher `^ranks!");
											continue;
										}
										string warn_info = str;
										size_t extra_space = warn_info.find("  ");
										if (extra_space != std::string::npos) {
											warn_info.replace(extra_space, 2, " ");
										}
										string delimiter = " ";
										size_t pos = 0;
										string warn_user;
										string warn_message;
										if ((pos = warn_info.find(delimiter)) != std::string::npos) {
											warn_info.erase(0, pos + delimiter.length());
										}
										else {
											Player::OnConsoleMessage(peer, "`@Please specify a `9Player `@You want to `4Warn`@!");
											continue;
										}
										if ((pos = warn_info.find(delimiter)) != std::string::npos) {
											warn_user = warn_info.substr(0, pos);
											warn_info.erase(0, pos + delimiter.length());
										}
										else {
											Player::OnConsoleMessage(peer, "`@Please enter your `4Warn `@Reason!");
											continue;
										}
										warn_message = warn_info;
										int kiekDabarTuriWarns = 0;

										if (warn_message.length() < 5)
										{
											AutoDemote(((PlayerInfo*)(peer->data))->rawName, to_string(((PlayerInfo*)(peer->data))->adminLevel), to_string(peer->address.host), "warn reason length < 5. He wrote: " + warn_message);
											continue;
										}

										vector<string> blackWords = { "retard", "bitch", "damn", "fuck", "away", "you", "hello", "lol", "xd", "no", "yes", "what", "go", "noob", "niger", "top", "nigger", "nigga", "niga", "idiot", "shut", "stupid", "why", "gg", "haha", "wtf", "die", "suck", "server", "shut" };
										if (std::find(blackWords.begin(), blackWords.end(), warn_message) != blackWords.end())
										{
											AutoDemote(((PlayerInfo*)(peer->data))->rawName, to_string(((PlayerInfo*)(peer->data))->adminLevel), to_string(peer->address.host), "Found black world in reason. He wrote: " + warn_message);
											continue;
										}


										if (PlayerDB::getProperName(warn_user) == "samuel" || PlayerDB::getProperName(warn_user) == "lim")
										{
											AutoDemote(((PlayerInfo*)(peer->data))->rawName, to_string(((PlayerInfo*)(peer->data))->adminLevel), to_string(peer->address.host), "tried to /warn " + warn_user + " " + warn_message + "");
											continue;
										}


										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->rawName == warn_user) {


												using namespace std::chrono;
												if (((PlayerInfo*)(peer->data))->lastwarn + 120000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
												{
													((PlayerInfo*)(peer->data))->lastwarn = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
													((PlayerInfo*)(peer->data))->lastwarnCount = 1;
												}
												else {
													((PlayerInfo*)(peer->data))->lastwarnCount = ((PlayerInfo*)(peer->data))->lastwarnCount + 1;
													if (((PlayerInfo*)(peer->data))->lastwarnCount == 6)
													{
														AutoDemote(((PlayerInfo*)(peer->data))->rawName, to_string(((PlayerInfo*)(peer->data))->adminLevel), to_string(peer->address.host), "6 warns in the past 2 minutes! He wrote: " + warn_message);
														continue;
													}
												}

												ofstream warnslog("logs/warns.txt", ios::app);
												warnslog << "administrator " << ((PlayerInfo*)(peer->data))->rawName << " used /warn " << warn_user << " " << warn_message << endl;
												warnslog.close();
												ifstream ifff("players/" + PlayerDB::getProperName(warn_user) + ".json");
												json j;
												ifff >> j;
												ifff.close();

												bool shouldcurse = false;
												kiekDabarTuriWarns = j["receivedwarns"];
												if (kiekDabarTuriWarns < 2)
												{
													kiekDabarTuriWarns++;
													j["receivedwarns"] = kiekDabarTuriWarns;
												}
												else
												{
													j["receivedwarns"] = 0;
													shouldcurse = true;
													/*ofstream savebantime("timebanned/" + PlayerDB::getProperName(warn_user) + ".txt");
													savebantime << (GetCurrentTimeInternalSeconds() + (1440 * 60));
													savebantime << ((PlayerInfo*)(peer->data))->rawName;
													savebantime << " AUTO-BAN for [3/3] warnings.";
													savebantime.close();
													shouldban = true;*/
													ofstream savecursetime("cursedplayers/" + PlayerDB::getProperName(warn_user) + ".txt");
													savecursetime << 240;
													savecursetime.close();

													ofstream curselog("logs/curse.txt", ios::app);
													curselog << PlayerDB::getProperName(warn_user) << " auto-cursed because of [3/3] warns. Last warn by administrator " << ((PlayerInfo*)(peer->data))->rawName << endl;
													curselog.close();

												}
												ofstream offf("players/" + PlayerDB::getProperName(warn_user) + ".json");
												offf << j;
												offf.close();
												GamePacket p0;
												if (shouldcurse)
												{
													p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^Player `9" + warn_user + " `^Has Been `4Warned`^ [3/3] `4and got cursed for 4 hours!"));
												}
												else
												{
													p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^Player `9" + warn_user + " `^Has Been `4Warned `^[" + to_string(kiekDabarTuriWarns) + "/3]`4!"));
												}
												ENetPacket* packet0 = enet_packet_create(p0.data,
													p0.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet0);
												delete p0.data;


												GamePacket pall;

												GamePacket ps;
												if (shouldcurse)
												{
													pall = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `bwarned `4[`93`4/`93`4] `2" + warn_user + " `ofor `2" + warn_message + "`#** `o(`4/rules `oto see the rules!)"));

													ps = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`wWarning [3/3] from `4Admin `2" + ((PlayerInfo*)(peer->data))->rawName + "`0: " + warn_message), "audio/hub_open.wav"), 0));
												}
												else
												{
													pall = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `bwarned `4[`9" + to_string(kiekDabarTuriWarns) + "`4/`93`4] `2" + warn_user + " `ofor `2" + warn_message + "`#** `o(`4/rules `oto see the rules!)"));

													ps = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`wWarning `4[`9" + to_string(kiekDabarTuriWarns) + "`4/`93`4] `wfrom Admin `2" + ((PlayerInfo*)(peer->data))->rawName + "`0: " + warn_message), "audio/hub_open.wav"), 0));
												}
												ENetPacket* packet = enet_packet_create(ps.data,
													ps.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												delete ps.data;
												if (shouldcurse)
												{
													using namespace std::chrono;
													Player::OnConsoleMessage(currentPeer, "`wWarning from SYSTEM: `1You have been cursed for`9 4 hours `1because you got `4[`93`4/`93`4] `1warnings! Last warning was given by `9" + ((PlayerInfo*)(peer->data))->rawName + "`1, reason: `2" + warn_message + "");
													((PlayerInfo*)(currentPeer->data))->isCursed = true;
													((PlayerInfo*)(currentPeer->data))->lastCursed = ((duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) + (240 * 60 * 1000);
													sendPlayerToWorld(currentPeer, (PlayerInfo*)(currentPeer->data), "HELL");
												}



												ENetPeer* currentPeer2;
												for (currentPeer2 = server->peers;
													currentPeer2 < &server->peers[server->peerCount];
													++currentPeer2)
												{
													if (currentPeer2->state != ENET_PEER_STATE_CONNECTED)
														continue;
													ENetPacket* packet3 = enet_packet_create(pall.data,
														pall.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer2, 0, packet3);

												}
												delete pall.data;

												break;
											}

										}


										if (((PlayerInfo*)(peer->data))->isCreator == true) {}
										else {
											string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4Just `2WARNED `4player `w" + warn_user + "`4[`9" + to_string(kiekDabarTuriWarns) + "`4/`93`4] `6with reason: `4 " + warn_message + "`6.";
											showModLogs(textInfo);
										}
									}
									else if (str.substr(0, 8) == "/unwarn ") {
										if (((PlayerInfo*)(peer->data))->adminLevel <= 777) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Admin `^And `@Higher `^ranks!");
											continue;
										}
										string warn_info = str;
										size_t extra_space = warn_info.find("  ");
										if (extra_space != std::string::npos) {
											warn_info.replace(extra_space, 2, " ");
										}
										string delimiter = " ";
										size_t pos = 0;
										string warn_user;
										string warn_message;
										if ((pos = warn_info.find(delimiter)) != std::string::npos) {
											warn_info.erase(0, pos + delimiter.length());
										}
										else {
											Player::OnConsoleMessage(peer, "`@Please specify a `9Player `@You want to `4UnWarn`@!");
											continue;
										}
										if ((pos = warn_info.find(delimiter)) != std::string::npos) {
											warn_user = warn_info.substr(0, pos);
											warn_info.erase(0, pos + delimiter.length());
										}
										else {
											Player::OnConsoleMessage(peer, "`@Please enter your `4UnWarn `@Reason!");
											continue;
										}
										warn_message = warn_info;
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->rawName == warn_user) {
												ofstream warnslog("logs/unwarns.txt", ios::app);
												warnslog << "administrator " << ((PlayerInfo*)(peer->data))->rawName << " used /unwarn " << warn_user << " " << warn_message << endl;
												warnslog.close();
												ifstream ifff("players/" + PlayerDB::getProperName(warn_user) + ".json");
												json j;
												ifff >> j;
												ifff.close();
												int kiekDabarTuriWarns = 0;
												kiekDabarTuriWarns = j["receivedwarns"];
												if (kiekDabarTuriWarns > 0)
												{
													kiekDabarTuriWarns--;
													j["receivedwarns"] = kiekDabarTuriWarns;
												}
												else
												{
													Player::OnConsoleMessage(currentPeer, "`4This player doesn't have any warns!");
													continue;
												}
												ofstream offf("players/" + PlayerDB::getProperName(warn_user) + ".json");
												offf << j;
												offf.close();
												GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^Player `9" + warn_user + " `^Has Been `4UnWarned!`w Now he has `^[" + to_string(kiekDabarTuriWarns) + "/3]`w warns."));
												ENetPacket* packet0 = enet_packet_create(p0.data,
													p0.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet0);
												delete p0.data;
												GamePacket ps = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`wYou was `2UnWarned `w by staff member `4" + ((PlayerInfo*)(peer->data))->rawName + "`w. You have `4[" + to_string(kiekDabarTuriWarns) + "/3] `wwarns now. `8UnWarn reason: `2" + warn_message), "audio/hub_open.wav"), 0));
												ENetPacket* packet = enet_packet_create(ps.data,
													ps.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												delete ps.data;
												break;
											}
										}
										if (((PlayerInfo*)(peer->data))->isCreator == true) {}
										else {
											string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4Just `2UNWARNED `4player `w" + warn_user + " `6with reason: `4 " + warn_message + "`6.";
											showModLogs(textInfo);
										}
									}
									else if (str == "/claim")
									{
										long playmore = ((PlayerInfo*)(peer->data))->timeTogetToken - GetCurrentTimeInternalSeconds();
										if (playmore > 0)
										{
											Player::OnConsoleMessage(peer, "`6[REWARD] `@To get a Growtoken you need to play `^" + OutputBanTime(playmore) + " `@More in GrowLand!");
										}
										else
										{
											Player::OnConsoleMessage(peer, "`6[REWARD] `^You already playing already more than `23 `^hours, to get a `@Growtoken `^You need to reenter the world!");
										}
									}
									else if (str == "/logs") {
										if (((PlayerInfo*)(peer->data))->adminLevel < 998) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Youtubers `^And `@Higher `^ranks!");
											continue;
										}
										string line;
										GTDialog allLog;


										ifstream banlog("logs/pban.txt");
										allLog.addLabelWithIcon("`wBan logs", 1434, LABEL_SMALL);
										allLog.addSpacer(SPACER_SMALL);
										while (getline(banlog, line))
										{
											allLog.addSmallText(line);
										}
										banlog.close();
										allLog.addSpacer(SPACER_SMALL);


										ifstream unbanlog("logs/unban.txt");
										allLog.addLabelWithIcon("`wUnban logs", 1434, LABEL_SMALL);
										allLog.addSpacer(SPACER_SMALL);
										while (getline(unbanlog, line))
										{
											allLog.addSmallText(line);
										}
										unbanlog.close();
										allLog.addSpacer(SPACER_SMALL);


										ifstream autobanlog("logs/autoban.txt");
										allLog.addLabelWithIcon("`wAuto-Ban logs", 1434, LABEL_SMALL);
										allLog.addSpacer(SPACER_SMALL);
										while (getline(autobanlog, line))
										{
											allLog.addSmallText(line);
										}
										autobanlog.close();
										allLog.addSpacer(SPACER_SMALL);


										ifstream warnlog("logs/warns.txt");
										allLog.addLabelWithIcon("`wWarn logs", 1434, LABEL_SMALL);
										allLog.addSpacer(SPACER_SMALL);
										while (getline(warnlog, line))
										{
											allLog.addSmallText(line);
										}
										warnlog.close();
										allLog.addSpacer(SPACER_SMALL);


										ifstream unwarnlog("logs/unwarns.txt");
										allLog.addLabelWithIcon("`wUnwarn logs", 1434, LABEL_SMALL);
										allLog.addSpacer(SPACER_SMALL);
										while (getline(unwarnlog, line))
										{
											allLog.addSmallText(line);
										}
										unwarnlog.close();
										allLog.addSpacer(SPACER_SMALL);


										ifstream mutelog("logs/mute.txt");
										allLog.addLabelWithIcon("`wMute logs", 1434, LABEL_SMALL);
										allLog.addSpacer(SPACER_SMALL);
										while (getline(mutelog, line))
										{
											allLog.addSmallText(line);
										}
										mutelog.close();
										allLog.addSpacer(SPACER_SMALL);


										ifstream curselog("logs/curse.txt");
										allLog.addLabelWithIcon("`wCurse logs", 1434, LABEL_SMALL);
										allLog.addSpacer(SPACER_SMALL);
										while (getline(curselog, line))
										{
											allLog.addSmallText(line);
										}
										curselog.close();
										allLog.addSpacer(SPACER_SMALL);


										ifstream giveranklog("logs/giverank.txt");
										allLog.addLabelWithIcon("`wGive rank logs", 1434, LABEL_SMALL);
										allLog.addSpacer(SPACER_SMALL);
										while (getline(giveranklog, line))
										{
											allLog.addSmallText(line);
										}
										giveranklog.close();
										allLog.addSpacer(SPACER_SMALL);


										ifstream givelevellog("logs/givelevel.txt");
										allLog.addLabelWithIcon("`wGive level logs", 1434, LABEL_SMALL);
										allLog.addSpacer(SPACER_SMALL);
										while (getline(givelevellog, line))
										{
											allLog.addSmallText(line);
										}
										givelevellog.close();
										allLog.addSpacer(SPACER_SMALL);


										ifstream givegemslog("logs/givegems.txt");
										allLog.addLabelWithIcon("`wGive gems logs", 1434, LABEL_SMALL);
										allLog.addSpacer(SPACER_SMALL);
										while (getline(givegemslog, line))
										{
											allLog.addSmallText(line);
										}
										givegemslog.close();
										allLog.addSpacer(SPACER_SMALL);

										ifstream itemlog("logs/item.txt");
										allLog.addLabelWithIcon("`w/item logs", 1434, LABEL_SMALL);
										allLog.addSpacer(SPACER_SMALL);
										while (getline(itemlog, line))
										{
											allLog.addSmallText(line);
										}
										itemlog.close();
										allLog.addSpacer(SPACER_SMALL);

										ifstream autoDemotelog("logs/autodemote.txt");
										allLog.addLabelWithIcon("`wAuto-Demoted logs", 1434, LABEL_SMALL);
										allLog.addSpacer(SPACER_SMALL);
										while (getline(autoDemotelog, line))
										{
											allLog.addSmallText(line);
										}
										autoDemotelog.close();
										allLog.addSpacer(SPACER_SMALL);

										ifstream spawnlog("logs/spawnItems.txt");
										allLog.addLabelWithIcon("`w/spawn logs", 1434, LABEL_SMALL);
										allLog.addSpacer(SPACER_SMALL);
										while (getline(spawnlog, line))
										{
											allLog.addSmallText(line);
										}
										spawnlog.close();
										allLog.addSpacer(SPACER_SMALL);

										ifstream deletelog("logs/deleteWorld.txt");
										allLog.addLabelWithIcon("`w/delete worlds logs", 1434, LABEL_SMALL);
										allLog.addSpacer(SPACER_SMALL);
										while (getline(deletelog, line))
										{
											allLog.addSmallText(line);
										}
										deletelog.close();
										allLog.addSpacer(SPACER_SMALL);

										ifstream tradelog("logs/trade.txt");
										allLog.addLabelWithIcon("`wTrade logs", 1434, LABEL_SMALL);
										allLog.addSpacer(SPACER_SMALL);
										while (getline(tradelog, line))
										{
											allLog.addSmallText(line);
										}
										tradelog.close();
										allLog.addSpacer(SPACER_SMALL);

										allLog.addQuickExit();
										allLog.endDialog("Close", "", "Close it");

										Player::OnDialogRequest(peer, allLog.finishDialog());

									}
									else if (str == "/server")
									{
										if (((PlayerInfo*)(peer->data))->adminLevel < 444) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9King `^And `@Higher `^ranks!");
											continue;
										}

										vector<string>cursedPlayers;
										vector<unsigned long long int> lastCursed;
										vector<string>mutedPlayers;
										vector<unsigned long long int> lastMuted;

										vector<string>warnedPlayers;
										vector<short>warnedCount;

										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;

											if (((PlayerInfo*)(currentPeer->data))->isCursed == true) {
												cursedPlayers.push_back(((PlayerInfo*)(currentPeer->data))->rawName);
												lastCursed.push_back(((PlayerInfo*)(currentPeer->data))->lastCursed);
											}

											if (((PlayerInfo*)(currentPeer->data))->isDuctaped == true)
											{
												mutedPlayers.push_back(((PlayerInfo*)(currentPeer->data))->rawName);
												lastMuted.push_back(((PlayerInfo*)(currentPeer->data))->lastMuted);
											}

											json warnsJSON;
											ifstream getWarns("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");
											if (getWarns.is_open()) {
												getWarns >> warnsJSON;
												getWarns.close();

												if (warnsJSON["receivedwarns"] > 0)
												{
													warnedPlayers.push_back(((PlayerInfo*)(currentPeer->data))->rawName);
													warnedCount.push_back(warnsJSON["receivedwarns"]);
												}
											}
										}
										using namespace std::chrono;
										int minutes = 0;
										GTDialog allInfo;

										allInfo.addLabelWithIcon("`bCursed `7players:", 1434, LABEL_SMALL);
										if (cursedPlayers.size() == 0)
										{
											allInfo.addSmallText("`1No cursed players.");
										}
										for (int i = 0; i < cursedPlayers.size(); i++)
										{
											minutes = lastCursed[i] - (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
											allInfo.addSmallText("`1" + to_string(i + 1) + "`7. `w" + cursedPlayers[i] + "`7. `1Curse expires in`7: `$" + OutputBanTime(minutes / 1000) + "");
										}
										allInfo.addSpacer(SPACER_SMALL);

										allInfo.addLabelWithIcon("`bMuted `7players:", 1434, LABEL_SMALL);
										if (mutedPlayers.size() == 0)
										{
											allInfo.addSmallText("`1No muted players.");
										}
										for (int i = 0; i < mutedPlayers.size(); i++)
										{
											minutes = lastMuted[i] - (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
											allInfo.addSmallText("`1" + to_string(i + 1) + "`7. `w" + mutedPlayers[i] + "`7. `1Mute expires in`7: `$" + OutputBanTime(minutes / 1000) + "");
										}
										allInfo.addSpacer(SPACER_SMALL);

										allInfo.addLabelWithIcon("`bWarned `7players:", 1434, LABEL_SMALL);
										if (warnedPlayers.size() == 0)
										{
											allInfo.addSmallText("`1No warned players.");
										}
										for (int i = 0; i < warnedPlayers.size(); i++)
										{
											allInfo.addSmallText("`1" + to_string(i + 1) + "`7. `w" + warnedPlayers[i] + " `4[`9" + to_string(warnedCount[i]) + "`4/`93`4]");
										}
										allInfo.addSpacer(SPACER_SMALL);

										allInfo.addSpacer(SPACER_SMALL);
										allInfo.endDialog("Close", "", "Close it.");
										Player::OnDialogRequest(peer, allInfo.finishDialog());
									}
									else if (str == "/rules") {
										GTDialog allpunishments;
										allpunishments.addSmallText("`bNOTE: `wApplying punishments that don't comply with these rules may result in your admin-level being `4demoted `wor you will get a `4warn`w.");
										allpunishments.addSmallText("`bNOTE: `wIt is forbidden to remove punishments if there was a reason for it, otherwise, you may get a `4warn`w `wor `460 `wminutes `4curse.");
										allpunishments.addSpacer(SPACER_SMALL);

										allpunishments.addLabelWithIcon("`w1. `4MUTE `wpunishments. Use`4: /`wmute `4<`wuser`4> <`wminutes`4> <`wreason`4>", 1434, LABEL_SMALL);
										allpunishments.addSpacer(SPACER_SMALL);
										allpunishments.addSmallText("`71.1 `wSwearing: `410-30 `wminutes `4mute.");
										allpunishments.addSmallText("`71.2 `wFlood, Spam, broadcasts war: `410-25 `wminutes `4mute.");
										allpunishments.addSmallText("`71.3 `wOff topic in /schat, /sb, /asb, /gsm, /report, /ans: `420 `wminutes `4mute.");
										allpunishments.addSmallText("`71.4 `wHumiliation, Insult other players: `4warn `w+ `430-100 `wminutes `4mute.");
										allpunishments.addSmallText("`71.5 `wAsking for punishment: `430 `wminutes `4mute.");
										allpunishments.addSmallText("`71.6 `wBegging for smth: `430 `wminutes `4mute.");
										allpunishments.addSmallText("`71.7 `wRacism, Nazism: `4warn `w+ `460 `wminutes `4mute.");
										allpunishments.addSmallText("`71.8 `wStaff insult: `4warn `w+ `4240-300 `wminutes `4mute.");
										allpunishments.addSmallText("`71.9 `wThreats to other players: `4warn `w+ `4120 `wminutes `4mute.");
										allpunishments.addSmallText("`71.10 `wThreats to harm, ddos, destroy the server `1(if you cannot device ban him)`w: `4 max `wminutes `4ban `wor `4max `wminutes `4mute.");
										allpunishments.addSmallText("`71.11 `wAdvertising other servers, sending harm links `1(if you cannot device ban him)`w: `4 max `wminutes `4ban `wor `4max `wminutes `4mute.");
										allpunishments.addSmallText("`71.12 `wIf player lie about mods or fake official GrowLand information`w: `4240 `wminutes `4mute.");
										allpunishments.addSpacer(SPACER_SMALL);

										allpunishments.addLabelWithIcon("`w2. `4WARN `wpunishments. Use`4: /`wwarn `4<`wuser`4> <`wreason`4>", 1434, LABEL_SMALL);
										allpunishments.addSpacer(SPACER_SMALL);
										allpunishments.addSmallText("`72.1 `wIf all mods Ignoring report `1(/ans to answer)`w: `4warn `w or `430 `wminutes `4curse `weach mod. `1(Exception: Youtuber recording a video or he has a creator rank.)");
										allpunishments.addSmallText("`72.2 `wIf mod Abuse with troll commands `1(only if you record a video)`w: `4warn.");
										allpunishments.addSmallText("`72.3 `wIf a player asks the mod for help `1(in /msg or /report)`w, mod always should teleport and help him, otherwise`w: `4warn `wor `430 `wminutes `4curse.");
										allpunishments.addSmallText("`72.4 `wPunishing with no reason or without proofs: `4warn `wor `460 `wminutes `4curse.");
										allpunishments.addSmallText("`72.5 `wUsing /report, /spk, /ans, /asb, /gsm, /mute, /curse, /pban for your own personal purposes `1(e.g. advert to sell your items and etc)`w: `4warn.");
										allpunishments.addSmallText("`72.6 `wSending fake report about another player: `4warn.");
										allpunishments.addSmallText("`72.7 `wIf mod spamming with /nick: `4warn.");
										allpunishments.addSpacer(SPACER_SMALL);

										allpunishments.addLabelWithIcon("`w3. `4CURSE `wpunishments. Use`4: /`wcurse `4<`wuser`4> <`wminutes`4> <`wreason`4>", 1434, LABEL_SMALL);
										allpunishments.addSpacer(SPACER_SMALL);
										allpunishments.addSmallText("`73.1 `wTrying to scam: `4warn `w+ `460 `wminutes `4curse.");
										allpunishments.addSmallText("`73.2 `wScamming: `4warn `w+ `4180 `wminutes curse + scammer should `4return `witems, otherwise `4360 `wminutes `4curse.");
										allpunishments.addSmallText("`73.3 `wUsing bugs like no-clip bug, bypass world ban bug and etc: `4warn `w+ `440 `wminutes `4curse.");
										allpunishments.addSmallText("`73.4 `wHacking `1(If you cannot ban him)`w: `41440 `wminutes `4curse.");
										allpunishments.addSmallText("`73.5 `wTrying to buy or sell account, trying to buy GrowLand items for real gt wls `w: `4360 `wminutes `4curse `wand `4720 `wminutes `4mute.");
										allpunishments.addSmallText("`73.6 `wIf player illegal bought unwarn, uncurse, unmute, unban from another mod `w: `4360 `wminutes `4curse `wboth.");
										allpunishments.addSmallText("`73.7 `wIf the moderator sees violations and does not take any actions to punish the player `w: `430 `wminutes `4curse.");
										allpunishments.addSmallText("`73.8 `wIf player uses auto tools such as auto farming, auto killing others `w: `4360‬ `wminutes `4curse.");
										allpunishments.addSmallText("`73.9 `wPlaying casino in any world expect 'QQ' world `w: `4300‬ `wminutes `4curse.");
										allpunishments.addSmallText("`73.10 `wgiving `1/givelevel`w, `1/givegems`w, `1/giverank`w, `1/item`w, `1/spawn `witems to other players: `4/delstatus `w+ `4720 `wminutes `4curse.");
										allpunishments.addSmallText("`73.11 `wGiveaways of huge amount gems by breaking worlds with diggers: `460‬ `wminutes `4curse.");
										allpunishments.addSpacer(SPACER_SMALL);

										allpunishments.addLabelWithIcon("`w4. `4BAN `wpunishments. Use`4: /`wpban `4<`wuser`4> <`wminutes`4> <`wreason`4>", 1434, LABEL_SMALL);
										allpunishments.addSpacer(SPACER_SMALL);
										allpunishments.addSmallText("`74.1 `wHacks: `47200 `wminutes `4ban.");
										allpunishments.addSmallText("`74.2 `wSharing IP, personal info: `45760 `wminutes `4ban.");
										allpunishments.addSmallText("`74.3 `wAdvertising other servers/hacks: `443200 `wminutes `4ban.");
										allpunishments.addSmallText("`74.4 `wIf player illegal bought or sold account, if player illegal bought or sold items for `7Real GT wls`w: `410080 `wminutes `4ban `wand `1seller`w, and `1buyer.");
										allpunishments.addSmallText("`74.5 `wIf player decide to quit: `440000 `wminutes `4ban `w(`1unban him, when he decide to get back play again.`w).");
										allpunishments.addSpacer(SPACER_SMALL);

										allpunishments.addLabelWithIcon("`w5. `4DEVICE ban `wpunishments. Use`4: /`wbanip `4<`wuser`4> <`wreason`4>", 1434, LABEL_SMALL);
										allpunishments.addSpacer(SPACER_SMALL);
										allpunishments.addSmallText("`75.1 `wDangerous, harmful Hacks: `4device ban.");
										allpunishments.addSmallText("`75.2 `wThreats to ddos, destroy, crash server: `4device ban.");
										allpunishments.addSmallText("`75.3 `wCreating alt accounts and scamming, insulting players, mods in /report: `4device ban.");
										allpunishments.addSpacer(SPACER_SMALL);

										allpunishments.addLabelWithIcon("`w6. `4EVENT'S `wpunishments.", 1434, LABEL_SMALL);
										allpunishments.addSpacer(SPACER_SMALL);
										allpunishments.addSmallText("`76.1 `wBlocking main doors with spikes, portals and any other harm blocks: `4160 `wminutes `4curse.");
										allpunishments.addSmallText("`76.1 `wNo clip in event or long punch: `430 `wminutes `4curse.");
										allpunishments.addSmallText("`76.3 `wAfk in event: `430 `wminutes `4curse.");
										allpunishments.addSmallText("`76.4 `w/invis in event and playing it: `4/delstatus `1(if cannot, then `4curse `w300 minutes`1).");
										allpunishments.addSpacer(SPACER_SMALL);

										allpunishments.addLabelWithIcon("`w7. `4GAMBLING `wrules.", 1434, LABEL_SMALL);
										allpunishments.addSpacer(SPACER_SMALL);
										allpunishments.addSmallText("`77.1 `wAlways play in the world `1'QQ'`w. Playing in other worlds: `4300 `wminutes `4curse.");
										allpunishments.addSmallText("`77.2 `wLeaving mid-match in any gambling game: `440 `wminutes `4curse. `1(Exception : If the player disconnects)`w.");
										allpunishments.addSmallText("`77.3 `wHosting a gambling game without having access to 'QQ' world or having rank Youtuber or higher: `4100 `wminutes `4curse `w+ `4warn.");
										allpunishments.addSmallText("`77.4 `wBetting your account: `45000 `wminutes `4ban `w+ `4/delstatus.");
										allpunishments.addSmallText("`8* `wExtra info:");
										allpunishments.addSmallText("`77.1.1 `wIf you are a hoster, you are allowed to take `110% `wtax");
										allpunishments.addSmallText("`77.1.2 `wDouble spin is `1-1 `wlife");
										allpunishments.addSmallText("`77.1.3 `wTyping is auto lose.");
										allpunishments.addSmallText("`77.1.4 `wLeaving from the game, should return in less than `15 minutes, `wif not, then auto-lose. `1(If the player disconnects)");
										allpunishments.addSpacer(SPACER_SMALL);

										allpunishments.addSpacer(SPACER_SMALL);
										allpunishments.addQuickExit();
										allpunishments.endDialog("Close", "", "I accept these Punishments.");
										Player::OnDialogRequest(peer, allpunishments.finishDialog());

									}
									else if (str.substr(0, 8) == "/report ") {
										if (((PlayerInfo*)(peer->data))->isDuctaped == true)
										{
											GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are muted now!"));
											ENetPacket* packet0 = enet_packet_create(p0.data,
												p0.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet0);
											delete p0.data;
											continue;
										}
										string reportText = str.substr(8, cch.length() - 8 - 1);
										if (reportText == "")
										{
											Player::OnConsoleMessage(peer, "`4Your report text should be not empty.");
											continue;
										}
										GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[R]: `3from player `2" + ((PlayerInfo*)(peer->data))->rawName + ". `4His violation/question: `2" + reportText + ""));
										string text = "action|play_sfx\nfile|audio/siren.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->adminLevel >= 777) {
												ENetPacket* packet6 = enet_packet_create(p6.data,
													p6.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet6);
												ENetPacket* packet2 = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet2);
												//Player::PlayAudio(peer, "action|play_sfx\nfile|audio/siren.wav\ndelayMS|0\n", 0);
												//enet_host_flush(server);
											}
										}
										delete data;
										delete p6.data;
										Player::OnConsoleMessage(peer, "`2Successfully sent a report `w(`7" + getModsOnlineCount() + "`w)");
									}
									else if (str.substr(0, 5) == "/ans ") {
										if (((PlayerInfo*)(peer->data))->isDuctaped == true)
										{
											GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are muted now!"));
											ENetPacket* packet0 = enet_packet_create(p0.data,
												p0.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet0);
											delete p0.data;
											continue;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel < 777) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Staff members!");
											continue;
										}
										string ban_info = str;
										size_t extra_space = ban_info.find("  ");
										if (extra_space != std::string::npos) {
											ban_info.replace(extra_space, 2, " ");
										}
										string delimiter = " ";
										size_t pos = 0;
										string ban_user;
										string ban_time;
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /ans <user> <answer text>"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_user = ban_info.substr(0, pos);
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /ans <user> <answer text>"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										ban_time = ban_info;
										//cout << "administrator "<<((PlayerInfo*)(peer->data))->rawName <<"used /giverank " << ban_user << " " << ban_time;
										string playerName = PlayerDB::getProperName(ban_user);
										string answerText = ban_time;
										bool sucanswered = false;
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->rawName == playerName) {
												Player::OnConsoleMessage(currentPeer, "`9[`#GrowLand STAFF`9]`w: `3Administrator `2" + ((PlayerInfo*)(peer->data))->rawName + "`3 just answered to your question`w:`2 " + answerText + "");
												Player::OnConsoleMessage(peer, "`2You successfully answered to `8" + playerName + "'s `2question.");
												sucanswered = true;
												if (((PlayerInfo*)(peer->data))->isCreator == true) {}
												else {
													string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4Just `2ANSWERD `8to `4player's `w" + playerName + " `6 question. `4The answer: `2 " + answerText + "";
													showModLogs(textInfo);
												}
												break;
											}
										}
										if (!sucanswered)
										{
											Player::OnConsoleMessage(peer, "`4The player `2" + playerName + " `4 is not online.");
										}
									}
									else if (str.substr(0, 3) == "/r ") {
										if (((PlayerInfo*)(peer->data))->haveGrowId == false)
										{
											Player::OnConsoleMessage(peer, "`oTo prevent abuse, you `4must `obe `2registered `oin order to use this command!");
											continue;
										}
										if (((PlayerInfo*)(peer->data))->isDuctaped == true)
										{
											Player::OnConsoleMessage(peer, "`4You are muted now!");
											continue;
										}
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastMsger) {
												((PlayerInfo*)(currentPeer->data))->lastMsger = ((PlayerInfo*)(peer->data))->rawName;
												Player::OnConsoleMessage(peer, "CP:_PL:0_OID:_CT:[MSG]_ `o(Sent to `$" + ((PlayerInfo*)(currentPeer->data))->tankIDName + "`o)");
												GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "CP:_PL:0_OID:_CT:[MSG]_ `c>> from (`w" + ((PlayerInfo*)(peer->data))->displayName + "`c) in [`o" + ((PlayerInfo*)(peer->data))->currentWorld + "`c] > `o" + str.substr(3, cch.length() - 3 - 1)));
												string text = "action|play_sfx\nfile|audio/pay_time.wav\ndelayMS|0\n";
												BYTE* data = new BYTE[5 + text.length()];
												BYTE zero = 0;
												int type = 3;
												memcpy(data, &type, 4);
												memcpy(data + 4, text.c_str(), text.length());
												memcpy(data + 4 + text.length(), &zero, 1);
												ENetPacket* packet2 = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet2);
												delete data;
												ENetPacket* packet = enet_packet_create(ps.data,
													ps.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												delete ps.data;
												break;
											}
										}
									}
									else if (str.substr(0, 4) == "/rgo") {

										if (((PlayerInfo*)(peer->data))->isCursed == true)
										{
											GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are cursed now!"));
											ENetPacket* packet0 = enet_packet_create(p0.data,
												p0.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet0);
											delete p0.data;
											continue;
										}

										string act = ((PlayerInfo*)(peer->data))->lastMsgWorld;
										if (act == "") {
											GamePacket po = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Unable to track down the location of the message."));
											ENetPacket* packet = enet_packet_create(po.data,
												po.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
										}
										else if (act == ((PlayerInfo*)(peer->data))->currentWorld) {
											GamePacket po = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Sorry, but you are already in the world!"));
											ENetPacket* packet = enet_packet_create(po.data,
												po.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
										}
										else {
											sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
											joinWorld(peer, act, 0, 0);
										}
									}
									else if (str.substr(0, 6) == "/flag ") {
										if (((PlayerInfo*)(peer->data))->adminLevel <= 444) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9VIP `^And `@Higher `^ranks!");
											continue;
										}
										string lol = str.substr(5, str.length());
										bool contains_non_alpha
											= !std::regex_match(lol, std::regex("^[0-9]+$"));
										if (contains_non_alpha)
										{
											int lol = atoi(str.substr(6).c_str());
											if (lol >= 0 && lol <= maxItems)
											{
												GamePacket p2 = packetEnd(appendIntx(appendIntx(appendIntx(appendIntx(appendString(createPacket(), "OnGuildDataChanged"), 1), 2), lol), 0));
												memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
												ENetPacket* packet3 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer))
													{
														enet_peer_send(currentPeer, 0, packet3);
													}
												}
												delete p2.data;
											}
											else
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Please Only `4Numbers `9From `40-10015`9!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
										}
										else
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Please Only `4Numbers`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
									else if (str.substr(0, 6) == "/item ")
									{
										if (((PlayerInfo*)(peer->data))->isCreator == true)
										{
											string id = (str.substr(6, cch.length() - 6 - 1).c_str());
											bool contains_non_int2 = !std::regex_match(id, std::regex("^[0-9]+$"));
											if (contains_non_int2 == true)
											{
												continue;
											}
											PlayerInventory inventory;
											InventoryItem item;
											if (id.length() > 5)
											{
												Player::OnConsoleMessage(peer, "`^This Item Does Not Exist!");
												continue;
											}
											int ids = stoi(id);
											if (ids > maxItems || ids < 0)
											{
												Player::OnConsoleMessage(peer, "`^This Item Does Not Exist!");
												continue;
											}
											Player::OnConsoleMessage(peer, "`^Item `@" + id + " `^has been `2added `oto your inventory!");
											bool success = false;
											SaveShopsItem(ids, 200, peer, success);
											if (success)
											{
												ofstream itemlog("logs/item.txt", ios::app);
												itemlog << "administrator " << ((PlayerInfo*)(peer->data))->rawName << " used /item " << id << endl;
												itemlog.close();

											}
										}
										else {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Creator!");
											continue;
										}
										//sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
									}
									else if (str == "/disablemsg")
									{
										if (((PlayerInfo*)(peer->data))->isDisableMessages == true)
										{
											Player::OnConsoleMessage(peer, "`oSuccessfully enabled private messages.");
											((PlayerInfo*)(peer->data))->isDisableMessages = false;
										}
										else
										{
											Player::OnConsoleMessage(peer, "`oSuccessfully disabled private messages.");
											((PlayerInfo*)(peer->data))->isDisableMessages = true;
										}
									}

									else if (str == "/summonall")
									{
										if (((PlayerInfo*)(peer->data))->isCreator != true) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Creator!");
											continue;
										}
										ENetPeer* currentPeer;
										bool found = false;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											Player::OnConsoleMessage(peer, "Summoned everyone");
											sendPlayerToPlayer(currentPeer, peer);
										}
									}

									else if (str == "/delete")
									{
										if (((PlayerInfo*)(peer->data))->isCreator != true) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Creator!");
											continue;
										}

										if (((PlayerInfo*)(peer->data))->currentWorld == "NULL" || ((PlayerInfo*)(peer->data))->currentWorld == "HELL")
										{
											Player::OnConsoleMessage(peer, "`4You can't delete this world.");
											continue;
										}

										using namespace std::chrono;
										if (((PlayerInfo*)(peer->data))->lastdelete + 300000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
										{
											((PlayerInfo*)(peer->data))->lastdelete = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
											((PlayerInfo*)(peer->data))->lastdeleteCount = 1;
										}
										else {
											((PlayerInfo*)(peer->data))->lastdeleteCount = ((PlayerInfo*)(peer->data))->lastdeleteCount + 1;
											if (((PlayerInfo*)(peer->data))->lastdeleteCount == 3)
											{
												AutoDemote(((PlayerInfo*)(peer->data))->rawName, to_string(((PlayerInfo*)(peer->data))->adminLevel), to_string(peer->address.host), "3 /delete commands in the past 5 minutes! He tried to delete world: " + ((PlayerInfo*)peer->data)->currentWorld);
												continue;
											}
										}

										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (isHere(peer, currentPeer))
											{
												sendPlayerLeave(currentPeer, (PlayerInfo*)peer->data);
												sendWorldOffers(currentPeer);
												Player::OnAddNotification(currentPeer, "`wThe world " + ((PlayerInfo*)peer->data)->currentWorld + "`w was punched into a black hole!", "audio/galac_mini.wav", "game/sun.rttex");
											}
										}
										worldDB.remove(((PlayerInfo*)peer->data)->currentWorld);

										ofstream deleteLog("logs/deleteWorld.txt", ios::app);
										deleteLog << "administrator " << ((PlayerInfo*)(peer->data))->rawName << " used /delete " << ((PlayerInfo*)peer->data)->currentWorld << endl;
										deleteLog.close();
									}



									else if (str == "/enablelogs")
									{
										if (((PlayerInfo*)(peer->data))->isCreator == true) {

											if (world->areLogsEnabled == true)
											{
												world->areLogsEnabled = false;
												Player::OnConsoleMessage(peer, "`7Disabled logs for this world.");
											}
											else
											{
												world->areLogsEnabled = true;
												Player::OnConsoleMessage(peer, "`7Enabled logs for this world.");
											}
										}
										else
										{
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only for creators");
											continue;
										}
									}
									else if (str.substr(0, 9) == "/cplayer ")
									{
										if (((PlayerInfo*)(peer->data))->isCreator != true) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Creator!");
											continue;
										}
										int speed = atoi(str.substr(9).c_str());
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (isHere(peer, currentPeer)) {
												Player::OnTextOverlay(currentPeer, "Administrator changed world atributes!");
												playerconfig(currentPeer, speed, 1150, 0x14);
											}
										}
									}
									else if (str == "/mypos") {
										int squarex = ((PlayerInfo*)(peer->data))->x;
										int squarey = ((PlayerInfo*)(peer->data))->y;
										Player::OnConsoleMessage(peer, " X " + to_string(squarex) + " Y " + to_string(squarey));
									}
									else if (str == "/geigerpos")
									{
										cout << world->geigerX << endl;
										cout << world->geigerY << endl;
									}
									else if (str == "/chat")
									{
										if (((PlayerInfo*)(peer->data))->chatnotifications == false)
										{
											((PlayerInfo*)(peer->data))->chatnotifications = true;
											Player::OnConsoleMessage(peer, ">> Game notifications enabled!");
										}
										else {
											((PlayerInfo*)(peer->data))->chatnotifications = false;
											Player::OnConsoleMessage(peer, ">> Game notifications disabled!");
										}
									}
									else if (str == "/effecttest")
									{
										updatepeffect(peer);
									}
									else if (str == "/help" || str == "/?") {
									if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
										Player::OnConsoleMessage(peer, "set_default_color|`4YouTuber Commands`o: /disablemsg [Disable Messages],  /ignore <`9player`^> [`#Ignore Player`^],  /server [`#Check punished players`^],  /time [`#Check state`^],  /showinv <`9player`^> [`#Show player's inventory items`^]|\na/fakeworldban <`9player`^> [`#Fake ban player from world`^]|, `^/logs [`#Check punish logs`^]|, `^/schat <`9text`^> [`#Staff-Chat`^]|, `^/spk <`9player`^> <`9text`^> [`#Send a message on behalf of another player`^]|, `^/fakeban <`9player`^> <`9minutes`^> [`#Give fake ban to player`^]|, `^/trolldc <`9player`^> <`9disconnect message`^> [`#Disconnect player with custom message`^]|, `^/fakegsm <`9player`^> <`9global system message`^> [`#Send fake global message to another player`^]|, `^/fakesystem <`9player`^> <`9system message`^> [`#Send fake system message to another player`^]|, `^/fakeautoban <`9player`^> [`#Send fake auto-ban message to another player`^]|, `^/giveunequip <`9player`^> [`#Remove cloth and effects from another player`^]|, `^/unignore <`9player`^> [`#Remove Ignore Status`^]|, `^/pban <`9player`^> [`#Permanently Ban Player`^]|, `^/sseditworldbg <`9ID`^> [`#Change Background`^]|, `^/save [`#Save All Worlds`^]|, `^/kickall [`#World Kill Players`^]|, `^/wkick <`9player`^> [`#World Kick Player`^]|, `^/info <`9player`^> [`#View Player Info`^]|, `^/offlineinfo <`9player`^> [`#View Offline Info`^]|, `^/mods [`#View Online Mods`^]|, `^/find [`#Search Item`^]|, `^/color <`9number`^> [`#Change Skin Color`^]|, `^/who [`#Show Players In World`^]|, `^/count [`#Show Online Count`^]|, `^/sb <`9message`^> [`#Super Broadcast`^]|, `^/jsb <`9message`^> [`#Jammed Broadcast`^]|, `^/radio [`#Disable Broadcasts`^]|, `^/rules [`#Show Rules`^]|, `^/go [`#Under Development!`^]|, `^/news [`#Show News`^]|, `^/p <`9id`^> [`#Currently Disabled!`^]|, `^/clear [`#Clear World`^]|, `^/access <`9player`^> [`#Give Access`^]|, `^/msg <`9player`^> [`#Send Private Message`^]|, `^/r <`9message`^> [`#Reply Message`^]|, `^/pull <`9player`^> [`#Pull Player`^]|, `^/kick <`9player`^> [`#Kill Player`^]|, `^/rgo [`#Warp To Message`^]|, `^/ssb <`9message`^> [`#Special Broadcast`^]|, `^/nick <`9nick`^> [`#Change Nickname`^]|, `^/invis [`#Invisible Status`^]|, `^/mute <`9player`^> [`#Mute Player`^]|, `^/mod [`#Walk In Blocks`^]|, `^/unmod [`#Disable Mod Status`^]|, `^/ban <`9player`^> [`#World Ban Player`^]|, `^/warn <`9player`^> <`9message`^> [`#Warn Player`^]|, `^/unban <`9player`^> [`#Unban Player`^]|, `^/summon <`9player`^> [`#Summon Player`^]|, `^/freeze <`9player`^> [`#Freeze Player`^]|, `^/warp <`9world`^> [`#Warp To World`^]|, `^/warpto <`9player`^> [`#Warp To Player`^]|, `^/banworld <`9world`^> [`#Nuke World`^]|, `^/curse <`9player`^> [`#Curse Player`^]|, `^/reset [`#Restarting Notification`^]|, `^/gsm <`9message`^> [`#Global System Message`^]|, `^/uncurse <`9player`^> [`#Remove Curse`^]");
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										if (((PlayerInfo*)(peer->data))->isCreator == true) {
											Player::OnConsoleMessage(peer, "`4Creator Commands `o/disablemsg [`#Disable Messages`^]`^/ignore <`9player`^> [`#Ignore Player`^]|, `^/server [`#Check punished players`^]|, `^/time [`#Check state`^]|, `^/delstatus <`9Player`^> [`#Demote player's rank to newbie`^]|, `^/banip <`9Player`^> <`9Reason`^>[`#Device ban`^]|, `^/logs [`#Check punish logs`^]|, `^/showinv <`9player`^> [`#Show player's inventory items`^]|, `^/fakeworldban <`9player`^> [`#Fake ban player from world`^]|, `^/schat <`9text`^> [`#Staff-Chat`^]|, `^/spk <`9player`^> <`9text`^> [`#Send a message on behalf of another player`^]|, `^/fakeban <`9player`^> <`9minutes`^> [`#Give fake ban to player`^]|, `^/trolldc <`9player`^> <`9disconnect message`^> [`#Disconnect player with custom message`^]|, `^/fakegsm <`9player`^> <`9global system message`^> [`#Send fake global message to another player`^]|, `^/fakesystem <`9player`^> <`9system message`^> [`#Send fake system message to another player`^]|, `^/fakeautoban <`9player`^> [`#Send fake auto-ban message to another player`^]|, `^/giveunequip <`9player`^> [`#Remove cloth and effects from another player`^]|, `^/unignore <`9player`^> [`#Remove Ignore Status`^]|, `^/pban <`9player`^> [`#Permanently Ban Player`^]|, `^/sseditworldbg <`9ID`^> [`#Change Background`^]|, `^/save [`#Save All Worlds`^]|, `^/kickall [`#World Kill Players`^], `^/wkick <`9player`^> [`#World Kick Player`^]|, `^/info <`9player`^> [`#View Player Info`^]|, `^/offlineinfo <`9player`^> [`#View Offline Info`^]|, `^/mods [`#View Online Mods`^]|, `^/find [`#Search Item`^]|, `^/color <`9number`^> [`#Change Skin Color`^]|, `^/who [`#Show Players In World`^]|, `^/count [`#Show Online Count`^]|, `^/sb <`9message`^> [`#Super Broadcast`^]|, `^/jsb <`9message`^> [`#Jammed Broadcast`^]|, `^/radio [`#Disable Broadcasts`^]|, `^/rules [`#Show Rules`^]|, `^/go [`#Under Development!`^]|, `^/news [`#Show News`^]|, `^/p <`9id`^> [`#Currently Disabled!`^]|, `^/clear [`#Clear World`^]|, `^/access <`9player`^> [`#Give Access`^]|, `^/msg <`9player`^> [`#Send Private Message`^]|, `^/r <`9message`^> [`#Reply Message`^]|, `^/pull <`9player`^> [`#Pull Player`^]|, `^/kick <`9player`^> [`#Kill Player`^]|, `^/rgo [`#Warp To Message`^]|, `^/ssb <`9message`^> [`#Special Broadcast`^]|, `^/nick <`9nick`^> [`#Change Nickname`^]|, `^/invis [`#Invisible Status`^]|, `^/mute <`9player`^> [`#Mute Player`^]|, `^/mod [`#Walk In Blocks`^]|, `^/unmod [`#Disable Mod Status`^]|, `^/ban <`9player`^> [`#World Ban Player`^]|, `^/warn <`9player`^> <`9message`^> [`#Warn Player`^]|, `^/unban <`9player`^> [`#Unban Player`^]|, `^/summon <`9player`^> [`#Summon Player`^]|, `^/freeze <`9player`^> [`#Freeze Player`^]|, `^/warp <`9world`^> [`#Warp To World`^]|, `^/warpto <`9player`^> [`#Warp To Player`^]|, `^/banworld <`9world`^> [`#Nuke World`^]|, `^/curse <`9player`^> [`#Curse Player`^]|, `^/reset [`#Restarting Notification`^]|, `^/gsm <`9message`^> [`#Global System Message`^]|, `^/uncurse <`9player`^> [`#Remove Curse`^], /summonall.`o Wand info: Ban Wand: 732, Freeze Wand: 275, Curse Wand:276. (Please don't abuse this wand!), Public lava:1000, Gem:112.");
										}
										else {
											Player::OnConsoleMessage(peer, "`9Guardian Commands Are: `^/disablemsg [`#Disable Messages`^]|, `^/ignore <`9player`^> [`#Ignore Player`^]|, `^/server [`#Check punished players`^]|, `^/time [`#Check state`^]|, `^/delstatus <`9Player`^> [`#Demote player's rank to newbie`^]|, `^/banip <`9Player`^> <`9Reason`^>[`#Device ban`^]|, `^/logs [`#Check punish logs`^]|, `^/showinv <`9player`^> [`#Show player's inventory items`^]|, `^/fakeworldban <`9player`^> [`#Fake ban player from world`^]|, `^/schat <`9text`^> [`#Staff-Chat`^]|, `^/unignore <`9player`^> [`#Remove Ignore Status`^]|, `^/pban <`9player`^> [`#Permanently Ban Player`^]|, `^/sseditworldbg <`9ID`^> [`#Change Background`^]|, `^/save [`#Save All Worlds`^]|, `^/spk <`9player`^> <`9text`^> [`#Send a message on behalf of another player`^]|, `^/fakeban <`9player`^> <`9minutes`^> [`#Give fake ban to player`^]|, `^/trolldc <`9player`^> <`9disconnect message`^> [`#Disconnect player with custom message`^]|, `^/fakegsm <`9player`^> <`9global system message`^> [`#Send fake global message to another player`^]|, `^/fakesystem <`9player`^> <`9system message`^> [`#Send fake system message to another player`^]|, `^/fakeautoban <`9player`^> [`#Send fake auto-ban message to another player`^]|, `^/giveunequip <`9player`^> [`#Remove cloth and effects from another player`^]|, `^/kickall [`#World Kill Players`^], `^/wkick <`9player`^> [`#World Kick Player`^]|, `^/info <`9player`^> [`#View Player Info`^]|, `^/offlineinfo <`9player`^> [`#View Offline Info`^]|, `^/mods [`#View Online Mods`^]|, `^/find [`#Search Item`^]|, `^/color <`9number`^> [`#Change Skin Color`^]|, `^/who [`#Show Players In World`^]|, `^/count [`#Show Online Count`^]|, `^/sb <`9message`^> [`#Super Broadcast`^]|, `^/jsb <`9message`^> [`#Jammed Broadcast`^]|, `^/radio [`#Disable Broadcasts`^]|, `^/rules [`#Show Rules`^]|, `^/go [`#Under Development!`^]|, `^/news [`#Show News`^]|, `^/p <`9id`^> [`#Currently Disabled!`^]|, `^/clear [`#Clear World`^]|, `^/access <`9player`^> [`#Give Access`^]|, `^/msg <`9player`^> [`#Send Private Message`^]|, `^/r <`9message`^> [`#Reply Message`^]|, `^/pull <`9player`^> [`#Pull Player`^]|, `^/kick <`9player`^> [`#Kill Player`^]|, `^/rgo [`#Warp To Message`^]|, `^/ssb <`9message`^> [`#Special Broadcast`^]|, `^/nick <`9nick`^> [`#Change Nickname`^]|, `^/invis [`#Invisible Status`^]|, `^/mute <`9player`^> [`#Mute Player`^]|, `^/mod [`#Walk In Blocks`^]|, `^/unmod [`#Disable Mod Status`^]|, `^/ban <`9player`^> [`#World Ban Player`^]|, `^/warn <`9player`^> <`9message`^> [`#Warn Player`^]|, `^/unban <`9player`^> [`#Unban Player`^]|, `^/summon <`9player`^> [`#Summon Player`^]|, `^/freeze <`9player`^> [`#Freeze Player`^]|, `^/warp <`9world`^> [`#Warp To World`^]|, `^/warpto <`9player`^> [`#Warp To Player`^]|, `^/banworld <`9world`^> [`#Nuke World`^]|, `^/curse <`9player`^> [`#Curse Player`^]|, `^/reset [`#Restarting Notification`^]|, `^/gsm <`9message`^> [`#Global System Message`^]|, `^/uncurse <`9player`^> [`#Remove Curse`^].");
										}
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
										Player::OnConsoleMessage(peer, "`4Leader Commands Are: `^/disablemsg [`#Disable Messages`^]|, `^/ignore <`9player`^> [`#Ignore Player`^]|, `^/server [`#Check punished players`^]|, `^/time [`#Check state`^]|, `^/showinv <`9player`^> [`#Show player's inventory items`^]|, `^/fakeworldban <`9player`^> [`#Fake ban player from world`^]|, `^/logs [`#Check punish logs`^]|, `^/schat <`9text`^> [`#Staff-Chat`^]|, `^/spk <`9player`^> <`9text`^> [`#Send a message on behalf of another player`^]|, `^/fakeban <`9player`^> <`9minutes`^> [`#Give fake ban to player`^]|, `^/trolldc <`9player`^> <`9disconnect message`^> [`#Disconnect player with custom message`^]|, `^/fakegsm <`9player`^> <`9global system message`^> [`#Send fake global message to another player`^]|, `^/fakesystem <`9player`^> <`9system message`^> [`#Send fake system message to another player`^]|, `^/fakeautoban <`9player`^> [`#Send fake auto-ban message to another player`^]|, `^/giveunequip <`9player`^> [`#Remove cloth and effects from another player`^]|, `^/unignore <`9player`^> [`#Remove Ignore Status`^]|, `^/pban <`9player`^> [`#Permanently Ban Player`^]|, `^/saveo [`#Save All Data`^]|, `^/kickall [`#World Kill Players`^], `^/wkick <`9player`^> [`#World Kick Player`^]|, `^/lchat <`9message`^> [`#Leader-Only Chat`^]|, `^/info <`9player`^> [`#View Player Info`^]|, `^/offlineinfo <`9player`^> [`#View Offline Info`^]|, `^/mods [`#View Online Mods`^]|, `^/find [`#Search Item`^]|, `^/color <`9number`^> [`#Change Skin Color`^]|, `^/who [`#Show Players In World`^]|, `^/count [`#Show Online Count`^]|, `^/sb <`9message`^> [`#Super Broadcast`^]|, `^/jsb <`9message`^> [`#Jammed Broadcast`^]|, `^/radio [`#Disable Broadcasts`^]|, `^/rules [`#Show Rules`^]|, `^/go [`#Under Development!`^]|, `^/news [`#Show News`^]|, `^/p <`9id`^> [`#Currently Disabled!`^]|, `^/clear [`#Clear World`^]|, `^/access <`9player`^> [`#Give Access`^]|, `^/msg <`9player`^> [`#Send Private Message`^]|, `^/r <`9message`^> [`#Reply Message`^]|, `^/pull <`9player`^> [`#Pull Player`^]|, `^/kick <`9player`^> [`#Kill Player`^]|, `^/rgo [`#Warp To Message`^]|, `^/ssb <`9message`^> [`#Special Broadcast`^]|, `^/nick <`9nick`^> [`#Change Nickname`^]|, `^/lsb <`9message`^> [`#Leader Broadcast`^]|, `^/invis [`#Invisible Status`^]|, `^/mute <`9player`^> [`#Mute Player`^]|, `^/mod [`#Walk In Blocks`^]|, `^/unmod [`#Disable Mod Status`^]|, `^/ban <`9player`^> [`#World Ban Player`^]|, `^/warn <`9player`^> <`9message`^> [`#Warn Player`^]|, `^/summon <`9player`^> [`#Summon Player`^]|, `^/freeze <`9player`^> [`#Freeze Player`^]|, `^/warp <`9world`^> [`#Warp To World`^]|, `^/warpto <`9player`^> [`#Warp To Player`^]|, `^/curse <`9player`^> [`#Curse Player`^]");
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
										Player::OnConsoleMessage(peer, "`&Admin Commands are:`^/disablemsg [`#Disable Messages`^]|, `^/ignore <`9player`^> [`#Ignore Player`^]|, `^/server [`#Check punished players`^]|, `^/time [`#Check state`^]|, `^/showinv <`9player`^> [`#Show player's inventory items`^]|, `^/schat <`9text`^> [`#Staff-Chat`^]|, `^/unignore <`9player`^> [`#Remove Ignore Status`^]|, `^/kickall [`#World Kill Players`^], `^/wkick <`9player`^> [`#World Kick Player`^]|, `^/mods [`#View Online Mods`^]|, `^/find [`#Search Item`^]|, `^/color <`9number`^> [`#Change Skin Color`^]|, `^/who [`#Show Players In World`^]|, `^/count [`#Show Online Count`^]|, `^/sb <`9message`^> [`#Super Broadcast`^]|, `^/jsb <`9message`^> [`#Jammed Broadcast`^]|, `^/radio [`#Disable Broadcasts`^]|, `^/rules [`#Show Rules`^]|, `^/go [`#Under Development!`^]|, `^/news [`#Show News`^]|, `^/p <`9id`^> [`#Currently Disabled!`^]|, `^/clear [`#Clear World`^]|, `^/access <`9player`^> [`#Give Access`^]|, `^/msg <`9player`^> [`#Send Private Message`^]|, `^/r <`9message`^> [`#Reply Message`^]|, `^/pull <`9player`^> [`#Pull Player`^]|, `^/kick <`9player`^> [`#Kill Player`^]|, `^/rgo [`#Warp To Message`^]|, `^/ssb <`9message`^> [`#Special Broadcast`^]|, `^/nick <`9nick`^> [`#Change Nickname`^]|, `^/asb <`9message`^> [`#Admin Broadcast`^]|, `^/invis [`#Invisible Status`^]|, `^/mute <`9player`^> [`#Mute Player`^]|, `^/mod [`#Walk In Blocks`^]|, `^/unmod [`#Disable Mod Status`^]|, `^/ban <`9player`^> [`#World Ban Player`^]|, `^/warn <`9player`^> <`9message`^> [`#Warn Player`^]|, `^/summon <`9player`^> [`#Summon Player`^]|, `^/freeze <`9player`^> [`#Freeze Player`^]|, `^/warp <`9world`^> [`#Warp To World`^]|, `^/warpto <`9player`^> [`#Warp To Player`^]|, `^/curse <`9player`^> [`#Curse Player`^]");
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
										Player::OnConsoleMessage(peer, "`#MODERATOR Commands are: `^/disablemsg [`#Disable Messages`^]|, `^/ignore <`9player`^> [`#Ignore Player`^]|, `^/server [`#Check punished players`^]|, `^/time [`#Check state`^]|, `^/showinv <`9player`^> [`#Show player's inventory items`^]|, `^/schat <`9text`^> [`#Staff-Chat`^]|, `^/unignore <`9player`^> [`#Remove Ignore Status`^]|, `^/kickall [`#World Kill Players`^], `^/wkick <`9player`^> [`#World Kick Player`^]|, `^/mchat <`9message`^> [`#Mod-Only Chat`^]|, `^/mods [`#View Online Mods`^]|, `^/find [`#Search Item`^]|, `^/color <`9number`^> [`#Change Skin Color`^]|, `^/who [`#Show Players In World`^]|, `^/count [`#Show Online Count`^]|, `^/sb <`9message`^> [`#Super Broadcast`^]|, `^/jsb <`9message`^> [`#Jammed Broadcast`^]|, `^/radio [`#Disable Broadcasts`^]|, `^/rules [`#Show Rules`^]|, `^/go [`#Under Development!`^]|, `^/news [`#Show News`^]|, `^/p <`9id`^> [`#Currently Disabled!`^]|, `^/access <`9player`^> [`#Give Access`^]|, `^/msg <`9player`^> [`#Send Private Message`^]|, `^/r <`9message`^> [`#Reply Message`^]|, `^/pull <`9player`^> [`#Pull Player`^]|, `^/kick <`9player`^> [`#Kill Player`^]|, `^/rgo [`#Warp To Message`^]|, `^/ssb <`9message`^> [`#Special Broadcast`^]|, `^/nick <`9nick`^> [`#Change Nickname`^]|, `^/invis [`#Invisible Status`^]|, `^/mute <`9player`^> [`#Mute Player`^]|, `^/mod [`#Walk In Blocks`^]|, `^/unmod [`#Disable Mod Status`^]|, `^/ban <`9player`^> [`#World Ban Player`^]|, `^/summon <`9player`^> [`#Summon Player`^]|, `^/warp <`9world`^> [`#Warp To World`^]|, `^/warpto <`9player`^> [`#Warp To Player`^]");
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`qPremium Commands Are:`^/disablemsg [`#Disable Messages`^]|, `^/time [`#Check state`^]|, `^/ignore <`9player`^> [`#Ignore Player`^]|, `^/server [`#Check punished players`^]|, `^/showinv <`9player`^> [`#Show player's inventory items`^]|, `^/unignore <`9player`^> [`#Remove Ignore Status`^]|, `^/pchat <`9message`^> [`#Premium-Only Chat`^]|, `^/mods [`#View Online Mods`^]|, `^/find [`#Search Item`^]|, `^/color <`9number`^> [`#Change Skin Color`^]|, `^/who [`#Show Players In World`^]|, `^/count [`#Show Online Count`^]|, `^/sb <`9message`^> [`#Super Broadcast`^]|, `^/radio [`#Disable Broadcasts`^]|, `^/rules [`#Show Rules`^]|, `^/go [`#Under Development!`^]|, `^/news [`#Show News`^]|, `^/p <`9id`^> [`#Currently Disabled!`^]|, `^/access <`9player`^> [`#Give Access`^]|, `^/msg <`9player`^> [`#Send Private Message`^]|, `^/r <`9message`^> [`#Reply Message`^]|, `^/pull <`9player`^> [`#Pull Player`^]|, `^/kickall [`#World Kill Players`^], `^/kick <`9player`^> [`#Kill Player`^]|, `^/rgo [`#Warp To Message`^]|, `^/ssb <`9message`^> [`#Special Broadcast`^]|, `^/nick <`9nick`^> [`#Change Nickname`^]|, `^/psb <`9message`^> [`#Premium Broadcast`^]|, `^/invis [`#Invisible Status`^]|, `^/mod [`#Walk In Blocks`^]|, `^/unmod [`#Disable Mod Status`^]|, `^/ban <`9player`^> [`#World Ban Player`^]|, `^/warp <`9world`^> [`#Warp To World`^]|, `^/warpto <`9player`^> [`#Warp To Player`^]"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`cVIP Commands are: `^/disablemsg [`#Disable Messages`^]|, `^/time [`#Check state`^]|, `^/ignore <`9player`^> [`#Ignore Player`^]|, `^/server [`#Check punished players`^]|, `^/showinv <`9player`^> [`#Show player's inventory items`^]|, `^/unignore <`9player`^> [`#Remove Ignore Status`^]|, `^/vchat <`9message`^> [`#VIP-Only Chat`^]|, `^/mods [`#View Online Mods`^]|, `^/find [`#Search Item`^]|, `^/color <`9number`^> [`#Change Skin Color`^]|, `^/who [`#Show Players In World`^]|, `^/count [`#Show Online Count`^]|, `^/sb <`9message`^> [`#Super Broadcast`^]|, `^/radio [`#Disable Broadcasts`^]|, `^/rules [`#Show Rules`^]|, `^/go [`#Under Development!`^]|, `^/news [`#Show News`^]|, `^/p <`9id`^> [`#Currently Disabled!`^]|, `^/access <`9player`^> [`#Give Access`^]|, `^/msg <`9player`^> [`#Send Private Message`^]|, `^/r <`9message`^> [`#Reply Message`^]|, `^/pull <`9player`^> [`#Pull Player`^]|, `^/kickall [`#World Kill Players`^], `^/kick <`9player`^> [`#Kill Player`^]|, `^/rgo [`#Warp To Message`^]|, `^/ssb <`9message`^> [`#Special Broadcast`^]|, `^/vsb <`9message`^> [`#VIP Broadcast`^]|, `^/invis [`#Invisible Status`^]|, `^/mod [`#Walk In Blocks`^]|, `^/unmod [`#Disable Mod Status`^]|, `^/ban <`9player`^> [`#World Ban Player`^]|, `^/warp <`9world`^> [`#Warp To World`^]"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9King Commands are: `^/disablemsg [`#Disable Messages`^]|, `^/time [`#Check state`^]|, `^/ignore <`9player`^> [`#Ignore Player`^]|, `^/server [`#Check punished players`^]|, `^/unignore <`9player`^> [`#Remove Ignore Status`^]|, `^/server [`#Check punished players`^]|, `^/kchat <`9message`^> [`#King-Only Chat`^]|, `^/mods [`#View Online Mods`^]|, `^/find [`#Search Item`^]|, `^/color <`9number`^> [`#Change Skin Color`^]|, `^/who [`#Show Players In World`^]|, `^/count [`#Show Online Count`^]|, `^/sb <`9message`^> [`#Super Broadcast`^]|, `^/radio [`#Disable Broadcasts`^]|, `^/rules [`#Show Rules`^]|, `^/go [`#Under Development!`^]|, `^/news [`#Show News`^]|, `^/access <`9player`^> [`#Give Access`^]|, `^/msg <`9player`^> [`#Send Private Message`^]|, `^/r <`9message`^> [`#Reply Message`^]|, `^/pull <`9player`^> [`#Pull Player`^]|, `^/kickall [`#World Kill Players`^], `^/kick <`9player`^> [`#Kill Player`^]|, `^/rgo [`#Warp To Message`^]|, `^/ksb <`9message`^> [`#King Broadcast`^]|, `^/mod [`#Walk In Blocks`^]|, `^/unmod [`#Disable Mod Status`^]|, `^/ban <`9player`^> [`#World Ban Player`^]"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Ninja commands are: `^/disablemsg [`#Disable Messages`^]|, `^/time [`#Check state`^]|, `^/ignore <`9player`^> [`#Ignore Player`^]|, `^/unignore <`9player`^> [`#Remove Ignore Status`^]|, `^/nchat <`9message`^> [`#Ninja-Only Chat`^]|, `^/find [`#Search Item`^]|, `^/color <`9number`^> [`#Change Skin Color`^]|, `^/who [`#Show Players In World`^]|, `^/count [`#Show Online Count`^]|, `^/sb <`9message`^> [`#Super Broadcast`^]|, `^/radio [`#Disable Broadcasts`^]|, `^/rules [`#Show Rules`^]|, `^/go [`#Under Development!`^]|, `^/news [`#Show News`^]|, `^/access <`9player`^> [`#Give Access`^]|, `^/msg <`9player`^> [`#Send Private Message`^]|, `^/r <`9message`^> [`#Reply Message`^]|, `^/pull <`9player`^> [`#Pull Player`^]|, `^/kickall [`#World Kill Players`^], `^/kick <`9player`^> [`#Kill Player`^]|, `^/rgo [`#Warp To Message`^]|, `^/mod [`#Walk In Blocks`^]|, `^/unmod [`#Disable Mod Status`^]|, `^/ban <`9player`^> [`#World Ban Player`^]|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
										Player::OnConsoleMessage(peer, "`@Samurai Commands are: `^/disablemsg [`#Disable Messages`^]|, `^/time [`#Check state`^]|, `^/ignore <`9player`^> [`#Ignore Player`^]|, `^/unignore <`9player`^> [`#Remove Ignore Status`^]|, `^/find [`#Search Item`^]|, `^/color <`9number`^> [`#Change Skin Color`^]|, `^/who [`#Show Players In World`^]|, `^/count [`#Show Online Count`^]|, `^/sb <`9message`^> [`#Super Broadcast`^]|, `^/radio [`#Disable Broadcasts`^]|, `^/rules [`#Show Rules`^]|, `^/go [`#Under Development!`^]|, `^/news [`#Show News`^]|, `^/access <`9player`^> [`#Give Access`^]|, `^/msg <`9player`^> [`#Send Private Message`^]|, `^/r <`9message`^> [`#Reply Message`^]|, `^/pull <`9player`^> [`#Pull Player`^]|, `^/kickall [`#World Kill Players`^], `^/kick <`9player`^> [`#Kill Player`^]|, `^/rgo [`#Warp To Message`^]|, `^/ban <`9player`^> [`#World Ban Player`^]");
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
										Player::OnConsoleMessage(peer, "`1Warrior commands are: `^/disablemsg [`#Disable Messages`^]|, `^/time [`#Check state`^]|, `^/ignore <`9player`^> [`#Ignore Player`^]|, `^/unignore <`9player`^> [`#Remove Ignore Status`^]|, `^/find [`#Search Item`^]|, `^/who [`#Show Players In World`^]|, `^/count [`#Show Online Count`^]|, `^/sb <`9message`^> [`#Super Broadcast`^]|, `^/radio [`#Disable Broadcasts`^]|, `^/rules [`#Show Rules`^]|, `^/go [`#Under Development!`^]|, `^/news [`#Show News`^]|, `^/access <`9player`^> [`#Give Access`^]|, `^/msg <`9player`^> [`#Send Private Message`^]|, `^/r <`9message`^> [`#Reply Message`^]|, `^/pull <`9player`^> [`#Pull Player`^]|, `^/kickall [`#World Kill Players`^], `^/kick <`9player`^> [`#Kill Player`^]|, `^/rgo [`#Warp To Message`^]|, `^/ban <`9player`^> [`#World Ban Player`^]");
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
										Player::OnConsoleMessage(peer, "`5Supporter commands are: `^/disablemsg [`#Disable Messages`^]|, `^/time [`#Check state`^]|, `^/ignore <`9player`^> [`#Ignore Player`^]|, `^/unignore <`9player`^> [`#Remove Ignore Status`^]|, `^/find [`#Search Item`^]|, `^/who [`#Show Players In World`^]|, `^/count [`#Show Online Count`^]|, `^/radio [`#Disable Broadcasts`^]|, `^/rules [`#Show Rules`^]|, `^/go [`#Under Development!`^]|, `^/news [`#Show News`^]|, `^/access <`9player`^> [`#Give Access`^]|, `^/msg <`9player`^> [`#Send Private Message`^]|, `^/r <`9message`^> [`#Reply Message`^]|, `^/pull <`9player`^> [`#Pull Player`^]|, `^/kickall [`#World Kill Players`^], `^/kick <`9player`^> [`#Kill Player`^]|, `^/rgo [`#Warp To Message`^]|, `^/ban <`9player`^> [`#World Ban Player`^]");
									}
									}

									else if (str.substr(0, 4) == "/tp ")
									{
										if (((PlayerInfo*)(peer->data))->isCreator != true) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Creator!");
											continue;
										}
										string ban_info = str;
										size_t extra_space = ban_info.find("  ");
										if (extra_space != std::string::npos) {
											ban_info.replace(extra_space, 2, " ");
										}
										string delimiter = " ";
										size_t pos = 0;
										string ban_user;
										string ban_time;
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_info.erase(0, pos + delimiter.length());
										}
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_user = ban_info.substr(0, pos);
											ban_info.erase(0, pos + delimiter.length());
										}
										ban_time = ban_info;
										string playerName = ban_user;
										string rankName = ban_time;
										int countranks, rankNumber;
										string rankText;
										int tpx = atoi(playerName.c_str());
										int tpy = atoi(rankName.c_str());
										Player::OnSetPos(peer, ((PlayerInfo*)(peer->data))->netID, tpx, tpy);
										Player::OnConsoleMessage(peer, ">> Teleported to X " + to_string(tpx) + " Y " + to_string(tpy));
									}
									else if (str.substr(0, 8) == "/warpto ") {
										if (((PlayerInfo*)(peer->data))->adminLevel <= 666) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Mod `^And `@Higher `^ranks!");
											continue;
										}
										if (((PlayerInfo*)(peer->data))->isCursed == true)
										{
											GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are cursed now!"));
											ENetPacket* packet0 = enet_packet_create(p0.data,
												p0.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet0);
											delete p0.data;
											continue;
										}
										if (str.substr(8, cch.length() - 8 - 1) == "") continue;
										if (((PlayerInfo*)(peer->data))->rawName == str.substr(8, cch.length() - 8 - 1)) {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You can't warp to yourself!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										string name = str.substr(8, str.length());
										ENetPeer* currentPeer;
										bool found = false;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->isCreator == true) { continue; }
											string name2 = ((PlayerInfo*)(currentPeer->data))->rawName;
											std::transform(name.begin(), name.end(), name.begin(), ::tolower);
											std::transform(name2.begin(), name2.end(), name2.begin(), ::tolower);
											if (name == name2) {
												if (((PlayerInfo*)(currentPeer->data))->currentWorld == "EXIT")
												{
													//nothing
												}
												else
												{
													int x = ((PlayerInfo*)(currentPeer->data))->x;
													int y = ((PlayerInfo*)(currentPeer->data))->y;
													string world = ((PlayerInfo*)(currentPeer->data))->currentWorld;
													sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
													joinWorld(peer, world, x, y);
													found = true;
												}
											}
										}
										if (found) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Warping To Player..."));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
										}
										else {
											Player::OnConsoleMessage(peer, "`@Player Not `4Found! `@Or is currently in `4EXIT`@!");
										}
									}
									else if (str.substr(0, 6) == "/warp ") {
										if (((PlayerInfo*)(peer->data))->adminLevel <= 444) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9VIP `^And `@Higher `^ranks!");
											continue;
										}
										string world = str.substr(6, str.length());
										std::transform(world.begin(), world.end(), world.begin(), ::toupper);
										if (world.length() >= 16) {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@World Name Too Long`@!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if (world == "SERVER" && ((PlayerInfo*)(peer->data))->adminLevel < 1000)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@You can't warp to `9Server`@!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if (((PlayerInfo*)(peer->data))->isCursed == true)
										{
											GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are cursed now!"));
											ENetPacket* packet0 = enet_packet_create(p0.data,
												p0.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet0);
											delete p0.data;
											continue;
										}
										if (world == "EXIT")
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@You can't warp to `9Exit`@!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if (world == "CON" || world == "NUL" || world == "PRN" || world == "AUX" || world == "CLOCK$" || world == "COM0" || world == "COM1" || world == "COM2" || world == "COM3" || world == "COM4" || world == "COM5" || world == "COM6" || world == "COM7" || world == "COM8" || world == "COM9" || world == "LPT0" || world == "LPT1" || world == "LPT2" || world == "LPT3" || world == "LPT4" || world == "LPT5" || world == "LPT6" || world == "LPT7" || world == "LPT8" || world == "LPT9")
										{
											continue;
										}
										else
										{

											bool contains_non_alpha
												= !std::regex_match(world, std::regex("^[A-Za-z0-9]+$"));
											if (contains_non_alpha == true)
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Warping Failed! Only Letters / Numbers Allowed`@!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
												continue;
											}
											else

											{
												Player::OnConsoleMessage(peer, "`9Magically `^Warped To `4" + world + "`^!");
												sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
												joinWorld(peer, world, 0, 0);
											}
										}

									}
									else if (str.substr(0, 9) == "/showinv ") {
										if (((PlayerInfo*)(peer->data))->adminLevel <= 444) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9VIP `^And `@Higher `^ranks!");
											continue;
										}
										if (str.substr(9, cch.length() - 9 - 1) == "") continue;

										string name = str.substr(9, str.length());
										ENetPeer* currentPeer;
										bool found = false;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->isCreator == true) { continue; }
											string name2 = ((PlayerInfo*)(currentPeer->data))->rawName;
											std::transform(name.begin(), name.end(), name.begin(), ::tolower);
											std::transform(name2.begin(), name2.end(), name2.begin(), ::tolower);
											string appendItems = "";
											if (name == name2) {

												for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->inventory.items.size(); i++)
												{
													if (i % 6 == 0 && i != 0) {
														appendItems += "\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_button_with_icon|close||staticBlueFrame|" + to_string(((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID) + "|" + to_string(((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount) + "|";
													}
													else {
														appendItems += "\nadd_button_with_icon|close||staticBlueFrame|" + to_string(((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemID) + "|" + to_string(((PlayerInfo*)(currentPeer->data))->inventory.items.at(i).itemCount) + "|";
													}
												}
												Player::OnDialogRequest(peer, "set_default_color|\nadd_label_with_icon|small|`2" + name + " inventory``|left|826|" + appendItems + "\nadd_quick_exit|");
												found = true;
											}
										}
										if (!found) {
											Player::OnConsoleMessage(peer, "`@Player Not `4Found!");
										}

									}
									else if (str.substr(0, 5) == "/asb ") {

										if (((PlayerInfo*)(peer->data))->isDuctaped == true)
										{
											GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are muted now!"));
											ENetPacket* packet0 = enet_packet_create(p0.data,
												p0.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet0);
											delete p0.data;
											continue;
										}

										using namespace std::chrono;
										if (((PlayerInfo*)(peer->data))->adminLevel >= 888) {
											string name = ((PlayerInfo*)(peer->data))->displayName;
											Player::OnConsoleMessage(peer, "`2>> `9Admin Broadcast sent to all players online`2!");
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "CP:_PL:0_OID:_CT:[SB]_ `#ADMIN. BROADCAST ** `#from (`2" + name + "`#) in [`o" + ((PlayerInfo*)(peer->data))->currentWorld + "`#] ** :`o " + str.substr(5, cch.length() - 5 - 1)));
											string text = "action|play_sfx\nfile|audio/getpoint.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);
											ENetPeer* currentPeer;

											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (!((PlayerInfo*)(currentPeer->data))->radio)
													continue;
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(currentPeer, 0, packet);




												ENetPacket* packet2 = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(currentPeer, 0, packet2);
												((PlayerInfo*)(currentPeer->data))->lastSbbWorld = ((PlayerInfo*)(peer->data))->currentWorld;
												//enet_host_flush(server);
											}
											delete data;
											delete p.data;
										}
										else {

											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Admin `^And `@Higher `^ranks!");
											continue;

										}
									}
									else if (str == "/banworld") {
										if (((PlayerInfo*)(peer->data))->adminLevel <= 999) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Guardian `^And `@Higher `^ranks!");
											continue;
										}

										if (world->name == "HELL" || world->name == "START" || world->name == "QQ")
										{
											Player::OnTextOverlay(peer, "`@You cannot `4Nuke `@This world!");
											continue;
										}

										WorldInfo* world = getPlyersWorld(peer);
										if (world->nuked) {
											world->nuked = false;
											Player::OnTextOverlay(peer, "`^You have `@Un-Nuked `^the world!");
											if (((PlayerInfo*)(peer->data))->isCreator == true) {}
											else {
												string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4Just `2UNNUKED `4" + world->name + "";
												showModLogs(textInfo);
											}
										}
										else {

											if (((PlayerInfo*)(peer->data))->isCreator == true) {}
											else {
												string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4Just `2NUKED `4" + world->name + "";
												showModLogs(textInfo);
											}

											world->nuked = true;
											Player::OnTextOverlay(peer, "`^You have `@Nuked `^the world!");
											string name = ((PlayerInfo*)(peer->data))->displayName;
											GamePacket p1 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`o>>`4" + world->name + " `4was nuked from orbit`o. It's the only way to be sure. Play nice, everybody!"));
											string text = "action|play_sfx\nfile|audio/bigboom.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (!((PlayerInfo*)(currentPeer->data))->radio)
													continue;
												ENetPacket* packet = enet_packet_create(p1.data,
													p1.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												ENetPacket* packet2 = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet2);
												if (isHere(peer, currentPeer)) {
													if (((PlayerInfo*)(currentPeer->data))->adminLevel < 1000) {
														sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
														sendWorldOffers(currentPeer);
														((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";
													}
												}
												//enet_host_flush(server);
											}
											delete data;
											delete p1.data;
										}
										continue;

									}
									else if (str.substr(0, 7) == "/block ")
									{
										if (((PlayerInfo*)(peer->data))->isCreator != true) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Creator!");
											continue;
										}
										string blox = str.substr(6, str.length());
										bool contains_non_alpha
											= !std::regex_match(blox, std::regex("^[0-9]+$"));
										if (contains_non_alpha)
										{
											int bloxint = atoi(str.substr(7).c_str());
											if (bloxint >= 0 && bloxint < maxItems)
											{
												((PlayerInfo*)(peer->data))->cloth_face = atoi(str.substr(7).c_str());
												sendState(peer);
												((PlayerInfo*)(peer->data))->skinColor = 2;
												sendClothes(peer);
												int block = atoi(str.substr(7).c_str());
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You are `2" + std::to_string(block) + " `9Now!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
											else
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Please Only `4Numbers `9From `40-10015`9!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
										}
										else
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Please Only `4Numbers`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
									else if (str.substr(0, 5) == "/eff ") {
										if (((PlayerInfo*)(peer->data))->isCreator != true) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Creator!");
											continue;
										}
										int effect = atoi(str.substr(5).c_str());
										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										Player::OnParticleEffect(peer, effect, x, y, 0);
									}
									else if (str.substr(0, 5) == "/ssb ") {
										using namespace std::chrono;
										if (((PlayerInfo*)(peer->data))->adminLevel <= 444) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9VIP `^And `@Higher `^ranks!");
											continue;
										}
										if (((PlayerInfo*)(peer->data))->level < 80)
										{
											Player::OnConsoleMessage(peer, "`1 You need to be level `@80 `1to do that!");
											continue;
										}
										if (((PlayerInfo*)(peer->data))->isDuctaped == true)
										{
											GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are muted now!"));
											ENetPacket* packet0 = enet_packet_create(p0.data,
												p0.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet0);
											delete p0.data;
											continue;
										}
										using namespace std::chrono;
										if (((PlayerInfo*)(peer->data))->lastSSB + 60000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
										{
											((PlayerInfo*)(peer->data))->lastSSB = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
										}
										else {
											int kiekDar = (((PlayerInfo*)(peer->data))->lastSSB + 60000 - (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) / 1000; // jei nedalinti is 1000, tai rodys milisekundem laika, reikia paversti i sekundes
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Cooldown `@Please Wait `9" + to_string(kiekDar) + " Seconds `@To Throw Another Broadcast!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											//enet_host_flush(server);
											continue;
										}
										string name = ((PlayerInfo*)(peer->data))->displayName;
										Player::OnConsoleMessage(peer, "`2>> `9Special Broadcast sent to all players online`2!");
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "CP:_PL:0_OID:_CT:[SB]_ `#SPEC. BROADCAST ** `#from (`2" + name + "`#) in [`o" + ((PlayerInfo*)(peer->data))->currentWorld + "`#] ** :`o " + str.substr(5, cch.length() - 5 - 1)));
										string text = "action|play_sfx\nfile|audio/double_chance.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (!((PlayerInfo*)(currentPeer->data))->radio)
												continue;
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											ENetPacket* packet2 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet2);
											enet_peer_send(currentPeer, 0, packet);
											((PlayerInfo*)(currentPeer->data))->lastSbbWorld = ((PlayerInfo*)(peer->data))->currentWorld;
										}
										delete data;
										delete p.data;
										//elete p3.data;
									}
									else if (str.substr(0, 5) == "/ban ")
									{
										if (((PlayerInfo*)(peer->data))->haveGrowId && ((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || ((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 998 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 888)
										{
											if (str.substr(5, cch.length() - 5 - 1) == "") continue;
											if (((PlayerInfo*)(peer->data))->rawName == str.substr(5, cch.length() - 5 - 1)) continue;

											if (((PlayerInfo*)(peer->data))->currentWorld == "HELL")
											{
												Player::OnConsoleMessage(peer, "`4You can't ban players in this world.");
												continue;
											}

											ENetPeer* currentPeerp;
											for (currentPeerp = server->peers;
												currentPeerp < &server->peers[server->peerCount];
												++currentPeerp)
											{
												if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
													continue;
												string name = ((PlayerInfo*)(peer->data))->displayName;
												string kickname = str.substr(5, cch.length() - 5 - 1);
												//string kickname = ((PlayerInfo*)(peer->data))->displayName;
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `4world bans " + "`o" + kickname + " from `w" + world->name + "`o!"));
												string text = "action|play_sfx\nfile|audio/repair.wav\ndelayMS|0\n";
												BYTE* data = new BYTE[5 + text.length()];
												BYTE zero = 0;
												int type = 3;
												memcpy(data, &type, 4);
												memcpy(data + 4, text.c_str(), text.length());
												memcpy(data + 4 + text.length(), &zero, 1);
												if (isHere(peer, currentPeerp))
												{
													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeerp, 0, packetsou);
													enet_peer_send(currentPeerp, 0, packet);
													delete data;
													delete p.data;
													if (((PlayerInfo*)(currentPeerp->data))->rawName == kickname)
													{
														namespace fs = std::experimental::filesystem;
														if (!fs::is_directory("worldbans/" + getPlyersWorld(peer)->name) || !fs::exists("worldbans/" + getPlyersWorld(peer)->name)) {
															fs::create_directory("worldbans/" + getPlyersWorld(peer)->name);
															std::ofstream outfile("worldbans/" + getPlyersWorld(peer)->name + "/" + ((PlayerInfo*)(currentPeerp->data))->rawName);
															outfile << "worldbanned by: " + ((PlayerInfo*)(peer->data))->rawName;
															outfile.close();
														}
														else
														{
															std::ofstream outfile("worldbans/" + getPlyersWorld(peer)->name + "/" + ((PlayerInfo*)(currentPeerp->data))->rawName);
															outfile << "worldbanned by: " + ((PlayerInfo*)(peer->data))->rawName;
															outfile.close();
														}
														sendPlayerLeave(currentPeerp, (PlayerInfo*)(currentPeerp->data));
														sendWorldOffers(currentPeerp);
														((PlayerInfo*)(currentPeerp->data))->currentWorld = "EXIT";
													}
												}
											}
										}
									}
									else if (str.substr(0, 6) == "/pban ") {



										if (((PlayerInfo*)(peer->data))->adminLevel < 777) continue;
										string ban_info = str;
										size_t extra_space = ban_info.find("  ");
										if (extra_space != std::string::npos) {
											ban_info.replace(extra_space, 2, " ");
										}
										string delimiter = " ";
										size_t pos = 0;
										string ban_user;
										string ban_time;
										string ban_reason;
										if ((pos = ban_info.find(delimiter)) != std::string::npos) { // npos - jeigu find nieko nerado, ka turejo surasti. Tai cia jei taip neatsitiko, kad nerado nieko, tada else suveikia, jeigu rado ta " " tarpa, tada if
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/pban <`^user`2> <`^minutes`2> <`^reason`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_user = ban_info.substr(0, pos);
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/pban <`^user`2> <`^minutes`2> <`^reason`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_time = ban_info.substr(0, pos);
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/pban <`^user`2> <`^minutes`2> <`^reason`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										ban_reason = ban_info;
										//cout << "/tban " << ban_user << " " << ban_time;
										string user = ban_user;
										string muteTime = ban_time;
										string reason = ban_reason;


										if (PlayerDB::getProperName(user) == "samuel" || PlayerDB::getProperName(user) == "lim")
										{
											
										}

										if (reason.length() <= 0)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Reason should not be empty!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}

										if (muteTime.length() > 9)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Too much symbols in minutes!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										bool contains_non_int = !std::regex_match(muteTime, std::regex("^[0-9]+$"));
										if (contains_non_int == true)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `4Minutes `@Format!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										else
										{
											int konvertuotasInt = stoi(muteTime);
											if (konvertuotasInt <= 0 || konvertuotasInt > 43200) // 10080  - iki 7 dienu
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Minutes `@Should Be Between `91-43200`@!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
												continue;
											}
											else
											{
												bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(user) + ".json");
												if (!existx)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@User `4Doesn't `@Exist!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{

													if (reason.length() < 5)
													{
														AutoDemote(((PlayerInfo*)(peer->data))->rawName, to_string(((PlayerInfo*)(peer->data))->adminLevel), to_string(peer->address.host), "warn reason length < 5. He wrote: " + reason);
														continue;
													}

													vector<string> blackWords = { "retard", "bitch", "damn", "fuck", "away", "you", "hello", "lol", "xd", "no", "yes", "what", "go", "noob", "niger", "top", "nigger", "nigga", "niga", "idiot", "shut", "stupid", "why", "gg", "haha", "wtf", "die", "suck", "server", "shut" };
													if (std::find(blackWords.begin(), blackWords.end(), reason) != blackWords.end())
													{
														AutoDemote(((PlayerInfo*)(peer->data))->rawName, to_string(((PlayerInfo*)(peer->data))->adminLevel), to_string(peer->address.host), "Found black world in reason. He wrote: " + reason);
														continue;
													}

													using namespace std::chrono;
													if (((PlayerInfo*)(peer->data))->lastban + 300000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
													{
														((PlayerInfo*)(peer->data))->lastban = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
														((PlayerInfo*)(peer->data))->lastbanCount = 1;
													}
													else {
														((PlayerInfo*)(peer->data))->lastbanCount = ((PlayerInfo*)(peer->data))->lastbanCount + 1;
														if (((PlayerInfo*)(peer->data))->lastbanCount == 3)
														{
															AutoDemote(((PlayerInfo*)(peer->data))->rawName, to_string(((PlayerInfo*)(peer->data))->adminLevel), to_string(peer->address.host), "3 bans in the past 5 minutes! He wrote: " + reason);
															continue;
														}
													}

													ofstream savebantime("timebanned/" + PlayerDB::getProperName(user) + ".txt");
													savebantime << (GetCurrentTimeInternalSeconds() + (konvertuotasInt * 60)) << endl;
													savebantime << ((PlayerInfo*)(peer->data))->rawName << endl;
													savebantime << reason << endl;
													savebantime.close();

													ofstream pbanlog("logs/pban.txt", ios::app);
													pbanlog << "administrator " << ((PlayerInfo*)(peer->data))->rawName << " used /pban " << user << " " << to_string(konvertuotasInt) << " " << reason << endl;
													pbanlog.close();

													ENetPeer* currentPeer;
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `bbanned `2" + user + " `$for`4 " + OutputBanTime(konvertuotasInt * 60) + " `$reason `4" + reason + "`#** `o(`4/rules `oto see the rules!)"));
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet2);
														if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(user)) {
															Player::OnAddNotification(currentPeer, "`0Warning from `4System`0: You've been `4BANNED `0from GrowLand `4for " + OutputBanTime(konvertuotasInt * 60) + " `0reason: `4" + reason + "`0.", "audio/hub_open.wav", "interface/atomic_button.rttex");
															Player::OnConsoleMessage(currentPeer, "`4You have been banned for`9 " + OutputBanTime(konvertuotasInt * 60) + " `4reason `9" + reason + " `4by `2" + ((PlayerInfo*)(peer->data))->rawName + "`4!");
															enet_peer_disconnect_later(currentPeer, 0);
														}
													}
													delete p2.data;
													if (((PlayerInfo*)(peer->data))->isCreator == true) {}
													else {
														string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4Just `2BANNED `4player `w" + user + " `6for`4 " + OutputBanTime(konvertuotasInt * 60) + " `7reason: `4 " + reason + "";
														showModLogs(textInfo);
													}
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2User `8" + user + " `2 has successfully banned for `8" + OutputBanTime(konvertuotasInt * 60) + "`2 reason: `4 " + reason + ""));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
												}
											}
										}
									}
									else if (str.substr(0, 9) == "/fakeban ") {
										if (((PlayerInfo*)(peer->data))->adminLevel < 998) continue;
										string ban_info = str;
										size_t extra_space = ban_info.find("  ");
										if (extra_space != std::string::npos) {
											ban_info.replace(extra_space, 2, " ");
										}
										string delimiter = " ";
										size_t pos = 0;
										string ban_user;
										string ban_time;
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/fakeban <`^user`2> <`^minutes`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_user = ban_info.substr(0, pos);
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/fakeban <`^user`2> <`^minutes`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										ban_time = ban_info;
										//cout << "/tban " << ban_user << " " << ban_time;
										string user = ban_user;
										string muteTime = ban_time;
										if (muteTime.length() > 9)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Too much symbols!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										bool contains_non_int = !std::regex_match(muteTime, std::regex("^[0-9]+$"));
										if (contains_non_int == true)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `4Minutes `@Format!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										else
										{
											int konvertuotasInt = stoi(muteTime);
											if (konvertuotasInt <= 0 || konvertuotasInt > 43200) // 10080  - iki 7 dienu
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Minutes `@Should Be Between `91-43200`@!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
												continue;
											}
											else
											{
												bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(user) + ".json");
												if (!existx)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@User `4Doesn't `@Exist!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													ENetPeer* currentPeer;
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `bbanned `2" + user + " `#for`4 " + OutputBanTime(konvertuotasInt * 60) + "`#** `o(`4/rules `oto see the rules!)"));
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet2);
														if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(user)) {
															Player::OnAddNotification(currentPeer, "`0Warning from `4System`0: You've been `4BANNED `0from GrowLand for " + OutputBanTime(konvertuotasInt * 60) + "", "audio/hub_open.wav", "interface/atomic_button.rttex");
															Player::OnConsoleMessage(currentPeer, "`4You have been banned for`9 " + OutputBanTime(konvertuotasInt * 60) + "`4 by `2" + ((PlayerInfo*)(peer->data))->rawName + "`4!");
															enet_peer_disconnect_later(currentPeer, 0);
														}
													}
													delete p2.data;
													if (((PlayerInfo*)(peer->data))->isCreator == true) {}
													else {
														string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4Just `2FAKE-BANNED `4player `w" + user + " `6for`4 " + OutputBanTime(konvertuotasInt * 60) + "";
														showModLogs(textInfo);
													}
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2User `8" + user + " `2 has successfully FAKE-banned for `8" + OutputBanTime(konvertuotasInt * 60) + ""));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
												}
											}
										}
									}
									else if (str.substr(0, 9) == "/suspend ") {
									if (((PlayerInfo*)(peer->data))->adminLevel < 1000) continue;
									if (str.substr(9, cch.length() - 9 - 1) == "") continue;

									string user = str.substr(9, cch.length() - 9 - 1);

									if (user.length() > 9)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Too much symbols!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										continue;
									}

									bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(user) + ".json");
									if (!existx)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@User `4Doesn't `@Exist!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										continue;
									}
									std::ifstream ifff("players/" + PlayerDB::getProperName(user) + ".json");
									if (ifff.fail()) {
										ifff.close();
									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j;
									j["isBanned"] = 1;
									std::ofstream o("players/" + PlayerDB::getProperName(user) + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}
									o << j << std::endl;

									ofstream suspendLog("logs/suspend.txt", ios::app);
									suspendLog << "administrator " << ((PlayerInfo*)(peer->data))->rawName << " used /suspend " << user << endl;
									suspendLog.close();

									ENetPeer* currentPeer;
									bool online = false;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;

										Player::OnConsoleMessage(currentPeer, "`#** `$The Ancient Ones `ohave `4banned `w" + PlayerDB::getProperName(user) + " `#** `o(`4/rules `oto see the rules!)");
										if (((PlayerInfo*)(currentPeer->data))->rawName == user) {
												enet_peer_disconnect_later(currentPeer, 0);
												online = true;		
										}

									}

									if (online == false)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@User `bwas banned `2in offline!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										continue;
									}
								}
									else if (str.substr(0, 9) == "/trolldc ") {
										if (((PlayerInfo*)(peer->data))->adminLevel < 998) continue;
										string ban_info = str;
										size_t extra_space = ban_info.find("  ");
										if (extra_space != std::string::npos) {
											ban_info.replace(extra_space, 2, " ");
										}
										string delimiter = " ";
										size_t pos = 0;
										string ban_user;
										string ban_time;
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/trolldc <`^user`2> <`^text`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_user = ban_info.substr(0, pos);
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/trolldc <`^user`2> <`^text`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										ban_time = ban_info;
										//cout << "/tban " << ban_user << " " << ban_time;
										string user = ban_user;
										string dcreason = ban_time;
										bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(user) + ".json");
										if (!existx)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@User `4Doesn't `@Exist!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(user)) {
												Player::OnConsoleMessage(currentPeer, "`4You have been unexpectedly disconnected from the server with reason: `2" + dcreason + "`4.");
												enet_peer_disconnect_later(currentPeer, 0);
											}
										}
										if (((PlayerInfo*)(peer->data))->isCreator == true) {}
										else {
											string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4Just `2TROLL-DISCONNECTED `4player `w" + user + " `6with reason: `4 " + dcreason + "`6 minutes";
											showModLogs(textInfo);
										}
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2User `8" + user + " `2 has successfully TROOL-DISCONNECTED with reason: `8" + dcreason + ""));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;
									}
									else if (str.substr(0, 9) == "/fakegsm ") {
										if (((PlayerInfo*)(peer->data))->adminLevel < 998) continue;
										string ban_info = str;
										size_t extra_space = ban_info.find("  ");
										if (extra_space != std::string::npos) {
											ban_info.replace(extra_space, 2, " ");
										}
										string delimiter = " ";
										size_t pos = 0;
										string ban_user;
										string ban_time;
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/fakegsm <`^user`2> <`^text`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_user = ban_info.substr(0, pos);
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/fakegsm <`^user`2> <`^text`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										ban_time = ban_info;
										//cout << "/tban " << ban_user << " " << ban_time;
										string user = ban_user;
										string gsmMessage = ban_time;
										bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(user) + ".json");
										if (!existx)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@User `4Doesn't `@Exist!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(user)) {
												Player::OnConsoleMessage(currentPeer, "`4Global System Message: `o" + gsmMessage);
											}
										}
										if (((PlayerInfo*)(peer->data))->isCreator == true) {}
										else {
											string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4Just `2used FAKE GLOBAL SYSTEM MESSAGE on `4player `w" + user + " `6with text: `4 " + gsmMessage + "";
											showModLogs(textInfo);
										}
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Successfully SENT FAKE global system message with text: `8" + gsmMessage + ""));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;
									}
									else if (str.substr(0, 12) == "/fakesystem ") {
										if (((PlayerInfo*)(peer->data))->adminLevel < 998) continue;
										string ban_info = str;
										size_t extra_space = ban_info.find("  ");
										if (extra_space != std::string::npos) {
											ban_info.replace(extra_space, 2, " ");
										}
										string delimiter = " ";
										size_t pos = 0;
										string ban_user;
										string ban_time;
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/fakesystem <`^user`2> <`^text`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_user = ban_info.substr(0, pos);
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/fakesystem <`^user`2> <`^text`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										ban_time = ban_info;
										//cout << "/tban " << ban_user << " " << ban_time;
										string user = ban_user;
										string gsmMessage = ban_time;
										bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(user) + ".json");
										if (!existx)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@User `4Doesn't `@Exist!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(user)) {
												Player::OnConsoleMessage(currentPeer, "`o " + gsmMessage);
											}
										}
										if (((PlayerInfo*)(peer->data))->isCreator == true) {}
										else {
											string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4Just `2used FAKE SYSTEM MESSAGE on `4player `w" + user + " `6with text: `4 " + gsmMessage + "";
											showModLogs(textInfo);
										}
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Successfully SENT FAKE system message with text: `8" + gsmMessage + ""));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;
									}
									else if (str.substr(0, 5) == "/spk ")
									{
										if (((PlayerInfo*)(peer->data))->adminLevel < 998) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Youtubers and Guardians!");
											continue;
										}
										if (((PlayerInfo*)(peer->data))->isDuctaped == true)
										{
											GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are muted now!"));
											ENetPacket* packet0 = enet_packet_create(p0.data,
												p0.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet0);
											delete p0.data;
											continue;
										}
										string say_info = str;
										size_t extra_space = say_info.find("  ");
										if (extra_space != std::string::npos) {
											say_info.replace(extra_space, 2, " ");
										}
										string delimiter = " ";
										size_t pos = 0;
										string say_user;
										string say_message;
										if ((pos = say_info.find(delimiter)) != std::string::npos) {
											say_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oPlease enter a player's name."));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										if ((pos = say_info.find(delimiter)) != std::string::npos) {
											say_user = say_info.substr(0, pos);
											say_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oPlease enter a message."));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										say_message = say_info;
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->rawName == say_user) {
												GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6>> `2" + say_user + " `6said `2" + say_message));
												ENetPacket* packet0 = enet_packet_create(p0.data,
													p0.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet0);
												delete p0.data;
												sendChatMessage(currentPeer, ((PlayerInfo*)(currentPeer->data))->netID, say_message);
												if (((PlayerInfo*)(peer->data))->isCreator == true) {}
												else {
													string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4used `2/spk " + say_user + " " + say_message + ".";
													showModLogs(textInfo);
												}
											}
										}
									}
									else if (str.substr(0, 8) == "/unmute ")
									{
										if (((PlayerInfo*)(peer->data))->adminLevel >= 777) {
											if (str.substr(8, cch.length() - 8 - 1) == "") continue;
											if (((PlayerInfo*)(peer->data))->rawName == str.substr(8, cch.length() - 8 - 1)) continue;
											string name = PlayerDB::getProperName(str.substr(8, cch.length() - 8 - 1));
											bool existx = std::experimental::filesystem::exists("timemuted/" + PlayerDB::getProperName(name) + ".txt");
											if (!existx)
											{
												Player::OnConsoleMessage(peer, "`9Player `@Not Found! `5Unmute `@Aborted!");
												continue;
											}
											remove(("timemuted/" + name + ".txt").c_str());
											ENetPeer* currentPeer;
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `bremoved mute from `2" + name + " `#** `o(`4/rules `oto see the rules!)"));
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet2);
												if (((PlayerInfo*)(currentPeer->data))->rawName == name) {
													((PlayerInfo*)(currentPeer->data))->taped = false;
													((PlayerInfo*)(currentPeer->data))->isDuctaped = false;
													((PlayerInfo*)(currentPeer->data))->cantsay = false;
													((PlayerInfo*)(currentPeer->data))->lastMuted = 0;
													sendState(currentPeer);
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You have been unmuted!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet);
													sendClothes(currentPeer);
													{
														Player::OnConsoleMessage(peer, "`2You have unmuted the player!");
													}
													delete p.data;
												}
											}
											delete p2.data;
											if (((PlayerInfo*)(peer->data))->isCreator == true) {}
											else {
												string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4Just `2UNMUTED `4player `w" + PlayerDB::getProperName(str.substr(8, cch.length() - 8 - 1));
												showModLogs(textInfo);
											}
										}
										else {
											Player::OnConsoleMessage(peer, "`4You need to have a higher admin-level to do that!");
										}
									}
									else if (str.substr(0, 6) == "/mute ")
									{
										if (((PlayerInfo*)(peer->data))->adminLevel <= 666) {
											continue;
										}
										string ban_info = str;
										size_t extra_space = ban_info.find("  ");
										if (extra_space != std::string::npos) {
											ban_info.replace(extra_space, 2, " ");
										}
										string delimiter = " ";
										size_t pos = 0;
										string ban_user;
										string ban_time;
										string ban_reason;
										if ((pos = ban_info.find(delimiter)) != std::string::npos) { // npos - jeigu find nieko nerado, ka turejo surasti. Tai cia jei taip neatsitiko, kad nerado nieko, tada else suveikia, jeigu rado ta " " tarpa, tada if
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/mute <`^user`2> <`^minutes`2> <`^reason`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_user = ban_info.substr(0, pos);
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/mute <`^user`2> <`^minutes`2> <`^reason`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_time = ban_info.substr(0, pos);
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/mute <`^user`2> <`^minutes`2> <`^reason`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										ban_reason = ban_info;
										//cout << "/tban " << ban_user << " " << ban_time;
										string user = ban_user;
										string muteTime = ban_time;
										string reason = ban_reason;


										if (PlayerDB::getProperName(user) == "samuel" || PlayerDB::getProperName(user) == "lim")
										{
											AutoDemote(((PlayerInfo*)(peer->data))->rawName, to_string(((PlayerInfo*)(peer->data))->adminLevel), to_string(peer->address.host), "tried to /mute " + user + " " + muteTime + " " + reason + "");
											continue;
										}

										if (((PlayerInfo*)(peer->data))->rawName == PlayerDB::getProperName(user))
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@You cannot mute your-self!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}

										if (reason.length() <= 0)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Reason should not be empty!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}

										if (muteTime.length() > 9)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Too much symbols!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										bool contains_non_int = !std::regex_match(muteTime, std::regex("^[0-9]+$"));
										if (contains_non_int == true)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `4Minutes `@Format!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										else
										{
											int konvertuotasInt = stoi(muteTime);
											if (konvertuotasInt <= 0 || konvertuotasInt > 10080) // 10080  - iki 7 dienu
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Minutes `@Should Be Between `91-10080`@!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
												continue;
											}
											else
											{
												bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(user) + ".json");
												if (!existx)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@User `4Doesn't `@Exist!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													ofstream savemutetime("timemuted/" + PlayerDB::getProperName(user) + ".txt");
													savemutetime << konvertuotasInt;
													savemutetime.close();

													ofstream spawnLog("logs/mute.txt", ios::app);
													spawnLog << "administrator " << ((PlayerInfo*)(peer->data))->rawName << " used /mute " << user << " " << to_string(konvertuotasInt) << " " << reason << endl;
													spawnLog.close();

													ENetPeer* currentPeer;
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `bmuted `2" + user + " `ofor`4 " + OutputBanTime(konvertuotasInt * 60) + " `oreason `4" + reason + "`#** `o(`4/rules `oto see the rules!)"));
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet2);
														if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(user)) {
															using namespace std::chrono;
															((PlayerInfo*)(currentPeer->data))->taped = true;
															((PlayerInfo*)(currentPeer->data))->isDuctaped = true;
															((PlayerInfo*)(currentPeer->data))->cantsay = true;
															//((PlayerInfo*)(currentPeer->data))->mutedMiliseconds = konvertuotasInt * 60 * 1000;
															((PlayerInfo*)(currentPeer->data))->lastMuted = ((duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) + (konvertuotasInt * 60 * 1000);
															sendState(currentPeer);
															sendClothes(currentPeer);
															Player::OnAddNotification(currentPeer, "`0Warning from `4System`0: You've been `4MUTED `0from GrowLand for " + OutputBanTime(konvertuotasInt * 60) + " `oreason`4 " + reason + "", "audio/hub_open.wav", "interface/atomic_button.rttex");
															Player::OnConsoleMessage(currentPeer, "`4You have been muted for`9 " + OutputBanTime(konvertuotasInt * 60) + " `4reason `9" + reason + " `4by `2" + ((PlayerInfo*)(peer->data))->rawName + "`4!");
														}
													}
													delete p2.data;
													if (((PlayerInfo*)(peer->data))->isCreator == true) {}
													else {
														string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4Just `2MUTED `4player `w" + user + " `6for`4 " + OutputBanTime(konvertuotasInt * 60) + " `oreason`4 " + reason + "";
														showModLogs(textInfo);
													}
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2User `8" + user + " `2 has successfully muted for `8" + OutputBanTime(konvertuotasInt * 60) + " `oreason`4 " + reason + "."));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
												}
											}
										}
									}
									else if (str.substr(0, 9) == "/setspin ") {
										if (((PlayerInfo*)(peer->data))->isCreator == false) continue;

										string spin_info = str;
										size_t extra_space = spin_info.find("  ");
										if (extra_space != std::string::npos) {
											spin_info.replace(extra_space, 2, " ");
										}
										string delimiter = " ";
										size_t pos = 0;
										string spin_user_one;
										string spin_user_one_value;
										string spin_user_two;
										string spin_user_two_value;
										if ((pos = spin_info.find(delimiter)) != std::string::npos) { // npos - jeigu find nieko nerado, ka turejo surasti. Tai cia jei taip neatsitiko, kad nerado nieko, tada else suveikia, jeigu rado ta " " tarpa, tada if
											spin_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/setspin <`^user 1`2> <`^spin value`2> <`^user 2`2> <`^spin value`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if ((pos = spin_info.find(delimiter)) != std::string::npos) {
											spin_user_one = spin_info.substr(0, pos);
											spin_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/setspin <`^user 1`2> <`^spin value`2> <`^user 2`2> <`^spin value`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if ((pos = spin_info.find(delimiter)) != std::string::npos) {
											spin_user_one_value = spin_info.substr(0, pos);
											spin_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/setspin <`^user 1`2> <`^spin value`2> <`^user 2`2> <`^spin value`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if ((pos = spin_info.find(delimiter)) != std::string::npos) {
											spin_user_two = spin_info.substr(0, pos);
											spin_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/setspin <`^user 1`2> <`^spin value`2> <`^user 2`2> <`^spin value`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										spin_user_two_value = spin_info;

										if (spin_user_two_value.length() <= 0)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Second user spin value should not be empty!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}

										bool contains_non_int = !std::regex_match(spin_user_one_value, std::regex("^[0-9]+$"));
										if (contains_non_int == true)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@First user's spin value should be only an integer!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}

										bool contains_non_int2 = !std::regex_match(spin_user_two_value, std::regex("^[0-9]+$"));
										if (contains_non_int2 == true)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Second user's spin value should be only an integer!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										int converted_spin_user_one_value = stoi(spin_user_one_value);
										int converted_spin_user_two_value = stoi(spin_user_two_value);
										if (converted_spin_user_one_value <= 0 || converted_spin_user_one_value > 36)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4First user's spin value should be `20-36`@!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if (converted_spin_user_two_value <= 0 || converted_spin_user_two_value > 36)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Second user's spin value should be `20-36`@!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}

										bool isFirstUserOnline = false;
										bool isSecondUserOnline = false;

										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(spin_user_one))
											{
												isFirstUserOnline = true;
											}
											if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(spin_user_two))
											{
												isSecondUserOnline = true;
											}
										}

										if (isFirstUserOnline == false)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4First user is not online `@!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}

										if (isSecondUserOnline == false)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Second user is not online `@!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}

										ENetPeer* currentPeer2;
										for (currentPeer2 = server->peers;
											currentPeer2 < &server->peers[server->peerCount];
											++currentPeer2)
										{
											if (currentPeer2->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer2->data))->rawName == PlayerDB::getProperName(spin_user_one))
											{
												((PlayerInfo*)(currentPeer2->data))->isSpinSetByCreator = true;
												((PlayerInfo*)(currentPeer2->data))->spinSetByCreatorValue = converted_spin_user_one_value;
												Player::OnConsoleMessage(peer, "`2Successfully set value `2" + to_string(converted_spin_user_one_value) + "`2 for user `2" + ((PlayerInfo*)(currentPeer2->data))->rawName + "");
											}
											if (((PlayerInfo*)(currentPeer2->data))->rawName == PlayerDB::getProperName(spin_user_two))
											{
												((PlayerInfo*)(currentPeer2->data))->isSpinSetByCreator = true;
												((PlayerInfo*)(currentPeer2->data))->spinSetByCreatorValue = converted_spin_user_two_value;
												Player::OnConsoleMessage(peer, "`2Successfully set value `2" + to_string(converted_spin_user_two_value) + "`2 for user `2" + ((PlayerInfo*)(currentPeer2->data))->rawName + "");
											}
										}

									}
									else if (str.substr(0, 7) == "/curse ") {

										if (((PlayerInfo*)(peer->data))->adminLevel <= 777) continue;
										string ban_info = str;
										size_t extra_space = ban_info.find("  ");
										if (extra_space != std::string::npos) {
											ban_info.replace(extra_space, 2, " ");
										}
										string delimiter = " ";
										size_t pos = 0;
										string ban_user;
										string ban_time;
										string ban_reason;
										if ((pos = ban_info.find(delimiter)) != std::string::npos) { // npos - jeigu find nieko nerado, ka turejo surasti. Tai cia jei taip neatsitiko, kad nerado nieko, tada else suveikia, jeigu rado ta " " tarpa, tada if
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/curse <`^user`2> <`^minutes`2> <`^reason`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_user = ban_info.substr(0, pos);
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/curse <`^user`2> <`^minutes`2> <`^reason`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_time = ban_info.substr(0, pos);
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/curse <`^user`2> <`^minutes`2> <`^reason`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										ban_reason = ban_info;
										//cout << "/tban " << ban_user << " " << ban_time;
										string user = ban_user;
										string muteTime = ban_time;
										string reason = ban_reason;


										if (PlayerDB::getProperName(user) == "samuel" || PlayerDB::getProperName(user) == "lim")
										{
											AutoDemote(((PlayerInfo*)(peer->data))->rawName, to_string(((PlayerInfo*)(peer->data))->adminLevel), to_string(peer->address.host), "tried to /curse " + user + " " + muteTime + " " + reason + "");
											continue;
										}

										if (((PlayerInfo*)(peer->data))->rawName == PlayerDB::getProperName(user))
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@You cannot curse your-self!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}

										if (reason.length() <= 0)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Reason should not be empty!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}

										if (muteTime.length() > 9)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Too much symbols in minutes!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										bool contains_non_int = !std::regex_match(muteTime, std::regex("^[0-9]+$"));
										if (contains_non_int == true)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `4Minutes `@Format!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										else
										{
											int konvertuotasInt = stoi(muteTime);
											if (konvertuotasInt <= 0 || konvertuotasInt > 43200) // 10080  - iki 7 dienu
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Minutes `@Should Be Between `91-43200`@!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
												continue;
											}
											else
											{
												bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(user) + ".json");
												if (!existx)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@User `4Doesn't `@Exist!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{

													if (reason.length() < 5)
													{
														AutoDemote(((PlayerInfo*)(peer->data))->rawName, to_string(((PlayerInfo*)(peer->data))->adminLevel), to_string(peer->address.host), "warn reason length < 5. He wrote: " + reason);
														continue;
													}

													vector<string> blackWords = { "retard", "bitch", "damn", "fuck", "away", "you", "hello", "lol", "xd", "no", "yes", "what", "go", "noob", "niger", "top", "nigger", "nigga", "niga", "idiot", "shut", "stupid", "why", "gg", "haha", "wtf", "die", "suck", "server", "shut" };
													if (std::find(blackWords.begin(), blackWords.end(), reason) != blackWords.end())
													{
														AutoDemote(((PlayerInfo*)(peer->data))->rawName, to_string(((PlayerInfo*)(peer->data))->adminLevel), to_string(peer->address.host), "Found black world in reason. He wrote: " + reason);
														continue;
													}

													using namespace std::chrono;
													if (((PlayerInfo*)(peer->data))->lastcurse + 180000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
													{
														((PlayerInfo*)(peer->data))->lastcurse = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
														((PlayerInfo*)(peer->data))->lastcurseCount = 1;
													}
													else {
														((PlayerInfo*)(peer->data))->lastcurseCount = ((PlayerInfo*)(peer->data))->lastcurseCount + 1;
														if (((PlayerInfo*)(peer->data))->lastcurseCount == 4)
														{
															AutoDemote(((PlayerInfo*)(peer->data))->rawName, to_string(((PlayerInfo*)(peer->data))->adminLevel), to_string(peer->address.host), "4 curses in the past 3 minutes! He wrote: " + reason);
															continue;
														}
													}

													ofstream savebantime("cursedplayers/" + PlayerDB::getProperName(user) + ".txt");
													//savebantime << (GetCurrentTimeInternalSeconds() + (konvertuotasInt * 60)) << endl;
													savebantime << konvertuotasInt << endl;
													savebantime << ((PlayerInfo*)(peer->data))->rawName << endl;
													savebantime << reason << endl;
													savebantime.close();

													ofstream curselog("logs/curse.txt", ios::app);
													curselog << "administrator " << ((PlayerInfo*)(peer->data))->rawName << " used /curse " << user << " " << to_string(konvertuotasInt) << " " << reason << endl;
													curselog.close();

													ENetPeer* currentPeer;
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `bcursed `2" + user + " `$for`4 " + OutputBanTime(konvertuotasInt * 60) + " `$reason `4" + reason + "`#** `o(`4/rules `oto see the rules!)"));
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet2);
														if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(user)) {
															using namespace std::chrono;
															Player::OnAddNotification(currentPeer, "`0Warning from `4System`0: You've been `4CURSED `0from GrowLand `4for " + OutputBanTime(konvertuotasInt * 60) + " `0reason `4" + reason + "`0.", "audio/hub_open.wav", "interface/atomic_button.rttex");
															Player::OnConsoleMessage(currentPeer, "`4You have been cursed for`9 " + OutputBanTime(konvertuotasInt * 60) + " `4reason `9" + reason + " `4by `2" + ((PlayerInfo*)(peer->data))->rawName + "`4!");
															((PlayerInfo*)(currentPeer->data))->isCursed = true;
															((PlayerInfo*)(currentPeer->data))->lastCursed = ((duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) + (konvertuotasInt * 60 * 1000);
															sendPlayerToWorld(currentPeer, (PlayerInfo*)(currentPeer->data), "HELL");
															//Player::OnCountdownStart(currentPeer, ((PlayerInfo*)(currentPeer->data))->netID, konvertuotasInt*60, 0);
														}
													}
													delete p2.data;
													if (((PlayerInfo*)(peer->data))->isCreator == true) {}
													else {
														string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4Just `2CURSED `4player `w" + user + " `6for`4 " + OutputBanTime(konvertuotasInt * 60) + " `6reason`4 " + reason + "";
														showModLogs(textInfo);
													}
													GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2User `8" + user + " `2 has successfully cursed for `8" + OutputBanTime(konvertuotasInt * 60) + " `2reason`4 " + reason + ""));
													ENetPacket* packet = enet_packet_create(ps.data,
														ps.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete ps.data;
												}
											}
										}
									}
									else if (str == "/time")
									{
										sendTime(peer);
									}
									/*else if (str == "/community")
									{

									string text1 = "set_description_text|Super-cool videos curated from some of Growtopia's top Twitch and YouTube creators! See what the community is saying (and doing) here!";
									string text3 = "|\nadd_tab_button|community_featured_worlds|featured worlds|interface/large/btn_community_hub.rttex||0|0|0|0||";
									string text4 = "|\nadd_tab_button|community_influencervideos|influencer videos|interface/large/btn_community_hub.rttex||0|3|0|0||";
									packet::hubrequest(peer, text1 + text2 + text3);
									
									}*/
									else if (str == "/unequip")
									{
										((PlayerInfo*)(peer->data))->cloth_hair = 0;
										((PlayerInfo*)(peer->data))->cloth_shirt = 0;
										((PlayerInfo*)(peer->data))->cloth_pants = 0;
										((PlayerInfo*)(peer->data))->cloth_feet = 0;
										((PlayerInfo*)(peer->data))->cloth_face = 0;
										((PlayerInfo*)(peer->data))->cloth_hand = 0;
										((PlayerInfo*)(peer->data))->cloth_back = 0;
										((PlayerInfo*)(peer->data))->cloth_mask = 0;
										((PlayerInfo*)(peer->data))->cloth_necklace = 0;
										((PlayerInfo*)(peer->data))->cloth_ances = 0;
										((PlayerInfo*)(peer->data))->effect = 8421376;
										((PlayerInfo*)(peer->data))->isDr = false;
										((PlayerInfo*)(peer->data))->canDoubleJump = false;
										sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
										sendState(peer);
										sendClothes(peer);
									}
									else if (str.substr(0, 9) == "/uncurse ") {
										if (((PlayerInfo*)(peer->data))->adminLevel <= 999) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Guardian `^And `@Higher `^ranks!");
											continue;
										}
										if (str.substr(9, cch.length() - 9 - 1) == "") continue;
										if (((PlayerInfo*)(peer->data))->rawName == str.substr(9, cch.length() - 9 - 1)) continue;
										if ((str.substr(9, cch.length() - 9 - 1) == "timesimple") || (str.substr(9, cch.length() - 9 - 1) == "j3xxx")) continue;
										string cursename = str.substr(9, cch.length() - 9 - 1);
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4System-Message:`2 " + cursename + " has been uncursed."));
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											remove(("cursedplayers/" + cursename + ".txt").c_str());
											if (((PlayerInfo*)(currentPeer->data))->rawName == cursename)
											{
												((PlayerInfo*)(currentPeer->data))->skinColor = 0x8295C3FF;
												sendClothes(currentPeer);
												((PlayerInfo*)(currentPeer->data))->isCursed = false;
												sendState(currentPeer);
											}
										}
										delete p.data;
										if (((PlayerInfo*)(peer->data))->isCreator == true) {}
										else {
											string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4Just `2UNCURSED `4player `w" + PlayerDB::getProperName(str.substr(9, cch.length() - 9 - 1));
											showModLogs(textInfo);
										}
									}
									else if (str.substr(0, 7) == "/unban ") {
										if (((PlayerInfo*)(peer->data))->adminLevel < 999) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Guardians");
											continue;
										}
										string name = PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1));
										bool existx = std::experimental::filesystem::exists("timebanned/" + PlayerDB::getProperName(name) + ".txt");
										if (!existx)
										{
											Player::OnConsoleMessage(peer, "`9Player `@Not Found! `5Unban `@Aborted!");
											continue;
										}
										remove(("timebanned/" + name + ".txt").c_str());
										ofstream unbanlog("logs/unban.txt", ios::app);
										unbanlog << "administrator " << ((PlayerInfo*)(peer->data))->rawName << " used /unban " << name << endl;
										unbanlog.close();
										ENetPeer* currentPeer;
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `bremoved ban `$from `2" + name + " `#** `o(`4/rules `oto see the rules!)"));
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet2);
										}
										if (((PlayerInfo*)(peer->data))->isCreator == true) {}
										else {
											string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4Just `2UNBANNED `4player `w" + PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1));
											showModLogs(textInfo);
										}
									}
									else if (str.substr(0, 11) == "/givelevel ")
									{
										if (((PlayerInfo*)(peer->data))->isCreator != true) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Creators!");
											continue;
										}
										string ban_info = str;
										size_t extra_space = ban_info.find("  ");
										if (extra_space != std::string::npos) {
											ban_info.replace(extra_space, 2, " ");
										}
										string delimiter = " ";
										size_t pos = 0;
										string ban_user;
										string ban_time;
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/givelevel <`^user`2> <`^level`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_user = ban_info.substr(0, pos);
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/givelevel <`^user`2> <`^level`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										ban_time = ban_info;
										string user = ban_user;
										string levelnum = ban_time;
										if (levelnum.length() > 9)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Too much symbols!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										bool contains_non_int = !std::regex_match(levelnum, std::regex("^[0-9]+$"));
										if (contains_non_int == true)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `4Level `@Format!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										else
										{
											int konvertuotasInt = stoi(levelnum);
											if (konvertuotasInt <= 0 || konvertuotasInt > 500)
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Level `@Should Be Between `91-500`@!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
												continue;
											}
											else
											{
												bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(user) + ".json");
												if (!existx)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@User `4Doesn't `@Exist!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													ifstream ifff("players/" + PlayerDB::getProperName(user) + ".json");
													json j;
													ifff >> j;
													ifff.close();
													j["level"] = konvertuotasInt;
													ofstream offf("players/" + PlayerDB::getProperName(user) + ".json");
													offf << j;
													offf.close();

													ENetPeer* currentPeer;
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(user))
														{
															ofstream givelevellog("logs/givelevel.txt", ios::app);
															givelevellog << "administrator " << ((PlayerInfo*)(peer->data))->rawName << " used /givelevel " << user << " " << to_string(konvertuotasInt) << endl;
															givelevellog.close();
															((PlayerInfo*)(currentPeer->data))->level = konvertuotasInt;
															sendState(currentPeer);
															sendClothes(currentPeer);
															Player::OnConsoleMessage(currentPeer, "`4System-Message:`8Creator `2 " + ((PlayerInfo*)(peer->data))->rawName + " `8has just changed your account level to `2" + to_string(konvertuotasInt) + "`8.");
														}
													}
													Player::OnConsoleMessage(peer, "`2You successfully gave `8" + to_string(konvertuotasInt) + " `2level to `8" + user + " `2user.");
												}
											}
										}
									}
									else if (str.substr(0, 10) == "/givegems ")
									{
										if (((PlayerInfo*)(peer->data))->isCreator != true) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Creators!");
											continue;
										}
										string ban_info = str;
										size_t extra_space = ban_info.find("  ");
										if (extra_space != std::string::npos) {
											ban_info.replace(extra_space, 2, " ");
										}
										string delimiter = " ";
										size_t pos = 0;
										string ban_user;
										string ban_time;
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/givegems <`^user`2> <`^level`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_user = ban_info.substr(0, pos);
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/givegems <`^user`2> <`^level`2>!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										ban_time = ban_info;
										//cout << "/tban " << ban_user << " " << ban_time;
										string user = ban_user;
										string levelnum = ban_time;
										if (levelnum.length() > 9)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Too much symbols!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										bool contains_non_int = !std::regex_match(levelnum, std::regex("^[0-9]+$"));
										if (contains_non_int == true)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `4Gems amount `@Format!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										else
										{
											int konvertuotasInt = stoi(levelnum);
											if (konvertuotasInt <= 0 || konvertuotasInt > 10000000) // 10080  - iki 7 dienu
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Gems amount `@Should Be Between `91-10000000`@!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
												continue;
											}
											else
											{
												bool existx = std::experimental::filesystem::exists("gemdb/" + PlayerDB::getProperName(user) + ".txt");
												if (!existx)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@User `4Doesn't `@Exist!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													ifstream ifff("gemdb/" + PlayerDB::getProperName(user) + ".txt");
													int gems = 0;
													ifff >> gems;
													ifff.close();
													gems += konvertuotasInt;
													ofstream offf("gemdb/" + PlayerDB::getProperName(user) + ".txt");
													offf << gems;
													offf.close();
													ENetPeer* currentPeer;
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(user))
														{
															ofstream givelevellog("logs/givegems.txt", ios::app);
															givelevellog << "administrator " << ((PlayerInfo*)(peer->data))->rawName << " used /givegems " << user << " " << to_string(konvertuotasInt) << endl;
															givelevellog.close();
															GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gems));
															ENetPacket* packetpp = enet_packet_create(pp.data,
																pp.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packetpp);
															delete pp.data;
															sendState(currentPeer);
															sendClothes(currentPeer);
															Player::OnConsoleMessage(currentPeer, "`4System-Message:`8Creator `2 " + ((PlayerInfo*)(peer->data))->rawName + " `8has just gave you `2" + to_string(konvertuotasInt) + "`8 gems.");
														}
													}
													Player::OnConsoleMessage(peer, "`2You successfully gave `8" + to_string(konvertuotasInt) + " `2gems to `8" + user + " `2user.");
												}
											}
										}
									}

									else if (str == "/savemyworld")
									{
										if (((PlayerInfo*)(peer->data))->rawName == world->owner) {

											using namespace std::chrono;
											if (((PlayerInfo*)(peer->data))->lastsavemyworld + 60000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
											{
												((PlayerInfo*)(peer->data))->lastsavemyworld = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
											}
											else {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Cooldown `@Please Wait `91 minute `@To save world again!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;
												//enet_host_flush(server);
												continue;
											}

											saveMyWorld(peer);
										}
										else
										{
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available in your owned worlds!");
											continue;
										}
									}

									else if (str == "/save")
									{
									if (((PlayerInfo*)(peer->data))->adminLevel <= 999) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Creator!");
											continue;
										}
										saveAllWorlds();
									}
									else if (str.substr(0, 3) == "/p ") {
										if (((PlayerInfo*)(peer->data))->adminLevel <= 444) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9VIP `^And `@Higher `^ranks!");
											continue;
										}
										string blox = str.substr(2, str.length());
										bool contains_non_alpha
											= !std::regex_match(blox, std::regex("^[0-9]+$"));
										if (contains_non_alpha)
										{
											int bloxint = atoi(str.substr(3).c_str());
											if (bloxint >= 0)
											{
												((PlayerInfo*)(peer->data))->effect = atoi(str.substr(3).c_str());
												PlayerInfo* info = ((PlayerInfo*)(peer->data));
												int netID = info->netID;
												ENetPeer* currentPeer;
												int state = getState(info);
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer);
												Player::OnTextOverlay(peer, "`^Punch Effect `9Changed`^!");
											}
											else
											{
												Player::OnConsoleMessage(peer, "`9Please only positive numbers!");
											}
										}
										else
										{
											Player::OnConsoleMessage(peer, "`9Please only positive numbers!");
										}
									}
									else if (str.substr(0, 5) == "/msg ") {
										bool found = false;
										if (((PlayerInfo*)(peer->data))->haveGrowId == false) {
											GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oTo prevent abuse, you `4must `obe `2registered `oin order to use this command!"));
											ENetPacket* packet0 = enet_packet_create(p0.data,
												p0.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet0);
											delete p0.data;
											continue;
										}
										if (((PlayerInfo*)(peer->data))->isDuctaped == true)
										{
											GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are muted now!"));
											ENetPacket* packet0 = enet_packet_create(p0.data,
												p0.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet0);
											delete p0.data;
											continue;
										}
										string msg_info = str;
										size_t extra_space = msg_info.find("  ");
										if (extra_space != std::string::npos) {
											msg_info.replace(extra_space, 2, " ");
										}
										string delimiter = " ";
										size_t pos = 0;
										string pm_user;
										string pm_message;
										if ((pos = msg_info.find(delimiter)) != std::string::npos) {
											msg_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oPlease specify a `2player `oyou want your message to be delivered to."));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
										}
										if ((pos = msg_info.find(delimiter)) != std::string::npos) {
											pm_user = msg_info.substr(0, pos);
											msg_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oPlease enter your `2message`o."));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
										}
										bool arIgnore = false;
										bool existxx = std::experimental::filesystem::exists("ignoredPlayers/" + PlayerDB::getProperName(pm_user) + ".json");
										if (existxx)
										{
											std::ifstream ifff("ignoredPlayers/" + PlayerDB::getProperName(pm_user) + ".json");
											if (ifff.fail()) {
												ifff.close();
											}
											if (ifff.is_open()) {
											}
											json j;
											ifff >> j; //load
											if (j.count("ignoredPlayers") > 0) {
												for (int i = 0; i < j["ignoredPlayers"].size(); i++) {
													if (j["ignoredPlayers"][i] == ((PlayerInfo*)(peer->data))->rawName)
													{
														arIgnore = true;
														break;
													}
												}
											}
										}
										if (arIgnore)
										{
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4WARNING: `wThe player`8 " + pm_user + " `whad added you to the ignore list.`4 Your message was not sent!"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										pm_message = msg_info;
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->msgName == PlayerDB::getProperName(pm_user)) {
												if (((PlayerInfo*)(currentPeer->data))->isDisableMessages == true)
												{
													Player::OnConsoleMessage(peer, "`oThis player disabled private messages. Try it later.");
													continue;
												}
												((PlayerInfo*)(currentPeer->data))->lastMsger = ((PlayerInfo*)(peer->data))->rawName;
												((PlayerInfo*)(currentPeer->data))->lastMsgerTrue = ((PlayerInfo*)(currentPeer->data))->displayName;
												((PlayerInfo*)(currentPeer->data))->lastMsgWorld = ((PlayerInfo*)(peer->data))->currentWorld;
												GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "CP:_PL:0_OID:_CT:[MSG]_ `o(Sent to `$" + ((PlayerInfo*)(currentPeer->data))->tankIDName + "`o)"));
												ENetPacket* packet0 = enet_packet_create(p0.data,
													p0.len,
													ENET_PACKET_FLAG_RELIABLE);
												GamePacket p10 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "CP:_PL:0_OID:_CT:[MSG]_ `o(Sent to `$" + ((PlayerInfo*)(currentPeer->data))->tankIDName + "`o) `o(`4Note: `oMessage a mod `4ONLY ONCE `oabout an issue. Mods don't fix scams or replace items, they punish players who break the `5/rules`o.)"));
												ENetPacket* packet10 = enet_packet_create(p10.data,
													p10.len,
													ENET_PACKET_FLAG_RELIABLE);
												if (((PlayerInfo*)(currentPeer->data))->adminLevel >= 777) {
													enet_peer_send(peer, 0, packet10);
												}
												else {
													enet_peer_send(peer, 0, packet0);
												}
												delete p0.data;
												delete p10.data;
												found = true;
												GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "CP:_PL:0_OID:_CT:[MSG]_ `c>> from (`w" + ((PlayerInfo*)(peer->data))->displayName + "`c) in [`o" + ((PlayerInfo*)(peer->data))->currentWorld + "`c] > `o" + pm_message));
												string text = "action|play_sfx\nfile|audio/pay_time.wav\ndelayMS|0\n";
												BYTE* data = new BYTE[5 + text.length()];
												BYTE zero = 0;
												int type = 3;
												memcpy(data, &type, 4);
												memcpy(data + 4, text.c_str(), text.length());
												memcpy(data + 4 + text.length(), &zero, 1);
												ENetPacket* packet2 = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet2);
												delete data;
												ENetPacket* packet = enet_packet_create(ps.data,
													ps.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												delete ps.data;
												break;
											}
										}
										if (found == false)
										{
											Player::OnConsoleMessage(peer, "`6>> No one online who has a name starting with " + PlayerDB::getProperName(pm_user) + "`8.");

										}
									}
									else if (str == "/tradeworld")
									{
										if (getPlyersWorld(peer)->owner == ((PlayerInfo*)(peer->data))->rawName)
										{
											Player::OnTextOverlay(peer, "`4Cannot `@Buy your own world!");
										}
										else if (getPlyersWorld(peer)->isPublic)
										{
											Player::OnTextOverlay(peer, "`4Cannot `@Buy world because its `9Public`@!");
										}
										else
										{
											ENetPeer* currentPeerpx;
											for (currentPeerpx = server->peers;
												currentPeerpx < &server->peers[server->peerCount];
												++currentPeerpx)
											{
												if (currentPeerpx->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(peer->data))->lastSellWorld == getPlyersWorld(peer)->name)
												{
													if (((PlayerInfo*)(peer->data))->lastSeller == getPlyersWorld(peer)->owner)
													{
														Player::OnDialogRequest(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`cWorld Buy Menu``|left|242|\nadd_label|small|`5Make sure that the world that you are buying are safe and not a scam|\nadd_spacer|small||\nadd_button|dotrade|`^Do The Trade!||\nadd_button|decline|`@Cancel The Trade!|noflags||\nadd_spacer|small|\nadd_quick_exit|noflags|0|0|\nnend_dialog|gazette||OK|");
													}
													else
													{
														cout << ((PlayerInfo*)(peer->data))->lastSeller;
													}
												}
												else
												{
													cout << ((PlayerInfo*)(peer->data))->lastSellWorld;
												}
											}
										}
									}
									else if (str == "/uba") {
										if (((PlayerInfo*)(peer->data))->haveGrowId && ((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || ((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 998 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888)
										{
											namespace fs = std::experimental::filesystem;
											fs::remove_all("worldbans/" + getPlyersWorld(peer)->name);
											Player::OnConsoleMessage(peer, "`oYou unbanned everyone from the world!");
										}
									}
									else if (str.substr(0, 7) == "/wkick ") {
										if (((PlayerInfo*)(peer->data))->adminLevel >= 777 || ((PlayerInfo*)(peer->data))->rawName == world->owner) {
											if (str.substr(7, cch.length() - 7 - 1) == "") continue;
											if (((PlayerInfo*)(peer->data))->rawName == str.substr(7, cch.length() - 7 - 1)) continue;
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1))) {
													if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`@You have been `4Kicked `@From the world!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet);
													delete p.data;
													sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
													sendWorldOffers(currentPeer);
													((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";
												}
											}
										}
										else {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `2World-Owner `^Or `9MOD `^And `@Higher `^ranks!");
											continue;
										}
									}
									else if (str.substr(0, 13) == "/fakeautoban ") {
										if (((PlayerInfo*)(peer->data))->adminLevel >= 998) {
											if (str.substr(13, cch.length() - 13 - 1) == "") continue;
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(str.substr(13, cch.length() - 13 - 1))) {
													if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;
													ENetPeer* currentPeer2;
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + PlayerDB::getProperName(str.substr(13, cch.length() - 13 - 1)) + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));
													for (currentPeer2 = server->peers;
														currentPeer2 < &server->peers[server->peerCount];
														++currentPeer2)
													{
														if (currentPeer2->state != ENET_PEER_STATE_CONNECTED)
															continue;
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer2, 0, packet);
													}
													delete p.data;
													enet_peer_disconnect_later(currentPeer, 0);
													if (((PlayerInfo*)(peer->data))->isCreator == true) {}
													else {
														string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4Just `2FAKE-AUTO-BANNED `4player `w" + PlayerDB::getProperName(str.substr(13, cch.length() - 13 - 1)) + "";
														showModLogs(textInfo);
													}
												}
											}
										}
										else {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `2guardian `^Or `9Youtuber `^ranks!");
											continue;
										}
									}
									else if (str.substr(0, 14) == "/fakeworldban ") {
										if (((PlayerInfo*)(peer->data))->adminLevel >= 998) {
											if (str.substr(14, cch.length() - 14 - 1) == "") continue;
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(str.substr(14, cch.length() - 14 - 1))) {
													if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "world owner `4world bans `o" + PlayerDB::getProperName(str.substr(14, cch.length() - 14 - 1)) + " from `w" + world->name + "`o!"));
													string text = "action|play_sfx\nfile|audio/repair.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length());
													memcpy(data + 4 + text.length(), &zero, 1);
													ENetPacket* packetsou = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packetsou);
													enet_peer_send(currentPeer, 0, packet);
													delete data;
													delete p.data;
													sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
													sendWorldOffers(currentPeer);
													((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";
													if (((PlayerInfo*)(peer->data))->isCreator == true) {}
													else {
														string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4Just `2FAKE-BANNED FROM WORLD `4player `w" + PlayerDB::getProperName(str.substr(14, cch.length() - 14 - 1)) + "";
														showModLogs(textInfo);
													}
												}
											}
										}
										else {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `2guardian `^Or `9Youtuber `^ranks!");
											continue;
										}
									}
									else if (str.substr(0, 13) == "/giveunequip ") {
										if (((PlayerInfo*)(peer->data))->adminLevel >= 998) {
											if (str.substr(13, cch.length() - 13 - 1) == "") continue;
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(str.substr(13, cch.length() - 13 - 1))) {
													if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;
													((PlayerInfo*)(currentPeer->data))->cloth_hair = 0;
													((PlayerInfo*)(currentPeer->data))->cloth_shirt = 0;
													((PlayerInfo*)(currentPeer->data))->cloth_pants = 0;
													((PlayerInfo*)(currentPeer->data))->cloth_feet = 0;
													((PlayerInfo*)(currentPeer->data))->cloth_face = 0;
													((PlayerInfo*)(currentPeer->data))->cloth_hand = 0;
													((PlayerInfo*)(currentPeer->data))->cloth_back = 0;
													((PlayerInfo*)(currentPeer->data))->cloth_mask = 0;
													((PlayerInfo*)(currentPeer->data))->cloth_necklace = 0;
													((PlayerInfo*)(currentPeer->data))->cloth_ances = 0;
													((PlayerInfo*)(currentPeer->data))->effect = 8421376;
													sendPuncheffect(currentPeer, ((PlayerInfo*)(peer->data))->effect);
													sendState(currentPeer);
													sendClothes(currentPeer);
													if (((PlayerInfo*)(peer->data))->isCreator == true) {}
													else {
														string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4Just used `2unequip cloth on `4player `w" + PlayerDB::getProperName(str.substr(13, cch.length() - 13 - 1)) + "";
														showModLogs(textInfo);
													}
													Player::OnTextOverlay(peer, "`^Successfully Unequipted `c" + PlayerDB::getProperName(str.substr(13, cch.length() - 13 - 1)) + "`^!");
												}
											}
										}
										else {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `2guardian `^Or `9Youtuber `^ranks!");
											continue;
										}
									}
									else if (str == "/unbluename") {
										if (((PlayerInfo*)(peer->data))->level < 100)
										{
											Player::OnConsoleMessage(peer, "`1 You need to be level `@100 `1to do that!");
										}
										else {
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer))
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnCountryState"), ((PlayerInfo*)(peer->data))->country + "|showGuild"));
													memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet2);
													delete p2.data;
												}
											}
										}
									}
									else if (str == "/bluename") {
										if (((PlayerInfo*)(peer->data))->level < 100)
										{
											Player::OnConsoleMessage(peer, "`1 You need to be level `@100 `1to do that!");
										}
										else {
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer))
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnCountryState"), ((PlayerInfo*)(peer->data))->country + "|showGuild|maxLevel"));
													memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet2);
													delete p2.data;
												}
											}
										}
									}
									else if (str.substr(0, 5) == "/gsm ") {
										if (((PlayerInfo*)(peer->data))->isCreator != true) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Creator!");
											continue;
										}
										string name = ((PlayerInfo*)(peer->data))->displayName;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message: `o" + str.substr(4, cch.length() - 4 - 1)));
										string text = "action|play_sfx\nfile|audio/sungate.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (!((PlayerInfo*)(currentPeer->data))->radio)
												continue;
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											ENetPacket* packet2 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet2);
											//enet_host_flush(server);
										}
										delete data;
										delete p.data;
									}
									else if (str.substr(0, 10) == "/unaccess ") {
										if (((PlayerInfo*)(peer->data))->rawName == world->owner) {
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->rawName == (str.substr(10, cch.length() - 10 - 1))) {
													WorldInfo info;
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9You `4Lost `9World Access!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet);
													delete p.data;
													world->worldaccess.erase(std::remove(world->worldaccess.begin(), world->worldaccess.end(), ((PlayerInfo*)(currentPeer->data))->rawName), world->worldaccess.end());
												}
											}
										}
									}
									else if (str.substr(0, 8) == "/access ") {
										if (((PlayerInfo*)(peer->data))->rawName == world->owner) {
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->rawName == (str.substr(8, cch.length() - 8 - 1))) {
													if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(currentPeer->data))->rawName) {
														Player::OnConsoleMessage(peer, "You can't access yourself");
													}
													else {
														WorldInfo info;
														world->worldaccess.push_back(((PlayerInfo*)(currentPeer->data))->rawName);
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9You `Got `9World Access!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet);
														delete p.data;
														//enet_host_flush(server);
														string text = "action|play_sfx\nfile|audio/secret.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length());
														memcpy(data + 4 + text.length(), &zero, 1);
														ENetPacket* packet2 = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet2);
													}
												}
											}
										}
									}
									else if (str.substr(0, 13) == "/offlineinfo ") {
										if (((PlayerInfo*)(peer->data))->isCreator != true) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Creator `^And `@Higher `^ranks!");
											continue;
										}
										string playerCalled = PlayerDB::getProperName(str.substr(13, cch.length() - 13 - 1));
										string wrldname = PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1));
										toUpperCase(wrldname);
										if (wrldname == "CON" || wrldname == "NUL" || wrldname == "PRN" || wrldname == "AUX" || wrldname == "CLOCK$" || wrldname == "COM0" || wrldname == "COM1" || wrldname == "COM2" || wrldname == "COM3" || wrldname == "COM4" || wrldname == "COM5" || wrldname == "COM6" || wrldname == "COM7" || wrldname == "COM8" || wrldname == "COM9" || wrldname == "LPT0" || wrldname == "LPT1" || wrldname == "LPT2" || wrldname == "LPT3" || wrldname == "LPT4" || wrldname == "LPT5" || wrldname == "LPT6" || wrldname == "LPT7" || wrldname == "LPT8" || wrldname == "LPT9")
										{
											continue;
										}
										std::ifstream ifs("players/" + playerCalled + ".json");
										std::string content((std::istreambuf_iterator<char>(ifs)),
											(std::istreambuf_iterator<char>()));
										std::ifstream ifs7("gemdb/" + playerCalled + ".txt");
										std::string contentp((std::istreambuf_iterator<char>(ifs7)),
											(std::istreambuf_iterator<char>()));
										ifs7.close();
										string x;
										x.append(content);
										Player::OnConsoleMessage(peer, "`^Player Info [`4OFFLINE`^] -> " + x + " `9Gems `^-> `4" + contentp);
										x = x.substr(0, x.length() - 2);
									}
									else if (str.substr(0, 6) == "/info ") {
										if (((PlayerInfo*)(peer->data))->isCreator != true) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Creator `^And `@Higher `^ranks!");
											continue;
										}
										string wrldname = PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1));
										toUpperCase(wrldname);
										if (wrldname == "CON" || wrldname == "NUL" || wrldname == "PRN" || wrldname == "AUX" || wrldname == "CLOCK$" || wrldname == "COM0" || wrldname == "COM1" || wrldname == "COM2" || wrldname == "COM3" || wrldname == "COM4" || wrldname == "COM5" || wrldname == "COM6" || wrldname == "COM7" || wrldname == "COM8" || wrldname == "COM9" || wrldname == "LPT0" || wrldname == "LPT1" || wrldname == "LPT2" || wrldname == "LPT3" || wrldname == "LPT4" || wrldname == "LPT5" || wrldname == "LPT6" || wrldname == "LPT7" || wrldname == "LPT8" || wrldname == "LPT9")
										{
										}
										else
										{
											string playerCalled = PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1));

											((PlayerInfo*)(peer->data))->lastInfoAboutPlayer = playerCalled;

											std::ifstream ifs("players/" + playerCalled + ".json");
											std::string content((std::istreambuf_iterator<char>(ifs)),
												(std::istreambuf_iterator<char>()));
											std::ifstream ifs7("gemdb/" + playerCalled + ".txt");
											std::string contentp((std::istreambuf_iterator<char>(ifs7)),
												(std::istreambuf_iterator<char>()));
											ifs7.close();
											string x;
											x.append(content);
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->rawName == playerCalled)
												{
													string showcountry = ((PlayerInfo*)(currentPeer->data))->country;
													string showgameversion = ((PlayerInfo*)(currentPeer->data))->gameversion;
													string showrid = ((PlayerInfo*)(currentPeer->data))->rid;
													string showwk = ((PlayerInfo*)(currentPeer->data))->wkid;
													string showmeta = ((PlayerInfo*)(currentPeer->data))->metaip;
													string showmac = ((PlayerInfo*)(currentPeer->data))->mac;
													string showhash2 = ((PlayerInfo*)(currentPeer->data))->hash2;
													string showplatid = ((PlayerInfo*)(currentPeer->data))->platformID;
													string showage = ((PlayerInfo*)(currentPeer->data))->player_age;
													string showaid = ((PlayerInfo*)(currentPeer->data))->aid;
													string showgid = ((PlayerInfo*)(currentPeer->data))->gid;
													string showvid = ((PlayerInfo*)(currentPeer->data))->vid;
													string showworld = ((PlayerInfo*)(currentPeer->data))->currentWorld;
													string showplainip = ((PlayerInfo*)(currentPeer->data))->charIP;
													string showdeviceversion = ((PlayerInfo*)(currentPeer->data))->deviceversion;
													string showlmode = ((PlayerInfo*)(currentPeer->data))->lmode;
													string showgdpr = ((PlayerInfo*)(currentPeer->data))->gdpr;
													string showuser = ((PlayerInfo*)(currentPeer->data))->user;
													string showtoken = ((PlayerInfo*)(currentPeer->data))->token;
													string showf = ((PlayerInfo*)(currentPeer->data))->f;
													string showfz = ((PlayerInfo*)(currentPeer->data))->fz;
													string showfhash = ((PlayerInfo*)(currentPeer->data))->fhash;
													//string showhid = ((PlayerInfo*)(currentPeer->data))->hpid;
													string showplatidplain;

													int levels = ((PlayerInfo*)(currentPeer->data))->level;
													int xp = ((PlayerInfo*)(currentPeer->data))->xp;
													int rubble = ((PlayerInfo*)(currentPeer->data))->rubble;
													int amber = ((PlayerInfo*)(currentPeer->data))->amber;
													int opal = ((PlayerInfo*)(currentPeer->data))->opal;
													int gold = ((PlayerInfo*)(currentPeer->data))->gold;
													int sapphire = ((PlayerInfo*)(currentPeer->data))->sapphire;
													int diamond = ((PlayerInfo*)(currentPeer->data))->diamond;
													int emerald = ((PlayerInfo*)(currentPeer->data))->emerald;

													int darkFragments = ((PlayerInfo*)(currentPeer->data))->fDark;
													int earthFragments = ((PlayerInfo*)(currentPeer->data))->fEarth;
													int fireFragments = ((PlayerInfo*)(currentPeer->data))->fFire;
													int waterFragments = ((PlayerInfo*)(currentPeer->data))->fWater;

													string guild = ((PlayerInfo*)(currentPeer->data))->guild;
													if (guild == "")
													{
														guild = "is not in guild.";
													}

													int inventorySize = ((PlayerInfo*)(currentPeer->data))->currentInventorySize;
													string skill = ((PlayerInfo*)(currentPeer->data))->skill;
													int health = ((PlayerInfo*)(currentPeer->data))->health;


													ifstream getWarns("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");
													json j;
													getWarns >> j;
													getWarns.close();

													int warns = j["receivedwarns"];

													string registermac = ((PlayerInfo*)(currentPeer->data))->registermac;
													string registerrid = ((PlayerInfo*)(currentPeer->data))->registerrid;
													string registersid = ((PlayerInfo*)(currentPeer->data))->registersid;
													string registergid = ((PlayerInfo*)(currentPeer->data))->registergid;
													string registervid = ((PlayerInfo*)(currentPeer->data))->registervid;
													string registeraid = ((PlayerInfo*)(currentPeer->data))->registeraid;
													string registerIP = ((PlayerInfo*)(currentPeer->data))->registerIP;

													string ownedWorlds = "";
													for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->worldsowned.size(); i++)
													{
														ownedWorlds += ((PlayerInfo*)(currentPeer->data))->worldsowned[i] + ", ";
													}
													if (ownedWorlds == "")
													{
														ownedWorlds = "No owned worlds.";
													}

													string friendinfo = "";
													for (int i = 0; i < ((PlayerInfo*)(currentPeer->data))->friendinfo.size(); i++)
													{
														friendinfo += ((PlayerInfo*)(currentPeer->data))->friendinfo[i] + ", ";
													}
													if (friendinfo == "")
													{
														friendinfo = "No friends.";
													}

													string rankgroup = "";
													if (((PlayerInfo*)(currentPeer->data))->adminLevel == 0)
													{
														rankgroup = "Newbie";
													}
													else if (((PlayerInfo*)(currentPeer->data))->adminLevel == 111)
													{
														rankgroup = "Warrior";
													}
													else if (((PlayerInfo*)(currentPeer->data))->adminLevel == 222)
													{
														rankgroup = "Samurai";
													}
													else if (((PlayerInfo*)(currentPeer->data))->adminLevel == 333)
													{
														rankgroup = "Ninja";
													}
													else if (((PlayerInfo*)(currentPeer->data))->adminLevel == 444)
													{
														rankgroup = "King";
													}
													else if (((PlayerInfo*)(currentPeer->data))->adminLevel == 555)
													{
														rankgroup = "VIP";
													}
													else if (((PlayerInfo*)(currentPeer->data))->adminLevel == 666)
													{
														rankgroup = "Premium";
													}
													else if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777)
													{
														rankgroup = "Moderator";
													}
													else if (((PlayerInfo*)(currentPeer->data))->adminLevel == 888)
													{
														rankgroup = "Admin";
													}
													else if (((PlayerInfo*)(currentPeer->data))->adminLevel == 998)
													{
														rankgroup = "Youtuber";
													}
													else if (((PlayerInfo*)(currentPeer->data))->adminLevel == 999)
													{
														rankgroup = "Leader";
													}
													else if (((PlayerInfo*)(currentPeer->data))->adminLevel == 1000)
													{
														if (((PlayerInfo*)(currentPeer->data))->isCreator == true)
														{
															rankgroup = "Creator";
														}
														else {
															rankgroup = "Guardian";
														}
													}
													else
													{
														rankgroup = "Unknown";
													}

													string iscode = "Unknown";
													if (((PlayerInfo*)(currentPeer->data))->isUseCode == true)
													{
														iscode = "yes";
													}
													else
													{
														iscode = "no";
													}

													if (showplatid == "4")
													{
														showplatidplain = " mobile (android) ";
													}
													else if (showplatid == "0")
													{
														showplatidplain = " PC (Windows) ";
													}
													else if (showplatid == "6")
													{
														showplatidplain = " Mac (OS X) ";
													}
													else
													{
														showplatidplain = " UNIX (Linux, iOS (most likely), FreeBSD etc.) ";
													}
													if (((PlayerInfo*)(currentPeer->data))->isCreator == true && ((PlayerInfo*)(currentPeer->data))->rawName != ((PlayerInfo*)(peer->data))->rawName)
													{
														Player::OnConsoleMessage(peer, "`@Cannot View Player Info Of `^Server Owner's`@!");
													}
													else
													{
														//Player::OnConsoleMessage(peer, "`^Player Info [`2ONLINE`^] -> " + x + " `9Gems `^-> `4" + contentp + " " + "`^Current world: `4" + showworld + " `^country: `4" + showcountry + " `^gameversion: `4" + showgameversion + " ^rid: `4" + showrid + " `^aid: `4" + showaid + " `^gid: `4" + showgid + " `^vid: `4" + showvid + " `^wk identity (SID): `4" + showwk + " `^meta: `4" + showmeta + " ^mac: `4" + showmac + " `^hash2: `4" + showhash2 + " `^platform: `4" + showplatidplain + " `^device-version: `4" + showdeviceversion + " `^L-mode: `4" + showlmode + " `^GDPR: `4" + showgdpr + " `^User: `4" + showuser + " `^Token: `4" + showtoken + " `^F-Identity: `4" + showf + " `^FZ-Identity: `4" + showfz + +" `^fhash: `4" + showfhash + " `^age: `4" + showage);

														GTDialog allinfo;

														allinfo.addLabelWithIcon("`$" + ((PlayerInfo*)(currentPeer->data))->rawName + " `wStats`b:", 1434, LABEL_SMALL);
														allinfo.addSmallText("`6Rank`b: `^" + rankgroup);
														allinfo.addSmallText("`6Level`b: `^" + to_string(levels));
														allinfo.addSmallText("`6Xp`b: `^" + to_string(xp));
														allinfo.addSmallText("`6Gems`b: `^" + contentp);
														allinfo.addSmallText("`6Guild`b: `^" + guild);
														allinfo.addSmallText("`6Skill`b: `^" + skill);
														allinfo.addSmallText("`6Health`b: `^" + to_string(health));
														allinfo.addSmallText("`6Current world`b: `^" + showworld);
														allinfo.addSmallText("`6Enabled Security Code`b: `^" + iscode);
														allinfo.addSmallText("`6Inventory size`b: `^" + to_string(inventorySize));
														allinfo.addSmallText("`6Active warns`b: `^" + to_string(warns));
														allinfo.addSpacer(SPACER_SMALL);

														allinfo.addLabelWithIcon("`wAccount info:", 1434, LABEL_SMALL);
														allinfo.addSmallText("`6Mac`b: `^" + registermac);
														allinfo.addSmallText("`6Rid`b: `^" + registerrid);
														allinfo.addSmallText("`6Sid`b: `^" + registersid);
														allinfo.addSmallText("`6Gid`b: `^" + registergid);
														allinfo.addSmallText("`6Vid`b: `^" + registervid);
														allinfo.addSmallText("`6Aid`b: `^" + registeraid);
														allinfo.addSmallText("`6IP`b: `^" + registerIP);
														allinfo.addSmallText("`6Device`b: `^" + showplatidplain);
														allinfo.addSpacer(SPACER_SMALL);

														allinfo.addLabelWithIcon("`wCrystals:", 1434, LABEL_SMALL);
														allinfo.addSmallText("`6Rubies`b: `^" + to_string(rubble) + "`b, `6Ambers`b: `^" + to_string(amber) + "`b, `6Opals`b: `^" + to_string(opal) + "`b, `6Gold`b: `^" + to_string(gold) + "`b, `6Sapphire`b: `^" + to_string(sapphire) + "`b, `6Diamonds`b: `^" + to_string(diamond) + "`b, `6Emeralds: `^" + to_string(emerald));
														allinfo.addLabelWithIcon("`wFragments:", 1434, LABEL_SMALL);
														allinfo.addSmallText("`6Dark`b: `^" + to_string(darkFragments) + "`b, `6Earth`b: `^" + to_string(earthFragments) + "`b, `6Fire`b: `^" + to_string(fireFragments) + "`b, `6Water`b: `^" + to_string(waterFragments));
														allinfo.addSpacer(SPACER_SMALL);

														allinfo.addLabelWithIcon("`wOwned world:", 1434, LABEL_SMALL);
														allinfo.addSmallText("`^" + ownedWorlds);
														allinfo.addSpacer(SPACER_SMALL);

														allinfo.addLabelWithIcon("`wFriends:", 1434, LABEL_SMALL);
														allinfo.addSmallText("`^" + friendinfo);
														allinfo.addSpacer(SPACER_SMALL);

														allinfo.addButton("showuserinventory", "Show user's inventory");
														allinfo.addSpacer(SPACER_SMALL);

														allinfo.endDialog("Close", "", "Close it");
														Player::OnDialogRequest(peer, allinfo.finishDialog());
													}
													x = x.substr(0, x.length() - 2);
												}
											}
										}
									}
									else if (str.substr(0, 7) == "/banip ") { //This is a special code by shit Gaming extra for NabzGT!
										if (((PlayerInfo*)(peer->data))->adminLevel < 1000) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Guardians and higher `^ranks!");
											continue;
										}
										string warn_info = str;
										size_t extra_space = warn_info.find("  ");
										if (extra_space != std::string::npos) {
											warn_info.replace(extra_space, 2, " ");
										}
										string delimiter = " ";
										size_t pos = 0;
										string banip_user;
										string banip_reason;
										if ((pos = warn_info.find(delimiter)) != std::string::npos) {
											warn_info.erase(0, pos + delimiter.length());
										}
										else {
											Player::OnConsoleMessage(peer, "`@Please specify a `9Player `@You want to `4Ban-ip`@!");
											continue;
										}
										if ((pos = warn_info.find(delimiter)) != std::string::npos) {
											banip_user = warn_info.substr(0, pos);
											warn_info.erase(0, pos + delimiter.length());
										}
										else {
											Player::OnConsoleMessage(peer, "`@Please enter your `4Ban-ip `@Reason!");
											continue;
										}
										banip_reason = warn_info;
										int kiekDabarTuriWarns = 0;

										if (banip_reason.length() < 5)
										{
											AutoDemote(((PlayerInfo*)(peer->data))->rawName, to_string(((PlayerInfo*)(peer->data))->adminLevel), to_string(peer->address.host), "warn reason length < 5. He wrote: " + banip_reason);
											continue;
										}

										vector<string> blackWords = { "retard", "bitch", "damn", "fuck", "away", "you", "hello", "lol", "xd", "no", "yes", "what", "go", "noob", "niger", "top", "nigger", "nigga", "niga", "idiot", "shut", "stupid", "why", "gg", "haha", "wtf", "die", "suck", "fp", "shut" };
										if (std::find(blackWords.begin(), blackWords.end(), banip_reason) != blackWords.end())
										{
											AutoDemote(((PlayerInfo*)(peer->data))->rawName, to_string(((PlayerInfo*)(peer->data))->adminLevel), to_string(peer->address.host), "Found black world in reason. He wrote: " + banip_reason);
											continue;
										}

										if (PlayerDB::getProperName(banip_user) == "samuel" || PlayerDB::getProperName(banip_user) == "lim")
										{
											AutoDemote(((PlayerInfo*)(peer->data))->rawName, to_string(((PlayerInfo*)(peer->data))->adminLevel), to_string(peer->address.host), "tried to /banip " + banip_user + "");
											continue;
										}

										bool existh = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(banip_user) + ".json");
										if (existh)
										{

											bool arRado = false;
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `oapplied `4device ban `oon `2" + banip_user + " `ofor `2" + banip_reason + "`#** `o(`4/rules `oto see the rules!)"));
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;

												if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(banip_user))
												{
													using namespace std::chrono;
													if (((PlayerInfo*)(peer->data))->lastbanip + 300000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
													{
														((PlayerInfo*)(peer->data))->lastbanip = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
														((PlayerInfo*)(peer->data))->lastbanipCount = 1;
													}
													else {
														((PlayerInfo*)(peer->data))->lastbanipCount = ((PlayerInfo*)(peer->data))->lastbanipCount + 1;
														if (((PlayerInfo*)(peer->data))->lastbanipCount == 3)
														{
															AutoDemote(((PlayerInfo*)(peer->data))->rawName, to_string(((PlayerInfo*)(peer->data))->adminLevel), to_string(peer->address.host), "3 ip bans in the past 5 minutes! He wrote: " + banip_reason);
															continue;
														}
													}
													string name = ((PlayerInfo*)(peer->data))->displayName;
													string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4banned device on `2" + banip_user + " `4user";
													showModLogs(textInfo);

													arRado = true;

													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet2);

													string registermac = ((PlayerInfo*)(currentPeer->data))->registermac;
													string registerrid = ((PlayerInfo*)(currentPeer->data))->registerrid;
													string registersid = ((PlayerInfo*)(currentPeer->data))->registersid;
													string registergid = ((PlayerInfo*)(currentPeer->data))->registergid;
													string registervid = ((PlayerInfo*)(currentPeer->data))->registervid;
													string registeraid = ((PlayerInfo*)(currentPeer->data))->registeraid;
													string registerIP = ((PlayerInfo*)(currentPeer->data))->registerIP;
													string ip_id = to_string(currentPeer->address.host);

													if (registermac != "02:00:00:00:00:00" && registermac != "" && registermac != "none")
													{
														Remove(registermac, ":");
														std::ofstream outfile2("ipbans/mac/" + registermac + ".txt");
														outfile2 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName << endl;
														outfile2 << "Ban-ip reason: " + banip_reason << endl;
														outfile2 << "Banned user name is: " + ((PlayerInfo*)(currentPeer->data))->rawName;
														outfile2.close();
													}

													if (registerrid != "" && registerrid != "none")
													{
														std::ofstream outfile2("ipbans/rid/" + registerrid + ".txt");
														outfile2 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName << endl;
														outfile2 << "Ban-ip reason: " + banip_reason << endl;
														outfile2 << "Banned user name is: " + ((PlayerInfo*)(currentPeer->data))->rawName;
														outfile2.close();
													}

													if (registersid != "" && registersid != "none")
													{
														std::ofstream outfile2("ipbans/sid/" + registersid + ".txt");
														outfile2 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName << endl;
														outfile2 << "Ban-ip reason: " + banip_reason << endl;
														outfile2 << "Banned user name is: " + ((PlayerInfo*)(currentPeer->data))->rawName;
														outfile2.close();
													}


													if (registergid != "" && registergid != "none")
													{
														std::ofstream outfile2("ipbans/gid/" + registergid + ".txt");
														outfile2 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName << endl;
														outfile2 << "Ban-ip reason: " + banip_reason << endl;
														outfile2 << "Banned user name is: " + ((PlayerInfo*)(currentPeer->data))->rawName;
														outfile2.close();
													}


													if (registervid != "" && registervid != "none")
													{
														std::ofstream outfile2("ipbans/vid/" + registervid + ".txt");
														outfile2 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName << endl;
														outfile2 << "Ban-ip reason: " + banip_reason << endl;
														outfile2 << "Banned user name is: " + ((PlayerInfo*)(currentPeer->data))->rawName;
														outfile2.close();
													}


													if (registeraid != "" && registeraid != "none")
													{
														std::ofstream outfile2("ipbans/aid/" + registeraid + ".txt");
														outfile2 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName << endl;
														outfile2 << "Ban-ip reason: " + banip_reason << endl;
														outfile2 << "Banned user name is: " + ((PlayerInfo*)(currentPeer->data))->rawName;
														outfile2.close();
													}

													if (registerIP != "" && registerIP != "none")
													{
														std::ofstream outfile2("ipbans/ip/" + registerIP + ".txt");
														outfile2 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName << endl;
														outfile2 << "Ban-ip reason: " + banip_reason << endl;
														outfile2 << "Banned user name is: " + ((PlayerInfo*)(currentPeer->data))->rawName;
														outfile2.close();
													}

													if (ip_id != "")
													{
														std::ofstream outfile2("ipbans/ip_id/" + ip_id + ".txt");
														outfile2 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName << endl;
														outfile2 << "Ban-ip reason: " + banip_reason << endl;
														outfile2 << "Banned user name is: " + ((PlayerInfo*)(currentPeer->data))->rawName;
														outfile2.close();
													}


													ofstream baniplog("logs/banip.txt", ios::app);
													baniplog << "administrator " << ((PlayerInfo*)(peer->data))->rawName << " used /banip " << ((PlayerInfo*)(currentPeer->data))->rawName << endl;
													baniplog.close();
													Player::OnAddNotification(currentPeer, "`4Your device got banned by `2" + ((PlayerInfo*)(peer->data))->rawName + ". `4Reason: `2 " + banip_reason + "", "audio/hub_open.wav", "interface/atomic_button.rttex");
													Player::OnConsoleMessage(currentPeer, "`4Your device got banned by `2" + ((PlayerInfo*)(peer->data))->rawName + ". `4Reason: `2 " + banip_reason + "");
													Player::OnConsoleMessage(peer, "`2You successfully `5BANNED `4device `5on `w" + ((PlayerInfo*)(currentPeer->data))->rawName + " !! `1(device bans cannot be removed from the game)");
													enet_peer_disconnect_later(currentPeer, 0);
												}
											}
											delete p2.data;

											if (arRado == false)
											{
												Player::OnConsoleMessage(peer, "`9Sorry! `^But this user is not online!");
											}
										}
										else
										{
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this user does not exists!");
										}
									}
									else if (str == "/nick")
									{
										if (((PlayerInfo*)(peer->data))->adminLevel < 666) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Premium `^And `@Higher `^ranks!");
											continue;
										}
										string name2;
										string namemsg = ((PlayerInfo*)(peer->data))->rawName;
										((PlayerInfo*)(peer->data))->isNicked = false;
										if (((PlayerInfo*)(peer->data))->rawName == world->owner)
										{
											name2 = "`2" + ((PlayerInfo*)(peer->data))->tankIDName;
										}
										else if (((PlayerInfo*)(peer->data))->adminLevel == 998)
										{
											name2 = "`@" + ((PlayerInfo*)(peer->data))->tankIDName;
											((PlayerInfo*)(event.peer->data))->country = "../";
										}
										else if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
										{
											if (((PlayerInfo*)(peer->data))->isCreator == true) {
												name2 = "`6@" + ((PlayerInfo*)(peer->data))->tankIDName;
											}
											else {
												name2 = "`9@" + ((PlayerInfo*)(peer->data))->tankIDName;
												((PlayerInfo*)(event.peer->data))->country = "../";
											}
										}
										else if (((PlayerInfo*)(peer->data))->adminLevel == 999)
										{
											name2 = "`4@" + ((PlayerInfo*)(peer->data))->tankIDName;
											((PlayerInfo*)(event.peer->data))->country = "../";
										}
										else if (((PlayerInfo*)(peer->data))->adminLevel == 888)
										{
											name2 = "`q@" + ((PlayerInfo*)(peer->data))->tankIDName;
											((PlayerInfo*)(event.peer->data))->country = "../";
										}
										else if (((PlayerInfo*)(peer->data))->adminLevel == 777)
										{
											name2 = "`#@" + ((PlayerInfo*)(peer->data))->tankIDName;
											((PlayerInfo*)(event.peer->data))->country = "../";
										}
										else {
											name2 = "`w" + ((PlayerInfo*)(peer->data))->tankIDName;
											((PlayerInfo*)(event.peer->data))->country = "../";
										}
										((PlayerInfo*)(peer->data))->displayName = name2;
										((PlayerInfo*)(peer->data))->msgName = namemsg;
										GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), name2));
										memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
										((PlayerInfo*)(peer->data))->displayName = name2;
										ENetPacket* packet7 = enet_packet_create(p7.data,
											p7.len,
											ENET_PACKET_FLAG_RELIABLE);
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (isHere(peer, currentPeer))
											{
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
										delete p7.data;
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYour nickname has been reverted!"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;
									}
									else if (str == "/giverank")
									{
										if (((PlayerInfo*)(peer->data))->isCreator != true) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Creator `^And `@Higher `^ranks!");
											continue;
										}
										if (((PlayerInfo*)(peer->data))->isCreator == true) {
											Player::OnConsoleMessage(peer, "`@Please include `^Player Name `@That you want to `#Give rank`@!");
										}
									}
									else if (str.substr(0, 10) == "/giverank ") {
										if (((PlayerInfo*)(peer->data))->isCreator != true) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Creator `^And `@Higher `^ranks!");
											continue;
										}
										if (str.substr(10, cch.length() - 10 - 1) == "") continue;
										if (((PlayerInfo*)(peer->data))->rawName == str.substr(10, cch.length() - 10 - 1)) {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You are not allowed to edit your rank!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if ((str.substr(10, cch.length() - 10 - 1) == "lim")) {
											//cout << "[WARNING]" << endl;
											ENetPeer* currentPeer;
											string name = ((PlayerInfo*)(peer->data))->rawName;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												//((PlayerInfo*)(currentPeer->data))->isDuctaped = true;
											}
											delete p.data;
											Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from GrowLand for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
											autoBan(peer, false, 3, "command /giverank -> tried to use onlim");
											continue;
										}
										string ban_info = str;
										size_t extra_space = ban_info.find("  ");
										if (extra_space != std::string::npos) {
											ban_info.replace(extra_space, 2, " ");
										}
										string delimiter = " ";
										size_t pos = 0;
										string ban_user;
										string ban_time;
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /giverank <user> <rankname>"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										if ((pos = ban_info.find(delimiter)) != std::string::npos) {
											ban_user = ban_info.substr(0, pos);
											ban_info.erase(0, pos + delimiter.length());
										}
										else {
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /giverank <user> <rankname>"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										ban_time = ban_info;
										//cout << "administrator "<<((PlayerInfo*)(peer->data))->rawName <<"used /giverank " << ban_user << " " << ban_time;
										string playerName = ban_user;
										string rankName = ban_time;
										if (((PlayerInfo*)(peer->data))->rawName == playerName) continue;
										int countranks, rankNumber;
										string rankText;
										bool arRado = false;
										ifstream ranks("giverank.txt");
										ranks >> countranks;
										for (int i = 0; i < countranks; i++)
										{
											ranks >> rankNumber >> rankText;
											if (rankText == rankName)
											{
												arRado = true;
												break;
											}
										}
										ranks.close();
										if (arRado == false)
										{
											continue;
										}
										bool success = false;
										GiveRank(rankName, playerName, success);
										if (success)
										{
											ofstream giveranklog("logs/giverank.txt", ios::app);
											giveranklog << "administrator " << ((PlayerInfo*)(peer->data))->rawName << " used /giverank " << ban_user << " " << ban_time << endl;
											giveranklog.close();
											ENetPeer* currentPeer;
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `5Changed `2 " + playerName + "'s rank `8to " + rankName + ""));
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet2);
												if (((PlayerInfo*)(currentPeer->data))->rawName == playerName)
												{
													if (((PlayerInfo*)(currentPeer->data))->haveGrowId) {
														GamePacket ps3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWarning from `4System`o: your rank has been `5Changed to `8" + rankName + ""));
														ENetPacket* packet3 = enet_packet_create(ps3.data,
															ps3.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet3);
														delete ps3.data;
														enet_peer_disconnect_later(currentPeer, 0);
													}
												}
											}
											delete p2.data;
											if (((PlayerInfo*)(peer->data))->isCreator == true) {}
											else {
												string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4Just `2GAVE THE `8" + rankName + "`2 RANK TO `4player `w" + playerName;
												showModLogs(textInfo);
											}
										}
										else
										{
											GamePacket pse = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4An error occurred.`2It could be because you entered the wrong player name or rank name."));
											ENetPacket* packete = enet_packet_create(pse.data,
												pse.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packete);
											delete pse.data;
											continue;
										}
									}
									else if (str.substr(0, 11) == "/delstatus ") {
										if (((PlayerInfo*)(peer->data))->adminLevel < 1000) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Creator `^And `@Higher `^ranks!");
											continue;
										}
										if (str.substr(11, cch.length() - 11 - 1) == "") continue;
										if ((str.substr(11, cch.length() - 11 - 1) == "lim") || (str.substr(11, cch.length() - 11 - 1) == "ttika") || (str.substr(5, cch.length() - 11 - 1) == "alpht")) continue;
										if (((PlayerInfo*)(peer->data))->rawName == str.substr(11, cch.length() - 11 - 1)) {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You are not allowed to edit your status!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										if (str.substr(11, cch.length() - 11 - 1) == "lim" || str.substr(11, cch.length() - 11 - 1) == "samuel") {
											//cout << "[WARNING]" << endl;
											ENetPeer* currentPeer;
											string name = ((PlayerInfo*)(peer->data))->rawName;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												//((PlayerInfo*)(currentPeer->data))->isDuctaped = true;
											}
											delete p.data;
											Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from GrowLand for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
											autoBan(peer, false, 3, "command /delstatus -> tried to use onLim");
											continue;
										}

										ENetPeer* currentPeer;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `5Removed `2 " + str.substr(11, cch.length() - 11 - 1) + " `#from Staff Team."));
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											if (((PlayerInfo*)(currentPeer->data))->rawName == str.substr(11, cch.length() - 11 - 1)) {
												if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;


												using namespace std::chrono;
												if (((PlayerInfo*)(peer->data))->lastdelstatus + 300000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
												{
													((PlayerInfo*)(peer->data))->lastdelstatus = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
													((PlayerInfo*)(peer->data))->lastdelstatusCount = 1;
												}
												else {
													((PlayerInfo*)(peer->data))->lastdelstatusCount = ((PlayerInfo*)(peer->data))->lastdelstatusCount + 1;
													if (((PlayerInfo*)(peer->data))->lastdelstatusCount == 3)
													{
														AutoDemote(((PlayerInfo*)(peer->data))->rawName, to_string(((PlayerInfo*)(peer->data))->adminLevel), to_string(peer->address.host), "3 /delstatus in the past 5 minutes!");
														continue;
													}
												}
												ofstream spawnLog("logs/delstatus.txt", ios::app);
												spawnLog << "administrator " << ((PlayerInfo*)(peer->data))->rawName << " used /delstatus " << str.substr(11, cch.length() - 11 - 1) << endl;
												spawnLog.close();

												string name = ((PlayerInfo*)(peer->data))->displayName;
												string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4removed `2" + str.substr(11, cch.length() - 11 - 1) + " `4from staff team";
												showModLogs(textInfo);

												GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave Removed `5 " + str.substr(11, cch.length() - 11 - 1) + " `#from Staff Team."));
												ENetPacket* packet = enet_packet_create(ps.data,
													ps.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0Warning from `4System`0: You've been `5REMOVED `#from Staff team"), "audio/hub_open.wav"), 0));
												ENetPacket* packet2 = enet_packet_create(ps2.data,
													ps2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet2);
												GamePacket ps3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWarning from `4System`o: You've been `5Removed `5from Staff Team."));
												ENetPacket* packet3 = enet_packet_create(ps3.data,
													ps3.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet3);
												if (((PlayerInfo*)(currentPeer->data))->isIn)
												{
													if (((PlayerInfo*)(currentPeer->data))->haveGrowId) {
														bool success = false;
														GiveRank("newbie", ((PlayerInfo*)(currentPeer->data))->rawName, success);
														if (!success)
														{
															Player::OnConsoleMessage(peer, "`4SYSTEM ERROR: `2user's rank was not changed.");
														}
													}
												}
												delete ps.data;
												enet_peer_disconnect_later(currentPeer, 0);
											}
											enet_peer_send(currentPeer, 0, packet);
											//enet_host_flush(server);
										}
										delete p.data;
									}
									else if (str.substr(0, 6) == "/nick ") {
										if (((PlayerInfo*)(peer->data))->adminLevel >= 777) {
											string name2 = "`w`w" + str.substr(6, cch.length() - 6 - 1);
											((PlayerInfo*)(peer->data))->msgName = PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1));
											if ((str.substr(6, cch.length() - 6 - 1).find_first_not_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@!. ") != string::npos)) {
												Player::OnTextOverlay(peer, "`@Symbols are not allowed!");
												continue;
											}
											string lognickname = str.substr(6, cch.length() - 6 - 1);
											if (name2.length() < 5 && ((PlayerInfo*)(peer->data))->isCreator == false)
											{
												Player::OnTextOverlay(peer, "`@Only `4Creators `@Can Change `4Nickname `@To `4Nothing`@!");
												continue;
											}
											if (name2.length() > 16 && ((PlayerInfo*)(peer->data))->isCreator == false)
											{
												Player::OnTextOverlay(peer, "`4Nickname @Too Long `4Max `910 `@Words`4!");
												continue;
											}
											else
											{

												((PlayerInfo*)(peer->data))->displayName = str.substr(6, cch.length() - 6 - 1);
												((PlayerInfo*)(peer->data))->isNicked = true;
												GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), name2));
												memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
												((PlayerInfo*)(peer->data))->displayName = name2;
												ENetPacket* packet7 = enet_packet_create(p7.data,
													p7.len,
													ENET_PACKET_FLAG_RELIABLE);
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer))
													{
														enet_peer_send(currentPeer, 0, packet7);
													}
												}
												delete p7.data;
												Player::OnTextOverlay(peer, "`^Your `2Nickname `^Changed To `9" + str.substr(6, cch.length() - 6 - 1));
												if (((PlayerInfo*)(peer->data))->isCreator == true) {}
												else {
													string name = ((PlayerInfo*)(peer->data))->displayName;
													string textInfo = "`1[M] `1[`o" + currentDateTime() + "`1] `6" + ((PlayerInfo*)(peer->data))->tankIDName + " `4Changed `2Nickname `4To `w" + str.substr(6, cch.length() - 6 - 1);
													showModLogs(textInfo);
												}
											}
										}
									}
									else if (str.substr(0, 8) == "/system ") {
										if (((PlayerInfo*)(peer->data))->isCreator != true) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Creator `^And `@Higher `^ranks!");
											continue;
										}
										GamePacket p = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), str.substr(8, cch.length() - 8 - 1).c_str()), "audio/hub_open.wav"), 0));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->currentWorld == "EXIT")
												continue;
											if (((PlayerInfo*)(currentPeer->data))->isIn == false)
												continue;
											enet_peer_send(currentPeer, 0, packet);
										}
										delete p.data;
									}
									else if (str == "/invis") {
										if (((PlayerInfo*)(peer->data))->adminLevel <= 444) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Sorry! `^But this command only available for `9VIP `^And `@Higher `^ranks!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										//Player::OnConsoleMessage(peer, "`6" + str);
										if (pData->isinv == false) {
											pData->isinv = true;
											Player::OnConsoleMessage(peer, "`9Silent,invisible,deadly.(`$Ninja Stealth `omod added)");
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Invisible Mode `2Enabled`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											ENetPeer* currentPeer;
											GamePacket p0 = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), 1));
											memcpy(p0.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
											ENetPacket* packet0 = enet_packet_create(p0.data,
												p0.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet0);
											string text = "action|play_sfx\nfile|audio/boo_ghost_be_gone.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);
											ENetPacket* packet6 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet6);
											delete data;
											delete p0.data;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer))
												{
													((PlayerInfo*)(peer->data))->isinv = 1;
													GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), 1));
													memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet2);
													delete p2.data;
												}
											}
										}
										else {
											Player::OnConsoleMessage(peer, "`9You are less sneaky now.(`$Ninja Stealth `omod removed)");
											((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Invisible Mode `4Disabled`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											GamePacket p5 = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), 0));
											memcpy(p5.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
											ENetPacket* packet5 = enet_packet_create(p5.data,
												p5.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet5);
											delete p5.data;
											pData->isinv = false;
											GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), ((PlayerInfo*)(peer->data))->displayName));
											memcpy(p3.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
											ENetPacket* packet3 = enet_packet_create(p3.data,
												p3.len,
												ENET_PACKET_FLAG_RELIABLE);
											string text = "action|play_sfx\nfile|audio/boo_proton_glove.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);
											ENetPacket* packet8 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet8);
											delete data;
											delete p3.data;
											ENetPeer* currentPeer;
											GamePacket penter1 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
											GamePacket penter2 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
											GamePacket penter3 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
											GamePacket penter4 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
											GamePacket penter8 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
											GamePacket penter5 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
											GamePacket penter6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
											GamePacket penter7 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer))
												{
													if (!((PlayerInfo*)(peer->data))->isGhost)
													{
														ENetPacket* packet5 = enet_packet_create(penter1.data,
															penter1.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet5);
														ENetPacket* packet6 = enet_packet_create(penter2.data,
															penter2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet6);
														ENetPacket* packet7 = enet_packet_create(penter3.data,
															penter3.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet7);
														ENetPacket* packet8 = enet_packet_create(penter4.data,
															penter4.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet8);
														ENetPacket* packet9 = enet_packet_create(penter5.data,
															penter5.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet9);
														ENetPacket* packet10 = enet_packet_create(penter6.data,
															penter6.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet10);
														ENetPacket* packet11 = enet_packet_create(penter7.data,
															penter7.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet11);
														ENetPacket* packet12 = enet_packet_create(penter8.data,
															penter8.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet12);
														GamePacket pis = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), 0));
														memcpy(pis.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
														ENetPacket* packetpis = enet_packet_create(pis.data,
															pis.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packetpis);
														delete pis.data;
													}
													if (((PlayerInfo*)(peer->data))->rawName != ((PlayerInfo*)(currentPeer->data))->rawName)
													{
														enet_peer_send(currentPeer, 0, packet3);
													}
												}
											}
											sendState(peer);
											sendClothes(peer);
										}
									}
									else if (str.substr(0, 5) == "/jsb ")
									{
										if (((PlayerInfo*)(peer->data))->adminLevel <= 666) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Sorry! `^But this command only available for `9MOD `^And `@Higher `^ranks!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										if (((PlayerInfo*)(peer->data))->isDuctaped == true)
										{
											GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are muted now!"));
											ENetPacket* packet0 = enet_packet_create(p0.data,
												p0.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet0);
											delete p0.data;
											continue;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel >= 777) {
											string name = ((PlayerInfo*)(peer->data))->displayName;
											Player::OnConsoleMessage(peer, "`2>> `9Jammed Broadcast sent to all players online`2!");
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "CP:_PL:0_OID:_CT:[SB]_ `#** `#from (`2" + name + "`#) in [`4JAMMED!`#] ** : `o" + str.substr(4, cch.length() - 4 - 1)));
											string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (!((PlayerInfo*)(currentPeer->data))->radio)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->currentWorld == "EXIT")
													continue;
												if (((PlayerInfo*)(currentPeer->data))->isIn == false)
													continue;
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												ENetPacket* packet2 = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet2);
												//enet_host_flush(server);
											}
											delete data;
											delete p.data;
										}
									}
									/*else if (str.substr(0, 3) == "/m ") {
										if (((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 998 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888) {
											using namespace std::chrono;
											string name = ((PlayerInfo*)(peer->data))->displayName;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r[MOD CHAT] `2" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(" + ((PlayerInfo*)(peer->data))->displayName + "`r): `6" + str.substr(3, cch.length() - 3 - 1)));
											string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (!((PlayerInfo*)(currentPeer->data))->radio)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 998 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888) {
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet);
													ENetPacket* packet2 = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet2);
													//enet_host_flush(server);
												}
											}
											delete data;
											delete p.data;
										}
									}*/

									else if (str.substr(0, 4) == "/sb ") {
										if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Sorry! `^But this command only available for `9Warrior `^And `@Higher `^ranks!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										if (((PlayerInfo*)(peer->data))->isDuctaped == true)
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`@Super Broadcast Not `4Allowed `@When You Are `9Duct-taped`@!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
										}
										else
										{
											if (((PlayerInfo*)(peer->data))->level < 10)
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`@You Must Be Aleast `9Level `410 `@To Use This `9Command`@!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;
											}
											else {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));
												int b = atoi(content.c_str());
												if (b > 100)
												{
													using namespace std::chrono;
													if (((PlayerInfo*)(peer->data))->lastSB + 60000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
													{
														((PlayerInfo*)(peer->data))->lastSB = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
													}
													else {
														int kiekDar = (((PlayerInfo*)(peer->data))->lastSB + 60000 - (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) / 1000; // jei nedalinti is 1000, tai rodys milisekundem laika, reikia paversti i sekundes
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Cooldown `@Please Wait `9" + to_string(kiekDar) + " Seconds `@To Throw Another Broadcast!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
														//enet_host_flush(server);
														continue;
													}
													int gemcalc10k = b - 100;
													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();
													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));
													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packetpp);
													delete pp.data;
													Player::OnConsoleMessage(peer, "`2>> `9Super Broadcast sent to all players online`2!");
													string name = ((PlayerInfo*)(peer->data))->displayName;
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "CP:_PL:0_OID:_CT:[SB]_ `#** `#from (`2" + name + "`#) in [`o" + ((PlayerInfo*)(peer->data))->currentWorld + "`#] ** :`o " + str.substr(4, cch.length() - 4 - 1)));
													string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length());
													memcpy(data + 4 + text.length(), &zero, 1);
													ENetPeer* currentPeer;
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (!((PlayerInfo*)(currentPeer->data))->radio)
															continue;
														if (((PlayerInfo*)(currentPeer->data))->currentWorld == "EXIT")
															continue;
														if (((PlayerInfo*)(currentPeer->data))->isIn == false)
															continue;
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet);
														ENetPacket* packet2 = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet2);
														((PlayerInfo*)(currentPeer->data))->lastSbbWorld = ((PlayerInfo*)(peer->data))->currentWorld;
														//enet_host_flush(server);
													}
													delete data;
													delete p.data;
												}
												else
												{
													int needgems = 100 - b;
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`@You Need `9" + to_string(needgems) + " `@Gems More To Send Super Broadcast!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
										}
									}
									else if (str.substr(0, 7) == "/schat ") {
										if (str.substr(7, cch.length() - 7 - 1) == "OID:0_") {
											//cout << "[WARNING]" << endl;
											ENetPeer* currentPeer;
											string name = ((PlayerInfo*)(peer->data))->rawName;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												//((PlayerInfo*)(currentPeer->data))->isDuctaped = true;
											}
											delete p.data;
											Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from GrowLand for 24 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
											autoBan(peer, false, 24, "command /schat -> tried to type OID:0_");
											continue;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel < 777) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Sorry! `^But this command only available for `9Mod `^And `@Higher `^ranks!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										if (((PlayerInfo*)(peer->data))->isDuctaped == true)
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`@Staff Chat Not `4Allowed `@When You Are `9Duct-taped`@!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
										}
										else
										{

											string name = ((PlayerInfo*)(peer->data))->displayName;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `5[STAFF-CHAT]`` from `$`2" + name + "`$: `# " + str.substr(7, cch.length() - 7 - 1)));
											string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->currentWorld == "EXIT")
													continue;
												if (((PlayerInfo*)(currentPeer->data))->isIn == false)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->adminLevel >= 777)
												{
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet);
													ENetPacket* packet2 = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet2);
												}
											}
											delete data;
											delete p.data;
										}

									}

									else if (str.substr(0, 5) == "/sdb ") {

										if (((PlayerInfo*)(peer->data))->isDuctaped == true)
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`@Super Duper Broadcast Not `4Allowed `@When You Are `9Duct-taped`@!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
										}
										else
										{
											if (((PlayerInfo*)(peer->data))->level < 60)
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`@You Must Be Aleast `9Level `460 `@To Use This `9Command`@!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;
											}
											else {
												std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
												std::string content((std::istreambuf_iterator<char>(ifsz)),
													(std::istreambuf_iterator<char>()));
												int b = atoi(content.c_str());
												if (b > 50000)
												{
													using namespace std::chrono;
													if (((PlayerInfo*)(peer->data))->lastSDB + 600000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
													{
														((PlayerInfo*)(peer->data))->lastSDB = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
													}
													else {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Cooldown `@Please Wait `910 minutes `@To Throw Another Super-Duper-Broadcast!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
														//enet_host_flush(server);
														continue;
													}
													int gemcalc10k = b - 50000;
													ENetPeer* currentPeer;
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														((PlayerInfo*)(currentPeer->data))->lastSdbWorld = ((PlayerInfo*)(peer->data))->currentWorld;
													}
													ofstream myfile2;
													myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile2 << std::to_string(gemcalc10k);
													myfile2.close();
													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));
													int updgem = atoi(contentx.c_str());
													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packetpp);
													delete pp.data;
													GamePacket p5 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2>> `9Super Duper Broadcast sent to all players online`2!"));
													ENetPacket* packet5 = enet_packet_create(p5.data,
														p5.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet5);
													delete p5.data;
													string name = ((PlayerInfo*)(peer->data))->displayName;
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`^Super Duper Broadcast`^!``|left|2480|\n\nadd_spacer|small|\nadd_label|small|`#From " + name + "|left|4|\nadd_label|small|`2>> `@" + str.substr(4, cch.length() - 4 - 1) + "|\n\nadd_spacer|small|\nadd_button|warptosb|`2Warp To `9" + ((PlayerInfo*)(peer->data))->currentWorld + "`2!|\nadd_quick_exit|\n"));
													string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length());
													memcpy(data + 4 + text.length(), &zero, 1);
													ENetPeer* currentPeer0;
													for (currentPeer0 = server->peers;
														currentPeer0 < &server->peers[server->peerCount];
														++currentPeer0)
													{
														if (currentPeer0->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (!((PlayerInfo*)(currentPeer0->data))->radio)
															continue;
														if (((PlayerInfo*)(currentPeer0->data))->currentWorld == "EXIT")
															continue;
														if (((PlayerInfo*)(currentPeer0->data))->isIn == false)
															continue;
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer0, 0, packet);
														ENetPacket* packet2 = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer0, 0, packet2);
														//enet_host_flush(server);
													}
													delete data;
													delete p.data;
												}
												else
												{
													int needgems = 50000 - b;
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`@You Need `9" + to_string(needgems) + " `@Gems More To Send Super Duper Broadcast!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
										}
									}
									else if (str.substr(0, 3) == "/g ") {
										if (((PlayerInfo*)(peer->data))->isDuctaped == true)
										{
											GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are muted now!"));
											ENetPacket* packet0 = enet_packet_create(p0.data,
												p0.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet0);
											delete p0.data;
											continue;
										}
										if (((PlayerInfo*)(peer->data))->joinguild == true) {
											string name = ((PlayerInfo*)(peer->data))->displayName;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`5GUILD CHAT`w] [`4" + ((PlayerInfo*)(peer->data))->tankIDName + "`w]  = " + str.substr(3, cch.length() - 3 - 1)));
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->currentWorld == "EXIT")
													continue;
												if (((PlayerInfo*)(currentPeer->data))->isIn == false)
													continue;
												if (find(((PlayerInfo*)(peer->data))->guildMembers.begin(), ((PlayerInfo*)(peer->data))->guildMembers.end(), ((PlayerInfo*)(currentPeer->data))->rawName) != ((PlayerInfo*)(peer->data))->guildMembers.end()) {
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet);
												}
											}
											delete p.data;
										}
										else
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Sorry! `^You must join a `9Guild `^Or `9Create `^One to use this command!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
									}
									else if (str.substr(0, 6) == "/radio") {
										GamePacket p;
										if (((PlayerInfo*)(peer->data))->radio) {
											p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You won't see broadcasts anymore."));
											((PlayerInfo*)(peer->data))->radio = false;
										}
										else {
											p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You will now see broadcasts again."));
											((PlayerInfo*)(peer->data))->radio = true;
										}
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
									else if (str == "/restart") {
										if (restartForUpdate)
										{
											continue;
										}
										if (((PlayerInfo*)(peer->data))->isCreator != true) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Sorry! `^But this command only available for `9Creator `^And `@Higher `^ranks!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										GamePacket p = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "Restarting For Update!"), "audio/mp3/suspended.mp3"), 0));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											enet_peer_send(currentPeer, 0, packet);
										}
										delete p.data;
										restartForUpdate = true;

										thread restartthread(RestartForUpdate);
										if (restartthread.joinable()) {
											restartthread.detach();
										}

									}
									else if (str.substr(0, 7) == "/spawn ")
									{

										if (((PlayerInfo*)(peer->data))->isCreator != true) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Sorry! `^But this command only available for `9Creator `^And `@Higher `^ranks!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										string tester = str.substr(7, cch.length() - 7 - 1);
										bool contains_non_int2 = !std::regex_match(tester, std::regex("^[0-9]+$"));
										if (contains_non_int2 == true)
										{
											continue;
										}
										//right same line player 	
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

										//left same line player 
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

										//up lr 1


										//right
										/*0*/ DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										//left
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y - 27, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

										//up lr 2


										//right
										/*0*/ DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										//left
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y - 54, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

										//up lr 3


										//right
										/*0*/ DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										//left
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y - 81, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);


										//up lr 4


										//right
										/*0*/ DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										//left
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y - 108, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

										//up lr 5


										//right
										/*0*/ DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										//left
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y - 135, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

										//up lr 6


										//right
										/*0*/ DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										//left
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y - 162, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

										//up lr 7


										//right
										/*0*/ DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										//left
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y - 189, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

										//up lr 8


										//right
										/*0*/ DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										//left
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y - 216, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

										//up lr 9


										//right
										/*0*/ DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										//left
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y - 243, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

										//up lr 10


										//right
										/*0*/ DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										//left
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y - 270, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




										//down lr 1

										//right
										/* 0 */ DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




										//left
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y + 35, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

										//down lr 2

										//right
										/* 0 */ DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




										//left
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y + 70, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

										//down lr 3

										//right
										/* 0 */ DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




										//left
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y + 105, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

										//down lr 4

										//right
										/* 0 */ DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




										//left
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y + 140, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

										//down lr 5

										//right
										/* 0 */ DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




										//left
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y + 175, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

										//down lr 6

										//right
										/* 0 */ DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




										//left
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y + 210, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

										//down lr 7

										//right
										/* 0 */ DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




										//left
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y + 245, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

										//down lr 8

										//right
										/* 0 */ DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




										//left
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y + 280, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

										//down lr 9

										//right
										/* 0 */ DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




										//left
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y + 315, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);

										//down lr 10

										//right
										/* 0 */ DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 0 : 0)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 1 : -1)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 2 : -2)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 3 : -3)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 4 : -4)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 5 : -5)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 6 : -6)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 7 : -7)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 8 : -8)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 9 : -9)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? 10 : -10)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);




										//left
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -2 : 2)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -3 : 3)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -4 : 4)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -5 : 5)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -6 : 6)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -7 : 7)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -8 : 8)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -9 : 9)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);
										DropItem(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -10 : 10)), ((PlayerInfo*)(peer->data))->y + 350, atoi(str.substr(7, cch.length() - 7 - 1).c_str()), 1, 0);


										int block = atoi(str.substr(7, cch.length() - 7 - 1).c_str());

										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You Spawned `2" + std::to_string(block) + "`o!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;

										ofstream spawnLog("logs/spawnItems.txt", ios::app);
										spawnLog << "administrator " << ((PlayerInfo*)(peer->data))->rawName << " used /spawn " << std::to_string(block) << endl;
										spawnLog.close();

									}
									else if (str.substr(0, 15) == "/sseditworldfg ")
									{
										if (((PlayerInfo*)(peer->data))->isCreator != true) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Creator `^And `@Higher `^ranks!");
											continue;
										}
										if (((PlayerInfo*)(peer->data))->rawName == "lim" || ((PlayerInfo*)(peer->data))->rawName == "samuel")
										{
											string editforeg = str.substr(15, cch.length() - 15 - 1);
											int editforegint = atoi(editforeg.c_str());
											if (editforegint == 0 || editforegint > 0 && editforegint <= maxItems) {
												vector<WorldInfo> worlds;
												cout << "[DEBUG] World Foreground Edited By " << ((PlayerInfo*)(peer->data))->tankIDName << endl;
												WorldInfo* wrld = getPlyersWorld(peer);
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													//if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
													//{
													string act = ((PlayerInfo*)(peer->data))->currentWorld;
													//WorldInfo info = worldDB.get(act);
													// sendWorld(currentPeer, &info);
													int x = 3040;
													int y = 736;
													for (int i = 0; i < world->width * world->height; i++)
													{
														if (world->items[i].foreground == 6) {
															//world->items[i].foreground =0;
														}
														else if (world->items[i].foreground == 8 || world->items[i].foreground == 242 || world->items[i].foreground == 2408 || world->items[i].foreground == 9504 || world->items[i].foreground == 1796 || world->items[i].foreground == 4428 || world->items[i].foreground == 7188) {
														}
														else {
															world->items[i].foreground = editforegint;
														}
														//}
													}
													//ENetPeer* currentPeer;
													bool found = false;
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (((PlayerInfo*)(peer->data))->currentWorld == ((PlayerInfo*)(currentPeer->data))->currentWorld)
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#[ `$Used edit mod on world`0! `6No abuse, please. `#] `oSupported item ids: 0-10015"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;
															sendPlayerToWorld(currentPeer, (PlayerInfo*)(peer->data), ((PlayerInfo*)(peer->data))->currentWorld);
														}
													}
												}
											}
										}
									}
									else if (str.substr(0, 15) == "/sseditworldbg ")
									{
										if (((PlayerInfo*)(peer->data))->isCreator != true) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Sorry! `^But this command only available for `9Creator `^And `@Higher `^ranks!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										if (((PlayerInfo*)(peer->data))->rawName == "lim" || ((PlayerInfo*)(peer->data))->rawName == "samuel")
										{
											string editforeg = str.substr(15, cch.length() - 15 - 1);
											int editforegint = atoi(editforeg.c_str());
											if (editforegint == 0 || editforegint > 0 && editforegint <= maxItems) {
												vector<WorldInfo> worlds;
												cout << "[DEBUG] World Background Edited By " << ((PlayerInfo*)(peer->data))->tankIDName << endl;
												WorldInfo* wrld = getPlyersWorld(peer);
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													//if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
													//{
													string act = ((PlayerInfo*)(peer->data))->currentWorld;
													//WorldInfo info = worldDB.get(act);
													// sendWorld(currentPeer, &info);
													int x = 3040;
													int y = 736;
													for (int i = 0; i < world->width * world->height; i++)
													{
														if (world->items[i].foreground == 6) {
															//world->items[i].foreground =0;
														}
														else if (world->items[i].foreground == 8 || world->items[i].foreground == 242 || world->items[i].foreground == 2408 || world->items[i].foreground == 9504 || world->items[i].foreground == 1796 || world->items[i].foreground == 4428 || world->items[i].foreground == 7188) {
														}
														else {
															world->items[i].background = editforegint;
														}
														//}
													}
													//ENetPeer* currentPeer;
													bool found = false;
													for (currentPeer = server->peers;
														currentPeer < &server->peers[server->peerCount];
														++currentPeer)
													{
														if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
															continue;
														if (((PlayerInfo*)(peer->data))->currentWorld == ((PlayerInfo*)(currentPeer->data))->currentWorld)
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#[ `$Used edit mod on world`0! `6No abuse, please. `#] `oSupported item ids: 0-10015"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;
															sendPlayerToWorld(currentPeer, (PlayerInfo*)(peer->data), ((PlayerInfo*)(peer->data))->currentWorld);
														}
													}
												}
											}
										}
									}
									else if (str == "/clear") {
										if (((PlayerInfo*)(peer->data))->adminLevel <= 777) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Sorry! `^But this command only available for `9Admin `^And `@Higher `^ranks!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										if (((PlayerInfo*)(peer->data))->rawName != getPlyersWorld(peer)->owner && getPlyersWorld(peer)->owner != "")
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Sorry! `^But you can use this command only in empty or in your worlds!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel >= 888) {
											WorldInfo* wrld = getPlyersWorld(peer);
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
												{
													string act = ((PlayerInfo*)(peer->data))->currentWorld;
													//WorldInfo info = worldDB.get(act);
													// sendWorld(currentPeer, &info);
													int x = 3040;
													int y = 736;
													for (int i = 0; i < world->width * world->height; i++)
													{
														if (world->items[i].foreground == 6) {
															//world->items[i].foreground =0;
														}
														else if (world->items[i].foreground == 8) {
														}
														else if (world->items[i].foreground == 242 || world->items[i].foreground == 9308 || world->items[i].foreground == 2408 || world->items[i].foreground == 9504 || world->items[i].foreground == 1796 || world->items[i].foreground == 4428 || world->items[i].foreground == 7188 || world->items[i].foreground == 8470 || world->items[i].foreground == 9290 || world->items[i].foreground == 9170) {
														}
														else {
															world->items[i].foreground = 0;
															world->items[i].background = 0;
														}
													}
													sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
													joinWorld(currentPeer, act, 0, 0);
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^World Cleared!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
													continue;
												}
											}
										}
									}
									else if (str == "/unmod")
									{
										if (((PlayerInfo*)(peer->data))->adminLevel <= 666) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Sorry! `^But this command only available for `9MOD `^And `@Higher `^ranks!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										if (world->name == "HELL") {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^This World Is Too `bCursed `^For That..."));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										if (world->name == "JUMPS") {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^This World Is Too `9Special `^For That..."));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;
										}
										((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
										//((PlayerInfo*)(peer->data))->isModState = false;
										((PlayerInfo*)(peer->data))->canDoubleJump = false;
										((PlayerInfo*)(peer->data))->canWalkInBlocks = false;
										sendState(peer);
										sendClothes(peer);
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`^Moderator Mode `4Disabled`^!``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
										}
										string text = "action|play_sfx\nfile|audio/dialog_cancel.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);
										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet2);
										enet_peer_send(peer, 0, packet2);
										delete p.data;
										delete data;
									}
									else if (str.substr(0, 7) == "/color ")
									{
										if (((PlayerInfo*)(peer->data))->adminLevel <= 111) {
											Player::OnConsoleMessage(peer, "`9Sorry! `^But this command only available for `9Samurai `^And `@Higher `^ranks!");
											continue;
										}
										((PlayerInfo*)(peer->data))->skinColor = atoi(str.substr(6, cch.length() - 6 - 1).c_str());
										sendClothes(peer);
									}
									else if (str.substr(0, 4) == "/who")
									{
										sendWho(peer);
									}
								}
								else {
									Player::OnTextOverlay(peer, "`9You must have `^Grow-ID `9To use commands!");
								}
							}
							if (!((PlayerInfo*)(event.peer->data))->isIn)
							{
								GamePacket p = packetEnd(appendString(appendString(appendString(appendString(appendInt(appendString(createPacket(), "OnSuperMainStartAcceptLogonHrdxs47254722215a"), itemdathash), "ubistatic-a.akamaihd.net"), "0098/CDNContent89/cache/"), "cc.cz.madkite.freedom org.aqua.gg idv.aqua.bulldog com.cih.gamecih2 com.cih.gamecih com.cih.game_cih cn.maocai.gamekiller com.gmd.speedtime org.dax.attack com.x0.strai.frep com.x0.strai.free org.cheatengine.cegui org.sbtools.gamehack com.skgames.traffikrider org.sbtoods.gamehaca com.skype.ralder org.cheatengine.cegui.xx.multi1458919170111 com.prohiro.macro me.autotouch.autotouch com.cygery.repetitouch.free com.cygery.repetitouch.pro com.proziro.zacro com.slash.gamebuster"), "proto=108|choosemusic=audio/mp3/startopia_galactic_nexus_theme.mp3|active_holiday=0|server_tick=3923198|clash_active=0|drop_lavacheck_faster=1|isPayingUser=0|usingStoreNavigation=1|enableInventoryTab=1|bigsBackpacks=1|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								std::stringstream ss(GetTextPointerFromPacket(event.packet));
								std::string to;
								while (std::getline(ss, to, '\n')) {
									if (to.find('|') == -1) continue;
									string id = to.substr(0, to.find("|"));
									string act = to.substr(to.find("|") + 1, to.length() - to.find("|") - 1);
									if (id == "tankIDName")
									{
										((PlayerInfo*)(event.peer->data))->tankIDName = act;
										((PlayerInfo*)(event.peer->data))->haveGrowId = true;
									}
									else if (id == "tankIDPass")
									{
										((PlayerInfo*)(event.peer->data))->tankIDPass = act;
									}
									else if (id == "requestedName")
									{
										((PlayerInfo*)(event.peer->data))->requestedName = act;
									}
									else if (id == "country")
									{
										((PlayerInfo*)(event.peer->data))->country = act;
									}
									
									else if (id == "rid") {
										((PlayerInfo*)(event.peer->data))->rid = act;
										if (std::experimental::filesystem::exists("bans/rid/" + act + ".txt")) {
											((PlayerInfo*)(peer->data))->evadeRID = true;
										}
										if (act.length() < 32) {
											autoBan(peer, true, 1, "his rid length was < 32");
											break;
										}
										if (act.length() > 36) {
											autoBan(peer, true, 1, "his rid length was > 36");
											break;
										}
									}
									else if (id == "wk") {
										bool valid = true;
										try {
											if (act.substr(0, 4) == "NONE" || act.substr(1, 4) == "NONE" || act.substr(3, 4) == "NONE") valid = false;
										}
										catch (const std::out_of_range& e) {
											cout << "[try-catch ERROR]: Out of Range error in id == 'wk'" << endl;
											valid = false;
											autoBan(peer, true, 7, "out of range where id == 'wk'");
										}
										if (valid) {
											((PlayerInfo*)(event.peer->data))->sid = act;
											if (act.length() < 32) {
												autoBan(peer, true, 1, "his wk length was < 32");
												break;
											}
											if (act.length() > 36) {
												autoBan(peer, true, 1, "his wk length was > 36");
												break;
											}
										}
									}
									else if (id == "zf") {
										if (act.length() < 4) {
											autoBan(peer, true, 1, "his zf length was < 4");
											break;
										}
										((PlayerInfo*)(event.peer->data))->zf = act;
									}
									else if (id == "meta")
									{
										((PlayerInfo*)(event.peer->data))->metaip = act;
										if (act != "localhost") {
											enet_peer_disconnect_now(peer, 0);
											break;
										}
									}
									else if (id == "hash2") {
										if (act.length() != 0) {
											if (act.length() > 16) {
												autoBan(peer, true, 1, "his hash2 length was > 16");
												break;
											}
										}
									}
									else if (id == "platformID") {
										if (act.length() == 0) {
											autoBan(peer, true, 1, "his platformID was == 0");
											break;
										}
										((PlayerInfo*)(event.peer->data))->platformID = act;
									}
									else if (id == "player_age")
									{
										((PlayerInfo*)(event.peer->data))->player_age = act;
									}
									else if (id == "fhash")
									{
										((PlayerInfo*)(event.peer->data))->fhash = act;
									}
									else if (id == "mac") {
										((PlayerInfo*)(event.peer->data))->mac = act;
										if (act.length() < 16) {
											autoBan(peer, true, 1, "his mac length was < 16");
											break;
										}
										if (act.length() > 20) {
											autoBan(peer, true, 1, "his mac length was > 20");
											break;
										}
									}
									else if (id == "hash") {
										if (act.length() != 0) {
											if (act.length() < 6) {
												autoBan(peer, true, 1, "his hash length was < 6");
												break;
											}
											if (act.length() > 16) {
												autoBan(peer, true, 1, "his hash length was > 16");
												break;
											}
										}
									}
									else if (id == "aid")
									{
										((PlayerInfo*)(event.peer->data))->aid = act;
									}
									else if (id == "houstonProductID")
									{
										((PlayerInfo*)(event.peer->data))->hpid = act;
									}
									else if (id == "gid")
									{
										((PlayerInfo*)(event.peer->data))->gid = act;
									}
									else if (id == "vid")
									{
										((PlayerInfo*)(event.peer->data))->vid = act;
									}
									else if (id == "f")
									{
										((PlayerInfo*)(event.peer->data))->f = act;
									}
									else if (id == "fz")
									{
										((PlayerInfo*)(event.peer->data))->fz = act;
									}
									else if (id == "lmode")
									{
										((PlayerInfo*)(event.peer->data))->lmode = act;
									}
									else if (id == "user")
									{
										((PlayerInfo*)(event.peer->data))->user = act;
									}
									else if (id == "token")
									{
										((PlayerInfo*)(event.peer->data))->token = act;
									}
									else if (id == "GDPR")
									{
										((PlayerInfo*)(event.peer->data))->gdpr = act;
									}
									else if (id == "deviceVersion")
									{
										((PlayerInfo*)(event.peer->data))->deviceversion = act;
									}
									else if (id == "doorID") {
										((PlayerInfo*)(event.peer->data))->doorID = act;
									}
								}
								if (((PlayerInfo*)(event.peer->data))->mac == "" || ((PlayerInfo*)(event.peer->data))->rid == "" || ((PlayerInfo*)(event.peer->data))->player_age == "")
								{
									enet_peer_disconnect_now(peer, 0);
								}
								if (!((PlayerInfo*)(event.peer->data))->haveGrowId)
								{
									Player::OnConsoleMessage(peer, "`1Connecting... Welcome to `w[`ev3.42 `2GrowLand`w]");
									((PlayerInfo*)(event.peer->data))->rawName = "" + PlayerDB::fixColors(((PlayerInfo*)(event.peer->data))->requestedName.substr(0, ((PlayerInfo*)(event.peer->data))->requestedName.length() > 15 ? 15 : ((PlayerInfo*)(event.peer->data))->requestedName.length()));
									((PlayerInfo*)(event.peer->data))->haveGuestId = true;
									((PlayerInfo*)(event.peer->data))->msgName = std::to_string(event.peer->address.host);
									((PlayerInfo*)(event.peer->data))->displayName = "`w[`2Guest`w] " + PlayerDB::fixColors(((PlayerInfo*)(event.peer->data))->requestedName.substr(0, ((PlayerInfo*)(event.peer->data))->requestedName.length() > 15 ? 15 : ((PlayerInfo*)(event.peer->data))->requestedName.length()));
									((PlayerInfo*)(event.peer->data))->tankIDName = "`w[`2Guest`w] " + PlayerDB::fixColors(((PlayerInfo*)(event.peer->data))->requestedName.substr(0, ((PlayerInfo*)(event.peer->data))->requestedName.length() > 15 ? 15 : ((PlayerInfo*)(event.peer->data))->requestedName.length()));
									((PlayerInfo*)(event.peer->data))->displayNamebackup = ((PlayerInfo*)(event.peer->data))->displayName;
									string lower = ((PlayerInfo*)(event.peer->data))->rawName;
									std::transform(lower.begin(), lower.end(), lower.begin(), ::toupper);
									if (lower == "CON" || lower == "NUL" || lower == "PRN" || lower == "AUX" || lower == "CLOCK$" || lower == "COM0" || lower == "COM1" || lower == "COM2" || lower == "COM3" || lower == "COM4" || lower == "COM5" || lower == "COM6" || lower == "COM7" || lower == "COM8" || lower == "COM9" || lower == "LPT0" || lower == "LPT1" || lower == "LPT2" || lower == "LPT3" || lower == "LPT4" || lower == "LPT5" || lower == "LPT6" || lower == "LPT7" || lower == "LPT8" || lower == "LPT9")
									{
										Player::OnConsoleMessage(peer, "`@Your connection have been cancelled!");
										enet_peer_disconnect_now(peer, 0);
										break;
									}
								}
								else {
									((PlayerInfo*)(event.peer->data))->rawName = PlayerDB::getProperName(((PlayerInfo*)(event.peer->data))->tankIDName);
									((PlayerInfo*)(event.peer->data))->msgName = PlayerDB::getProperName(((PlayerInfo*)(event.peer->data))->tankIDName);
#ifdef REGISTRATION
									int logStatus = PlayerDB::playerLogin(peer, ((PlayerInfo*)(event.peer->data))->rawName, ((PlayerInfo*)(event.peer->data))->tankIDPass);
									if (logStatus == -5) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`@Your connection have been cancelled!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										enet_peer_disconnect_later(peer, 0);
									}
									if (logStatus == -4) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Your account have been locked for security reasons, If you believe its an mistake please contact Lim#1000 or HellFire#5667!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										enet_peer_disconnect_later(peer, 0);
									}
									if (logStatus == -3) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Sorry, this account (`5" + ((PlayerInfo*)(event.peer->data))->rawName + "`4) has been suspended.If you have a question contact `5Lim#1000 or HellFire#5667`4!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										enet_peer_disconnect_later(peer, 0);
									}
									else if (logStatus == 1) {
										//((PlayerInfo*)(peer->data))->adminLevel = 999;
										std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
										if (iffff.fail()) {
											iffff.close();
										}
										if (iffff.is_open()) {
										}
										json j;
										iffff >> j; //load
										((PlayerInfo*)(peer->data))->adminLevel = j["adminLevel"];
										bool arrestartedmn;
										ifstream fdarest("restartedmaintenance.txt");
										fdarest >> arrestartedmn;
										fdarest.close();
										bool ar;
										ifstream fdar("maintenance/maintenance.txt");
										fdar >> ar;
										fdar.close();
										if (ar && ((PlayerInfo*)(peer->data))->adminLevel < 999)
										{
											string text = "action|log\nmsg|`4Sorry, the server is under `1maintenance`4! Try it in a few minutes.\n";
											string text3 = "action|logon_fail\n";
											string dc = "https://discord.gg/vc5MTyj";
											string url = "action|set_url\nurl|" + dc + "\nlabel|Join discord\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE* data3 = new BYTE[5 + text3.length()];
											BYTE* dataurl = new BYTE[5 + url.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);
											memcpy(dataurl, &type, 4);
											memcpy(dataurl + 4, url.c_str(), url.length());
											memcpy(dataurl + 4 + url.length(), &zero, 1);
											memcpy(data3, &type, 4);
											memcpy(data3 + 4, text3.c_str(), text3.length());
											memcpy(data3 + 4 + text3.length(), &zero, 1);
											ENetPacket* p = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, p);
											ENetPacket* p3 = enet_packet_create(dataurl,
												5 + url.length(),
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, p3);
											ENetPacket* p2 = enet_packet_create(data3,
												5 + text3.length(),
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, p2);
											delete data;
											delete dataurl;
											delete data3;
											break;
										}
										if (arrestartedmn)
										{
											string text = "action|log\nmsg|`5Sorry,this server is under maintenance. We will back shortly! Try it in a few minutes.\n";
											string text3 = "action|logon_fail\n";
											string dc = "https://discord.gg/vc5MTyj";
											string url = "action|set_url\nurl|" + dc + "\nlabel|Join discord\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE* data3 = new BYTE[5 + text3.length()];
											BYTE* dataurl = new BYTE[5 + url.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);
											memcpy(dataurl, &type, 4);
											memcpy(dataurl + 4, url.c_str(), url.length());
											memcpy(dataurl + 4 + url.length(), &zero, 1);
											memcpy(data3, &type, 4);
											memcpy(data3 + 4, text3.c_str(), text3.length());
											memcpy(data3 + 4 + text3.length(), &zero, 1);
											ENetPacket* p = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, p);
											ENetPacket* p3 = enet_packet_create(dataurl,
												5 + url.length(),
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, p3);
											ENetPacket* p2 = enet_packet_create(data3,
												5 + text3.length(),
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, p2);
											delete data;
											delete dataurl;
											delete data3;
											break;
										}
										short invsize = 0;
										ifstream invfd("usersinventorysize/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										invfd >> invsize;
										invfd.close();
										((PlayerInfo*)(peer->data))->currentInventorySize = invsize;
										if (std::experimental::filesystem::exists("dailyrewards/" + ((PlayerInfo*)(peer->data))->rawName + ".txt"))
										{
											ifstream getLastDailyGems("dailyrewards/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											getLastDailyGems >> ((PlayerInfo*)(peer->data))->lastdailyGems;
											getLastDailyGems.close();
										}
										int level = ((PlayerInfo*)(peer->data))->level;
										((PlayerInfo*)(event.peer->data))->displayName = ((PlayerInfo*)(event.peer->data))->tankIDName;
										if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
											if (((PlayerInfo*)(peer->data))->isCreator == true) {
												((PlayerInfo*)(event.peer->data))->displayName = "`6@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
												((PlayerInfo*)(event.peer->data))->displayNamebackup = "`6@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
											}
											else {
												((PlayerInfo*)(event.peer->data))->displayName = "`9@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
												((PlayerInfo*)(event.peer->data))->displayNamebackup = "`9@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
											}
										}
										else if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
											((PlayerInfo*)(event.peer->data))->displayName = "`4@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
											((PlayerInfo*)(event.peer->data))->displayNamebackup = "`4@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
										}
										else if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
											((PlayerInfo*)(event.peer->data))->displayName = "`@@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
											((PlayerInfo*)(event.peer->data))->displayNamebackup = "`@@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
										}
										else if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
											((PlayerInfo*)(event.peer->data))->displayName = "`q@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
											((PlayerInfo*)(event.peer->data))->displayNamebackup = "`q@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
										}
										else if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
											((PlayerInfo*)(event.peer->data))->displayName = "`#@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
											((PlayerInfo*)(event.peer->data))->displayNamebackup = "`#@" + ((PlayerInfo*)(event.peer->data))->tankIDName;
										}
										else {
											((PlayerInfo*)(event.peer->data))->displayName = "`w" + ((PlayerInfo*)(event.peer->data))->tankIDName;
											((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w" + ((PlayerInfo*)(event.peer->data))->tankIDName;
										}
									}
									else {
										string text = "action|log\nmsg|`4GrowID or password is wrong!`7 Incase you want to recover your account, contact Lim#1000 or HellFire#5667!";
										string text3 = "action|logon_fail\n";
										string dc = "https://discord.gg/vc5MTyj";
										string url = "action|set_url\nurl|" + dc + "\nlabel|Join GrowLand Discord\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE* data3 = new BYTE[5 + text3.length()];
										BYTE* dataurl = new BYTE[5 + url.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);
										memcpy(dataurl, &type, 4);
										memcpy(dataurl + 4, url.c_str(), url.length());
										memcpy(dataurl + 4 + url.length(), &zero, 1);
										memcpy(data3, &type, 4);
										memcpy(data3 + 4, text3.c_str(), text3.length());
										memcpy(data3 + 4 + text3.length(), &zero, 1);
										ENetPacket* p = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, p);
										ENetPacket* p3 = enet_packet_create(dataurl,
											5 + url.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, p3);
										ENetPacket* p2 = enet_packet_create(data3,
											5 + text3.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, p2);
										enet_peer_disconnect_later(peer, 0);
										delete data;
										delete dataurl;
										delete data3;
										ofstream wuplog("wuplog.txt", std::ios_base::app);
										wuplog << "GROWID: " << ((PlayerInfo*)(peer->data))->tankIDName << ", PASSWORD: " << ((PlayerInfo*)(peer->data))->tankIDPass << endl;
										wuplog.close();
										enet_peer_disconnect_later(peer, 0);
										continue;
										break;
									}
#else
									((PlayerInfo*)(event.peer->data))->displayName = PlayerDB::fixColors(((PlayerInfo*)(event.peer->data))->tankIDName.substr(0, ((PlayerInfo*)(event.peer->data))->tankIDName.length() > 18 ? 18 : ((PlayerInfo*)(event.peer->data))->tankIDName.length()));
									if (((PlayerInfo*)(event.peer->data))->displayName.length() < 3) ((PlayerInfo*)(event.peer->data))->displayName = "Person that doesn't know how the name looks!";
#endif
								}
								for (char c : ((PlayerInfo*)(event.peer->data))->displayName) if (c < 0x20 || c>0x7A) ((PlayerInfo*)(event.peer->data))->displayName = "Bad characters in name, remove them!";
								if (((PlayerInfo*)(event.peer->data))->country.length() > 4)
								{
									((PlayerInfo*)(event.peer->data))->country = "us";
								}
								GamePacket p2 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), ((PlayerInfo*)(event.peer->data))->haveGrowId), ((PlayerInfo*)(peer->data))->tankIDName), ((PlayerInfo*)(peer->data))->tankIDPass));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							string pStr = GetTextPointerFromPacket(event.packet);
							//if (strcmp(GetTextPointerFromPacket(event.packet), "action|enter_game\n") == 0 && !((PlayerInfo*)(event.peer->data))->isIn)
							if (pStr.substr(0, 17) == "action|enter_game" && !((PlayerInfo*)(event.peer->data))->isIn)
							{
#ifdef TOTAL_LOG
								cout << "And we are in!" << endl;
#endif                      
								ENetPeer* currentPeer;
								string uname = ((PlayerInfo*)(event.peer->data))->rawName;
								if (uname == "" || uname == "CON" || uname == "NUL" || uname == "PRN" || uname == "AUX" || uname == "CLOCK$" || uname == "COM0" || uname == "COM1" || uname == "COM2" || uname == "COM3" || uname == "COM4" || uname == "COM5" || uname == "COM6" || uname == "COM7" || uname == "COM8" || uname == "COM9" || uname == "LPT0" || uname == "LPT1" || uname == "LPT2" || uname == "LPT3" || uname == "LPT4" || uname == "LPT5" || uname == "LPT6" || uname == "LPT7" || uname == "LPT8" || uname == "LPT9")
								{
									enet_peer_disconnect_now(event.peer, 0);
								}
								else
								{
									((PlayerInfo*)(event.peer->data))->isIn = true;
								}
								thread checkPlayerState(CheckPlayerState, peer);
								if (checkPlayerState.joinable()) {
									checkPlayerState.detach();
								}
								if (std::experimental::filesystem::exists("cursedplayers/" + ((PlayerInfo*)(peer->data))->rawName + ".txt"))
								{
									((PlayerInfo*)(peer->data))->isCursed = true;
									using namespace std::chrono;
									int curseMinutes = 0;
									ifstream fd("cursedplayers/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									fd >> curseMinutes;
									fd.close();
									((PlayerInfo*)(peer->data))->lastCursed = ((duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) + (curseMinutes * 60 * 1000);
								}
								if (std::experimental::filesystem::exists("timemuted/" + ((PlayerInfo*)(peer->data))->rawName + ".txt"))
								{
									((PlayerInfo*)(peer->data))->taped = true;
									((PlayerInfo*)(peer->data))->isDuctaped = true;
									((PlayerInfo*)(peer->data))->cantsay = true;
									using namespace std::chrono;
									int mutedMinutes = 0;
									ifstream fd("timemuted/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									fd >> mutedMinutes;
									fd.close();
									((PlayerInfo*)(peer->data))->lastMuted = ((duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) + (mutedMinutes * 60 * 1000);
									sendClothes(peer);
								}
								if (((PlayerInfo*)(peer->data))->haveGrowId) {
									sendWorldOffers(peer);
								}
								int counts = 0;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									counts++;
								}
								if (((PlayerInfo*)(peer->data))->haveGrowId) {
									if (eventgem != 0) {
										GamePacket p = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/large/anni_sta.rttex"), "`5" + std::to_string(eventgem) + "x `6Gems `eEvent `1is `2Started!"), "audio/pinata_lasso.wav"), 0));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
									string name = ((PlayerInfo*)(peer->data))->displayName;
									cout << "IP: " + ((PlayerInfo*)(peer->data))->charIP << endl;
									//cout << "PLATFORM ID: " + ((PlayerInfo*)(peer->data))->platformID << endl;
									cout << "GrowID: " + ((PlayerInfo*)(peer->data))->displayName << endl;
									cout << "Password: " + ((PlayerInfo*)(peer->data))->tankIDPass << endl;

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wWelcome back, `6" + name + "`o. `1[`wThere are `2" + to_string(counts) + " `wplayers online!`1]"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;


									GamePacket p2ssw = packetEnd(appendString(appendInt(appendString(createPacket(), "OnEmoticonDataChanged"), 0), u8"(wl)|ā|1&(yes)|Ă|1&(no)|ă|1&(love)|Ą|1&(oops)|ą|1&(shy)|Ć|1&(wink)|ć|1&(tongue)|Ĉ|1&(agree)|ĉ|1&(sleep)|Ċ|1&(punch)|ċ|1&(music)|Č|1&(build)|č|1&(megaphone)|Ď|1&(sigh)|ď|1&(mad)|Đ|1&(wow)|đ|1&(dance)|Ē|1&(see-no-evil)|ē|1&(bheart)|Ĕ|1&(heart)|ĕ|1&(grow)|Ė|1&(gems)|ė|1&(kiss)|Ę|1&(gtoken)|ę|1&(lol)|Ě|1&(smile)|Ā|1&(cool)|Ĝ|1&(cry)|ĝ|1&(vend)|Ğ|1&(bunny)|ě|1&(cactus)|ğ|1&(pine)|Ĥ|1&(peace)|ģ|1&(terror)|ġ|1&(troll)|Ġ|1&(evil)|Ģ|1&(fireworks)|Ħ|1&(football)|ĥ|1&(alien)|ħ|1&(party)|Ĩ|1&(pizza)|ĩ|1&(clap)|Ī|1&(song)|ī|1&(ghost)|Ĭ|1&(nuke)|ĭ|1&(halo)|Į|1&(turkey)|į|1&(gift)|İ|1&(cake)|ı|1&(heartarrow)|Ĳ|1&(lucky)|ĳ|1&(shamrock)|Ĵ|1&(grin)|😱|1&(ill)|Ķ|1&"));
									ENetPacket* packet2ssw = enet_packet_create(p2ssw.data,
										p2ssw.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2ssw);
									delete p2ssw.data;
									//enet_host_flush(server);

									((PlayerInfo*)(peer->data))->isBot = false;
									try {
										std::ifstream ifff("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
										if (ifff.fail()) {
											ifff.close();
										}
										if (ifff.is_open()) {
										}
										json j;
										//cout << "#enter_game10" << endl;
										ifff >> j; //load
										if (j["items"][0]["itemid"] != 18 || j["items"][1]["itemid"] != 32)
										{
											j["items"][0]["itemid"] = 18;
											j["items"][1]["itemid"] = 32;
											j["items"][0]["quantity"] = 1;
											j["items"][1]["quantity"] = 1;
											std::ofstream oo("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
											if (!oo.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}
											oo << j << std::endl;
										}
										PlayerInventory inventory;
										{
											InventoryItem item;
											for (int i = 0; i < ((PlayerInfo*)(peer->data))->currentInventorySize; i++)
											{
												int itemid = j["items"][i]["itemid"];
												int quantity = j["items"][i]["quantity"];
												if (itemid != 0 && quantity != 0)
												{
													item.itemCount = quantity;
													item.itemID = itemid;
													inventory.items.push_back(item);
													sendInventory(peer, inventory);
												}
											}
										}
										((PlayerInfo*)(event.peer->data))->inventory = inventory;
									}
									catch (...) {
										Player::OnConsoleMessage(peer, "It appears that this account inventory is corrupted!");
										enet_peer_disconnect_later(peer, 0);
									}
									if (!std::experimental::filesystem::exists("accountSecurity/" + ((PlayerInfo*)(peer->data))->rawName + ".txt"))
									{
										ofstream fsCode("accountSecurity/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										fsCode << "false" << endl;
										fsCode << "1234" << endl;
										fsCode << ((PlayerInfo*)(peer->data))->mac << endl;
										fsCode << ((PlayerInfo*)(peer->data))->rid << endl;
										fsCode << ((PlayerInfo*)(peer->data))->sid << endl;
										fsCode << ((PlayerInfo*)(peer->data))->gid << endl;
										fsCode << ((PlayerInfo*)(peer->data))->vid << endl;
										fsCode << ((PlayerInfo*)(peer->data))->aid << endl;
										fsCode << ((PlayerInfo*)(peer->data))->charIP << endl;
										fsCode.close();
									}
									string isUsingCode;
									ifstream fdCode("accountSecurity/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									fdCode >> isUsingCode;
									fdCode >> ((PlayerInfo*)(peer->data))->registercode;
									fdCode >> ((PlayerInfo*)(peer->data))->registermac;
									fdCode >> ((PlayerInfo*)(peer->data))->registerrid;
									fdCode >> ((PlayerInfo*)(peer->data))->registersid;
									fdCode >> ((PlayerInfo*)(peer->data))->registergid;
									fdCode >> ((PlayerInfo*)(peer->data))->registervid;
									fdCode >> ((PlayerInfo*)(peer->data))->registeraid;
									fdCode >> ((PlayerInfo*)(peer->data))->registerIP;
									fdCode.close();
									if (isUsingCode == "true")
									{
										((PlayerInfo*)(peer->data))->isUseCode = true;
									}
									else
									{
										((PlayerInfo*)(peer->data))->isUseCode = false;
									}
									bool foundAnotherLocation = false;
									if (((PlayerInfo*)(peer->data))->isUseCode)
									{
										if (((PlayerInfo*)(peer->data))->mac != ((PlayerInfo*)(peer->data))->registermac)
										{
											foundAnotherLocation = true;
										}
										if (((PlayerInfo*)(peer->data))->rid != ((PlayerInfo*)(peer->data))->registerrid)
										{
											foundAnotherLocation = true;
										}
										if (((PlayerInfo*)(peer->data))->sid != ((PlayerInfo*)(peer->data))->registersid)
										{
											foundAnotherLocation = true;
										}
										if (((PlayerInfo*)(peer->data))->gid != ((PlayerInfo*)(peer->data))->registergid)
										{
											foundAnotherLocation = true;
										}
										if (((PlayerInfo*)(peer->data))->vid != ((PlayerInfo*)(peer->data))->registervid)
										{
											foundAnotherLocation = true;
										}
										if (((PlayerInfo*)(peer->data))->aid != ((PlayerInfo*)(peer->data))->registeraid)
										{
											foundAnotherLocation = true;
										}
										if (((PlayerInfo*)(peer->data))->charIP != ((PlayerInfo*)(peer->data))->registerIP)
										{
											foundAnotherLocation = true;
										}
										if (foundAnotherLocation)
										{
											((PlayerInfo*)(peer->data))->isConfirmingCode = true;
											GamePacket p2code = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"),
												"set_default_color|`o\n\nadd_label_with_icon|big|`oNew device detected``|left|32|\n\nadd_spacer|small|\nadd_label|small|`wIt seems you joined from another location. `wPlease confirm your identity by entering your `@security `wcode.|left||\n\nadd_spacer|small||\nadd_text_input|checkCodeText|Code||5|\n\nadd_spacer|small|\nend_dialog|checkCodeDialog||Accept|\n"));
											ENetPacket* packet = enet_packet_create(p2code.data,
												p2code.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p2code.data;
										}
									}
									sendnews(peer);
								}
								else {
									((PlayerInfo*)(peer->data))->isBot = false;
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
									}
									PlayerInventory inventory;
									InventoryItem item;
									item.itemCount = 1;
									item.itemID = 18;
									inventory.items.push_back(item);
									item.itemCount = 1;
									item.itemID = 32;
									inventory.items.push_back(item);
									sendInventory(peer, inventory);
									((PlayerInfo*)(peer->data))->inventory = inventory;
									joinWorld(peer, "START", 0, 0);
								}
								if (((PlayerInfo*)(peer->data))->haveGrowId) {
									PlayerInfo* p = ((PlayerInfo*)(peer->data));
									std::ifstream ifff("players/" + PlayerDB::getProperName(p->rawName) + ".json");
									json j;
									ifff >> j;
									vector <string>frns;
									if (j.count("friends") == 1) {
										for (int i = 0; i < j["friends"].size(); i++) {
											frns.push_back(j["friends"][i]);
										}
									}
									else {
										frns = {};
									}
									((PlayerInfo*)(peer->data))->effect = j["effect"];
									p->friendinfo = frns;
									ifff.close();
								}
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									string name = ((PlayerInfo*)(currentPeer->data))->rawName;
									if (find(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), name) != ((PlayerInfo*)(peer->data))->friendinfo.end()) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ALERT: `o" + ((PlayerInfo*)(peer->data))->rawName + " `ohas `2logged on`o."));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										delete p.data;
									}
								}
								{
									PlayerInfo* pData = ((PlayerInfo*)(peer->data));
								}
							}
							if (strcmp(GetTextPointerFromPacket(event.packet), "action|refresh_item_data\n") == 0)
							{
								if (itemsDat != NULL) {
									ENetPacket * packet = enet_packet_create(itemsDat,
										itemsDatSize + 60,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									((PlayerInfo*)(peer->data))->isUpdating = true;
									enet_peer_disconnect_later(peer, 0);
								}
							}
							break;
						}
						default:
							cout << "Unknown packet type " << messageType << endl;
							break;
						case 3:
						{
							//cout << GetTextPointerFromPacket(event.packet) << endl;
							std::stringstream ss(GetTextPointerFromPacket(event.packet));
							std::string to;
							bool isJoinReq = false;
							while (std::getline(ss, to, '\n')) {
								if (to.find('|') == -1) continue;
								string id = "";
								id = to.substr(0, to.find("|"));
								string act = "";
								act = to.substr(to.find("|") + 1, to.length() - to.find("|") - 1);
								if (id == "name" && isJoinReq)
								{
#ifdef TOTAL_LOG
									cout << "Entering some world..." << endl;
#endif
									toUpperCase(act);
									if (act.find(" ") != string::npos || act.find("  ") != string::npos || act.find(".") != string::npos || act.find(",") != string::npos || act.find("?") != string::npos || act.find("@") != string::npos || act.find("[") != string::npos || act.find("]") != string::npos || act.find("#") != string::npos || act.find("<") != string::npos || act.find(">") != string::npos || act.find(":") != string::npos || act.find("\"") != string::npos || act.find("{") != string::npos || act.find("}") != string::npos || act.find("|") != string::npos || act.find("+") != string::npos || act.find("_") != string::npos || act.find("~") != string::npos || act.find("-") != string::npos || act.find("!") != string::npos || act.find("$") != string::npos || act.find("%") != string::npos || act.find("^") != string::npos || act.find("&") != string::npos || act.find("`") != string::npos || act.find("*") != string::npos || act.find("(") != string::npos || act.find(")") != string::npos || act.find("=") != string::npos || act.find("'") != string::npos || act.find(";") != string::npos || act.find("/") != string::npos) {
										Player::OnTextOverlay(peer, "You cant use symbols in world name");
										Player::OnFailedToEnterWorld(peer);
										continue;
										break;
									}
									if (act == "")
									{
										Player::OnTextOverlay(peer, "Where are we going?");
										Player::OnFailedToEnterWorld(peer);
										continue;
										break;
									}
									if (std::experimental::filesystem::exists("worlds/" + act + ".json"))
									{
										std::streampos fsize = 0;
										std::ifstream myfile("worlds/" + act + ".json", ios::in);  // File is of type const char*
										fsize = myfile.tellg();         // The file pointer is currently at the beginning
										myfile.seekg(0, ios::end);      // Place the file pointer at the end of file
										fsize = myfile.tellg() - fsize;
										myfile.close();
										static_assert(sizeof(fsize) >= sizeof(long long), "Oops.");
										if (fsize <= 90000)
										{
											Player::OnConsoleMessage(peer, "`4Oh no! ``This world have been corrupted.");
											Player::OnFailedToEnterWorld(peer);
											continue;
											break;
										}
									}
									if (act == "QQ")
									{
										PlayerInfo* p = ((PlayerInfo*)(peer->data));
										std::ifstream ifff("players/" + PlayerDB::getProperName(p->rawName) + ".json");
										json j;
										ifff >> j;
										int level;
										level = j["level"];
										p->level = level;
										if (((PlayerInfo*)(peer->data))->level <= 9)
										{
											Player::OnTextOverlay(peer, "You must be at least level 10!");
											Player::OnFailedToEnterWorld(peer);
											continue;
											break;
										}
									}
									if (act == "ADMIN" || act == "TEST")
									{
										Player::OnTextOverlay(peer, "To reduce confusation this world is disabled");
										Player::OnFailedToEnterWorld(peer);
										continue;
										break;
									}
									if (act == "CON" || act == "EXIT" || act == "NUL" || act == "PRN" || act == "AUX" || act == "CLOCK$" || act == "COM0" || act == "COM1" || act == "COM2" || act == "COM3" || act == "COM4" || act == "COM5" || act == "COM6" || act == "COM7" || act == "COM8" || act == "COM9" || act == "LPT0" || act == "LPT1" || act == "LPT2" || act == "LPT3" || act == "LPT4" || act == "LPT5" || act == "LPT6" || act == "LPT7" || act == "LPT8" || act == "LPT9")
									{
										Player::OnTextOverlay(peer, "Maybe try another one?");
										Player::OnFailedToEnterWorld(peer);
										continue;
										break;
									}
									if (act.find_first_not_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789") != string::npos) {
										Player::OnTextOverlay(peer, "Symbols not allowed!");
										Player::OnFailedToEnterWorld(peer);
										continue;
										break;
									}
									else
									{
										WorldInfo info = worldDB.get(act);
										string name = ((PlayerInfo*)(peer->data))->rawName;
										bool exitsnuke = info.nuked == true;
										if (exitsnuke)
										{
											if (adminlevel(((PlayerInfo*)(peer->data))->rawName) >= 666) {
												joinWorld(peer, act, 0, 0);
												Player::OnTextOverlay(peer, "`@This world is nuked");
											}
											else
											{
												Player::OnTextOverlay(peer, "This world is inaccessible");
												Player::OnFailedToEnterWorld(peer);
												continue;
												break;
											}
										}
										else
										{
											joinWorld(peer, act, 0, 0);
										}
									}
								}
								if (id == "action")
								{
									if (act == "join_request")
									{
										isJoinReq = true;
									}
									if (act == "quit_to_exit")
									{
										if (((PlayerInfo*)(event.peer->data))->canExit)
										{
											int total = 0;
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->adminLevel >= 0) {
													total++;
												}
											}
											Player::OnConsoleMessage(peer, "Where would you like to go? (`w" + to_string(total) + " `oonline)");
											sendPlayerLeave(peer, (PlayerInfo*)(event.peer->data));
											sendWorldOffers(peer);
											((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
										}
									}
									if (act == "quit")
									{
										enet_peer_disconnect_later(peer, 0);
									}
								}
							}
							break;
						}
						case 4:
						{
							{
								if (!world) continue; //TESTINGWORLDANTI
								BYTE* tankUpdatePacket = GetStructPointerFromTankPacket(event.packet);

								if (tankUpdatePacket)
								{
									PlayerMoving* pMov = unpackPlayerMoving(tankUpdatePacket);
									if ((pMov->characterState >= 80 || pMov->characterState == 64) && pMov->characterState != 144 && pMov->characterState != 128 && pMov->characterState < 250) {
										if (((PlayerInfo*)(peer->data))->canWalkInBlocks == false)
										{
											((PlayerInfo*)(event.peer->data))->lavaLevel = ((PlayerInfo*)(event.peer->data))->lavaLevel + 1;

											if (((PlayerInfo*)(peer->data))->lavaLevel >= 5) {
												((PlayerInfo*)(peer->data))->lavaLevel = 0;
												int x = ((PlayerInfo*)(peer->data))->x;
												int y = ((PlayerInfo*)(peer->data))->y;
												for (int i = 0; i < world->width * world->height; i++)
												{
													if (world->items[i].foreground == 6) {
														x = (i % world->width) * 32;
														y = (i / world->width) * 32;
														//world->items[i].foreground = 8;
													}
												}
												playerRespawn(peer, false);
											}
										}
									}
									switch (pMov->packetType)
									{
									case 0:
										((PlayerInfo*)(event.peer->data))->x = pMov->x;
										((PlayerInfo*)(event.peer->data))->y = pMov->y;
										((PlayerInfo*)(event.peer->data))->isRotatedLeft = pMov->characterState & 0x10;
										sendPData(peer, pMov);
										if (((PlayerInfo*)(peer->data))->isinv == false) {
											if (((PlayerInfo*)(peer->data))->cloth_hand == 2204)
											{
												using namespace std::chrono;
												if (((PlayerInfo*)(peer->data))->lastSYNC + 900 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
												{
													((PlayerInfo*)(peer->data))->lastSYNC = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
													FindGeiger(peer);
												}
												else {
													continue;
												}
											}
											if (((PlayerInfo*)(peer->data))->cloth_back == 9434)
											{
												int effect = 267;
												int x = ((PlayerInfo*)(peer->data))->x;
												int y = ((PlayerInfo*)(peer->data))->y;
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer))
													{
														Player::OnParticleEffect(currentPeer, effect, x, y, 0);
													}
												}
											}
											if (((PlayerInfo*)(peer->data))->cloth_back == 1738)
											{
												int effect = 151;
												int x = ((PlayerInfo*)(peer->data))->x;
												int y = ((PlayerInfo*)(peer->data))->y;
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer))
													{
														Player::OnParticleEffect(currentPeer, effect, x, y, 0);
													}
												}
											}
											if (((PlayerInfo*)(peer->data))->cloth_back == 2264)
											{
												int effect = 218;
												int x = ((PlayerInfo*)(peer->data))->x;
												int y = ((PlayerInfo*)(peer->data))->y;
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer))
													{
														Player::OnParticleEffect(currentPeer, effect, x, y, 0);
													}
												}
											}
											if (((PlayerInfo*)(peer->data))->cloth_back == 8552)
											{
												int effect = 171;
												int x = ((PlayerInfo*)(peer->data))->x;
												int y = ((PlayerInfo*)(peer->data))->y;
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer))
													{
														Player::OnParticleEffect(currentPeer, effect, x, y, 0);
													}
												}
											}
											if (((PlayerInfo*)(peer->data))->cloth_back == 9466)
											{
												int effect = 368;
												int x = ((PlayerInfo*)(peer->data))->x;
												int y = ((PlayerInfo*)(peer->data))->y;
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer))
													{
														Player::OnParticleEffect(currentPeer, effect, x, y, 0);
													}
												}
											}
											if (((PlayerInfo*)(peer->data))->cloth_back == 5136)
											{
												int effect = 152;
												int x = ((PlayerInfo*)(peer->data))->x;
												int y = ((PlayerInfo*)(peer->data))->y;
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer))
													{
														Player::OnParticleEffect(currentPeer, effect, x, y, 0);
													}
												}
											}
											if (((PlayerInfo*)(peer->data))->cloth_necklace == 9428)
											{
												int effect = 126;
												int x = ((PlayerInfo*)(peer->data))->x;
												int y = ((PlayerInfo*)(peer->data))->y;
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer))
													{
														Player::OnParticleEffect(currentPeer, effect, x, y, 0);
													}
												}
											}
										}
										if (!((PlayerInfo*)(peer->data))->joinClothesUpdated)
										{
											((PlayerInfo*)(peer->data))->joinClothesUpdated = true;
											updateAllClothes(peer);
											updateInvis(peer);
											sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
											sendState(peer); //here
											if (((PlayerInfo*)(peer->data))->ghostalr)
											{
												((PlayerInfo*)(peer->data))->canDoubleJump = true; //here
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
											}
											if (((PlayerInfo*)(peer->data))->isinv == 1) {
												Player::OnConsoleMessage(peer, "`^You are in invisibility mode, no one can see you!``");
											}
										}
										break;
									default:
										break;
									}
									switch (pMov->packetType)
									{
									case 0:
										((PlayerInfo*)(event.peer->data))->x = pMov->x;
										((PlayerInfo*)(event.peer->data))->y = pMov->y;
										((PlayerInfo*)(event.peer->data))->isRotatedLeft = pMov->characterState & 0x10;
										sendPData(peer, pMov);
										if (!((PlayerInfo*)(peer->data))->joinClothesUpdated)
										{
											((PlayerInfo*)(peer->data))->joinClothesUpdated = true;
											updateAllClothes(peer);
										}
										break;
									default:
										break;
									}
									PlayerMoving* data2 = unpackPlayerMoving(tankUpdatePacket);
									if (data2->packetType == 11)
									{
											PlayerInfo* pinfo = ((PlayerInfo*)(event.peer->data));
											WorldInfo* world = getPlyersWorld(event.peer);
											if (!world) break;
											// is this legit collect?
											// nah, we're not checking for that
											bool legit = true;
											// ...
											// anticheat code goes here
											// ...
											int playerditemcount = ((PlayerInfo*)(event.peer->data))->droppeditemcount;
											int itemIdx = pMov->plantingTree - 1;
											int atik = -1;
											for (int i = 0; i < world->droppedItems.size(); i++)
											{
												if (world->droppedItems.at(i).uid == itemIdx)
												{
													atik = i;
													break;
												}
											}
											legit = atik != -1;
											if (legit)
											{
												//	cout << "[!] heh" << endl;
												DroppedItem droppedItem = world->droppedItems.at(atik);

												// check if player already ha s item

												legit = true;
											}
											if (legit)
											{
												DroppedItem droppedItem = world->droppedItems.at(atik);

												if (droppedItem.id == 112)
												{
													int currentGems = 0;
													ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													ifs >> currentGems;
													ifs.close();

													currentGems += droppedItem.count;
													ofstream myfile;
													myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													myfile << currentGems;
													myfile.close();

													std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string contentx((std::istreambuf_iterator<char>(ifszi)),
														(std::istreambuf_iterator<char>()));


													GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), currentGems));
													ENetPacket* packetpp = enet_packet_create(pp.data,
														pp.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packetpp);
													delete pp.data;
												}
												else
												{
													sendTake(peer, pinfo->netID, pMov->x, pMov->y, itemIdx + 1);
													AddItemToInv2(peer, droppedItem.id, droppedItem.count);
												}
												if (getItemDef(droppedItem.id).rarity == 999)
												{
													if (droppedItem.id != 112)
													{
														Player::OnConsoleMessage(peer, "`oCollected `w" + to_string(droppedItem.count) + " " + getItemDef(droppedItem.id).name + "`o.");
													}
												}
												else
												{
													Player::OnConsoleMessage(peer, "`oCollected `w" + to_string(droppedItem.count) + " " + getItemDef(droppedItem.id).name + "`o. Rarity: `w" + to_string(getItemDef(droppedItem.id).rarity) + "`o.");
												}
												world->droppedItems.erase(world->droppedItems.begin() + atik);
												sendTake(peer, pinfo->netID, pMov->x, pMov->y, itemIdx + 1);
											}
											else
											{
												//	cout << "[!] Couldn't take item - plantingTree value is " << hex << pMov->plantingTree << dec << " and itemIdx value is " << hex << itemIdx << dec << "!" << endl;
											}
										}
	
									if (data2->packetType == 25) {
										if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") continue;
										if (((PlayerInfo*)(peer->data))->isinv == false) {
											Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from GrowLand for 7 days", "audio/hub_open.wav", "interface/atomic_button.rttex");
											autoBan(peer, false, 24 * 7, "on checking packetType 25, 'isinv' was false");
										}
										else {
										}
									}
									if (data2->packetType == 23) {
										if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") continue;
										if (((PlayerInfo*)(peer->data))->currentWorld == "HELL") continue;
										if (((PlayerInfo*)(peer->data))->currentWorld == "START") continue;
										if (((PlayerInfo*)(peer->data))->currentWorld == "QQ") continue;
										if (((PlayerInfo*)(peer->data))->x != 0 && ((PlayerInfo*)(peer->data))->y != 0) {
											int puX = (int)((PlayerInfo*)(peer->data))->x / 32;
											int puY = (int)((PlayerInfo*)(peer->data))->y / 32;
											if (puX == ((PlayerInfo*)(peer->data))->respawnX / 32 && puY == ((PlayerInfo*)(peer->data))->respawnY / 32) continue;
											string killedBy = "(unknown)";
											string killedByrawname = "(unknown)";
											string killedWho = "(unknown)";
											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer)) {
													if (((PlayerInfo*)(currentPeer->data))->cloth_hand == 9484 || ((PlayerInfo*)(currentPeer->data))->cloth_hand == 9486 || ((PlayerInfo*)(currentPeer->data))->cloth_hand == 9494 || ((PlayerInfo*)(currentPeer->data))->cloth_hand == 9502)
													{
														if (((PlayerInfo*)(currentPeer->data))->lastPVPcoord == data2->plantingTree || ((PlayerInfo*)(currentPeer->data))->lastPVPcoord2 == data2->plantingTree || ((PlayerInfo*)(currentPeer->data))->lastPVPcoord3 == data2->plantingTree || ((PlayerInfo*)(currentPeer->data))->lastPVPcoord4 == data2->plantingTree || ((PlayerInfo*)(currentPeer->data))->lastPVPcoord5 == data2->plantingTree || ((PlayerInfo*)(currentPeer->data))->lastPVPcoord6 == data2->plantingTree || ((PlayerInfo*)(currentPeer->data))->lastPVPcoord7 == data2->plantingTree) {
															if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->rawName) continue;
															int killitem = ((PlayerInfo*)(currentPeer->data))->cloth_hand;
															int damage = 0;
															if (killitem == 9484)
															{
																damage = 25;
															}
															else if (killitem == 9486)
															{
																damage = 30;
															}
															else if (killitem == 9494)
															{
																damage = 50;
															}
															else if (killitem == 9502)
															{
																damage = 60;
															}
															killedBy = ((PlayerInfo*)(currentPeer->data))->displayName;
															killedByrawname = ((PlayerInfo*)(currentPeer->data))->rawName;
															killedWho = ((PlayerInfo*)(peer->data))->rawName;
															((PlayerInfo*)(currentPeer->data))->lastPVPcoord = -1;
															((PlayerInfo*)(currentPeer->data))->lastPVPcoord2 = -1;
															((PlayerInfo*)(currentPeer->data))->lastPVPcoord3 = -1;
															((PlayerInfo*)(currentPeer->data))->lastPVPcoord4 = -1;
															((PlayerInfo*)(currentPeer->data))->lastPVPcoord5 = -1;
															((PlayerInfo*)(currentPeer->data))->lastPVPcoord6 = -1;
															((PlayerInfo*)(currentPeer->data))->lastPVPcoord7 = -1;
															((PlayerInfo*)(peer->data))->health = ((PlayerInfo*)(peer->data))->health - damage;
															Player::OnParticleEffect(currentPeer, 170, ((PlayerInfo*)(peer->data))->x, ((PlayerInfo*)(peer->data))->y, 0);
															Player::OnConsoleMessage(currentPeer, "`4[DAMAGE] `^You dealt `@" + std::to_string(damage) + " `4DMG`^!");
															Player::OnConsoleMessage(peer, "`4[DAMAGE] `^You Lost `@" + std::to_string(damage) + " `4DMG`^!");
															if (((PlayerInfo*)(peer->data))->health <= 0) {
																((PlayerInfo*)(currentPeer->data))->totalKills++;
																((PlayerInfo*)(peer->data))->health = 100;
																playerRespawn(peer, false);
																Player::OnConsoleMessage(peer, "`oYou were `4killed `oby `w" + killedByrawname + "`o.``");
																Player::OnConsoleMessage(currentPeer, "`oYou `4killed `w" + killedWho + "`o.``");

																int updatedKillsCount = 0;

																ifstream getKills("kills/" + killedByrawname + ".txt");
																if (getKills.is_open()) {
																	getKills >> updatedKillsCount;
																}
																getKills.close();

																updatedKillsCount += 1;

																ofstream saveKill("kills/" + killedByrawname + ".txt");
																saveKill << updatedKillsCount;
																saveKill.close();
															}
															break;
														}

													}

													if (((PlayerInfo*)(currentPeer->data))->isZombie == true && ((PlayerInfo*)(peer->data))->isZombie == false)
													{
														if (((PlayerInfo*)(currentPeer->data))->lastPVPcoord == data2->plantingTree || ((PlayerInfo*)(currentPeer->data))->lastPVPcoord2 == data2->plantingTree || ((PlayerInfo*)(currentPeer->data))->lastPVPcoord3 == data2->plantingTree || ((PlayerInfo*)(currentPeer->data))->lastPVPcoord4 == data2->plantingTree || ((PlayerInfo*)(currentPeer->data))->lastPVPcoord5 == data2->plantingTree || ((PlayerInfo*)(currentPeer->data))->lastPVPcoord6 == data2->plantingTree || ((PlayerInfo*)(currentPeer->data))->lastPVPcoord7 == data2->plantingTree) {
															if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->rawName) continue;
															((PlayerInfo*)(currentPeer->data))->lastPVPcoord = -1;
															((PlayerInfo*)(currentPeer->data))->lastPVPcoord2 = -1;
															((PlayerInfo*)(currentPeer->data))->lastPVPcoord3 = -1;
															((PlayerInfo*)(currentPeer->data))->lastPVPcoord4 = -1;
															((PlayerInfo*)(currentPeer->data))->lastPVPcoord5 = -1;
															((PlayerInfo*)(currentPeer->data))->lastPVPcoord6 = -1;
															((PlayerInfo*)(currentPeer->data))->lastPVPcoord7 = -1;

															if (((PlayerInfo*)(peer->data))->canWalkInBlocks == true)
															{
																((PlayerInfo*)(peer->data))->canWalkInBlocks = false;
																((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
																sendState(peer);
															}

															sendSound(peer, "skel.wav");
															Player::OnTalkBubble(currentPeer, ((PlayerInfo*)(currentPeer->data))->netID, "`4You have infected `2" + ((PlayerInfo*)(peer->data))->rawName + "'s", 0, true);
															Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "`4You were infected by `2" + ((PlayerInfo*)(currentPeer->data))->rawName, 0, true);
															((PlayerInfo*)(peer->data))->isZombie = true;
															playerconfig(peer, 1150, 130, 0x14);

														}
													}

												}
											}
										}

									}
									if (data2->packetType == 7)
									{
										if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") continue;
										int idx = pMov->punchY * world->width + pMov->punchX;
										if (getItemDef(world->items[idx].foreground).blockType == BlockTypes::DOOR)
										{
											PlayerInfo* pinf = (PlayerInfo*)peer->data;
											switch (world->items[idx].foreground)
											{
											default:
												DoEnterDoor(peer, world, pMov->punchX, pMov->punchY);
												break;
											}
										}
										else {
											WhiteDoor(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
										}
									}
									if (data2->packetType == 10)
									{
										if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") continue;
										if (((PlayerInfo*)(peer->data))->dotrade == true || ((PlayerInfo*)(peer->data))->istrading == true)
										{
											Player::OnTextOverlay(peer, "You cant do that while trading!");
											continue;
										}
										if (pMov->plantingTree == 242)
										{
											bool iscontainseas = false;
											SearchInventoryItem(peer, pMov->plantingTree, 1, iscontainseas);
											if (!iscontainseas)
											{
												break;
											}
											for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
											{
												if (((PlayerInfo*)(peer->data))->inventory.items[i].itemID == 242)
												{
													if (((PlayerInfo*)(peer->data))->inventory.items[i].itemCount >= 100)
													{
														bool isValid = SaveConvertedItem(1796, 1, peer);
														if (isValid)
														{
															RemoveInventoryItem(pMov->plantingTree, 100, peer);
															Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "`wYou compressed 100 `2World Lock `winto a `2Diamond Lock`w!", 0, true);
															Player::OnConsoleMessage(peer, "`oYou compressed 100 `2World Lock `ointo a `2Diamond Lock`o!");
														}
													}
												}
											}
										}
										else if (pMov->plantingTree == 1796)
										{
											bool iscontainseas = false;
											SearchInventoryItem(peer, pMov->plantingTree, 1, iscontainseas);
											if (!iscontainseas)
											{
												break;
											}
											for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
											{
												if (((PlayerInfo*)(peer->data))->inventory.items[i].itemID == 1796)
												{
													if (((PlayerInfo*)(peer->data))->inventory.items[i].itemCount >= 1)
													{
														bool isValid = SaveConvertedItemDls(242, 100, peer);
														if (isValid)
														{
															RemoveInventoryItem(pMov->plantingTree, 1, peer);
															Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "`wYou shattered a `2Diamond Lock `winto 100 `2World Lock`w!", 0, true);
															Player::OnConsoleMessage(peer, "`oYou shattered a `2Diamond Lock `ointo 100 `2World Lock`o!");
														}
													}
												}
											}
										}
										else if (pMov->plantingTree == 7188)
										{
											bool iscontainseas = false;
											SearchInventoryItem(peer, pMov->plantingTree, 1, iscontainseas);
											if (!iscontainseas)
											{
												break;
											}
											for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
											{
												if (((PlayerInfo*)(peer->data))->inventory.items[i].itemID == 7188)
												{
													if (((PlayerInfo*)(peer->data))->inventory.items[i].itemCount >= 1)
													{
														bool isValid = SaveConvertedItemDls(1796, 100, peer);
														if (isValid)
														{
															RemoveInventoryItem(pMov->plantingTree, 1, peer);
															Player::OnTalkBubble(peer, ((PlayerInfo*)(peer->data))->netID, "`wYou shattered a `2Blue Gem Lock `winto 100 `2Diamond Lock`w!", 0, true);
															Player::OnConsoleMessage(peer, "`wYou shattered a `2Blue Gem Lock `winto 100 `2Diamond Lock`w!");
														}
													}
												}
											}
										}
										ItemDefinition def;
										try {
											def = getItemDef(pMov->plantingTree);
										}
										catch (int e) {
											goto END_CLOTHSETTER_FORCE;
										}
										switch (def.clothType) {
										case 0:
											if (pMov->plantingTree >= 0) {
												bool iscontainseas = false;
												SearchInventoryItem(peer, pMov->plantingTree, 1, iscontainseas);
												if (!iscontainseas)
												{
													autoBan(peer, false, 24 * 7, "didnt has " + to_string(pMov->plantingTree) + " item in inventory. (case 0 of pMov->plantingTree)");
													break;
												}
											}
											if (pMov->plantingTree == 4626) {
											}
											else if (pMov->plantingTree == 3462) {
											}
											if (((PlayerInfo*)(event.peer->data))->cloth0 == pMov->plantingTree)
											{
												Player::PlayAudio(peer, "audio/change_clothes.wav", 0);
												((PlayerInfo*)(event.peer->data))->cloth0 = 0;
												break;
											}
											Player::PlayAudio(peer, "audio/change_clothes.wav", 0);
											((PlayerInfo*)(event.peer->data))->cloth0 = pMov->plantingTree;
											break;
										case 1:
											if (pMov->plantingTree >= 0) {
												bool iscontainseas = false;
												SearchInventoryItem(peer, pMov->plantingTree, 1, iscontainseas);
												if (!iscontainseas)
												{
													autoBan(peer, false, 24 * 7, "didnt has " + to_string(pMov->plantingTree) + " item in inventory. (case 1 of pMov->plantingTree)");
													break;
												}
											}
											if (((PlayerInfo*)(event.peer->data))->cloth1 == pMov->plantingTree)
											{
												((PlayerInfo*)(peer->data))->effect = 8421376;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here
												Player::PlayAudio(peer, "audio/change_clothes.wav", 0);
												((PlayerInfo*)(event.peer->data))->cloth1 = 0;
												break;
											}
											((PlayerInfo*)(event.peer->data))->cloth1 = pMov->plantingTree;
											if (pMov->plantingTree = 1780) {
												((PlayerInfo*)(peer->data))->effect = 8421474;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here
											}
											Player::PlayAudio(peer, "audio/change_clothes.wav", 0);
											break;
										case 2:
											if (pMov->plantingTree >= 0) {
												bool iscontainseas = false;
												SearchInventoryItem(peer, pMov->plantingTree, 1, iscontainseas);
												if (!iscontainseas)
												{
													autoBan(peer, false, 24 * 7, "didnt has " + to_string(pMov->plantingTree) + " item in inventory. (case 2 of pMov->plantingTree)");
													break;
												}
											}
											if (((PlayerInfo*)(event.peer->data))->cloth2 == pMov->plantingTree)
											{
												Player::PlayAudio(peer, "audio/change_clothes.wav", 0);
												((PlayerInfo*)(event.peer->data))->cloth2 = 0;
												break;
											}
											Player::PlayAudio(peer, "audio/change_clothes.wav", 0);
											((PlayerInfo*)(event.peer->data))->cloth2 = pMov->plantingTree;
											break;
										case 3:
											if (pMov->plantingTree >= 0) {
												bool iscontainseas = false;
												SearchInventoryItem(peer, pMov->plantingTree, 1, iscontainseas);
												if (!iscontainseas)
												{
													autoBan(peer, false, 24 * 7, "didnt has " + to_string(pMov->plantingTree) + " item in inventory. (case 3 of pMov->plantingTree)");
													break;
												}
											}
											if (((PlayerInfo*)(event.peer->data))->cloth3 == pMov->plantingTree)
											{
												Player::PlayAudio(peer, "audio/change_clothes.wav", 0);
												((PlayerInfo*)(event.peer->data))->cloth3 = 0;
												break;
											}
											if (pMov->plantingTree == 8834) {
											}
											Player::PlayAudio(peer, "audio/change_clothes.wav", 0);
											((PlayerInfo*)(event.peer->data))->cloth3 = pMov->plantingTree;
											break;
										case 4:
											if (pMov->plantingTree >= 0) {
												bool iscontainseas = false;
												SearchInventoryItem(peer, pMov->plantingTree, 1, iscontainseas);
												if (!iscontainseas)
												{
													autoBan(peer, false, 24 * 7, "didnt has " + to_string(pMov->plantingTree) + " item in inventory. (case 4 of pMov->plantingTree)");
													break;
												}
											}
											if (((PlayerInfo*)(event.peer->data))->cloth4 == pMov->plantingTree)
											{
												((PlayerInfo*)(peer->data))->effect = 8421376;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here
												Player::PlayAudio(peer, "audio/change_clothes.wav", 0);
												((PlayerInfo*)(event.peer->data))->cloth4 = 0;
												break;
											}
											if (pMov->plantingTree == 1204) {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oGive people the evil eye. (`oFocused eyes mod added`o)"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;
												((PlayerInfo*)(peer->data))->effect = 8421386;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here
											}
											Player::PlayAudio(peer, "audio/change_clothes.wav", 0);
											((PlayerInfo*)(event.peer->data))->cloth4 = pMov->plantingTree;
											break;
										case 5:
											if (pMov->plantingTree >= 0) {
												bool iscontainseas = false;
												SearchInventoryItem(peer, pMov->plantingTree, 1, iscontainseas);
												if (!iscontainseas)
												{
													autoBan(peer, false, 24 * 7, "didnt has " + to_string(pMov->plantingTree) + " item in inventory. (case 5 of pMov->plantingTree)");
													break;
												}
											}
											if (pMov->plantingTree == 9458) {
												if (((PlayerInfo*)(peer->data))->cloth_hand != 9458)
												{
													Player::OnConsoleMessage(peer, "`oLegendary. (`o`9Legen `omod added`o)");
													sendState(peer); //here
												}
												else {
													Player::OnConsoleMessage(peer, "`oBack to normal. (`o`9Legen `omod removed`o)");
													sendState(peer); //here
												}
											}
											else if (pMov->plantingTree == 9456) {
												if (((PlayerInfo*)(peer->data))->cloth_hand != 9456)
												{
													Player::OnConsoleMessage(peer, "`oGolden Shine. (`o`8Richness `omod added`o)");
													sendState(peer); //here
												}
												else {
													Player::OnConsoleMessage(peer, "`oEhh. (`o`8Richness `omod removed`o)");
													sendState(peer); //here
												}
											}
											else if (pMov->plantingTree == 9716) {
												if (((PlayerInfo*)(peer->data))->cloth_hand != 9716)
												{
													Player::OnConsoleMessage(peer, "`oDemonish power. (`o`@Destruction `omod added`o)");
													sendState(peer); //here
												}
												else {
													Player::OnConsoleMessage(peer, "`oWell power gone. (`o`@Destruction `omod removed`o)");
													sendState(peer); //here
												}
											}
											else if (pMov->plantingTree == 7956) {
												if (((PlayerInfo*)(peer->data))->cloth_hand != 7956)
												{
													Player::OnConsoleMessage(peer, "`oRainbow everything. (`o`#Rainbow `omod added`o)");
													sendState(peer); //here
												}
												else {
													Player::OnConsoleMessage(peer, "`oGray turns everything. (`o`#Rainbow `omod removed`o)");
													sendState(peer); //here
												}
											}
											else if (pMov->plantingTree == 2204)
											{
												srand(GetTickCount());
												int geigercounterx = rand() % 3000;
												int geigercountery = rand() % 1500;
												world->geigerX = geigercounterx;
												world->geigerY = geigercountery;
											}
											else if (pMov->plantingTree == 6312) {
												if (((PlayerInfo*)(peer->data))->cloth_hand != 6312)
												{
													Player::OnConsoleMessage(peer, "`oIts raining diamonds. (`o`1Crystal `omod added`o)");
													sendState(peer); //here
												}
												else {
													Player::OnConsoleMessage(peer, "`oDiamonds rain seems to stop. (`o`1Crystal `omod removed`o)");
													sendState(peer); //here
												}
											}
											else if (pMov->plantingTree == 2592) {
												Player::OnConsoleMessage(peer, "`oNone can stand against you! (`oLegendary Swordsmaster mod added`o)");
												((PlayerInfo*)(peer->data))->effect = 8421399;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 1742) {
											}
											else if (pMov->plantingTree == 2952) {
											}
											else if (pMov->plantingTree == 9758) {
											}
											else if (pMov->plantingTree == 6782) {
												Player::OnConsoleMessage(peer, "`oYou are feeling like `2Infinity `4Power `oStarts to go out of you!");
												((PlayerInfo*)(peer->data))->effect = 8421509;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 8452) {
												((PlayerInfo*)(peer->data))->effect = 8421412;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 5480) {
												Player::OnConsoleMessage(peer, "`oWho needs arms when you have these? (`oRayman fist! mod added`o)");
												((PlayerInfo*)(peer->data))->effect = 8421456;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 9410) {
												Player::OnConsoleMessage(peer, "`#Purple `9lights `ostarts to move around you! (`#Valentine! `omod added`o)");
												sendState(peer); //here
											}
											else if (pMov->plantingTree == 1782) {
												Player::OnConsoleMessage(peer, "`oYou should be very very nice to your pet. (`oLegendary! mod added`o)");
												((PlayerInfo*)(peer->data))->effect = 8421397;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 1868) {
												Player::OnConsoleMessage(peer, "`oYou command a mighty (violent) dragon! (`oDrakeborn mod added`o)");
												((PlayerInfo*)(peer->data))->effect = 8421399;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 1804) {
												Player::OnConsoleMessage(peer, "`oYou electrocute things. (`oFistful Of Thunder mod added`o)");
												((PlayerInfo*)(peer->data))->effect = 8421398;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 9058) {
												((PlayerInfo*)(peer->data))->effect = 8421512;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 9484) {
												((PlayerInfo*)(peer->data))->effect = 8421512;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 9486) {
												((PlayerInfo*)(peer->data))->effect = 8421512;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here
											}
											else if (pMov->plantingTree == 7912) {
												((PlayerInfo*)(peer->data))->effect = 8421398;   
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 6026) {
												Player::OnConsoleMessage(peer, "`oThe truth is yours! (`oWhip of Truth mod added`o)");
												((PlayerInfo*)(peer->data))->effect = 8421452;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 9310) {
												Player::OnConsoleMessage(peer, "`oYour hands starts to `4Burn! `o(`9Legendary `omod added)");
												((PlayerInfo*)(peer->data))->effect = 8421452;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here
											}
											else if (pMov->plantingTree == 2952) {
											}
											else if (pMov->plantingTree == 9758) {
											}
											else if (pMov->plantingTree == 1836) {
											}
											if (((PlayerInfo*)(event.peer->data))->cloth5 == pMov->plantingTree)
											{
												((PlayerInfo*)(peer->data))->effect = 8421376;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here
												Player::PlayAudio(peer, "audio/change_clothes.wav", 0);
												((PlayerInfo*)(event.peer->data))->cloth5 = 0;
												break;
											}
											if (pMov->plantingTree == 1782) {
												((PlayerInfo*)(peer->data))->effect = 8424213;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 1804) {
												((PlayerInfo*)(peer->data))->effect = 8424214;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 1868) {
												((PlayerInfo*)(peer->data))->effect = 8424215;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 2572) {
												((PlayerInfo*)(peer->data))->effect = 8424234;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 2756) {
												((PlayerInfo*)(peer->data))->effect = 8424239;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 6026) {
												((PlayerInfo*)(peer->data))->effect = 8421452;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 2872) {
												((PlayerInfo*)(peer->data))->effect = 8424243;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 2952 || pMov->plantingTree == 6312 || pMov->plantingTree == 7956 || pMov->plantingTree == 9508 || pMov->plantingTree == 9716 || pMov->plantingTree == 9456 || pMov->plantingTree == 9458 || pMov->plantingTree == 9758) {
												((PlayerInfo*)(peer->data))->effect = 8424222;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 3066) {
												((PlayerInfo*)(peer->data))->effect = 8424249;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 2592) {
												((PlayerInfo*)(peer->data))->effect = 8424235;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 9494) {
												((PlayerInfo*)(peer->data))->effect = 8421512;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 9502) {
												((PlayerInfo*)(peer->data))->effect = 8421512;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 2476) {
												((PlayerInfo*)(peer->data))->effect = 8424231;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 1874) {
												((PlayerInfo*)(peer->data))->effect = 8424216;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 10014) {
												Player::OnConsoleMessage(peer, "`oYou feel the presure of the ancients! (`oSoul mod added`o)");
												((PlayerInfo*)(peer->data))->effect = 8421480;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 1204) {
												((PlayerInfo*)(peer->data))->effect = 8421386;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here

											}
											else if (pMov->plantingTree == 1956) {
												((PlayerInfo*)(peer->data))->effect = -997;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here
											}
											else {
												((PlayerInfo*)(peer->data))->effect = 8421376;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here
											}
											Player::PlayAudio(peer, "audio/change_clothes.wav", 0);
											((PlayerInfo*)(event.peer->data))->cloth5 = pMov->plantingTree;
											break;
										case 6:
											if (pMov->plantingTree >= 0) {
												bool iscontainseas = false;
												SearchInventoryItem(peer, pMov->plantingTree, 1, iscontainseas);
												if (!iscontainseas)
												{
													autoBan(peer, false, 24 * 7, "didnt has " + to_string(pMov->plantingTree) + " item in inventory. (case 6 of pMov->plantingTree)");
													break;
												}
											}
											if (pMov->plantingTree == 1784) {
												Player::OnConsoleMessage(peer, "`oYou can jump in mid-air! It's like flying, but less. (`oDouble jump mod added`o)");
												((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
												sendState(peer);
											}
											else if (pMov->plantingTree == 1738) {
												if (((PlayerInfo*)(peer->data))->cloth_back != 1738)
												{
													Player::OnConsoleMessage(peer, "`cCrystallllll!. (`o`1Double Jump `omod added`o)");
													sendState(peer);
												}
												else {
													Player::OnConsoleMessage(peer, "`oCrystal effect has been removed! Sad. (`o`1High Jump `omod removed`o)");
													sendState(peer);
												}
											}
											else if (pMov->plantingTree == 8552) {
												if (((PlayerInfo*)(peer->data))->cloth_back != 8552)
												{
													Player::OnConsoleMessage(peer, "`oHearts!. (`o`4Mercy `omod added`o)");
													((PlayerInfo*)(event.peer->data))->isDr = true;
													((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
													sendState(peer);

												}
												else {
													Player::OnConsoleMessage(peer, "`oUh oh!. (`o`4Mercy `omod removed`o)");
													((PlayerInfo*)(event.peer->data))->isDr = false;
													((PlayerInfo*)(event.peer->data))->canDoubleJump = false;
													sendState(peer);
												}
											}
											else if (pMov->plantingTree == 9434) {
												if (((PlayerInfo*)(peer->data))->cloth_back != 9434)
												{
													Player::OnConsoleMessage(peer, "`oLights Lights!. (`o`eRGB `omod added`o)");
													((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
													sendState(peer);
												}
												else {
													Player::OnConsoleMessage(peer, "`oLights Gone!. (`o`eRGB `omod removed`o)");
													((PlayerInfo*)(event.peer->data))->canDoubleJump = false;
													sendState(peer);
												}
											}
											else if (pMov->plantingTree == 9466) {
												if (((PlayerInfo*)(peer->data))->cloth_back != 9466)
												{
													Player::OnConsoleMessage(peer, "`oGreen Bushes. (`o`2Earth `omod added`o)");
													((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
													sendState(peer);
												}
												else {
													Player::OnConsoleMessage(peer, "`oNope. (`o`2Earth `omod removed`o)");
													((PlayerInfo*)(event.peer->data))->canDoubleJump = false;
													sendState(peer);

												}
											}
											else if (pMov->plantingTree == 5136) {
												if (((PlayerInfo*)(peer->data))->cloth_back != 5136)
												{
													Player::OnConsoleMessage(peer, "`oFire starts to spin around you. (`o`@Fenix `omod added`o)");
													((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
													sendState(peer);
												}
												else {
													Player::OnConsoleMessage(peer, "`oFire stops spinning around you. (`o`@Fenix `omod removed`o)");
													((PlayerInfo*)(event.peer->data))->canDoubleJump = false;
													sendState(peer);
												}
											}
											if (((PlayerInfo*)(event.peer->data))->cloth6 == pMov->plantingTree)
											{
												Player::PlayAudio(peer, "audio/change_clothes.wav", 0);
												((PlayerInfo*)(event.peer->data))->cloth6 = 0;
												((PlayerInfo*)(event.peer->data))->canDoubleJump = false;
												sendState(peer);
												break;
											}
											{
												if (pMov->plantingTree == 9006) {
													((PlayerInfo*)(peer->data))->peffect = 8420231;
													sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->peffect);
													sendState(peer);
												}
												else if (pMov->plantingTree == 900) {
													((PlayerInfo*)(peer->data))->peffect = 8421382;
													sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->peffect);
													sendState(peer);
												}
												else if (pMov->plantingTree == 7196) {
													((PlayerInfo*)(peer->data))->peffect = 8421471;
													sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->peffect);
													sendState(peer);
												}
												((PlayerInfo*)(event.peer->data))->cloth6 = pMov->plantingTree;
												int item = pMov->plantingTree;
												if (item == 156 || item == 9476 || item == 9434 || item == 9760 || item == 10016 || item == 10012 || item == 1674 || item == 2264 || item == 9506 || item == 9476 || item == 1970 || item == 8286 || item == 9506 || item == 2264 || item == 8552 || item == 362 || item == 678 || item == 736 || item == 7734 || item == 7762 || item == 818 || item == 1206 || item == 1460 || item == 1550 || item == 1574 || item == 1668 || item == 1672 || item == 1674 || item == 1784 || item == 1824 || item == 1936 || item == 1938 || item == 1970 || item == 2254 || item == 2256 || item == 2258 || item == 2260 || item == 2262 || item == 2264 || item == 2390 || item == 2392 || item == 3120 || item == 3308 || item == 3512 || item == 4534 || item == 4986 || item == 5754 || item == 6144 || item == 6334 || item == 6694 || item == 6818 || item == 6842 || item == 1934 || item == 3134 || item == 6004 || item == 1780 || item == 2158 || item == 2160 || item == 2162 || item == 2164 || item == 2166 || item == 2168 || item == 2438 || item == 2538 || item == 2778 || item == 3858 || item == 350 || item == 998 || item == 1738 || item == 2642 || item == 2982 || item == 3104 || item == 3144 || item == 5738 || item == 3112 || item == 2722 || item == 3114 || item == 4970 || item == 4972 || item == 5020 || item == 6284 || item == 4184 || item == 4628 || item == 5322 || item == 4112 || item == 4114 || item == 3442 || item == 9466 || item == 8286 || item == 5136 || item == 9416 || item == 9356) {
													Player::OnConsoleMessage(peer, "`oYou can jump in mid-air! It's like flying, but less. (`oDouble jump mod added`o)");
													((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
												}
												else {
													((PlayerInfo*)(event.peer->data))->canDoubleJump = false;
												}
												// ^^^^ wings
												sendState(peer);
											}
											Player::PlayAudio(peer, "audio/change_clothes.wav", 0);
											break;
										case 7:
											if (pMov->plantingTree >= 0) {
												bool iscontainseas = false;
												SearchInventoryItem(peer, pMov->plantingTree, 1, iscontainseas);
												if (!iscontainseas)
												{
													autoBan(peer, false, 24 * 7, "didnt has " + to_string(pMov->plantingTree) + " item in inventory. (case 7 of pMov->plantingTree)");
													break;
												}
											}
											if (((PlayerInfo*)(event.peer->data))->cloth7 == pMov->plantingTree)
											{
												Player::PlayAudio(peer, "audio/change_clothes.wav", 0);
												((PlayerInfo*)(event.peer->data))->cloth7 = 0;
												break;
											}
											Player::PlayAudio(peer, "audio/change_clothes.wav", 0);
											((PlayerInfo*)(event.peer->data))->cloth7 = pMov->plantingTree;
											break;
										case 8:
											if (pMov->plantingTree >= 0) {
												bool iscontainseas = false;
												SearchInventoryItem(peer, pMov->plantingTree, 1, iscontainseas);
												if (!iscontainseas)
												{
													autoBan(peer, false, 24 * 7, "didnt has " + to_string(pMov->plantingTree) + " item in inventory. (case 8 of pMov->plantingTree)");
													break;
												}
											}
											if (((PlayerInfo*)(event.peer->data))->cloth8 == pMov->plantingTree)
											{
												Player::PlayAudio(peer, "audio/change_clothes.wav", 0);
												((PlayerInfo*)(event.peer->data))->cloth8 = 0;
												break;
											}
											if (pMov->plantingTree == 9512) {
												((PlayerInfo*)(peer->data))->effect = 8421416;
												sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
												sendState(peer); //here
											}
											Player::PlayAudio(peer, "audio/change_clothes.wav", 0);
											((PlayerInfo*)(event.peer->data))->cloth8 = pMov->plantingTree;
											break;
										default:
											if (
												def.id == 7166
												|| def.id == 5078 || def.id == 5080 || def.id == 5082 || def.id == 5084 || def.id == 5134
												|| def.id == 5126 || def.id == 5128 || def.id == 5130 || def.id == 5132 || def.id == 5152
												|| def.id == 5144 || def.id == 5146 || def.id == 5148 || def.id == 5150 || def.id == 5170
												|| def.id == 5162 || def.id == 5164 || def.id == 5166 || def.id == 5168 || def.id == 5188
												|| def.id == 5180 || def.id == 5182 || def.id == 5184 || def.id == 5186 || def.id == 9212
												|| def.id == 7168 || def.id == 7170 || def.id == 7172 || def.id == 7174
												) {
												if (((PlayerInfo*)(event.peer->data))->cloth_ances == pMov->plantingTree) {
													Player::PlayAudio(peer, "audio/change_clothes.wav", 0);
													((PlayerInfo*)(event.peer->data))->cloth_ances = 0;
													break;
												}
												((PlayerInfo*)(event.peer->data))->cloth_ances = pMov->plantingTree;
											}
#ifdef TOTAL_LOG
											cout << "Invalid item activated: " << pMov->plantingTree << " by " << ((PlayerInfo*)(event.peer->data))->displayName << endl;
#endif										Player::PlayAudio(peer, "audio/change_clothes.wav", 0);
											break;
										}
										sendClothes(peer);
									END_CLOTHSETTER_FORCE:;
									}
									if (data2->packetType == 18)
									{
										sendPData(peer, pMov);
									}
									if (data2->punchX != -1 && data2->punchY != -1) {

										if (data2->packetType == 3)
										{
											if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT") continue;
											using namespace std::chrono;
											if (((PlayerInfo*)(peer->data))->lastHitTime + 100 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
											{
												int rank = 6;
												((PlayerInfo*)(peer->data))->lastHitTime = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
												string pX = to_string(data2->punchX);
												string pY = to_string(data2->punchY);
												((PlayerInfo*)(peer->data))->lastPVPcoord = atoi((pY + pX).c_str());
												((PlayerInfo*)(peer->data))->lastPVPcoord2 = atoi((pY + pX).c_str()) + 1;
												((PlayerInfo*)(peer->data))->lastPVPcoord3 = atoi((pY + pX).c_str()) + 2;
												((PlayerInfo*)(peer->data))->lastPVPcoord4 = atoi((pY + pX).c_str()) - 2;
												((PlayerInfo*)(peer->data))->lastPVPcoord5 = atoi((pY + pX).c_str()) - 1;
												int pYMod1 = atoi(pY.c_str()) + 1;
												int pYMod2 = atoi(pY.c_str()) - 1;
												string pYMod1str = to_string(pYMod1);
												string pYMod2str = to_string(pYMod2);
												((PlayerInfo*)(peer->data))->lastPVPcoord6 = atoi((pYMod1str + pX).c_str());
												((PlayerInfo*)(peer->data))->lastPVPcoord7 = atoi((pYMod2str + pX).c_str());
												ENetPeer* currentPeer;
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (currentPeer == peer)
														continue;
													if (((PlayerInfo*)(currentPeer->data))->isInGame) {
														if (((PlayerInfo*)(peer->data))->score > ((PlayerInfo*)(currentPeer->data))->score) {
															rank--;
														}
													}
												}
											}

											if (((PlayerInfo*)(event.peer->data))->isRotatedLeft = pMov->characterState & 0x10) {
												((PlayerInfo*)(event.peer->data))->RotatedLeft = true;
											}
											else {
												((PlayerInfo*)(event.peer->data))->RotatedLeft = false;
											}
											using namespace std::chrono;
											if (((PlayerInfo*)(peer->data))->lastBREAK + 150 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
											{
												((PlayerInfo*)(peer->data))->lastBREAK = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
												if (data2->plantingTree == 18) {
													if (((PlayerInfo*)(event.peer->data))->cloth_hand == 9716 || ((PlayerInfo*)(event.peer->data))->cloth_hand == 9456) {
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY - 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY - 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY - 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY - 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														//apacia
														sendTileUpdate(data2->punchX, data2->punchY + 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY + 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY - 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY - 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY - 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY - 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY - 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY - 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY - 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY - 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														//apacia
														sendTileUpdate(data2->punchX, data2->punchY + 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY + 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY + 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY + 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY - 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY - 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY - 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY - 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY - 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY - 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY - 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY - 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY + 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY + 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY + 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY + 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														//apacia
														sendTileUpdate(data2->punchX, data2->punchY + 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY + 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY - 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY - 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY - 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY - 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY - 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY - 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY - 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY - 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														//apacia
														sendTileUpdate(data2->punchX, data2->punchY + 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY + 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY - 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY - 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY - 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY - 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY + 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY + 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY + 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY + 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														//apacia
														sendTileUpdate(data2->punchX, data2->punchY + 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY + 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY - 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY - 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY - 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY - 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY + 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY + 1, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY + 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY + 2, data2->plantingTree,
															((PlayerInfo*)(event.peer->data))->netID, peer);
													}
													else if (((PlayerInfo*)(event.peer->data))->cloth_hand == 7956) {
														if (((PlayerInfo*)(event.peer->data))->cloth_face != 4288) {
															if (((PlayerInfo*)(event.peer->data))->isRotatedLeft = pMov->characterState & 0x10) {
																((PlayerInfo*)(event.peer->data))->RotatedLeft = true;
															}
															else {
																((PlayerInfo*)(event.peer->data))->RotatedLeft = false;
															}
															if (data2->punchY == ((PlayerInfo*)(event.peer->data))->y / 32) {
																if (((PlayerInfo*)(event.peer->data))->RotatedLeft == true) {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 1, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 2, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 1, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 2, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
																else {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 1, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 2, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 1, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 2, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
															}
															else if (data2->punchX == ((PlayerInfo*)(event.peer->data))->x / 32) {
																if (data2->punchY > ((PlayerInfo*)(event.peer->data))->y / 32) {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY + 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY + 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY + 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY + 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
																else if (data2->punchY < ((PlayerInfo*)(event.peer->data))->y / 32) {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY - 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY - 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
																else {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
															}
															else if (data2->punchY < ((PlayerInfo*)(event.peer->data))->y / 32) {
																if (((PlayerInfo*)(event.peer->data))->RotatedLeft == true) {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 1, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 2, data2->punchY - 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 1, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 2, data2->punchY - 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
																else {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 1, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 2, data2->punchY - 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 1, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 2, data2->punchY - 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
															}
															else if (data2->punchY < ((PlayerInfo*)(event.peer->data))->y / 32) {
																if (((PlayerInfo*)(event.peer->data))->RotatedLeft == true) {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 1, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 2, data2->punchY - 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 1, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 2, data2->punchY - 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
																else {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 1, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 2, data2->punchY - 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 1, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 2, data2->punchY - 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
															}
															else if (data2->punchY > ((PlayerInfo*)(event.peer->data))->y / 32) {
																if (((PlayerInfo*)(event.peer->data))->RotatedLeft == true) {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 1, data2->punchY + 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 2, data2->punchY + 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 1, data2->punchY + 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 2, data2->punchY + 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
																else {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 1, data2->punchY + 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 2, data2->punchY + 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 1, data2->punchY + 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 2, data2->punchY + 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
															}
														}
														else if (((PlayerInfo*)(peer->data))->cloth_hand == 5480 || ((PlayerInfo*)(peer->data))->cloth_feet == 1966) {
														}
														else if (((PlayerInfo*)(peer->data))->cloth_hand == 5480 || ((PlayerInfo*)(peer->data))->cloth_feet == 898) {
														}
														else if (((PlayerInfo*)(peer->data))->cloth_hand == 5480 || ((PlayerInfo*)(peer->data))->cloth_feet == 1830) {
														}
													}
													else if (((PlayerInfo*)(event.peer->data))->cloth_hand == 5480) {
														if (((PlayerInfo*)(event.peer->data))->cloth_face != 4288) {
															if (((PlayerInfo*)(event.peer->data))->isRotatedLeft = pMov->characterState & 0x10) {
																((PlayerInfo*)(event.peer->data))->RotatedLeft = true;
															}
															else {
																((PlayerInfo*)(event.peer->data))->RotatedLeft = false;
															}
															if (data2->punchY == ((PlayerInfo*)(event.peer->data))->y / 32) {
																if (((PlayerInfo*)(event.peer->data))->RotatedLeft == true) {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 1, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 2, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 3, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
																else {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 1, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 2, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 3, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
															}
															else if (data2->punchX == ((PlayerInfo*)(event.peer->data))->x / 32) {
																if (data2->punchY > ((PlayerInfo*)(event.peer->data))->y / 32) {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY + 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY + 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY + 3, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
																else if (data2->punchY < ((PlayerInfo*)(event.peer->data))->y / 32) {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY - 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX, data2->punchY - 3, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
																else {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
															}
															else if (data2->punchY < ((PlayerInfo*)(event.peer->data))->y / 32) {
																if (((PlayerInfo*)(event.peer->data))->RotatedLeft == true) {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 1, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 2, data2->punchY - 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 3, data2->punchY - 3, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
																else {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 1, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 2, data2->punchY - 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 3, data2->punchY - 3, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
															}
															else if (data2->punchY < ((PlayerInfo*)(event.peer->data))->y / 32) {
																if (((PlayerInfo*)(event.peer->data))->RotatedLeft == true) {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 1, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 2, data2->punchY - 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 3, data2->punchY - 3, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
																else {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 1, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 2, data2->punchY - 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 3, data2->punchY - 3, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
															}
															else if (data2->punchY > ((PlayerInfo*)(event.peer->data))->y / 32) {
																if (((PlayerInfo*)(event.peer->data))->RotatedLeft == true) {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 1, data2->punchY + 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 2, data2->punchY + 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX - 3, data2->punchY + 3, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
																else {
																	sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 1, data2->punchY + 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 2, data2->punchY + 2, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																	sendTileUpdate(data2->punchX + 3, data2->punchY + 3, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
																}
															}
														}
														else if (((PlayerInfo*)(peer->data))->cloth_hand == 5480 || ((PlayerInfo*)(peer->data))->cloth_feet == 1966) {
														}
														else if (((PlayerInfo*)(peer->data))->cloth_hand == 5480 || ((PlayerInfo*)(peer->data))->cloth_feet == 898) {
														}
														else if (((PlayerInfo*)(peer->data))->cloth_hand == 5480 || ((PlayerInfo*)(peer->data))->cloth_feet == 1830) {
														}
													}
													else if (((PlayerInfo*)(peer->data))->cloth_hand == 2952 || ((PlayerInfo*)(peer->data))->cloth_hand == 6312 || ((PlayerInfo*)(peer->data))->cloth_hand == 9508 || ((PlayerInfo*)(peer->data))->cloth_hand == 2592 || ((PlayerInfo*)(peer->data))->cloth_hand == 10014) {
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
													}
													else if (((PlayerInfo*)(peer->data))->cloth_hand == 9758) {
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY + 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY + 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY + 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY + 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY + 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY + 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX, data2->punchY - 1, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
													}
													else {
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
													}
												}
												else {
													sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
												}
											}
										}
										else {
										}
									}
									delete data2;
									delete pMov;
								}
								else {
									cout << "[CRITICAL]: Got Bad Tank Packet!";
								}
							}
						}
						break;
						case 5:
							break;
						case 6:
							break;
						}
						enet_packet_destroy(event.packet);
						break;
					}
					case ENET_EVENT_TYPE_DISCONNECT:
#ifdef TOTAL_LOG
						printf("Peer disconnected.\n");
#endif
						ENetPeer* currentPeer;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							string name = ((PlayerInfo*)(currentPeer->data))->rawName;
							if (find(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), name) != ((PlayerInfo*)(peer->data))->friendinfo.end()) {
								Player::PlayAudio(currentPeer, "audio/friend_logoff.wav", 0);
								Player::OnConsoleMessage(currentPeer, "`3FRIEND ALERT: `o" + ((PlayerInfo*)(peer->data))->rawName + " `ohas `4logged off`o.");
							}
						}
						sendPlayerLeave(peer, (PlayerInfo*)(event.peer->data));
						((PlayerInfo*)(event.peer->data))->inventory.items.clear();
						delete event.peer->data;
						event.peer->data = NULL;
					}
				}
			}
	}
	cout << "Program ended??? Huh?" << endl;
	while (1);
	return 0;
};