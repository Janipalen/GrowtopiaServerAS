#pragma warning (disable : 4996)
#pragma comment(lib,"wininet.lib")
#define _CRT_SECURE_NO_DEPRECATE
#define _CRT_SECURE_NO_WARNINGS
#include "stdafx.h"
#include <iostream>
#include <sstream>
#include <fstream>
#include "enet/enet.h"
#include <cmath>
#include <mysql.h>
#include <string>
#include <windows.h>
#include <vector>
#include <ctime>
#include <time.h>
#include <sstream>
#include <chrono>
#include <fstream>
#include "json.hpp"
#include "bcrypt.h"
#include "crypt_blowfish/crypt_gensalt.c"
#include "crypt_blowfish/crypt_blowfish.h"
#include "crypt_blowfish/crypt_blowfish.c"
#include "crypt_blowfish/wrapper.c"
#include "bcrypt.c"
#include <conio.h>
#include <thread>
#include <mutex>
#include <WinSock2.h>
#include <experimental/filesystem>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <cctype>
#include <regex>
#include <filesystem>
#include <wininet.h>
#include <cstring>
#include <locale>
#pragma comment(lib,"ws2_32.lib")
#pragma warning(disable:4996)

using namespace std;


using json = nlohmann::json;

enum LabelStyles {
	LABEL_BIG,
	LABEL_SMALL
};

enum SpacerTypes
{
	SPACER_BIG,
	SPACER_SMALL
};

enum CheckboxTypes
{
	CHECKBOX_SELECTED,
	CHECKBOX_NOT_SELECTED
};
//#define TOTAL_LOG
#define REGISTRATION

//configs
int configPort = 17091;
ENetHost* server;
int cId = 1;
BYTE* itemsDat = 0;
int itemsDatSize = 0;
int resultnbr1 = 0;
int resultnbr2 = 0;
int hasil = 0;
int prize = 0;
long long int quest = 0;
bool restartForUpdate = false;
long long int restartTime = 0;

void  toUpperCase(std::string& str)
{
	std::transform(str.begin(), str.end(), str.begin(), ::toupper);
}

template<typename T>
void Remove(std::basic_string<T>& Str, const T* CharsToRemove)
{
	std::basic_string<T>::size_type pos = 0;
	while ((pos = Str.find_first_of(CharsToRemove, pos)) != std::basic_string<T>::npos)
	{
		Str.erase(pos, 1);
	}
}

const std::string currentDateTime() {
	time_t     now = time(0);
	struct tm  tstruct;
	char       buf[80];
	tstruct = *localtime(&now);
	// Visit http://en.cppreference.com/w/cpp/chrono/c/strftime
	// for more information about date/time format
	strftime(buf, sizeof(buf), "%Y/%m/%d %X", &tstruct);

	return buf;
}

/***bcrypt***/
bool worldproperlock;
int serverhash;
int serverversion;
int serverport;
int serverrolecount;
string playerroleuser;
string playerrolepass;
int playerrolelevel;

bool verifyPassword(string password, string hash) {
	int ret;

	ret = bcrypt_checkpw(password.c_str(), hash.c_str());
	assert(ret != -1);

	return !ret;
}



string hashPassword(string password) {
	char salt[BCRYPT_HASHSIZE];
	char hash[BCRYPT_HASHSIZE];
	int ret;

	ret = bcrypt_gensalt(12, salt);
	assert(ret == 0);
	ret = bcrypt_hashpw(password.c_str(), salt, hash);
	assert(ret == 0);
	return hash;
}


/***bcrypt**/



void sendData(ENetPeer * peer, int num, char* data, int len)
{
	/* Create a reliable packet of size 7 containing "packet\0" */
	ENetPacket* packet = enet_packet_create(0,
		len + 5,
		ENET_PACKET_FLAG_RELIABLE);
	/* Extend the packet so and append the string "foo", so it now */
	/* contains "packetfoo\0"                                      */
	/* Send the packet to the peer over channel id 0. */
	/* One could also broadcast the packet by         */
	/* enet_host_broadcast (host, 0, packet);         */
	memcpy(packet->data, &num, 4);
	if (data != NULL)
	{
		memcpy(packet->data + 2, data, len);
	}
	char zero = 0;
	memcpy(packet->data + 2 + len, &zero, 1);
	enet_peer_send(peer, 0, packet);
	enet_host_flush(server);
}

int getPacketId(char* data)
{
	return *data;
}


char* getPacketData(char* data)
{
	return data + 4;
}


string text_encode(char* text)
{
	string ret = "";
	while (text[0] != 0)
	{
		switch (text[0])
		{
		case '\n':
			ret += "\\n";
			break;
		case '\t':
			ret += "\\t";
			break;
		case '\b':
			ret += "\\b";
			break;
		case '\\':
			ret += "\\\\";
			break;
		case '\r':
			ret += "\\r";
			break;
		default:
			ret += text[0];
			break;
		}
		text++;
	}
	return ret;
}


int ch2n(char x)
{
	switch (x)
	{
	case '0':
		return 0;
	case '1':
		return 1;
	case '2':
		return 2;
	case '3':
		return 3;
	case '4':
		return 4;
	case '5':
		return 5;
	case '6':
		return 6;
	case '7':
		return 7;
	case '8':
		return 8;
	case '9':
		return 9;
	case 'A':
		return 10;
	case 'B':
		return 11;
	case 'C':
		return 12;
	case 'D':
		return 13;
	case 'E':
		return 14;
	case 'F':
		return 15;
	default:
		break;
	}
}




char* GetTextPointerFromPacket(ENetPacket* packet)
{
	char zero = 0;
	memcpy(packet->data + packet->dataLength - 1, &zero, 1);
	return (char*)(packet->data + 4);
}


BYTE* GetStructPointerFromTankPacket(ENetPacket* packet)
{
	//logs << "Getting Struct Pointer of packet..." << endl;
	//logs.flush();
	unsigned int packetLenght = packet->dataLength;
	BYTE* result = NULL;
	if (packetLenght >= 0x3C)
	{
		BYTE* packetData = packet->data;
		result = packetData + 4;
		if (*(BYTE*)(packetData + 16) & 8)
		{
			if (packetLenght < *(int*)(packetData + 56) + 60)
			{
				cout << "Packet too small for extended packet to be valid" << endl;
				cout << "Sizeof float is 4.  TankUpdatePacket size: 56" << endl;
				result = 0;
			}
		}
		else
		{
			int zero = 0;
			memcpy(packetData + 56, &zero, 4);
		}
	}
	return result;
}


int GetMessageTypeFromPacket(ENetPacket* packet)
{
	int result;


	if (packet->dataLength > 3u)
	{
		result = *(packet->data);
	}
	else
	{
		cout << "Bad packet length, ignoring message" << endl;
		result = 0;
	}
	return result;
}




vector<string> explode(const string& delimiter, const string& str)
{
	vector<string> arr;


	int strleng = str.length();
	int delleng = delimiter.length();
	if (delleng == 0)
		return arr;//no change


	int i = 0;
	int k = 0;
	while (i < strleng)
	{
		int j = 0;
		while (i + j < strleng && j < delleng && str[i + j] == delimiter[j])
			j++;
		if (j == delleng)//found delimiter
		{
			arr.push_back(str.substr(k, i - k));
			i += delleng;
			k = i;
		}
		else
		{
			i++;
		}
	}
	arr.push_back(str.substr(k, i - k));
	return arr;
}


struct GamePacket
{
	BYTE* data;
	int len;
	int indexes;
};




GamePacket appendFloat(GamePacket p, float val)
{
	//p.data[56] += 1;
	BYTE* n = new BYTE[p.len + 2 + 4];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	n[p.len] = p.indexes;
	n[p.len + 1] = 1;
	memcpy(n + p.len + 2, &val, 4);
	p.len = p.len + 2 + 4;
	p.indexes++;
	return p;
}


GamePacket appendFloat(GamePacket p, float val, float val2)
{
	//p.data[56] += 1;
	BYTE* n = new BYTE[p.len + 2 + 8];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	n[p.len] = p.indexes;
	n[p.len + 1] = 3;
	memcpy(n + p.len + 2, &val, 4);
	memcpy(n + p.len + 6, &val2, 4);
	p.len = p.len + 2 + 8;
	p.indexes++;
	return p;
}


GamePacket appendFloat(GamePacket p, float val, float val2, float val3)
{
	//p.data[56] += 1;
	BYTE* n = new BYTE[p.len + 2 + 12];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	n[p.len] = p.indexes;
	n[p.len + 1] = 4;
	memcpy(n + p.len + 2, &val, 4);
	memcpy(n + p.len + 6, &val2, 4);
	memcpy(n + p.len + 10, &val3, 4);
	p.len = p.len + 2 + 12;
	p.indexes++;
	return p;
}


GamePacket appendInt(GamePacket p, int val)
{
	//p.data[56] += 1;
	BYTE* n = new BYTE[p.len + 2 + 4];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	n[p.len] = p.indexes;
	n[p.len + 1] = 9;
	memcpy(n + p.len + 2, &val, 4);
	p.len = p.len + 2 + 4;
	p.indexes++;
	return p;
}


GamePacket appendIntx(GamePacket p, int val)
{
	//p.data[56] += 1;
	BYTE* n = new BYTE[p.len + 2 + 4];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	n[p.len] = p.indexes;
	n[p.len + 1] = 5;
	memcpy(n + p.len + 2, &val, 4);
	p.len = p.len + 2 + 4;
	p.indexes++;
	return p;
}


GamePacket appendString(GamePacket p, string str)
{
	//p.data[56] += 1;
	BYTE* n = new BYTE[p.len + 2 + str.length() + 4];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	n[p.len] = p.indexes;
	n[p.len + 1] = 2;
	int sLen = str.length();
	memcpy(n + p.len + 2, &sLen, 4);
	memcpy(n + p.len + 6, str.c_str(), sLen);
	p.len = p.len + 2 + str.length() + 4;
	p.indexes++;
	return p;
}


GamePacket createPacket()
{
	BYTE* data = new BYTE[61];
	string asdf = "0400000001000000FFFFFFFF00000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	for (int i = 0; i < asdf.length(); i += 2)
	{
		char x = ch2n(asdf[i]);
		x = x << 4;
		x += ch2n(asdf[i + 1]);
		memcpy(data + (i / 2), &x, 1);
		if (asdf.length() > 61 * 2) throw 0;
	}
	GamePacket packet;
	packet.data = data;
	packet.len = 61;
	packet.indexes = 0;
	return packet;
}


GamePacket packetEnd(GamePacket p)
{
	BYTE* n = new BYTE[p.len + 1];
	memcpy(n, p.data, p.len);
	delete p.data;
	p.data = n;
	char zero = 0;
	memcpy(p.data + p.len, &zero, 1);
	p.len += 1;
	//*(int*)(p.data + 52) = p.len;
	*(int*)(p.data + 56) = p.indexes;//p.len-60;//p.indexes;
	*(BYTE*)(p.data + 60) = p.indexes;
	//*(p.data + 57) = p.indexes;
	return p;
}


struct InventoryItem {
	__int16 itemID;
	__int16 itemCount;
};


struct PlayerInventory {
	vector<InventoryItem> items;
	//int inventorySize = 200;
};


#define cloth0 cloth_hair
#define cloth1 cloth_shirt
#define cloth2 cloth_pants
#define cloth3 cloth_feet
#define cloth4 cloth_face
#define cloth5 cloth_hand
#define cloth6 cloth_back
#define cloth7 cloth_mask
#define cloth8 cloth_necklace
#define cloth9 cloth_ances

vector<string>guildmem;
vector<string>guildelder;
vector<string>guildco;


struct RankupInfo {
	string nextlvlName = "";
	int nextRankId = 0;
	int gems = 0;
	int amber = 0;
	int opal = 0;
	int gold = 0;
	int ruby = 0;
	int sapphire = 0;
	int diamond = 0;
	int emerald = 0;
};


struct PlayerInfo {
	string zf = "";
	bool evadeRID = false;
	bool isBot = true;
	bool isDr = false;
	bool isCreator = false;
	int wrenchx;
	int wrenchy;
	RankupInfo rankupInfo;
	int droppeditemcount = 0;
	int lastdroppeditemid = 0;
	int lastPunchX;
	int lastPunchY;
	bool isInWorld = false;
	bool isBannedWait = false;
	bool usedCP = false;
	bool tradeSomeone = false;
	string trdStarter = "";
	string sid = "";
	bool isIn = false;
	int netID;
	string Chatname = "";
	int lastdropitemcount = 0;
	int lastdropitem = 0;
	int lasttrashitem = 0;
	int lasttrashitemcount = 0;
	int wrenchsession;
	int bitShiftTest = 0;
	bool canLeave = true;
	bool haveGrowId = false;
	bool haveGuestId = false;
	int valgem;
	int fEarth = 0;
	int fDark = 0;
	int plantgems = 0;
	int fFire = 0;
	bool RotatedLeft = false;
	int fWater = 0;
	bool isRotatedLeft = false;
	string tankIDName = "";
	string tankIDPass = "";
	string requestedName = "";
	string rawName = "";
	bool isAAP = false;
	int warns = 0;
	int bans = 0;
	int rubblexp = 0;
	int rubble = 0;
	int amberxp = 0;
	int amber = 0;
	int opalxp = 0;
	int opal = 0;
	int goldxp = 0;
	int gold = 0;
	int sapphirexp = 0;
	int sapphire = 0;
	int diamondxp = 0;
	int diamond = 0;
	int emeraldxp = 0;
	int emerald = 0;
	int darkfragment = 0;
	int earthfragment = 0;
	int firefragment = 0;
	int waterfragment = 0;
	bool boughtLGW = false; // legendary wing
	bool boughtLGK = false; // legendary katana
	bool boughtLGD = false; // drag of legend
	bool boughtLGB = false; // legend-bot
	bool boughtLKW = false; // legend knight wings
	bool boughtCWD = false; // chaos curse wand
	bool boughtRFS = false; // rayman
	bool boughtCDG = false; // chaos drag
	bool boughtLTIT = false; // legendary title
	bool boughtLWHIP = false; // legendary whip
	bool boughtPHOENIX = false; // phoenix wings
	bool boughtDAV = false; // davinci
	bool boughtZEUS = false; // zeus
	bool boughtNDEV = false; // Nightmare devil
	bool boughtTXMOM = false; // txmom crown
	bool boughtFLASHAXE = false; // flashaxe
	bool boughtVIOLET = false; // violet
	bool boughtCHIMERA = false; // chimera
	bool boughtBRAIN = false; // brainflower
	bool boughtCCROWN = false; // challenge crown
	bool boughtGBOW = false; // Golden Heartbow
	bool boughtGANGEL = false; // Golden Angel
	bool boughtGROB = false; // Golden Robinson
	bool boughtHSCYTHE = false; // Heavenly Scythe
	bool boughtGDIAPER = false; // Golden Diaper
	bool boughtGTANGEL = false; // Golden Teeny
	bool boughtGNECK = false; // Golden Neck
	bool boughtGGLASS = false; // Golden Glasses
	bool boughtGPEGASUS = false; // Golden Pegasus
	bool boughtGBUG = false; // Golden Bug
	bool boughtWAR = false; // War hammer
	bool boughtRAY = false; // RAYMAN
	bool boughtAAC = false; // Ancestral
	bool boughtSPD = false; // DIGGER SPADE
	bool boughtTK = false; // DIGGER SPADE
	bool transsuccess = false;
	bool isModState = false;
	string displayName = "";
	bool wrongpass = false;
	int guildBg = 0;
	int guildFg = 0;
	string guildStatement = "";
	string guildLeader = "";
	string displayNamebackup = "";
	string displayUsername = "";
	vector <string> guildmatelist;
	vector<string>guildMembers;
	vector<string>worldsowned;
	vector<string>lastworlds;
	int guildlevel = 0;
	int guildexp = 0;
	bool isinvited = false;
	string createGuildName = "";
	string createGuildStatement = "";
	string createGuildFlagBg = "";
	string createGuildFlagFg = "";
	string guild = "";
	bool joinguild = false;
	string lastgm = "";
	string lastgmname = "";
	string lastgmworld = "";
	string guildlast = "";
	string msgName = "";
	bool isNicked = false;
	string country = "";
	string gameversion = "";
	string rid = "";
	string gid = "";
	string aid = "";
	bool canExit = true;
	string vid = "";
	string wkid = "";
	string metaip = "";
	string hash2 = "";
	string hash = "";
	string fhash = "";
	string mac = "";
	string token = "";
	string user = "";
	string deviceversion = "";
	string cbits = "";
	string lmode = "";
	string gdpr = "";
	string f = "";
	string fz = "";
	string hpid = "";
	string platformID = "";
	string player_age = "1";
	int adminLevel = 0;
	string currentWorld = "EXIT";
	string plainip = "";
	string plainip2 = "";
	string plainip3 = "";
	string plainip4 = "";
	string buttonID = to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10) + to_string(rand() % 10);
	string firstnbr = to_string(rand() % 50);
	string secondnbr = to_string(rand() % 50);
	int resultnbr1 = std::atoi(firstnbr.c_str());
	int resultnbr2 = std::atoi(secondnbr.c_str());
	int Endresult = 0;
	bool radio = true;
	int x;
	int y;
	int x1;
	int y1;
	int posXY;
	int posX;
	int posY;
	int cpY;
	int cpX;
	int SignPosX;
	int SignPosY;
	bool characterLoaded = false;
	string charIP = "";
	bool isDBanned = false;
	vector<string>friendinfo;
	vector<string>createfriendtable;
	vector<string>createworldsowned;
	string lastFrn = "";
	string lastFrnName = "";
	string lastFrnWorld = "";
	string lastMsger = "";
	string lastMsgerTrue = "";
	string lastMsgWorld = "";
	string lastSdbWorld = "";
	string lastSbbWorld = "";
	string lastfriend = "";
	string lastInfo = "";
	string lastInfoname = "";
	string lastSeller = "";
	string lastSellWorld = "";
	string lastBuyer = "";
	int lastTradeAmount = 99999999999;
	string addgems = "1000 gems";
	int characterState = 0;
	int level = 1;
	int xp = 0;
	bool forcegemUpdate = false;
	bool isUpdating = false;
	bool joinClothesUpdated = false;
	int effect = 8421376;
	int peffect = 8421376;
	bool taped = false;
	bool canCreate = false;
	bool passedCaptcha = false;
	bool passedCaptcha2 = false;
	int cloth_hair = 0; // 0
	int cloth_shirt = 0; // 1
	int cloth_pants = 0; // 2
	int cloth_feet = 0; // 3
	int cloth_face = 0; // 4
	int cloth_hand = 0; // 5
	int cloth_back = 0; // 6
	int cloth_mask = 0; // 7
	int cloth_necklace = 0; // 8
	int cloth_ances = 0; // 9
	int cur = 0;
	int ipID = 0;
	int ban = 0;
	int istempBan = 0;
	int invcount = 0;
	int invitem1 = 0;
	int invitem2 = 0;
	int invitem3 = 0;
	int invitem4 = 0;
	int invitem5 = 0;
	int invitem6 = 0;
	int invitem7 = 0;
	int invitem8 = 0;
	int invitem9 = 0;
	bool canWalkInBlocks = false; // 1
	bool canDoubleJump = false; // 2
	bool cantsay = false;
	bool isInvisible = false; // 4
	bool noHands = false; // 8
	bool noEyes = false; // 16
	bool noBody = false; // 32	
	bool devilHorns = false; // 64
	bool goldenHalo = false; // 128
	bool isFrozen = false; // 2048
	bool isCursed = false; // 4096
	bool isDuctaped = false; // 8192
	unsigned long long int lastMuted = 0;
	bool haveCigar = false; // 16384
	bool isShining = false; // 32768
	bool isAncients = false; // 32768
	bool isAncients1 = false; // 32768
	bool isAncients2 = false; // 32768
	bool isAncients3 = false; // 32768
	bool isAncients4 = false; // 32768
	bool isAncients5 = false; // 32768
	bool isAncients6 = false; // 32768
	bool isZombie = false; // 65536
	bool isHitByLava = false; // 131072
	bool haveHauntedShadows = false; // 262144
	bool haveGeigerRadiation = false; // 524288
	bool haveReflector = false; // 1048576
	bool isEgged = false; // 2097152
	bool havePineappleFloag = false; // 4194304
	bool haveFlyingPineapple = false; // 8388608
	bool haveSuperSupporterName = false; // 16777216
	bool haveSupperPineapple = false; // 33554432
	bool isGhost = false;
	bool isinv = false;
	//string lastMsgWorld;
	bool unwheel = false;
	bool unsales = false;
	bool ghostalr = false;
	//bool 
	int skinColor = 0x8295C3FF; //normal SKIN color like gt!


	PlayerInventory inventory;
	short currentInventorySize = 0;

	long long int lastSB = 0;
	long long int lastINV = 0;
	long long int lastBREAK = 0;
	long long int lastMute = 0;
	long long int lastBan = 0;
	long long int lastCurse = 0;
	long long int lastATM = 0;

	int blockx;
	int blocky;

	string lastTradeName = "";
	int lastUserID = 0;
	int userID = 0;
	string currentTradeItems = "";
	int respawnX = 0;
	int respawnY = 0;

	bool loadedInventory = false;
	int updateReq = 0;

	long long int lastPunchTime = 0;
	long long int lastHitTime = 0;
	long long int lastJoinReq = 0;
	bool hasJoinedFromSubServer = false;
	int pvpScore = 0;
	bool isQueuing = false;
	bool isWaitingForMatch = false;
	bool isInGame = false;
	bool queueEntered = false;
	uint32_t lavaHitAt = 0;
	uint32_t deadTime = 0;
	//vector<WorldAdministration> worldBan;

	int health = 100;
	int score = 0;
	bool goesPVP = false;
	string lastHitCoordX = "-1";
	string lastHitCoordY = "-1";
	int lastPVPcoord;
	int lastPVPcoord2;
	int lastPVPcoord3;
	int lastPVPcoord4;
	int lastPVPcoord5;
	int lastPVPcoord6;
	int lastPVPcoord7;
	int totalKills = 0;
};

void OnDialogRequest(ENetPeer* peer, string dialog) {
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), dialog));
	ENetPacket* packet = enet_packet_create(p.data, p.len, ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}


int getState(PlayerInfo* info) {
	int val = 0;
	val |= info->canWalkInBlocks << 0;
	val |= info->canDoubleJump << 1;
	val |= info->cantsay << 13;
	val |= info->noHands << 3;
	val |= info->noEyes << 4;
	val |= info->noBody << 5;
	val |= info->goldenHalo << 7;
	val |= info->isFrozen << 8;
	val |= info->isCursed << 12;
	val |= info->isDuctaped << 10;
	val |= info->haveSuperSupporterName << 24;
	val |= info->isShining << 15;
	val |= info->isZombie << 16;
	return val;
}




struct WorldItem {
	__int16 foreground = 0;
	__int16 background = 0;
	int displayblock = 0;
	int breakLevel = 0;
	long long int breakTime = 0;
	bool sign = false;
	bool water = false;
	bool rotatedLeft = false;
	bool fire = false;
	bool glue = false;
	bool red = false;
	bool green = false;
	bool blue = false;
	int displayBlock = 0;
	int gravity = 100;
	bool isInverted = false;
	bool isRotating = false;
	string label = "";
	string destWorld = "";
	string destId = "";
	string currId = "";
	string password = "";
};

struct InfoDropedItems {

	int itemid = 0;
	int quantity = 0;
	int positionx = 0;
	int positiony = 0;

};

vector<InfoDropedItems> dropedItems;

struct WorldInfo {
	int width = 100;
	int height = 60;
	bool nuked = false;
	string name = "TEST";
	WorldItem* items;
	int droppedCount = 0;
	string owner = "";
	string Displayowner = "";
	bool isPublic = false;
	bool allowMod = true;
	bool pIsVip = false;
	bool pIsMod = false;
	bool pIsDev = false;
	bool pIsPlay = false;
	bool pIsAdmin = false;
	bool pIsKing = false;
	bool isEvent = true;
	bool noclip = false;
	int ghostalr = 0;
	int invisalr = 0;
	int weather = 0;
	vector<string> worldaccess;
	vector<string> accessworld;
};

WorldInfo generateCleanWorld(string name, int width, int height)
{
	WorldInfo world;
	world.name = name;
	world.nuked = false;
	world.width = width;
	world.height = height;
	world.items = new WorldItem[world.width * world.height];
	for (int i = 0; i < world.width * world.height; i++)
	{
		if (i >= 3800 && i < 5400 && !(rand() % 50)) { world.items[i].foreground = 0; }
		else if (i >= 3700 && i < 5400) {
			if (i > 5000) {
				if (i % 7 == 0) { world.items[i].foreground = 0; }
				else { world.items[i].foreground = 0; }
			}
			else { world.items[i].foreground = 0; }
		}
		else if (i >= 5400) { world.items[i].foreground = 8; }
		if (i >= 3700)
			world.items[i].background = 14;
		if (i == 3650)
			world.items[i].foreground = 6; //BALTOS DURYS
		else if (i >= 3600 && i < 3700)
			world.items[i].foreground = 0; //TUSCIA DURU LYGIS
		if (i == 3750)
			world.items[i].foreground = 8; //BEDROCK
	}
	return world;
}



WorldInfo generateWorld(string name, int width, int height)
{
	WorldInfo world;
	world.name = name;
	world.nuked = false;
	world.width = width;
	world.height = height;
	world.items = new WorldItem[world.width * world.height];
	for (int i = 0; i < world.width * world.height; i++)
	{
		if (i >= 3800 && i < 5400 && !(rand() % 50)) { world.items[i].foreground = 10; }
		else if (i >= 3700 && i < 5400) {
			if (i > 5000) {
				if (i % 7 == 0) { world.items[i].foreground = 4; }
				else { world.items[i].foreground = 2; }
			}
			else { world.items[i].foreground = 2; }
		}
		else if (i >= 5400) { world.items[i].foreground = 8; }
		if (i >= 3700)
			world.items[i].background = 14;
		if (i == 3650)
			world.items[i].foreground = 6;
		else if (i >= 3600 && i < 3700)
			world.items[i].foreground = 0; //fixed the grass in the world!
		if (i == 3750)
			world.items[i].foreground = 8;
	}
	return world;
}



WorldInfo generateMarsWorld(string name, int width, int height)
{
	WorldInfo world;
	world.name = name;
	world.nuked = false;
	world.width = width;
	world.height = height;
	world.items = new WorldItem[world.width * world.height];
	for (int i = 0; i < world.width * world.height; i++)
	{
		if (i >= 3800 && i < 5400 && !(rand() % 50)) { world.items[i].foreground = 150; }
		else if (i >= 3700 && i < 5400) {
			if (i > 5000) {
				if (i % 7 == 0) { world.items[i].foreground = 45; }
				else { world.items[i].foreground = 25; }
			}
			else { world.items[i].foreground = 52; }
		}
		else if (i >= 5400) { world.items[i].foreground = 82; }
		if (i >= 3700)
			world.items[i].background = 114;
		if (i == 3650)
			world.items[i].foreground = 63;
		else if (i >= 3600 && i < 3700)
			world.items[i].foreground = 03; //fixed the grass in the world!
		if (i == 3750)
			world.items[i].foreground = 84;
	}
	return world;
}



WorldInfo ClearWorld(string name, int width, int height)
{
	WorldInfo world;
	world.name = name;
	world.nuked = false;
	world.width = width;
	world.height = height;
	world.items = new WorldItem[world.width * world.height];
	for (int i = 0; i < world.width * world.height; i++)
	{
		if (i >= 3800 && i < 5400 && !(rand() % 50)) { world.items[i].foreground = 0; }
		else if (i >= 3700 && i < 5400) {
			if (i > 5000) {
				if (i % 7 == 0) { world.items[i].foreground = 0; }
				else { world.items[i].foreground = 0; }
			}
			else { world.items[i].foreground = 2; }
		}
		else if (i >= 5400) { world.items[i].foreground = 8; }
		if (i >= 3700)
			world.items[i].background = 0;
		if (i == 3650)
			world.items[i].foreground = 6;
		else if (i >= 3600 && i < 3700)
			world.items[i].foreground = 0; //fixed the grass in the world!
		if (i == 3750)
			world.items[i].foreground = 8;
	}
	return world;
}

struct PVPQueue {
	// queue
	bool isMatchRunning = false;
	int inTeamRed = 0;
	int inTeamBlue = 0;
	int playersInQueue = 0;
	int playersInGame = 0;
	int gameduration = 420;
	long long timePVPStarted = 0;
	// player
	string topOne = "";
	string topTwo = "";
	string topThree = "";
	string topFour = "";
	string topFive = "";
	string topSix = "";
};

PVPQueue match;

class Player {
public:
	static void OnConsoleMessage(ENetPeer* peer, string text);
	static void OnTalkBubble(ENetPeer* peer, int netID, string text, int chatColor, bool isOverlay);
	static void OnAddNotification(ENetPeer* peer, string text, string audiosound, string interfaceimage);
	static void OnStartAcceptLogon(ENetPeer* peer, int itemdathash);
	static void OnRemove(ENetPeer* peer, int netID);
	static void OnSendToServer(ENetPeer* peer, int userID, int token, string ip, int port, string doorId, int lmode); // no need other args, sub servers done&working already... using fake data etc.
	static void SendTileAnimation(ENetPeer* peer, int x, int y, int causedBy, int tile);
	static void PlayAudio(ENetPeer* peer, string audioFile, int delayMS);
	static void showWrong(ENetPeer* peer, string itemFind, string listFull);
	static void OnZoomCamera(ENetPeer* peer, float value1, int value2);
	static void SmoothZoom(ENetPeer* peer);
	static void OnRaceStart(ENetPeer* peer, int netID);
	static void OnRaceEnd(ENetPeer* peer, int netID);
	static void OnSetCurrentWeather(ENetPeer* peer, int weather);
	static void OnPlayPositioned(ENetPeer* peer, string audiofile, int netID, bool broadcastInWorld, ENetPacket* pk);
	static void OnCountdownStart(ENetPeer* peer, int netID, int time, int score);
	static void OnCountdownUpdate(ENetPeer* peer, int netID, int score);
	static void OnCountdownEnd(ENetPeer* peer);
	static void OnStartTrade(ENetPeer* peer, int netID1, int netID2);
	static void OnTextOverlay(ENetPeer* peer, string text);
	static void OnForceTradeEnd(ENetPeer* peer);
	static void OnFailedToEnterWorld(ENetPeer* peer);
	static void OnNameChanged(ENetPeer* peer, int netID, string name);
	static void OnTradeStatus(ENetPeer* peer, int netIDOther, string offerstatus, string offer);
	static void OnDialogRequest(ENetPeer* peer, string args);
	static void OnKilled(ENetPeer* peer, int netID);
	static void OnSetFreezeState(ENetPeer* peer, int state, int netID);
	static void OnSetPos(ENetPeer* peer, int netID, int x, int y);
	static void OnFlagMay2019(ENetPeer* peer, int state, int netID);
	static void OnBillboardChange(ENetPeer* peer, int netID); //testing billboards
	static void SendTilePickup(ENetPeer* peer, int itemid, int netID, float x, float y, int itemcount, int itemamount);
	static void OnInvis(ENetPeer* peer, int state, int netID);
	static void OnChangeSkin(ENetPeer* peer, int skinColor, int netID);
	static void SetRespawnPos(ENetPeer* peer, int posX, int posY, int netID);
	static void OnSetBux(ENetPeer* peer, int gems, int accountstate);
	static void OnParticleEffect(ENetPeer* peer, int effect, float x, float y, int delay);
	static void SetHasGrowID(ENetPeer* peer, int status, string username, string password);
	static void Ping(ENetPeer* peer);
};



class PlayerDB {
public:
	static string getProperName(string name);
	static string PlayerDB::fixColors(string text);
	static int playerLogin(ENetPeer* peer, string username, string password);

	static int playerRegister(ENetPeer* peer, string username, string password, string passwordverify, string discord, string pin);

	static int guildRegister(ENetPeer* peer, string guildName, string guildStatement, string guildFlagfg, string guildFlagbg);
};


string PlayerDB::getProperName(string name) {
	string newS;
	for (char c : name) newS += (c >= 'A' && c <= 'Z') ? c - ('A' - 'a') : c;
	string ret;
	for (int i = 0; i < newS.length(); i++)
	{
		if (newS[i] == '`') i++; else ret += newS[i];
	}
	string ret2;
	for (char c : ret) if ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')) ret2 += c;
	return ret2;
}


string PlayerDB::fixColors(string text) {
	string ret = "";
	int colorLevel = 0;
	for (int i = 0; i < text.length(); i++)
	{
		if (text[i] == '`')
		{
			ret += text[i];
			if (i + 1 < text.length())
				ret += text[i + 1];


			if (i + 1 < text.length() && text[i + 1] == '`')
			{
				colorLevel--;
			}
			else {
				colorLevel++;
			}
			i++;
		}
		else {
			ret += text[i];
		}
	}
	for (int i = 0; i < colorLevel; i++) {
		ret += "``";
	}
	for (int i = 0; i > colorLevel; i--) {
		ret += "`w";
	}
	return ret;
}

void banlogin(ENetPeer* peer) {
	string text = "action|log\nmsg|`4Sorry, this account (`5" + ((PlayerInfo*)(peer->data))->rawName + "`4) has been suspended. `4If you believe its a mistake, contact `1Herino#1175`4!\n";
	string text3 = "action|logon_fail\n";
	string dc = "https://discord.gg/qtSdMWx";
	string url = "action|set_url\nurl|" + dc + "\nlabel|Join discord\n";


	BYTE* data = new BYTE[5 + text.length()];
	BYTE* data3 = new BYTE[5 + text3.length()];
	BYTE* dataurl = new BYTE[5 + url.length()];
	BYTE zero = 0;
	int type = 3;
	memcpy(data, &type, 4);
	memcpy(data + 4, text.c_str(), text.length());
	memcpy(data + 4 + text.length(), &zero, 1);

	memcpy(dataurl, &type, 4);
	memcpy(dataurl + 4, url.c_str(), url.length());
	memcpy(dataurl + 4 + url.length(), &zero, 1);

	memcpy(data3, &type, 4);
	memcpy(data3 + 4, text3.c_str(), text3.length());
	memcpy(data3 + 4 + text3.length(), &zero, 1);

	ENetPacket* p = enet_packet_create(data,
		5 + text.length(),
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, p);
	ENetPacket* p3 = enet_packet_create(dataurl,
		5 + url.length(),
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, p3);
	ENetPacket* p2 = enet_packet_create(data3,
		5 + text3.length(),
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, p2);

	delete data;
	delete dataurl;
	delete data3;


}
long long GetCurrentTimeInternal()
{
	using namespace std::chrono;
	return (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
}
long long GetCurrentTimeInternalSeconds()
{
	using namespace std::chrono;
	return (duration_cast<seconds>(system_clock::now().time_since_epoch())).count();
}

string OutputBanTime(int n)
{
	string x;
	int day = n / (24 * 3600);
	if (day != 0) x.append(to_string(day) + " Days ");
	n = n % (24 * 3600);
	int hour = n / 3600;
	if (hour != 0) x.append(to_string(hour) + " Hours ");
	n %= 3600;
	int minutes = n / 60;
	if (minutes != 0) x.append(to_string(minutes) + " Minutes ");
	n %= 60;
	int seconds = n;
	if (seconds != 0) x.append(to_string(seconds) + " Seconds");
	return x;
}




int calcBanDuration(long long banDuration) {
	int duration = 0;
	duration = banDuration - GetCurrentTimeInternalSeconds();
	return duration;
}
void banLoginDevice(ENetPeer* peer, long long banDurationDefault, string sid, string mac) {
	int bantimeleft = calcBanDuration(banDurationDefault);
	if (bantimeleft < 1) {
		return;
	}
	string text = "action|log\nmsg|`4Sorry, this device or location is still banned for `w" + OutputBanTime(calcBanDuration(banDurationDefault)) + " Need help? Contact Herino#1175!";
	string text3 = "action|logon_fail\n";
	string dc = "https://discord.gg/qtSdMWx";
	string url = "action|set_url\nurl|" + dc + "\nlabel|Join GTLT Discord\n";
	BYTE* data = new BYTE[5 + text.length()];
	BYTE* data3 = new BYTE[5 + text3.length()];
	BYTE* dataurl = new BYTE[5 + url.length()];
	BYTE zero = 0;
	int type = 3;
	memcpy(data, &type, 4);
	memcpy(data + 4, text.c_str(), text.length());
	memcpy(data + 4 + text.length(), &zero, 1);

	memcpy(dataurl, &type, 4);
	memcpy(dataurl + 4, url.c_str(), url.length());
	memcpy(dataurl + 4 + url.length(), &zero, 1);

	memcpy(data3, &type, 4);
	memcpy(data3 + 4, text3.c_str(), text3.length());
	memcpy(data3 + 4 + text3.length(), &zero, 1);

	ENetPacket* p = enet_packet_create(data,
		5 + text.length(),
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, p);
	ENetPacket* p3 = enet_packet_create(dataurl,
		5 + url.length(),
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, p3);
	ENetPacket* p2 = enet_packet_create(data3,
		5 + text3.length(),
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, p2);
	enet_peer_disconnect_later(peer, 0);
	delete data;
	delete dataurl;
	delete data3;
}
void checkBan(ENetPeer* peer) {
	string rid = ((PlayerInfo*)(peer->data))->rid;
	string sid = ((PlayerInfo*)(peer->data))->sid;
	string gid = ((PlayerInfo*)(peer->data))->gid;
	string vid = ((PlayerInfo*)(peer->data))->vid;
	string aid = ((PlayerInfo*)(peer->data))->aid;
	string mac = ((PlayerInfo*)(peer->data))->mac;
	string ip = to_string(peer->address.host);
	Remove(mac, ":");
	bool exist = experimental::filesystem::exists("autoban/rid/" + rid + ".txt") ||
		experimental::filesystem::exists("autoban/gid/" + gid + ".txt") ||
		experimental::filesystem::exists("autoban/vid/" + vid + ".txt") ||
		experimental::filesystem::exists("autoban/aid/" + aid + ".txt") ||
		experimental::filesystem::exists("autoban/ip/" + ip + ".txt");
	if (exist) {
		string content = "0";
		if (experimental::filesystem::exists("autoban/ip/" + ip + ".txt")) {
			std::ifstream ifs("autoban/ip/" + ip + ".txt");
			std::string contentf((std::istreambuf_iterator<char>(ifs)),
				(std::istreambuf_iterator<char>()));
			content = contentf;
		}
		if (content != "0") {
			long long banDuration = atoi(content.c_str());
			banLoginDevice(peer, banDuration, sid, mac);
		}
	}
}

void checkTimeBan(ENetPeer* peer, string username) {

	bool exist = experimental::filesystem::exists("timebanned/" + PlayerDB::getProperName(username) + ".txt");
	if (exist)
	{
		ifstream fd("timebanned/" + PlayerDB::getProperName(username) + ".txt");
		long long banDuration = 0;
		fd >> banDuration;
		fd.close();

		int bantimeleft = calcBanDuration(banDuration);
		if (bantimeleft < 1) {
			return;
		}

		string text = "action|log\nmsg|`4Sorry, this account is still banned for `w" + OutputBanTime(calcBanDuration(banDuration)) + " Need help? Contact Herino#1175!";
		string text3 = "action|logon_fail\n";
		string dc = "https://discord.gg/qtSdMWx";
		string url = "action|set_url\nurl|" + dc + "\nlabel|Join GTLT Discord\n";
		BYTE* data = new BYTE[5 + text.length()];
		BYTE* data3 = new BYTE[5 + text3.length()];
		BYTE* dataurl = new BYTE[5 + url.length()];
		BYTE zero = 0;
		int type = 3;
		memcpy(data, &type, 4);
		memcpy(data + 4, text.c_str(), text.length());
		memcpy(data + 4 + text.length(), &zero, 1);

		memcpy(dataurl, &type, 4);
		memcpy(dataurl + 4, url.c_str(), url.length());
		memcpy(dataurl + 4 + url.length(), &zero, 1);

		memcpy(data3, &type, 4);
		memcpy(data3 + 4, text3.c_str(), text3.length());
		memcpy(data3 + 4 + text3.length(), &zero, 1);

		ENetPacket* p = enet_packet_create(data,
			5 + text.length(),
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, p);
		ENetPacket* p3 = enet_packet_create(dataurl,
			5 + url.length(),
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, p3);
		ENetPacket* p2 = enet_packet_create(data3,
			5 + text3.length(),
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, p2);
		enet_peer_disconnect_later(peer, 0);
		delete data;
		delete dataurl;
		delete data3;


	}
	

}
int PlayerDB::playerLogin(ENetPeer* peer, string username, string password) {

	string currentGtVersion;
	ifstream gtversion("gtversion/version.txt");
	gtversion >> currentGtVersion;
	gtversion.close();

	string uname = username;
	toUpperCase(uname);

	string username1 = ((PlayerInfo*)(peer->data))->tankIDName;

	checkTimeBan(peer, username);

	checkBan(peer);

	if (uname == "CON" || uname == "NUL" || uname == "PRN" || uname == "AUX" || uname == "CLOCK$" || uname == "COM0" || uname == "COM1" || uname == "COM2" || uname == "COM3" || uname == "COM4" || uname == "COM5" || uname == "COM6" || uname == "COM7" || uname == "COM8" || uname == "COM9" || uname == "LPT0" || uname == "LPT1" || uname == "LPT2" || uname == "LPT3" || uname == "LPT4" || uname == "LPT5" || uname == "LPT6" || uname == "LPT7" || uname == "LPT8" || uname == "LPT9")
	{
		return -4;
	}
	if (uname == "" || uname == " " || uname == "  " || uname == "   " || uname == "    ")
	{
		return -5;
	}
	if (username1.find(" ") != string::npos || username1.find(".") != string::npos || username1.find(",") != string::npos || username1.find("@") != string::npos || username1.find("[") != string::npos || username1.find("]") != string::npos || username1.find("#") != string::npos || username1.find("<") != string::npos || username1.find(">") != string::npos || username1.find(":") != string::npos || username1.find("{") != string::npos || username1.find("}") != string::npos || username1.find("|") != string::npos || username1.find("+") != string::npos || username1.find("_") != string::npos || username1.find("~") != string::npos || username1.find("-") != string::npos || username1.find("!") != string::npos || username1.find("$") != string::npos || username1.find("%") != string::npos || username1.find("^") != string::npos || username1.find("&") != string::npos || username1.find("`") != string::npos || username1.find("*") != string::npos || username1.find("(") != string::npos || username1.find(")") != string::npos || username1.find("=") != string::npos || username1.find("'") != string::npos || username1.find(";") != string::npos || username1.find("/") != string::npos) {
		return -5;
	}
	bool contains_non_alpha
		= !std::regex_match(uname, std::regex("^[0-9]+$"));

	if (contains_non_alpha)
	{
	}
	else {
		return -4;
	}

	bool atmexist = std::experimental::filesystem::exists("blocks/atm/" + PlayerDB::getProperName(username) + ".txt");

	if (!atmexist)
	{
		ofstream of("blocks/atm/" + PlayerDB::getProperName(username) + ".txt");
		of << 0;
		of.close();
	}
	else
	{
		ifstream fd("blocks/atm/" + PlayerDB::getProperName(username) + ".txt");
		fd >> ((PlayerInfo*)(peer->data))->lastATM;
		fd.close();
	}



	bool invsizeist = std::experimental::filesystem::exists("usersinventorysize/" + PlayerDB::getProperName(username) + ".txt");

	if (!invsizeist)
	{
		ofstream invof("usersinventorysize/" + PlayerDB::getProperName(username) + ".txt");
		invof << 30;
		invof.close();
	}


	std::ifstream ifs("players/" + PlayerDB::getProperName(username) + ".json");
	if (ifs.is_open()) {
		json j;
		ifs >> j;
		string pss = j["password"];
		int ban = j["isBanned"];
		int ipID = j["ipID"];




		ENetPeer* currentPeer;

		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)
			if (ban == 1) {
				banlogin(peer);
			}
			else if (((PlayerInfo*)(peer->data))->gameversion != currentGtVersion) {
				string text = "action|log\nmsg|`5[GTLT] `4Outdated version! Please consider updating your game to `2V" + currentGtVersion + "`4!``";
				string text3 = "action|logon_fail\n";
				string dc = "https://growtopiagame.com/Growtopia-Installer.exe";
				GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`5GTLT `4Outdated Version!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! This growtopia version is not supported! Please consider logging in with `2V" + currentGtVersion + " Thanks!``|\nadd_spacer|small|\nadd_button|atsaukimas|`5Close|0|0|"));
				ENetPacket* packet = enet_packet_create(ps.data,
					ps.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);
				delete ps.data;
				BYTE* data = new BYTE[5 + text.length()];
				BYTE* data3 = new BYTE[5 + text3.length()];
				BYTE zero = 0;
				int type = 3;
				memcpy(data, &type, 4);
				memcpy(data + 4, text.c_str(), text.length());
				memcpy(data + 4 + text.length(), &zero, 1);
				memcpy(data3, &type, 4);
				memcpy(data3 + 4, text3.c_str(), text3.length());
				memcpy(data3 + 4 + text3.length(), &zero, 1);
				ENetPacket* p = enet_packet_create(data,
					5 + text.length(),
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, p);
				ENetPacket* p2 = enet_packet_create(data3,
					5 + text3.length(),
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, p2);
				delete data;
				delete data3;
			}



		if (verifyPassword(password, pss)) {
			ENetPeer* currentPeer;

			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (currentPeer == peer)
					continue;
				if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(username))
				{
					{
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Someone else logged into this account!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(currentPeer, 0, packet);
						delete p.data;
					}
					{
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Someone else was logged into this account! He was kicked out now."));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						//enet_peer_send(peer, 0, packet);
						delete p.data;
					}
					enet_host_flush(server);
					enet_peer_disconnect_later(currentPeer, 0);
				}
			}
			return 1;
		}
		else {

			return -1;
		}
	}
	else {
		return -2;
	}
}
int PlayerDB::guildRegister(ENetPeer* peer, string guildName, string guildStatement, string guildFlagfg, string guildFlagbg) {
	if (guildName.find(" ") != string::npos || guildName.find(".") != string::npos || guildName.find(",") != string::npos || guildName.find("@") != string::npos || guildName.find("[") != string::npos || guildName.find("]") != string::npos || guildName.find("#") != string::npos || guildName.find("<") != string::npos || guildName.find(">") != string::npos || guildName.find(":") != string::npos || guildName.find("{") != string::npos || guildName.find("}") != string::npos || guildName.find("|") != string::npos || guildName.find("+") != string::npos || guildName.find("_") != string::npos || guildName.find("~") != string::npos || guildName.find("-") != string::npos || guildName.find("!") != string::npos || guildName.find("$") != string::npos || guildName.find("%") != string::npos || guildName.find("^") != string::npos || guildName.find("&") != string::npos || guildName.find("`") != string::npos || guildName.find("*") != string::npos || guildName.find("(") != string::npos || guildName.find(")") != string::npos || guildName.find("=") != string::npos || guildName.find("'") != string::npos || guildName.find(";") != string::npos || guildName.find("/") != string::npos) {
		return -1;
	}

	if (guildName.length() < 3) {
		return -2;
	}
	if (guildName.length() > 15) {
		return -3;
	}
	int fg;
	int bg;

	try {
		fg = stoi(guildFlagfg);
	}
	catch (std::invalid_argument & e) {
		return -6;
	}
	try {
		bg = stoi(guildFlagbg);
	}
	catch (std::invalid_argument & e) {
		return -5;
	}
	if (guildFlagbg.length() > 4) {
		return -7;
	}
	if (guildFlagfg.length() > 4) {
		return -8;
	}

	string fixedguildName = PlayerDB::getProperName(guildName);

	std::ifstream ifs("guilds/" + fixedguildName + ".json");
	if (ifs.is_open()) {
		return -4;
	}
	return 1;
}

int PlayerDB::playerRegister(ENetPeer* peer, string username, string password, string passwordverify, string discord, string pin) {

	if (username.find_first_not_of("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789") != string::npos) {
		return -10;
	}


	username = PlayerDB::getProperName(username);
	if (username.length() < 3) return -2;
	if (username.length() > 20) return -2;

	string uname = username;
	toUpperCase(uname);

	if (uname == "CON" || uname == "NUL" || uname == "PRN" || uname == "AUX" || uname == "CLOCK$" || uname == "COM0" || uname == "COM1" || uname == "COM2" || uname == "COM3" || uname == "COM4" || uname == "COM5" || uname == "COM6" || uname == "COM7" || uname == "COM8" || uname == "COM9" || uname == "LPT0" || uname == "LPT1" || uname == "LPT2" || uname == "LPT3" || uname == "LPT4" || uname == "LPT5" || uname == "LPT6" || uname == "LPT7" || uname == "LPT8" || uname == "LPT9")
	{
		return -6;
	}
	if (uname == "" || uname == " " || uname == "  " || uname == "   " || uname == "    ")
	{
		return -11;
	}
	std::ifstream ifs("players/" + username + ".json");
	if (ifs.is_open()) {
		return -1;
	}

	bool contains_non_alpha = !std::regex_match(pin, std::regex("^[0-9]+$"));

	ENetPeer* currentPeer;

	currentPeer = server->peers;

	std::ofstream o("players/" + username + ".json");
	if (!o.is_open()) {
		cout << GetLastError() << endl;
		_getch();
	}
	json j;
	j["username"] = username;
	j["password"] = hashPassword(password);
	j["ClothBack"] = 0;
	j["ClothHand"] = 0;
	j["ClothFace"] = 0;
	j["ClothShirt"] = 0;
	j["ClothPants"] = 0;
	j["ClothNeck"] = 0;
	j["ClothHair"] = 0;
	j["ClothFeet"] = 0;
	j["ClothMask"] = 0;
	j["ClothAnces"] = 0;
	j["isBanned"] = 0;
	j["ipID"] = peer->address.host;
	j["effect"] = 8421376;
	j["friends"] = ((PlayerInfo*)(peer->data))->createfriendtable;
	j["ip"] = ((PlayerInfo*)(peer->data))->charIP;
	j["boughtLGW"] = ((PlayerInfo*)(peer->data))->boughtLGW;
	j["boughtLGK"] = ((PlayerInfo*)(peer->data))->boughtLGK;
	j["boughtLGD"] = ((PlayerInfo*)(peer->data))->boughtLGD;
	j["boughtLGB"] = ((PlayerInfo*)(peer->data))->boughtLGB;
	j["boughtLKW"] = ((PlayerInfo*)(peer->data))->boughtLKW;
	j["boughtCWD"] = ((PlayerInfo*)(peer->data))->boughtCWD;
	j["boughtRFS"] = ((PlayerInfo*)(peer->data))->boughtRFS;
	j["boughtCDG"] = ((PlayerInfo*)(peer->data))->boughtCDG;
	j["boughtLTIT"] = ((PlayerInfo*)(peer->data))->boughtLTIT;
	j["boughtLWHIP"] = ((PlayerInfo*)(peer->data))->boughtLWHIP;
	j["boughtPHOENIX"] = ((PlayerInfo*)(peer->data))->boughtPHOENIX;
	j["boughtDAV"] = ((PlayerInfo*)(peer->data))->boughtDAV;
	j["boughtZEUS"] = ((PlayerInfo*)(peer->data))->boughtZEUS;
	j["boughtNDEV"] = ((PlayerInfo*)(peer->data))->boughtNDEV;
	j["boughtTXMOM"] = ((PlayerInfo*)(peer->data))->boughtTXMOM;
	j["boughtFLASHAXE"] = ((PlayerInfo*)(peer->data))->boughtFLASHAXE;
	j["boughtVIOLET"] = ((PlayerInfo*)(peer->data))->boughtVIOLET;
	j["boughtCHIMERA"] = ((PlayerInfo*)(peer->data))->boughtCHIMERA;
	j["boughtBRAIN"] = ((PlayerInfo*)(peer->data))->boughtBRAIN;
	j["boughtCCROWN"] = ((PlayerInfo*)(peer->data))->boughtCCROWN;
	j["boughtGBOW"] = ((PlayerInfo*)(peer->data))->boughtGBOW;
	j["boughtGANGEL"] = ((PlayerInfo*)(peer->data))->boughtGANGEL;
	j["boughtGROB"] = ((PlayerInfo*)(peer->data))->boughtGROB;
	j["boughtHSCYTHE"] = ((PlayerInfo*)(peer->data))->boughtHSCYTHE;
	j["boughtGDIAPER"] = ((PlayerInfo*)(peer->data))->boughtGDIAPER;
	j["boughtGTANGEL"] = ((PlayerInfo*)(peer->data))->boughtGTANGEL;
	j["boughtGNECK"] = ((PlayerInfo*)(peer->data))->boughtGNECK;
	j["boughtGGLASS"] = ((PlayerInfo*)(peer->data))->boughtGGLASS;
	j["boughtGPEGASUS"] = ((PlayerInfo*)(peer->data))->boughtGPEGASUS;
	j["boughtGBUG"] = ((PlayerInfo*)(peer->data))->boughtGBUG;
	j["boughtWAR"] = ((PlayerInfo*)(peer->data))->boughtWAR;
	j["boughtRAY"] = ((PlayerInfo*)(peer->data))->boughtRAY;
	j["boughtAAC"] = ((PlayerInfo*)(peer->data))->boughtAAC;
	j["boughtSPD"] = ((PlayerInfo*)(peer->data))->boughtSPD;
	j["boughtTK"] = ((PlayerInfo*)(peer->data))->boughtTK;
	j["aap"] = ((PlayerInfo*)(peer->data))->isAAP;
	j["receivedwarns"] = ((PlayerInfo*)(peer->data))->warns;
	j["receivedbans"] = ((PlayerInfo*)(peer->data))->bans;
	j["discord"] = discord;
	j["adminLevel"] = ((PlayerInfo*)(peer->data))->adminLevel;
	j["guild"] = "";
	j["joinguild"] = false;
	j["level"] = 1;
	j["xp"] = 0;
	j["rubble"] = 0;
	j["rubblexp"] = 0;
	j["amber"] = 0;
	j["amberxp"] = 0;

	j["opal"] = 0;
	j["opalxp"] = 0;

	j["gold"] = 0;
	j["goldxp"] = 0;

	j["sapphire"] = 0;
	j["sapphirexp"] = 0;

	j["diamond"] = 0;
	j["diamondxp"] = 0;

	j["emerald"] = 0;
	j["emeraldxp"] = 0;




	j["worldsowned"] = ((PlayerInfo*)(peer->data))->createworldsowned;

	o << j << std::endl;

	ofstream ofrags("gemplant/" + username + ".txt");
	ofrags << 0 << endl;
	ofrags.close();



	ofstream ofrag("fragments/" + username + ".txt");
	ofrag << 0 << endl;
	ofrag.close();
	std::ofstream oo("inventory/" + username + ".json");
	if (!oo.is_open()) {
		cout << GetLastError() << endl;
		_getch();
	}

	json items;
	json jjall = json::array();


	json jj;
	jj["aposition"] = 1;
	jj["itemid"] = 18;
	jj["quantity"] = 1;
	jjall.push_back(jj);


	jj["aposition"] = 2;
	jj["itemid"] = 32;
	jj["quantity"] = 1;
	jjall.push_back(jj);

	for (int i = 2; i < 200; i++)
	{
		jj["aposition"] = i + 1;
		jj["itemid"] = 0;
		jj["quantity"] = 0;
		jjall.push_back(jj);
	}

	items["items"] = jjall;
	oo << items << std::endl;







	return 1;
}

struct AWorld {
	WorldInfo* ptr;
	WorldInfo info;
	int id;
};


class WorldDB {
public:
	WorldInfo get(string name);
	AWorld get2(string name);
	void flush(WorldInfo info);
	void flush2(AWorld info);
	void save(AWorld info);
	void saveAll();
	void saveRedundant();
	vector<WorldInfo> getRandomWorlds();
	WorldDB();
private:
	vector<WorldInfo> worlds;
};


WorldDB::WorldDB() {
	// Constructor
}


void sendConsoleMsg(ENetPeer* peer, string message) {
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), message));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}
void sendTextOver(ENetPeer* peer, string message) {
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), message));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}


string getStrUpper(string txt) {
	string ret;
	for (char c : txt) ret += toupper(c);
	return ret;
}


AWorld WorldDB::get2(string name) {
	if (worlds.size() > 200) {
#ifdef TOTAL_LOG
		cout << "Saving redundant worlds!" << endl;
#endif
		saveRedundant();
#ifdef TOTAL_LOG
		cout << "Redundant worlds are saved!" << endl;
#endif
	}
	AWorld ret;
	name = getStrUpper(name);
	if (name.length() < 1) throw 1; // too short name
	for (char c : name) {
		if ((c < 'A' || c>'Z') && (c < '0' || c>'9'))
			throw 2; // wrong name
	}
	if (name == "EXIT") {
		throw 3;
	}
	for (int i = 0; i < worlds.size(); i++) {
		if (worlds.at(i).name == name)
		{
			ret.id = i;
			ret.info = worlds.at(i);
			ret.ptr = &worlds.at(i);
			return ret;
		}


	}
	std::ifstream ifs("worlds/" + name + ".json");
	if (ifs.is_open()) {


		json j;
		ifs >> j;
		WorldInfo info;
		info.name = j["name"].get<string>();
		info.width = j["width"];
		info.nuked = j["nuked"];
		info.height = j["height"];
		info.owner = j["owner"].get<string>();
		vector <string>frns;
		if (j.count("access") == 1) {
			for (int i = 0; i < j["access"].size(); i++) {
				frns.push_back(j["access"][i]);
			}
		}
		else {
			frns = {};
		}
		info.worldaccess = frns;
		info.Displayowner = j["Displayowner"].get<string>();
		info.isPublic = j["isPublic"];
		info.allowMod = j["allowMod"];
		info.pIsVip = j["isVip"];
		info.pIsMod = j["isMod"];
		info.pIsDev = j["isDev"];
		info.pIsPlay = j["isPlay"];
		json tiles = j["tiles"];
		int square = info.width * info.height;
		info.items = new WorldItem[square];
		for (int i = 0; i < square; i++) {
			info.items[i].foreground = tiles[i]["fg"];
			info.items[i].background = tiles[i]["bg"];
		}
		worlds.push_back(info);
		ret.id = worlds.size() - 1;
		ret.info = info;
		ret.ptr = &worlds.at(worlds.size() - 1);
		return ret;
	}
	else {
		WorldInfo info = generateWorld(name, 100, 60);


		worlds.push_back(info);
		ret.id = worlds.size() - 1;
		ret.info = info;
		ret.ptr = &worlds.at(worlds.size() - 1);
		return ret;
	}
	throw 1;
}


WorldInfo WorldDB::get(string name) {


	return this->get2(name).info;
}


void WorldDB::flush(WorldInfo info)
{
	std::ofstream o("worlds/" + info.name + ".json");
	if (!o.is_open()) {
		cout << GetLastError() << endl;
	}
	json j;
	j["name"] = info.name;
	j["width"] = info.width;
	j["height"] = info.height;
	j["nuked"] = info.nuked;
	j["owner"] = info.owner;
	j["weather"] = info.weather;
	j["access"] = info.worldaccess;
	j["Displayowner"] = info.Displayowner;
	j["allowMod"] = info.allowMod;
	j["isVip"] = info.pIsVip;
	j["isMod"] = info.pIsMod;
	j["isDev"] = info.pIsDev;
	j["isPlay"] = info.pIsPlay;
	j["isPublic"] = info.isPublic;
	j["weather"] = info.weather;
	json tiles = json::array();
	int square = info.width * info.height;

	for (int i = 0; i < square; i++)
	{
		json tile;
		tile["fg"] = info.items[i].foreground;
		tile["bg"] = info.items[i].background;
		tiles.push_back(tile);
	}
	j["tiles"] = tiles;
	o << j << std::endl;
}


void WorldDB::flush2(AWorld info)
{
	this->flush(info.info);
}


void WorldDB::save(AWorld info)
{
	flush2(info);
	delete info.info.items;
	worlds.erase(worlds.begin() + info.id);
}


void WorldDB::saveAll()
{
	for (int i = 0; i < worlds.size(); i++) {
		flush(worlds.at(i));
	}
	worlds.clear();
}


vector<WorldInfo> WorldDB::getRandomWorlds() {
	vector<WorldInfo> ret;
	for (int i = 0; i < ((worlds.size() < 10) ? worlds.size() : 10); i++)
	{ // load first four worlds, it is excepted that they are special
		ret.push_back(worlds.at(i));
	}
	// and lets get up to 6 random
	if (worlds.size() > 4) {
		for (int j = 0; j < 6; j++)
		{
			bool isPossible = true;
			WorldInfo world = worlds.at(rand() % (worlds.size() - 4));
			for (int i = 0; i < ret.size(); i++)
			{
				if (world.name == ret.at(i).name || world.name == "EXIT")
				{
					isPossible = false;
				}
			}
			if (isPossible)
				ret.push_back(world);
		}
	}
	return ret;
}


void WorldDB::saveRedundant()
{
	for (int i = 4; i < worlds.size(); i++) {
		bool canBeFree = true;
		ENetPeer * currentPeer;


		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)
		{
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
				continue;
			if (((PlayerInfo*)(currentPeer->data))->currentWorld == worlds.at(i).name)
				canBeFree = false;
		}
		if (canBeFree)
		{
			flush(worlds.at(i));
			delete worlds.at(i).items;
			worlds.erase(worlds.begin() + i);
			i--;
		}
	}
}



//WorldInfo world;
//vector<WorldInfo> worlds;
WorldDB worldDB;

bool isHereSave(ENetPeer* peer, ENetPeer* peer2)
{
	return ((PlayerInfo*)(peer->data))->currentWorld == ((PlayerInfo*)(peer2->data))->currentWorld;
}

int getPlayersCountInWorldSave(string name)
{
	int count = 0;
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (((PlayerInfo*)(currentPeer->data))->isinv == false)
		{
			if (((PlayerInfo*)(currentPeer->data))->currentWorld == name)
				count++;
		}
	}
	return count;
}


void sendPlayerLeaveSave(ENetPeer* peer, PlayerInfo* player)
{
	ENetPeer* currentPeer;
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnRemove"), "netID|" + std::to_string(player->netID) + "\n"));
	GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5left, `w" + std::to_string(getPlayersCountInWorldSave(player->currentWorld)) + "`` `5others here>```w"));

	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;

		if (isHereSave(peer, currentPeer)) {
			{

				ENetPacket* packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);

				{
					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet);
				}

			}
			{

			}
		}
	}
	delete p.data;
	delete p2.data;

}




void sendWorldOffersSave(ENetPeer* peer)
{
	if (!((PlayerInfo*)(peer->data))->isIn) return;
	vector<WorldInfo> worlds = worldDB.getRandomWorlds();
	string worldOffers = "default|";
	if (worlds.size() > 0) {
		worldOffers += worlds[0].name;
	}

	worldOffers += "\nadd_button|Showing: `wWorlds``|_catselect_|0.6|3529161471|\n";
	for (int i = 0; i < worlds.size(); i++) {
		worldOffers += "add_floater|" + worlds[i].name + "|" + std::to_string(getPlayersCountInWorldSave(worlds[i].name)) + "|0.55|3529161471\n";
	}
	for (int i = 0; i < ((PlayerInfo*)(peer->data))->lastworlds.size(); i++) {
		worldOffers += "add_floater|" + ((PlayerInfo*)(peer->data))->lastworlds[i] + "|" + "0" + "|0.55|3417414143\n";
	}
	//GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), "default|GO FOR IT\nadd_button|Showing: `wFake Worlds``|_catselect_|0.6|3529161471|\nadd_floater|Subscribe|5|0.55|3529161471\nadd_floater|Growtopia|4|0.52|4278190335\nadd_floater|Noobs|150|0.49|3529161471\nadd_floater|...|3|0.49|3529161471\nadd_floater|`6:O :O :O``|2|0.46|3529161471\nadd_floater|SEEMS TO WORK|2|0.46|3529161471\nadd_floater|?????|1|0.43|3529161471\nadd_floater|KEKEKEKEK|13|0.7|3417414143\n"));
	//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
	GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), worldOffers));
	ENetPacket* packet3 = enet_packet_create(p3.data,
		p3.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet3);
	delete p3.data;
	//enet_host_flush(server);
}

void saveAllWorlds() // atexit hack plz fix
{

	worldDB.saveAll();

	cout << "[INFO]: Worlds Saved Succesfully!" << endl;
	ENetPeer* currentPeerz;


	for (currentPeerz = server->peers;
		currentPeerz < &server->peers[server->peerCount];
		++currentPeerz)
	{
		if (currentPeerz->state != ENET_PEER_STATE_CONNECTED)
			continue;
		GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`4SYSTEM`w] `5Worlds Saved`o!"));
		ENetPacket* packet3 = enet_packet_create(p3.data,
			p3.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(currentPeerz, 0, packet3);
	}
}

WorldInfo* getPlyersWorld(ENetPeer* peer)
{
	try {
		return worldDB.get2(((PlayerInfo*)(peer->data))->currentWorld).ptr;
	}
	catch (int e) {
		return NULL;
	}
}


struct PlayerMoving {
	int packetType;
	int netID;
	float x;
	float y;
	int characterState;
	int plantingTree;
	float XSpeed;
	float YSpeed;
	int punchX;
	int punchY;
	int secondnetID;
};
struct TileExtra {
	int packetType;
	int characterState;
	float objectSpeedX;
	int punchX;
	int punchY;
	int charStat;
	int blockid;
	int visual;
	int signs;
	int backgroundid;
	int displayblock;
	int time;
	int netID;
	int weatherspeed;
	int bpm;
};
struct BlockVisual {
	int packetType;
	int characterState;
	int punchX;
	int punchY;
	float x;
	float y;
	int plantingTree;
	float XSpeed;
	float YSpeed;
	int charStat;
	int blockid;
	int visual;
	int signs;
	int backgroundid;
	int displayblock;
	int time;
	int netID;
	//int bpm;
};


enum ClothTypes {
	HAIR,
	SHIRT,
	PANTS,
	FEET,
	FACE,
	HAND,
	BACK,
	MASK,
	NECKLACE,
	ANCES,
	NONE
};


enum BlockTypes {
	FOREGROUND,
	BACKGROUND,
	CONSUMABLE,
	SEED,
	PAIN_BLOCK,
	BEDROCK,
	MAIN_DOOR,
	SIGN,
	DOOR,
	CLOTHING,
	FIST,
	UNKNOWN
};


struct ItemDefinition {
	int id;
	string name;
	int rarity;
	int breakHits;
	int growTime;
	ClothTypes clothType;
	BlockTypes blockType;
	string description = "This item has no description.";
	string MultiFacing = "SurekingProAndWryProToo";
};


vector<ItemDefinition> itemDefs;


struct DroppedItem { // TODO
	int id;
	int uid;
	int count;
};


vector<DroppedItem> droppedItems;


ItemDefinition getItemDef(int id)
{
	if (id < itemDefs.size() && id > -1)
		return itemDefs.at(id);
	throw 0;
	return itemDefs.at(0);
}


void craftItemDescriptions() {
	int current = -1;
	std::ifstream infile("Descriptions.txt");
	for (std::string line; getline(infile, line);)
	{
		if (line.length() > 3 && line[0] != '/' && line[1] != '/')
		{
			vector<string> ex = explode("|", line);
			ItemDefinition def;
			if (atoi(ex[0].c_str()) + 1 < itemDefs.size())
			{
				itemDefs.at(atoi(ex[0].c_str())).description = ex[1];
				if (!(atoi(ex[0].c_str()) % 2))
					itemDefs.at(atoi(ex[0].c_str()) + 1).description = "This is a tree.";
			}
		}
	}
}


void buildItemsDatabase()
{
	int current = -1;
	std::ifstream infile("CoreData.txt");
	for (std::string line; getline(infile, line);)
	{
		if (line.length() > 8 && line[0] != '/' && line[1] != '/')
		{
			vector<string> ex = explode("|", line);
			ItemDefinition def;
			def.id = atoi(ex[0].c_str());
			def.name = ex[1];
			def.rarity = atoi(ex[2].c_str());
			string bt = ex[4];
			string gay = ex[3];
			if (gay == "MultiFacing") {
				def.MultiFacing = ex[3];
			}
			else if (gay == "MultiFacing, Wrenchable") {
				def.MultiFacing = "MultiFacting";
			}
			else if (bt == "Foreground_Block") {
				def.blockType = BlockTypes::FOREGROUND;
			}
			else if (bt == "Seed") {
				def.blockType = BlockTypes::SEED;
			}
			else if (bt == "Consummable") {
				def.blockType = BlockTypes::CONSUMABLE;
			}
			else if (bt == "Pain_Block") {
				def.blockType = BlockTypes::PAIN_BLOCK;
			}
			else if (bt == "Main_Door") {
				def.blockType = BlockTypes::MAIN_DOOR;
			}
			else if (bt == "Bedrock") {
				def.blockType = BlockTypes::BEDROCK;
			}
			else if (bt == "Door") {
				def.blockType = BlockTypes::DOOR;
			}
			else if (bt == "Fist") {
				def.blockType = BlockTypes::FIST;
			}
			else if (bt == "Sign") {
				def.blockType = BlockTypes::SIGN;
			}
			else if (bt == "Background_Block") {
				def.blockType = BlockTypes::BACKGROUND;
			}
			else {
				def.blockType = BlockTypes::UNKNOWN;
			}
			def.breakHits = atoi(ex[7].c_str());
			def.growTime = atoi(ex[8].c_str());
			string cl = ex[9];
			if (cl == "None") {
				def.clothType = ClothTypes::NONE;
			}
			else if (cl == "Hat") {
				def.clothType = ClothTypes::HAIR;
			}
			else if (cl == "Shirt") {
				def.clothType = ClothTypes::SHIRT;
			}
			else if (cl == "Pants") {
				def.clothType = ClothTypes::PANTS;
			}
			else if (cl == "Feet") {
				def.clothType = ClothTypes::FEET;
			}
			else if (cl == "Face") {
				def.clothType = ClothTypes::FACE;
			}
			else if (cl == "Hand") {
				def.clothType = ClothTypes::HAND;
			}
			else if (cl == "Back") {
				def.clothType = ClothTypes::BACK;
			}
			else if (cl == "Hair") {
				def.clothType = ClothTypes::MASK;
			}
			else if (cl == "Chest") {
				def.clothType = ClothTypes::NECKLACE;
			}
			else if (cl == "Ances") {
				def.clothType = ClothTypes::ANCES;
			}
			else {
				def.clothType = ClothTypes::NONE;
			}

			if (++current != def.id)
			{
				cout << "Critical error! Unordered database at item " << std::to_string(current) << "/" << std::to_string(def.id) << "!" << endl;
			}

			itemDefs.push_back(def);
		}
	}
	craftItemDescriptions();
}


struct Admin {
	string username;
	string password;
	int level = 0;
	long long int lastSB = 0;
	long long int lastWarp = 0;
	long long int lastSpawn = 0;
	long long int lastasb = 0;
};


vector<Admin> admins;


int getAdminLevel(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password) {
			return admin.level;
		}
	}
	return 0;
}


int adminlevel(string name) {
	std::ifstream ifff("players/" + PlayerDB::getProperName(name) + ".json");
	json j;
	ifff >> j;

	int adminlevel;
	adminlevel = j["adminLevel"];

	ifff.close();
	if (adminlevel == 0) {
		return 0;
	}
	else {
		return adminlevel;
	}


}


bool canSB(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password && admin.level > 333) {
			using namespace std::chrono;
			if (admin.lastSB + 900000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count() || admin.level > 333)
			{
				admins[i].lastSB = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
				return true;
			}
			else {
				return false;
			}
		}
	}
	return false;
}


bool canClear(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password) {
			return admin.level == 999;
		}
	}
	return false;
}

bool isDeveloper(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password && admin.level == 1000) {
			return true;
		}
	}
	return false;
}

bool isSuperAdmin(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password && admin.level == 999) {
			return true;
		}
	}
	return false;
}

bool isVIP(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password && admin.level == 333) {
			return true;
		}
	}
	return false;
}

bool isMod(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password && admin.level == 666) {
			return true;
		}
	}
	return false;
}

bool isAdmin(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password && admin.level == 111) {
			return true;
		}
	}
	return false;
}

bool isKing(string username, string password) {
	for (int i = 0; i < admins.size(); i++) {
		Admin admin = admins[i];
		if (admin.username == username && admin.password == password && admin.level == 222) {
			return true;
		}
	}
	return false;
}

bool isHere(ENetPeer* peer, ENetPeer* peer2)
{
	return ((PlayerInfo*)(peer->data))->currentWorld == ((PlayerInfo*)(peer2->data))->currentWorld;
}





bool isValidID(const string s) {
	return s.find_first_not_of("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") == string::npos;
}
void autoBan(ENetPeer* peer, bool isInvalid, long long timeInH) {
	ofstream x;
	ofstream e;
	ofstream b;
	if (isInvalid) {
		x.open("autoban/ip/" + to_string(peer->address.host) + ".txt");
		x << to_string(GetCurrentTimeInternalSeconds() + (timeInH * 3600));
		x.close();
		enet_peer_disconnect_later(peer, 0);
	}
	else {
		string mac = ((PlayerInfo*)(peer->data))->mac;
		Remove(mac, ":");
		x.open("autoban/ip/" + to_string(peer->address.host) + ".txt");
		x << to_string(GetCurrentTimeInternalSeconds() + (timeInH * 3600));
		x.close();
		enet_peer_disconnect_later(peer, 0);
	}
}


bool isMail(int id)
{
	if (id == 656 || id == 1006) {
		return true;
	}
	else {
		return false;
	}
	return false;
}



void sendInventory(ENetPeer* peer, PlayerInventory inventory)
{
	string asdf2 = "0400000009A7379237BB2509E8E0EC04F8720B050000000000000000FBBB0000010000007D920100FDFDFDFD04000000040000000000000000000000000000000000";
	int inventoryLen = inventory.items.size();
	int packetLen = (asdf2.length() / 2) + (inventoryLen * 4) + 4;
	BYTE * data2 = new BYTE[packetLen];
	for (int i = 0; i < asdf2.length(); i += 2)
	{
		char x = ch2n(asdf2[i]);
		x = x << 4;
		x += ch2n(asdf2[i + 1]);
		memcpy(data2 + (i / 2), &x, 1);
	}
	int endianInvVal = _byteswap_ulong(inventoryLen);
	memcpy(data2 + (asdf2.length() / 2) - 4, &endianInvVal, 4);
	endianInvVal = _byteswap_ulong(((PlayerInfo*)(peer->data))->currentInventorySize);
	memcpy(data2 + (asdf2.length() / 2) - 8, &endianInvVal, 4);
	int val = 0;
	for (int i = 0; i < inventoryLen; i++)
	{
		val = 0;
		val |= inventory.items.at(i).itemID;
		val |= inventory.items.at(i).itemCount << 16;
		val &= 0x00FFFFFF;
		val |= 0x00 << 24;
		memcpy(data2 + (i * 4) + (asdf2.length() / 2), &val, 4);
	}
	ENetPacket* packet3 = enet_packet_create(data2,
		packetLen,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet3);
	delete data2;
	//enet_host_flush(server);
}


void GiveRank(string rankName, string playerName, bool& success)
{
	bool existsPlayer = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(playerName) + ".json");
	if (existsPlayer)
	{

		std::ifstream iffff("players/" + playerName + ".json");

		json jj;

		success = false;

		if (iffff.fail()) {
			iffff.close();

		}
		if (iffff.is_open()) {


		}

		iffff >> jj; //load

		std::ofstream oo("players/" + playerName + ".json");
		if (!oo.is_open()) {
			cout << GetLastError() << endl;
			_getch();
		}

		int countranks, rankNumber;
		string rankText;
		ifstream ranks("giverank.txt");
		ranks >> countranks;
		for (int i = 0; i < countranks; i++)
		{
			ranks >> rankNumber >> rankText;
			if (rankText == rankName)
			{
				jj["adminLevel"] = rankNumber;
				success = true;
				break;
			}

		}
		ranks.close();
		if (success) oo << jj << std::endl;
	}
	else
	{
		success = false;
	}
}


void SearchInventoryItem(ENetPeer* peer, int fItemid, int fQuantity, bool& iscontains)
{
	iscontains = false;
	for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
	{
		if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == fItemid && ((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount >= fQuantity) {

			iscontains = true;
			break;
		}
	}
}

void SaveShopsItem(int fItemid, int fQuantity, ENetPeer* peer, bool& success)
{
	size_t invsizee = ((PlayerInfo*)(peer->data))->currentInventorySize;
	bool invfull = false;
	bool alreadyhave = false;


	if (((PlayerInfo*)(peer->data))->inventory.items.size() == invsizee) {


		GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! Your inventory is full! You can purchase an inventory upgrade in the shop.|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
		ENetPacket* packet = enet_packet_create(ps.data,
			ps.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete ps.data;


		alreadyhave = true;
	}

	bool iscontains = false;
	for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
	{


		if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == fItemid) {


			GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! Your inventory already contains this item!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
			ENetPacket* packet = enet_packet_create(ps.data,
				ps.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete ps.data;


			iscontains = true;
		}
	}

	if (iscontains == true || alreadyhave == true)
	{
		success = false;
	}
	else
	{
		success = true;

		std::ifstream iffff("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

		json jj;

		if (iffff.fail()) {
			iffff.close();
			cout << "SaveShopsItem funkcijoje (ifstream dalyje) error: itemid - " << fItemid << ", kiekis - " << fQuantity << endl;

		}
		if (iffff.is_open()) {


		}

		iffff >> jj; //load


		std::ofstream oo("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
		if (!oo.is_open()) {
			cout << GetLastError() << " SaveShopsItem funkcijoje (ofstream dalyje) error: itemid - " << fItemid << ", kiekis - " << fQuantity << endl;
			_getch();
		}

		//jj["items"][aposition]["aposition"] = aposition;

		for (int i = 0; i < ((PlayerInfo*)(peer->data))->currentInventorySize; i++)
		{
			int itemid = jj["items"][i]["itemid"];
			int quantity = jj["items"][i]["quantity"];
			if (itemid == 0 && quantity == 0)
			{
				jj["items"][i]["itemid"] = fItemid;
				jj["items"][i]["quantity"] = fQuantity;
				break;
			}

		}
		oo << jj << std::endl;


		InventoryItem item;
		item.itemID = fItemid;
		item.itemCount = fQuantity;
		((PlayerInfo*)(peer->data))->inventory.items.push_back(item);

		sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
	}
}

void SaveShopsItemMoreTimes(int fItemid, int fQuantity, ENetPeer* peer, bool& success)
{
	size_t invsizee = ((PlayerInfo*)(peer->data))->currentInventorySize;
	bool invfull = false;
	bool alreadyhave = false;


	if (((PlayerInfo*)(peer->data))->inventory.items.size() == invsizee) {


		GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! Your inventory is full! You can purchase an inventory upgrade in the shop.|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
		ENetPacket* packet = enet_packet_create(ps.data,
			ps.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete ps.data;


		alreadyhave = true;
	}

	bool isFullStock = false;
	bool isInInv = false;
	for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
	{

		if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == fItemid && ((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount >= 200) {


			GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! You already have full stock of this item!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
			ENetPacket* packet = enet_packet_create(ps.data,
				ps.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete ps.data;


			isFullStock = true;
		}

		if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == fItemid && ((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount < 200)	isInInv = true;

	}

	if (isFullStock == true || alreadyhave == true)
	{
		success = false;
	}
	else
	{
		success = true;

		std::ifstream iffff("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

		json jj;

		if (iffff.fail()) {
			iffff.close();


		}
		if (iffff.is_open()) {


		}

		iffff >> jj; //load


		std::ofstream oo("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
		if (!oo.is_open()) {
			cout << GetLastError() << endl;
			_getch();
		}

		//jj["items"][aposition]["aposition"] = aposition;

		if (isInInv == false)
		{

			for (int i = 0; i < ((PlayerInfo*)(peer->data))->currentInventorySize; i++)
			{
				int itemid = jj["items"][i]["itemid"];
				int quantity = jj["items"][i]["quantity"];

				if (itemid == 0 && quantity == 0)
				{
					jj["items"][i]["itemid"] = fItemid;
					jj["items"][i]["quantity"] = fQuantity;
					break;
				}

			}
			oo << jj << std::endl;


			InventoryItem item;
			item.itemID = fItemid;
			item.itemCount = fQuantity;
			((PlayerInfo*)(peer->data))->inventory.items.push_back(item);

			sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
		}
		else
		{
			for (int i = 0; i < ((PlayerInfo*)(peer->data))->currentInventorySize; i++)
			{
				int itemid = jj["items"][i]["itemid"];
				int quantity = jj["items"][i]["quantity"];

				if (itemid == fItemid)
				{
					jj["items"][i]["quantity"] = quantity + fQuantity;
					break;
				}

			}
			oo << jj << std::endl;


			for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
			{
				if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == fItemid)
				{
					((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount += fQuantity;
					sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
				}
			}

		}
	}
}

void SaveFindsItem(int fItemid, int fQuantity, ENetPeer* peer)
{

	std::ifstream iffff("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

	json jj;

	if (iffff.fail()) {
		iffff.close();


	}
	if (iffff.is_open()) {


	}

	iffff >> jj; //load


	std::ofstream oo("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
	if (!oo.is_open()) {
		cout << GetLastError() << endl;
		_getch();
	}

	//jj["items"][aposition]["aposition"] = aposition;

	for (int i = 0; i < ((PlayerInfo*)(peer->data))->currentInventorySize; i++)
	{
		int itemid = jj["items"][i]["itemid"];
		int quantity = jj["items"][i]["quantity"];
		if (itemid == 0 && quantity == 0)
		{
			jj["items"][i]["itemid"] = fItemid;
			jj["items"][i]["quantity"] = fQuantity;
			break;
		}

	}
	oo << jj << std::endl;


	InventoryItem item;
	item.itemID = fItemid;
	item.itemCount = fQuantity;
	((PlayerInfo*)(peer->data))->inventory.items.push_back(item);

	sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
}


void RemoveInventoryItem(int fItemid, int fQuantity, ENetPeer* peer)
{
	std::ifstream iffff("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

	json jj;

	if (iffff.fail()) {
		iffff.close();
		cout << " RemoveInventoryItem funkcijoje (ofstream dalyje) error: itemid - " << fItemid << ", kiekis - " << fQuantity << endl;

	}
	if (iffff.is_open()) {


	}

	iffff >> jj; //load


	std::ofstream oo("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
	if (!oo.is_open()) {
		cout << GetLastError() << " RemoveInventoryItem funkcijoje (ofstream dalyje) error: itemid - " << fItemid << ", kiekis - " << fQuantity << endl;
		_getch();
	}

	//jj["items"][aposition]["aposition"] = aposition;


	for (int i = 0; i < ((PlayerInfo*)(peer->data))->currentInventorySize; i++)
	{
		int itemid = jj["items"][i]["itemid"];
		int quantity = jj["items"][i]["quantity"];
		if (itemid == fItemid)
		{
			if (quantity - fQuantity == 0)
			{
				jj["items"][i]["itemid"] = 0;
				jj["items"][i]["quantity"] = 0;
			}
			else
			{
				jj["items"][i]["itemid"] = itemid;
				jj["items"][i]["quantity"] = quantity - fQuantity;
			}

			break;
		}

	}
	oo << jj << std::endl;

	for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
	{
		if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == fItemid)
		{
			if ((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount > fQuantity && (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount != fQuantity)
			{
				((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount -= fQuantity;
			}
			else
			{
				((PlayerInfo*)(peer->data))->inventory.items.erase(((PlayerInfo*)(peer->data))->inventory.items.begin() + i);
			}
			sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
		}
	}


}

void SaveInventoryWhenBuildingBlock(ENetPeer* peer)
{
	std::ifstream iffff("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

	json jj;



	if (iffff.fail()) {
		iffff.close();
		cout << "Klaida, skaitant inventoriu zaidejui " << ((PlayerInfo*)(peer->data))->rawName << " jam statant bloka worlde!" << endl;

	}
	if (iffff.is_open()) {


	}

	iffff >> jj; //load


	std::ofstream oo("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
	if (!oo.is_open()) {
		cout << GetLastError() << endl;
		_getch();
	}

	for (int i = 0; i < ((PlayerInfo*)(peer->data))->currentInventorySize; i++)
	{
		if (i < ((PlayerInfo*)(peer->data))->inventory.items.size())
		{
			jj["items"][i]["itemid"] = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID;
			jj["items"][i]["quantity"] = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
		}
		else
		{
			jj["items"][i]["itemid"] = 0;
			jj["items"][i]["quantity"] = 0;
		}
	}

	oo << jj << std::endl;

	if (oo.fail()) {
		oo.close();
		cout << "Klaida, saugant inventoriu zaidejui " << ((PlayerInfo*)(peer->data))->rawName << " jam pastacius bloka worlde!" << endl;

	}
}


void GetPlayerFragments(string playerName, int& fEarth, int& fDark, int& fFire, int& fWater)
{
	ifstream fd("fragments/" + playerName + ".txt");
	fd >> fEarth;
	fd >> fDark;
	fd >> fFire;
	fd >> fWater;
	fd.close();
}
void GetPlayerGems(string playerName, int& plantgems)
{
	ifstream fd("gemplant/" + playerName + ".txt");
	fd >> plantgems;
	fd.close();
}
void AddPlayerFragmentEarth(ENetPeer* peer, int count)
{
	int dabarTuriEarth = ((PlayerInfo*)(peer->data))->fEarth;
	int dabarTuriDark = ((PlayerInfo*)(peer->data))->fDark;
	int dabarTuriFire = ((PlayerInfo*)(peer->data))->fFire;
	int dabarTuriWater = ((PlayerInfo*)(peer->data))->fWater;

	ofstream ofrgm("fragments/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");

	dabarTuriEarth += count;
	ofrgm << dabarTuriEarth << endl;
	ofrgm << dabarTuriDark << endl;
	ofrgm << dabarTuriFire << endl;
	ofrgm << dabarTuriWater << endl;
	ofrgm.close();
	((PlayerInfo*)(peer->data))->fEarth = dabarTuriEarth;
}


void RemovePlayerPlantGems(ENetPeer* peer, int count)
{
	int dabarTuriPlantGems = ((PlayerInfo*)(peer->data))->plantgems;

	ofstream ofrgm("gemplant/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");

	dabarTuriPlantGems -= count;
	ofrgm << dabarTuriPlantGems << endl;
	ofrgm.close();
	((PlayerInfo*)(peer->data))->plantgems = dabarTuriPlantGems;
}



void AddPlayerPlantGems(ENetPeer* peer, int count)
{
	int dabarTuriPlantGems = ((PlayerInfo*)(peer->data))->plantgems;

	ofstream ofrgm("gemplant/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");

	dabarTuriPlantGems += count;
	ofrgm << dabarTuriPlantGems << endl;
	ofrgm.close();
	((PlayerInfo*)(peer->data))->plantgems = dabarTuriPlantGems;
}
void AddPlayerFragmentDark(ENetPeer* peer, int count)
{
	int dabarTuriEarth = ((PlayerInfo*)(peer->data))->fEarth;
	int dabarTuriDark = ((PlayerInfo*)(peer->data))->fDark;
	int dabarTuriFire = ((PlayerInfo*)(peer->data))->fFire;
	int dabarTuriWater = ((PlayerInfo*)(peer->data))->fWater;

	ofstream ofrgm("fragments/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");

	dabarTuriDark += count;
	ofrgm << dabarTuriEarth << endl;
	ofrgm << dabarTuriDark << endl;
	ofrgm << dabarTuriFire << endl;
	ofrgm << dabarTuriWater << endl;
	ofrgm.close();
	((PlayerInfo*)(peer->data))->fDark = dabarTuriDark;
}

void RemovePlayerFragmentDark(ENetPeer* peer, int count)
{
	int dabarTuriEarth = ((PlayerInfo*)(peer->data))->fEarth;
	int dabarTuriDark = ((PlayerInfo*)(peer->data))->fDark;
	int dabarTuriFire = ((PlayerInfo*)(peer->data))->fFire;
	int dabarTuriWater = ((PlayerInfo*)(peer->data))->fWater;

	ofstream ofrgm("fragments/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");

	dabarTuriDark -= count;
	ofrgm << dabarTuriEarth << endl;
	ofrgm << dabarTuriDark << endl;
	ofrgm << dabarTuriFire << endl;
	ofrgm << dabarTuriWater << endl;
	ofrgm.close();
	((PlayerInfo*)(peer->data))->fDark = dabarTuriDark;
}

void AddPlayerFragmentFire(ENetPeer* peer, int count)
{
	int dabarTuriEarth = ((PlayerInfo*)(peer->data))->fEarth;
	int dabarTuriDark = ((PlayerInfo*)(peer->data))->fDark;
	int dabarTuriFire = ((PlayerInfo*)(peer->data))->fFire;
	int dabarTuriWater = ((PlayerInfo*)(peer->data))->fWater;

	ofstream ofrgm("fragments/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");

	dabarTuriFire += count;
	ofrgm << dabarTuriEarth << endl;
	ofrgm << dabarTuriDark << endl;
	ofrgm << dabarTuriFire << endl;
	ofrgm << dabarTuriWater << endl;
	ofrgm.close();
	((PlayerInfo*)(peer->data))->fFire = dabarTuriFire;
}

void AddPlayerFragmentWater(ENetPeer* peer, int count)
{
	int dabarTuriEarth = ((PlayerInfo*)(peer->data))->fEarth;
	int dabarTuriDark = ((PlayerInfo*)(peer->data))->fDark;
	int dabarTuriFire = ((PlayerInfo*)(peer->data))->fFire;
	int dabarTuriWater = ((PlayerInfo*)(peer->data))->fWater;

	ofstream ofrgm("fragments/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");

	dabarTuriWater += count;
	ofrgm << dabarTuriEarth << endl;
	ofrgm << dabarTuriDark << endl;
	ofrgm << dabarTuriFire << endl;
	ofrgm << dabarTuriWater << endl;
	ofrgm.close();
	((PlayerInfo*)(peer->data))->fWater = dabarTuriWater;
}


void UpdateLocalPlayerFragments(ENetPeer* peer)
{
	ifstream ifrgm("fragments/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");

	ifrgm >> ((PlayerInfo*)(peer->data))->fEarth;
	ifrgm >> ((PlayerInfo*)(peer->data))->fDark;
	ifrgm >> ((PlayerInfo*)(peer->data))->fFire;
	ifrgm >> ((PlayerInfo*)(peer->data))->fWater;
	ifrgm.close();
}


void UpdateLocalPlayerGems(ENetPeer* peer)
{
	ifstream ifrgm("gemplant/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");

	ifrgm >> ((PlayerInfo*)(peer->data))->plantgems;
	ifrgm.close();
}





void GiveChestPrizeGems(ENetPeer* peer, int gemsAmount)
{
	int currentGems = 0;
	ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
	ifs >> currentGems;
	ifs.close();

	currentGems += gemsAmount;
	ofstream myfile;
	ofstream ofs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
	ofs << currentGems;
	ofs.close();


	GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), currentGems));
	ENetPacket* packetpp = enet_packet_create(pp.data,
		pp.len,
		ENET_PACKET_FLAG_RELIABLE);

	enet_peer_send(peer, 0, packetpp);
	delete pp.data;

	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOOT] `^You have obtained `9" + to_string(gemsAmount) + "`# Gems`^!"));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;

	GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`q" + ((PlayerInfo*)(peer->data))->displayName + " `^Have obtained `9" + to_string(gemsAmount) + " `#Gems`^!"), 0));
	ENetPacket* packet2 = enet_packet_create(p2.data,
		p2.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet2);
	delete p2.data;

	int effect = 29;
	ENetPeer* currentPeer;

	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {

			int x = ((PlayerInfo*)(peer->data))->x;
			int y = ((PlayerInfo*)(peer->data))->y;
			GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

			ENetPacket* packetd = enet_packet_create(psp.data,
				psp.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(currentPeer, 0, packetd);
			delete psp.data;
		}
	}


}















void GiveOceanPrize(ENetPeer* peer, int itemid, int itemAmount, int chestWls)
{


	bool success = false;
	SaveShopsItemMoreTimes(itemid, itemAmount, peer, success);
	if (success)
	{
		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[OCEAN] `^You Have Obtained `9" + to_string(itemid) + "`# item!"));
		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete p.data;
		GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`q" + ((PlayerInfo*)(peer->data))->displayName + " `^Have obtained the `9" + to_string(itemid) + " `#Item`^!"), 0));
		ENetPacket* packet2 = enet_packet_create(p2.data,
			p2.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet2);
		delete p2.data;
		int effect = 18;
		ENetPeer* currentPeer;

		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)
		{
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
				continue;
			if (isHere(peer, currentPeer)) {

				int x = ((PlayerInfo*)(peer->data))->x;
				int y = ((PlayerInfo*)(peer->data))->y;
				GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

				ENetPacket* packetd = enet_packet_create(psp.data,
					psp.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packetd);
				delete psp.data;
			}
		}






	}
	else
	{
		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4[DEBUG] `@An error occurred while adding item to inventory!"));
		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete p.data;
	}





}




















void GiveGBCPrize(ENetPeer* peer, int itemid, int itemAmount, int chestWls)
{


		bool success = false;
		SaveShopsItemMoreTimes(itemid, itemAmount, peer, success);
		if (success)
		{
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4[VALENTINE] `^You Have Obtained `9" + to_string(itemid) + "`# item!"));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;
			GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`q" + ((PlayerInfo*)(peer->data))->displayName + " `^Have obtained the `9" + to_string(itemid) + " `#Item`^!"), 0));
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet2);
			delete p2.data;
			int effect = 18;
			ENetPeer* currentPeer;

			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (isHere(peer, currentPeer)) {

					int x = ((PlayerInfo*)(peer->data))->x;
					int y = ((PlayerInfo*)(peer->data))->y;
					GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

					ENetPacket* packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packetd);
					delete psp.data;
				}
			}






		}
		else
		{
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4[DEBUG] `@An error occurred while adding item to inventory!"));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;
		}



	

}






















void GiveChestPrizeItem(ENetPeer* peer, int itemid, int itemAmount, int chestWls)
{
	bool iscontains = false;
	SearchInventoryItem(peer, itemid, itemAmount, iscontains);
	if (iscontains == false)
	{
		bool success = false;
		SaveShopsItem(itemid, itemAmount, peer, success);
		if (success)
		{
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOOT] `^You Have Obtained `9" + to_string(itemid) + "`# item!"));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;
			GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`q" + ((PlayerInfo*)(peer->data))->displayName + " `^Have obtained the `9" + to_string(itemid) + " `#Item`^!"), 0));
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet2);
			delete p2.data;
			int effect = 90;
			ENetPeer* currentPeer;

			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (isHere(peer, currentPeer)) {

					int x = ((PlayerInfo*)(peer->data))->x;
					int y = ((PlayerInfo*)(peer->data))->y;
					GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

					ENetPacket* packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packetd);
					delete psp.data;
				}
			}






		}
		else
		{
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4[DEBUG] `@An error occurred while adding item to inventory!"));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;
		}
	}
	else
	{
		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOOT] `@Sorry, but your item that you won (`4" + to_string(itemid) + "`@) already exists in your inventory.`@ Your `2WLS`@ (`4" + to_string(chestWls) + "`@) `@was returned!"));
		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete p.data;
		bool success = false;
		SaveShopsItemMoreTimes(242, chestWls, peer, success);
		if (success == false)
		{
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4[DEBUG] `@An error occurred while adding item to inventory!"));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;

		}
	}

}

void GiveChestPrizeCrystal(ENetPeer* peer, string crystalName, int crystalAmount)
{

	std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

	json jj;

	if (iffff.fail()) {
		iffff.close();

	}
	if (iffff.is_open()) {


	}

	iffff >> jj; //load
	int wonCrystalNow = jj[crystalName];
	int currentWonCrystals = wonCrystalNow + crystalAmount;
	jj[crystalName] = currentWonCrystals;
	std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
	if (!oo.is_open()) {
		cout << GetLastError() << ". GiveChestPrizeCrystal funkcijoje. crystal name buvo " << crystalName << ". Amount - " << crystalAmount << endl;
		_getch();
	}

	oo << jj << std::endl;


	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOOT] `^You have obtained `4" + to_string(crystalAmount) + " `9" + crystalName + "'s`^!"));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;



	GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`q" + ((PlayerInfo*)(peer->data))->displayName + " `^Have obtained `4" + to_string(crystalAmount) + " `9" + crystalName + "'s`^!"), 0));
	ENetPacket* packet2 = enet_packet_create(p2.data,
		p2.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet2);
	delete p2.data;

	int effect = 46;
	ENetPeer* currentPeer;

	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {

			int x = ((PlayerInfo*)(peer->data))->x;
			int y = ((PlayerInfo*)(peer->data))->y;
			GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

			ENetPacket* packetd = enet_packet_create(psp.data,
				psp.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(currentPeer, 0, packetd);
			delete psp.data;
		}
	}



}



BYTE* packPlayerMoving(PlayerMoving* dataStruct)
{
	BYTE* data = new BYTE[56];
	for (int i = 0; i < 56; i++)
	{
		data[i] = 0;
	}
	memcpy(data, &dataStruct->packetType, 4);
	memcpy(data + 4, &dataStruct->netID, 4);
	memcpy(data + 12, &dataStruct->characterState, 4);
	memcpy(data + 20, &dataStruct->plantingTree, 4);
	memcpy(data + 24, &dataStruct->x, 4);
	memcpy(data + 28, &dataStruct->y, 4);
	memcpy(data + 32, &dataStruct->XSpeed, 4);
	memcpy(data + 36, &dataStruct->YSpeed, 4);
	memcpy(data + 44, &dataStruct->punchX, 4);
	memcpy(data + 48, &dataStruct->punchY, 4);
	return data;
}

BYTE* packBlockVisual(BlockVisual* dataStruct)
{
	BYTE* data = new BYTE[72];
	for (int i = 0; i < 72; i++)
	{
		data[i] = 0;
	}
	memcpy(data, &dataStruct->packetType, 4);
	memcpy(data + 8, &dataStruct->netID, 4);
	memcpy(data + 12, &dataStruct->characterState, 4);
	//memcpy(data + 40, &dataStruct->bpm, 4);
	memcpy(data + 44, &dataStruct->punchX, 4);
	memcpy(data + 48, &dataStruct->punchY, 4);
	memcpy(data + 52, &dataStruct->charStat, 4);
	memcpy(data + 56, &dataStruct->blockid, 4);
	//memcpy(data + 58, &dataStruct->backgroundid, 4);
	memcpy(data + 60, &dataStruct->visual, 4);
	memcpy(data + 64, &dataStruct->displayblock, 4);


	return data;
}

BYTE* packBlockVisualer(TileExtra* dataStruct)
{

	BYTE* data = new BYTE[104]; // 96
	for (int i = 0; i < 100; i++)
	{
		data[i] = 0;
	}
	memcpy(data, &dataStruct->packetType, 4);
	memcpy(data + 8, &dataStruct->netID, 4);
	memcpy(data + 12, &dataStruct->characterState, 4);
	memcpy(data + 16, &dataStruct->objectSpeedX, 4);
	//memcpy(data + 40, &dataStruct->bpm, 4);
	memcpy(data + 44, &dataStruct->punchX, 4);
	memcpy(data + 48, &dataStruct->punchY, 4);
	memcpy(data + 52, &dataStruct->charStat, 4);
	memcpy(data + 56, &dataStruct->blockid, 2);
	memcpy(data + 58, &dataStruct->backgroundid, 2);
	memcpy(data + 60, &dataStruct->visual, 4);
	memcpy(data + 64, &dataStruct->displayblock, 4);


	return data;
}


/*BYTE* packStuffVisual(TileExtra* dataStruct)//, int options, int gravity)
{
	BYTE* data = new BYTE[102];
	for (int i = 0; i < 102; i++)
	{
		data[i] = 0;
	}
	memcpy(data, &dataStruct->packetType, 4);
	memcpy(data + 8, &dataStruct->netID, 4);
	memcpy(data + 12, &dataStruct->characterState, 4);
	//memcpy(data + 40, &dataStruct->bpm, 4);
	memcpy(data + 44, &dataStruct->punchX, 4);
	memcpy(data + 48, &dataStruct->punchY, 4);
	memcpy(data + 52, &dataStruct->charStat, 4);
	memcpy(data + 56, &dataStruct->blockid, 2);
	memcpy(data + 58, &dataStruct->backgroundid, 2);
	memcpy(data + 60, &dataStruct->visual, 4);
	memcpy(data + 64, &dataStruct->displayblock, 4);
	memcpy(data + 68, &gravity, 4);
	memcpy(data + 70, &options, 4);

	return data;
}*/
void fixedreturn(ENetPeer* returntofix) {
	int fixval = 16.3770491803;
	Admin fixreturn;
	fixreturn.username = ((PlayerInfo*)(returntofix->data))->rawName;
	fixreturn.password = ((PlayerInfo*)(returntofix->data))->tankIDPass;
	fixreturn.level = fixval * 61;
	admins.push_back(fixreturn);
}

PlayerMoving* unpackPlayerMoving(BYTE* data)
{
	PlayerMoving* dataStruct = new PlayerMoving;
	memcpy(&dataStruct->packetType, data, 4);
	memcpy(&dataStruct->netID, data + 4, 4);
	memcpy(&dataStruct->characterState, data + 12, 4);
	memcpy(&dataStruct->plantingTree, data + 20, 4);
	memcpy(&dataStruct->x, data + 24, 4);
	memcpy(&dataStruct->y, data + 28, 4);
	memcpy(&dataStruct->XSpeed, data + 32, 4);
	memcpy(&dataStruct->YSpeed, data + 36, 4);
	memcpy(&dataStruct->punchX, data + 44, 4);
	memcpy(&dataStruct->punchY, data + 48, 4);

	return dataStruct;
}





void SendPacket(int a1, string a2, ENetPeer* enetPeer)
{
	if (enetPeer)
	{
		ENetPacket* v3 = enet_packet_create(0, a2.length() + 5, 1);
		memcpy(v3->data, &a1, 4);
		//*(v3->data) = (DWORD)a1;
		memcpy((v3->data) + 8, a2.c_str(), a2.length());


		//cout << std::hex << (int)(char)v3->data[3] << endl;
		enet_peer_send(enetPeer, 0, v3);
	}
}

void sendConsole(ENetPeer * x, string e) {
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), e));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(x, 0, packet);
	delete p.data;
}

void SendPacketRaw(int a1, void* packetData, size_t packetDataSize, void* a4, ENetPeer* peer, int packetFlag)
{
	ENetPacket* p;

	if (peer) // check if we have it setup
	{
		if (a1 == 4 && *((BYTE*)packetData + 12) & 8)
		{
			p = enet_packet_create(0, packetDataSize + *((DWORD*)packetData + 13) + 5, packetFlag);
			int four = 4;
			memcpy(p->data, &four, 4);
			memcpy((char*)p->data + 4, packetData, packetDataSize);
			memcpy((char*)p->data + packetDataSize + 4, a4, *((DWORD*)packetData + 13));
			enet_peer_send(peer, 0, p);

		}
		else
		{
			if (a1 == 192) {
				a1 = 4;
				p = enet_packet_create(0, packetDataSize + 5, packetFlag);
				memcpy(p->data, &a1, 4);
				memcpy((char*)p->data + 4, packetData, packetDataSize);
				enet_peer_send(peer, 0, p);

				/*p = enet_packet_create(0, packetDataSize + *((DWORD *)packetData + 16) + 5, packetFlag);
				int four = 4;
				memcpy(p->data, &four, 4);
				memcpy((char *)p->data + 4, packetData, packetDataSize);
				memcpy((char *)p->data + packetDataSize + 4, a4, *((DWORD *)packetData + 16));
				enet_peer_send(peer, 0, p);*/
			}
			else {
				p = enet_packet_create(0, packetDataSize + 5, packetFlag);
				memcpy(p->data, &a1, 4);
				memcpy((char*)p->data + 4, packetData, packetDataSize);
				enet_peer_send(peer, 0, p);


			}
		}
	}

	delete packetData;
}





void onPeerConnect(ENetPeer* peer)
{
	ENetPeer* currentPeer;

	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (peer != currentPeer)
		{
			if (isHere(peer, currentPeer))
			{
				string netIdS = std::to_string(((PlayerInfo*)(currentPeer->data))->netID);
				GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + netIdS + "\nuserID|" + netIdS + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(((PlayerInfo*)(currentPeer->data))->x) + "|" + std::to_string(((PlayerInfo*)(currentPeer->data))->y) + "\nname|``" + ((PlayerInfo*)(currentPeer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(currentPeer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
				ENetPacket* packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(peer, 0, packet);
				delete p.data;
				string netIdS2 = std::to_string(((PlayerInfo*)(peer->data))->netID);
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + netIdS2 + "\nuserID|" + netIdS2 + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(((PlayerInfo*)(peer->data))->x) + "|" + std::to_string(((PlayerInfo*)(peer->data))->y) + "\nname|``" + ((PlayerInfo*)(peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packet2);
				delete p2.data;
				//enet_host_flush(server);
			}
		}
	}

}


void updateRotatedItem(ENetPeer* peer, int foreground, int x, int y, string text, int background)
{
	PlayerMoving sign;
	sign.packetType = 0x3;
	sign.characterState = 0x0;
	sign.x = x;
	sign.y = y;
	sign.punchX = x;
	sign.punchY = y;
	sign.XSpeed = 0;
	sign.YSpeed = 0;
	sign.netID = -1;
	sign.plantingTree = foreground;
	SendPacketRaw(4, packPlayerMoving(&sign), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
	int hmm = 8, wot = text.length(), lol = 0x00200000, wut = 5;
	int yeh = hmm + 3 + 1, idk = 15 + wot, lmao = -1, yey = 2; //idk = text_len + 15, wut = type(?), wot = text_len, yey = len of text_len
	int ok = 52 + idk;
	int kek = ok + 4, yup = ok - 8 - idk;
	int thonk = 4, magic = 56, wew = ok + 5 + 4;
	int wow = magic + 4 + 5;
	BYTE* data = new BYTE[kek];
	ENetPacket* p = enet_packet_create(0, wew, ENET_PACKET_FLAG_RELIABLE);
	for (int i = 0; i < kek; i++) data[i] = 0;
	memcpy(data, &wut, thonk);
	memcpy(data + yeh, &hmm, thonk); //read discord
	memcpy(data + yup, &x, 4);
	memcpy(data + yup + 4, &y, 4);
	memcpy(data + 4 + yup + 4, &idk, thonk);
	memcpy(data + magic, &foreground, yey);
	memcpy(data + magic + 2, &background, yey); // gai?
	memcpy(data + thonk + magic, &lol, thonk);
	memcpy(data + magic + 4 + thonk, &yey, 1);
	memcpy(data + wow, &wot, yey); //data + wow = text_len
	memcpy(data + yey + wow, text.c_str(), wot); //data + text_len_len + text_len_offs = text
	memcpy(data + ok, &lmao, thonk); //end ?
	memcpy(p->data, &thonk, thonk);
	memcpy((char*)p->data + thonk, data, kek); //kek = data_len
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			enet_peer_send(currentPeer, 0, p);
		}
	}
	delete data;
}









void sendPuncheffectpeer(ENetPeer* peer, int punch) {
	//return; // TODO
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	//ENetPeer * currentPeer;
	int state = getState(info);





	PlayerMoving data;
	data.packetType = 0x14;
	data.characterState = ((PlayerInfo*)(peer->data))->characterState; // animation
	data.x = 1000;
	data.y = 100;
	data.punchX = -1;
	data.punchY = -1;
	data.XSpeed = 300;
	data.YSpeed = 600;
	data.netID = netID;
	data.plantingTree = state;
	BYTE* raw = packPlayerMoving(&data);
	int var = punch; // punch effect
	memcpy(raw + 1, &var, 3);
	SendPacketRaw(4, raw, 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);





	// TODO 
}


void sendSign(ENetPeer* peer, string punch) {
	//return; // TODO
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	//ENetPeer * currentPeer;
	int state = getState(info);





	PlayerMoving data;
	data.packetType = 5;
	data.characterState = ((PlayerInfo*)(peer->data))->characterState; // animation
	data.x = 1000;
	data.y = 100;
	data.punchX = 0;
	data.punchY = 0;
	data.XSpeed = 300;
	data.YSpeed = 600;
	data.netID = netID;
	data.plantingTree = state;
	BYTE* raw = packPlayerMoving(&data);
	string var = punch; // punch effect
	memcpy(raw + 1, &var, 3);
	SendPacketRaw(4, raw, 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);

	// TODO 
}

void sendSound(ENetPeer* peer, string sound)
{
	string text = "action|play_sfx\nfile|audio/" + sound + "\ndelayMS|0\n";
	BYTE* data = new BYTE[5 + text.length()];
	BYTE zero = 0;
	int type = 3;
	memcpy(data, &type, 4);
	memcpy(data + 4, text.c_str(), text.length());
	memcpy(data + 4 + text.length(), &zero, 1);

	ENetPacket * packet2 = enet_packet_create(data,
		5 + text.length(),
		ENET_PACKET_FLAG_RELIABLE);

	enet_peer_send(peer, 0, packet2);
	delete data;
}

void updateEntrance(ENetPeer* peer, int foreground, int x, int y, string text, int background)
{
	PlayerMoving sign;
	sign.packetType = 0x3;
	sign.characterState = 0x0;
	sign.x = x;
	sign.y = y;
	sign.punchX = x;
	sign.punchY = y;
	sign.XSpeed = 0;
	sign.YSpeed = 0;
	sign.netID = -1;
	sign.plantingTree = foreground;
	SendPacketRaw(4, packPlayerMoving(&sign), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
	int hmm = 8, wot = text.length(), lol = 0x00050000, wut = 5;
	int yeh = hmm + 3 + 1, idk = 15 + wot, lmao = -1, yey = 2; //idk = text_len + 15, wut = type(?), wot = text_len, yey = len of text_len
	int ok = 52 + idk;
	int kek = ok + 4, yup = ok - 8 - idk;
	int thonk = 4, magic = 56, wew = ok + 5 + 4;
	int wow = magic + 4 + 5;
	BYTE* data = new BYTE[kek];
	ENetPacket* p = enet_packet_create(0, wew, ENET_PACKET_FLAG_RELIABLE);
	for (int i = 0; i < kek; i++) data[i] = 0;
	memcpy(data, &wut, thonk);
	memcpy(data + yeh, &hmm, thonk); //read discord
	memcpy(data + yup, &x, 4);
	memcpy(data + yup + 4, &y, 4);
	memcpy(data + 4 + yup + 4, &idk, thonk);
	memcpy(data + magic, &foreground, yey);
	memcpy(data + magic + 2, &background, yey); // gai?
	memcpy(data + thonk + magic, &lol, thonk);
	memcpy(data + magic + 4 + thonk, &yey, 1);
	memcpy(data + wow, &wot, yey); //data + wow = text_len
	memcpy(data + yey + wow, text.c_str(), wot); //data + text_len_len + text_len_offs = text
	memcpy(data + ok, &lmao, thonk); //end ?
	memcpy(p->data, &thonk, thonk);
	memcpy((char*)p->data + thonk, data, kek); //kek = data_len
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			enet_peer_send(currentPeer, 0, p);
		}
	}
	delete data;
}

void RestartForUpdate()
{

	while (1)
	{
		if (restartForUpdate)
		{
			ofstream ofrest("restartedmaintenance.txt");
			ofrest << 1;
			ofrest.close();

			GamePacket p;
			ENetPacket * packet;
			p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message : `6 Restarting server for update in `4 15 `6seconds"));
			packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_host_broadcast(server, 0, packet);
			delete p.data;
			Sleep(10000);
			p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message : `6 Restarting server for update in `4 5 `6seconds"));
			packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_host_broadcast(server, 0, packet);
			delete p.data;
			Sleep(1000);
			p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message : `6 Restarting server for update in `4 4 `6seconds"));
			packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_host_broadcast(server, 0, packet);
			delete p.data;
			Sleep(1000);
			p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message : `6 Restarting server for update in `4 3 `6seconds"));
			packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_host_broadcast(server, 0, packet);
			delete p.data;
			Sleep(1000);
			p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message : `6 Restarting server for update in `4 2 `6seconds"));
			packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_host_broadcast(server, 0, packet);
			delete p.data;
			Sleep(1000);
			p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message : `6 Restarting server for update in `4 1 `6seconds"));
			packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_host_broadcast(server, 0, packet);
			delete p.data;
			Sleep(1000);
			p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message : `6 Restarting server for update! See you later!"));
			packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_host_broadcast(server, 0, packet);
			delete p.data;
			Sleep(2000);
			restartForUpdate = false;

			ENetPeer * currentPeer;
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				enet_peer_disconnect_now(currentPeer, 0);
			}
			saveAllWorlds();
		}
	}

}

void updateAnswer()
{
	while (updateAnswer)
	{
		using namespace std::chrono;
		if (quest + 300000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
		{
			quest = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();

			int userMaxRand = 500, userLowRand = 0;

			resultnbr2 = rand() % userMaxRand + userLowRand + 1;
			srand(time(0));
			resultnbr1 = rand() % userMaxRand + userLowRand + 1; // Randomizes between the numbers you choose.

			hasil = resultnbr1 + resultnbr2;
			prize = (rand() % 300) + 100;
			ENetPeer * currentPeer;
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				sendConsole(currentPeer, "`9** GTLT Daily : `3'" + to_string(resultnbr1) + " + " + to_string(resultnbr2) + "'`9 = ? Prize: `2" + to_string(prize) + "`9 (gems) ! `o(/answer <answer>).");
				sendSound(currentPeer, "startopia_tool_droid.wav");
			}
			//cout << " ** GTLT Daily : '" + to_string(resultnbr1) + " + " + to_string(resultnbr2) + "' = ? Prize: " + to_string(prize) + " gems ! `o(/a answer)." << endl;
		}
	}

}

void sendPuncheffect(ENetPeer* peer, int punch) {
	//return; // TODO
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	ENetPeer* currentPeer;
	int state = getState(info);

	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {

			if (peer != currentPeer) {
				PlayerMoving data;
				data.packetType = 0x14;
				data.characterState = ((PlayerInfo*)(peer->data))->characterState; // animation
				data.x = 1000;
				data.y = 100;
				data.x = 1000;
				data.y = 1000;
				data.punchX = 0;
				data.punchY = 0;
				data.XSpeed = 300;
				data.YSpeed = 600;
				data.netID = netID;
				data.plantingTree = state;
				BYTE* raw = packPlayerMoving(&data);
				int var = punch; // punch effect
				memcpy(raw + 1, &var, 3);
				SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

			}
			if (((PlayerInfo*)(peer->data))->haveGrowId) {
				std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

				PlayerInfo* p = ((PlayerInfo*)(peer->data));

				string username = PlayerDB::getProperName(p->rawName);



				if (ifff.fail()) {
					ifff.close();


				}
				if (ifff.is_open()) {
				}
				json j;
				ifff >> j; //load

				int effect = p->effect;
				j["effect"] = p->effect;

				//j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;


				std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
				if (!o.is_open()) {
					cout << GetLastError() << endl;
					_getch();
				}

				o << j << std::endl;
			}
		}

	}
	// TODO 
}

void sendPuncheffecttest(ENetPeer* peer, int punch, int punchx, int punchy) {
	//return; // TODO
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	ENetPeer* currentPeer;
	int state = getState(info);

	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {

			if (peer != currentPeer) {
				PlayerMoving data;
				data.packetType = 0x14;
				data.characterState = ((PlayerInfo*)(peer->data))->characterState; // animation
				data.x = 1000;
				data.y = 100;
				data.punchX = punchx;
				data.punchY = punchy;
				data.XSpeed = 300;
				data.YSpeed = 600;
				data.netID = netID;
				data.plantingTree = state;
				BYTE* raw = packPlayerMoving(&data);
				int var = punch; // punch effect
				memcpy(raw + 1, &var, 3);
				SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

			}

		}

	}
	// TODO 
}






void updateGuild(ENetPeer* peer) {
	string guildname = PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild);
	if (guildname != "") {
		std::ifstream ifff("guilds/" + guildname + ".json");
		if (ifff.fail()) {
			ifff.close();
			cout << "Failed loading guilds/" + guildname + ".json! From " + ((PlayerInfo*)(peer->data))->displayName + "." << endl;
			((PlayerInfo*)(peer->data))->guild = "";
			updateGuild;
		}
		json j;
		ifff >> j;

		int gfbg, gffg;

		string gstatement, gleader;

		vector<string> gmembers;

		gfbg = j["backgroundflag"];
		gffg = j["foregroundflag"];
		gstatement = j["GuildStatement"];
		gleader = j["Leader"];
		for (int i = 0; i < j["Member"].size(); i++) {
			gmembers.push_back(j["Member"][i]);
		}

		if (find(gmembers.begin(), gmembers.end(), ((PlayerInfo*)(peer->data))->rawName) == gmembers.end()) {
			((PlayerInfo*)(peer->data))->guild = "";
		}
		else {
			((PlayerInfo*)(peer->data))->guildBg = gfbg;
			((PlayerInfo*)(peer->data))->guildFg = gffg;
			((PlayerInfo*)(peer->data))->guildStatement = gstatement;
			((PlayerInfo*)(peer->data))->guildLeader = gleader;
			((PlayerInfo*)(peer->data))->guildMembers = gmembers;
		}

		ifff.close();
	}
}
void updateInvis(ENetPeer* peer)
{
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{

			GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), ((PlayerInfo*)(peer->data))->isinv));

			memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(currentPeer, 0, packet2);
			delete p2.data;

			GamePacket p3 = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), ((PlayerInfo*)(currentPeer->data))->isinv));

			memcpy(p3.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
			ENetPacket* packet3 = enet_packet_create(p3.data,
				p3.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(peer, 0, packet3);
			delete p3.data;
			if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
				if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
					((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
				}
			}
			if (((PlayerInfo*)(peer->data))->level >= 100) {
				GamePacket p2ww = packetEnd(appendString(appendString(createPacket(), "OnCountryState"), ((PlayerInfo*)(peer->data))->country + "|showGuild"));
				memcpy(p2ww.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
				ENetPacket* packet2ww = enet_packet_create(p2ww.data,
					p2ww.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(currentPeer, 0, packet2ww);
				delete p2ww.data;
				GamePacket p2wwee = packetEnd(appendString(appendString(createPacket(), "OnCountryState"), ((PlayerInfo*)(currentPeer->data))->country + "|showGuild"));
				memcpy(p2wwee.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
				ENetPacket* packet2wwee = enet_packet_create(p2wwee.data,
					p2wwee.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(peer, 0, packet2wwee);
				delete p2wwee.data;
			}
			else {
				GamePacket p2ww = packetEnd(appendString(appendString(createPacket(), "OnCountryState"), ((PlayerInfo*)(peer->data))->country + "|showGuild"));
				memcpy(p2ww.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
				ENetPacket* packet2ww = enet_packet_create(p2ww.data,
					p2ww.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(currentPeer, 0, packet2ww);
				delete p2ww.data;
				GamePacket p2wwee = packetEnd(appendString(appendString(createPacket(), "OnCountryState"), ((PlayerInfo*)(currentPeer->data))->country + "|showGuild"));
				memcpy(p2wwee.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
				ENetPacket* packet2wwee = enet_packet_create(p2wwee.data,
					p2wwee.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(peer, 0, packet2wwee);
				delete p2wwee.data;
			}

			int flag1 = (65536 * ((PlayerInfo*)(peer->data))->guildBg) + ((PlayerInfo*)(peer->data))->guildFg;
			if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(currentPeer->data))->guildLeader) {
				GamePacket p2gg = packetEnd(appendIntx(appendIntx(appendIntx(appendIntx(appendString(createPacket(), "OnGuildDataChanged"), 41179607), 41179607), flag1), 0));

				memcpy(p2gg.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
				ENetPacket* packet2gg = enet_packet_create(p2gg.data,
					p2gg.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(currentPeer, 0, packet2gg);
				delete p2gg.data;
				int flag2 = (65536 * ((PlayerInfo*)(currentPeer->data))->guildBg) + ((PlayerInfo*)(currentPeer->data))->guildFg;
				GamePacket p2xd = packetEnd(appendIntx(appendIntx(appendIntx(appendIntx(appendString(createPacket(), "OnGuildDataChanged"), 41179607), 41179607), flag2), 0));

				memcpy(p2xd.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
				ENetPacket* packet2xd = enet_packet_create(p2xd.data,
					p2xd.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(peer, 0, packet2xd);
				delete p2xd.data;
			}
			else {
				GamePacket p2gg = packetEnd(appendIntx(appendIntx(appendIntx(appendIntx(appendString(createPacket(), "OnGuildDataChanged"), 41179607), 41179607), flag1), 0));

				memcpy(p2gg.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
				ENetPacket* packet2gg = enet_packet_create(p2gg.data,
					p2gg.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(currentPeer, 0, packet2gg);
				delete p2gg.data;
				int flag2 = (65536 * ((PlayerInfo*)(currentPeer->data))->guildBg) + ((PlayerInfo*)(currentPeer->data))->guildFg;
				GamePacket p2xd = packetEnd(appendIntx(appendIntx(appendIntx(appendIntx(appendString(createPacket(), "OnGuildDataChanged"), 41179607), 41179607), flag2), 0));

				memcpy(p2xd.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
				ENetPacket* packet2xd = enet_packet_create(p2xd.data,
					p2xd.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(peer, 0, packet2xd);
				delete p2xd.data;
			}
		}

	}
}

int getPlayersCountInWorld(string name)
{
	int count = 0;
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (((PlayerInfo*)(currentPeer->data))->isinv == false)
		{
			if (((PlayerInfo*)(currentPeer->data))->currentWorld == name)
				count++;
		}
	}
	return count;
}







void saveLevel(ENetPeer* peer)
{
	if (((PlayerInfo*)(peer->data))->haveGrowId) {

		PlayerInfo* p = ((PlayerInfo*)(peer->data));

		string username = PlayerDB::getProperName(p->rawName);



		std::ofstream o("players/" + username + ".json");
		if (!o.is_open()) {
			cout << GetLastError() << endl;
			_getch();
		}
		json j;

		int clothback = p->cloth_back;
		int clothhand = p->cloth_hand;
		int clothface = p->cloth_face;
		int clothhair = p->cloth_hair;
		int clothfeet = p->cloth_feet;
		int clothpants = p->cloth_pants;
		int clothneck = p->cloth_necklace;
		int clothshirt = p->cloth_shirt;
		int clothmask = p->cloth_mask;
		int clothances = p->cloth_ances;

		string password = ((PlayerInfo*)(peer->data))->tankIDPass;
		j["username"] = username;
		j["password"] = hashPassword(password);
		j["adminLevel"] = ((PlayerInfo*)(peer->data))->adminLevel;
		j["ClothBack"] = clothback;
		j["ClothHand"] = clothhand;
		j["ClothFace"] = clothface;
		j["ClothShirt"] = clothshirt;
		j["ClothPants"] = clothpants;
		j["ClothNeck"] = clothneck;
		j["ClothHair"] = clothhair;
		j["ClothFeet"] = clothfeet;
		j["ClothMask"] = clothmask;
		j["ClothAnces"] = clothances;


		int ban = 0;
		j["isBanned"] = ban;
		int ip;
		j["ipID"] = peer->address.host;
		j["effect"] = ((PlayerInfo*)(peer->data))->effect;


		//j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;
		j["ip"] = ((PlayerInfo*)(peer->data))->charIP;
		j["boughtLGW"] = ((PlayerInfo*)(peer->data))->boughtLGW;
		j["boughtLGK"] = ((PlayerInfo*)(peer->data))->boughtLGK;
		j["boughtLGD"] = ((PlayerInfo*)(peer->data))->boughtLGD;
		j["boughtLGB"] = ((PlayerInfo*)(peer->data))->boughtLGB;
		j["boughtLKW"] = ((PlayerInfo*)(peer->data))->boughtLKW;
		j["boughtCWD"] = ((PlayerInfo*)(peer->data))->boughtCWD;
		j["boughtRFS"] = ((PlayerInfo*)(peer->data))->boughtRFS;
		j["boughtCDG"] = ((PlayerInfo*)(peer->data))->boughtCDG;
		j["boughtLTIT"] = ((PlayerInfo*)(peer->data))->boughtLTIT;
		j["boughtLWHIP"] = ((PlayerInfo*)(peer->data))->boughtLWHIP;
		j["boughtPHOENIX"] = ((PlayerInfo*)(peer->data))->boughtPHOENIX;
		j["boughtDAV"] = ((PlayerInfo*)(peer->data))->boughtDAV;
		j["boughtZEUS"] = ((PlayerInfo*)(peer->data))->boughtZEUS;
		j["boughtNDEV"] = ((PlayerInfo*)(peer->data))->boughtNDEV;
		j["boughtTXMOM"] = ((PlayerInfo*)(peer->data))->boughtTXMOM;
		j["boughtFLASHAXE"] = ((PlayerInfo*)(peer->data))->boughtFLASHAXE;
		j["boughtVIOLET"] = ((PlayerInfo*)(peer->data))->boughtVIOLET;
		j["boughtCHIMERA"] = ((PlayerInfo*)(peer->data))->boughtCHIMERA;
		j["boughtBRAIN"] = ((PlayerInfo*)(peer->data))->boughtBRAIN;
		j["boughtCCROWN"] = ((PlayerInfo*)(peer->data))->boughtCCROWN;
		j["boughtGBOW"] = ((PlayerInfo*)(peer->data))->boughtGBOW;
		j["boughtGANGEL"] = ((PlayerInfo*)(peer->data))->boughtGANGEL;
		j["boughtGROB"] = ((PlayerInfo*)(peer->data))->boughtGROB;
		j["boughtHSCYTHE"] = ((PlayerInfo*)(peer->data))->boughtHSCYTHE;
		j["boughtGDIAPER"] = ((PlayerInfo*)(peer->data))->boughtGDIAPER;
		j["boughtGTANGEL"] = ((PlayerInfo*)(peer->data))->boughtGTANGEL;
		j["boughtGNECK"] = ((PlayerInfo*)(peer->data))->boughtGNECK;
		j["boughtGGLASS"] = ((PlayerInfo*)(peer->data))->boughtGGLASS;
		j["boughtGPEGASUS"] = ((PlayerInfo*)(peer->data))->boughtGPEGASUS;
		j["boughtGBUG"] = ((PlayerInfo*)(peer->data))->boughtGBUG;
		j["boughtWAR"] = ((PlayerInfo*)(peer->data))->boughtWAR;
		j["boughtRAY"] = ((PlayerInfo*)(peer->data))->boughtRAY;
		j["boughtAAC"] = ((PlayerInfo*)(peer->data))->boughtAAC;
		j["boughtSPD"] = ((PlayerInfo*)(peer->data))->boughtSPD;
		j["boughtTK"] = ((PlayerInfo*)(peer->data))->boughtTK;
		j["aap"] = ((PlayerInfo*)(peer->data))->isAAP;
		j["receivedwarns"] = ((PlayerInfo*)(peer->data))->warns;
		j["receivedbans"] = ((PlayerInfo*)(peer->data))->bans;
		j["guild"] = ((PlayerInfo*)(peer->data))->guild;
		j["joinguild"] = ((PlayerInfo*)(peer->data))->joinguild;
		j["level"] = ((PlayerInfo*)(peer->data))->level;
		j["xp"] = ((PlayerInfo*)(peer->data))->xp;
		j["rubble"] = ((PlayerInfo*)(peer->data))->rubble;
		j["rubblexp"] = ((PlayerInfo*)(peer->data))->rubblexp;
		// Mining update starts here
		j["amber"] = ((PlayerInfo*)(peer->data))->amber;
		j["amberxp"] = ((PlayerInfo*)(peer->data))->amberxp;

		j["opal"] = ((PlayerInfo*)(peer->data))->opal;
		j["opalxp"] = ((PlayerInfo*)(peer->data))->opalxp;

		j["gold"] = ((PlayerInfo*)(peer->data))->gold;
		j["goldxp"] = ((PlayerInfo*)(peer->data))->goldxp;

		j["sapphire"] = ((PlayerInfo*)(peer->data))->sapphire;
		j["sapphirexp"] = ((PlayerInfo*)(peer->data))->sapphirexp;

		j["diamond"] = ((PlayerInfo*)(peer->data))->diamond;
		j["diamondxp"] = ((PlayerInfo*)(peer->data))->diamondxp;

		j["emerald"] = ((PlayerInfo*)(peer->data))->emerald;
		j["emeraldxp"] = ((PlayerInfo*)(peer->data))->emeraldxp;
		// Mining update ends here
		j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned;

		o << j << std::endl;
	}
}

void updateAllClothes(ENetPeer* peer)
{
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{
			GamePacket p3 = packetEnd(appendFloat(appendIntx(appendFloat(appendFloat(appendFloat(appendString(createPacket(), "OnSetClothing"), ((PlayerInfo*)(peer->data))->cloth_hair, ((PlayerInfo*)(peer->data))->cloth_shirt, ((PlayerInfo*)(peer->data))->cloth_pants), ((PlayerInfo*)(peer->data))->cloth_feet, ((PlayerInfo*)(peer->data))->cloth_face, ((PlayerInfo*)(peer->data))->cloth_hand), ((PlayerInfo*)(peer->data))->cloth_back, ((PlayerInfo*)(peer->data))->cloth_mask, ((PlayerInfo*)(peer->data))->cloth_necklace), ((PlayerInfo*)(peer->data))->skinColor), ((PlayerInfo*)(peer->data))->cloth_ances, 0.0f, 0.0f));
			memcpy(p3.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
			ENetPacket* packet3 = enet_packet_create(p3.data,
				p3.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(currentPeer, 0, packet3);
			delete p3.data;
			//enet_host_flush(server);
			GamePacket p4 = packetEnd(appendFloat(appendIntx(appendFloat(appendFloat(appendFloat(appendString(createPacket(), "OnSetClothing"), ((PlayerInfo*)(currentPeer->data))->cloth_hair, ((PlayerInfo*)(currentPeer->data))->cloth_shirt, ((PlayerInfo*)(currentPeer->data))->cloth_pants), ((PlayerInfo*)(currentPeer->data))->cloth_feet, ((PlayerInfo*)(currentPeer->data))->cloth_face, ((PlayerInfo*)(currentPeer->data))->cloth_hand), ((PlayerInfo*)(currentPeer->data))->cloth_back, ((PlayerInfo*)(currentPeer->data))->cloth_mask, ((PlayerInfo*)(currentPeer->data))->cloth_necklace), ((PlayerInfo*)(currentPeer->data))->skinColor), ((PlayerInfo*)(currentPeer->data))->cloth_ances, 0.0f, 0.0f));
			memcpy(p4.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4); // ffloor
			ENetPacket* packet4 = enet_packet_create(p4.data,
				p4.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet4);
			delete p4.data;
			//enet_host_flush(server);
		}
	}
}

void sendClothes(ENetPeer* peer)
{
	ENetPeer* currentPeer;
	GamePacket p3 = packetEnd(appendFloat(appendIntx(appendFloat(appendFloat(appendFloat(appendString(createPacket(), "OnSetClothing"), ((PlayerInfo*)(peer->data))->cloth_hair, ((PlayerInfo*)(peer->data))->cloth_shirt, ((PlayerInfo*)(peer->data))->cloth_pants), ((PlayerInfo*)(peer->data))->cloth_feet, ((PlayerInfo*)(peer->data))->cloth_face, ((PlayerInfo*)(peer->data))->cloth_hand), ((PlayerInfo*)(peer->data))->cloth_back, ((PlayerInfo*)(peer->data))->cloth_mask, ((PlayerInfo*)(peer->data))->cloth_necklace), ((PlayerInfo*)(peer->data))->skinColor), ((PlayerInfo*)(peer->data))->cloth_ances, 0.0f, 0.0f));
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{

			memcpy(p3.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
			ENetPacket* packet3 = enet_packet_create(p3.data,
				p3.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(currentPeer, 0, packet3);
		}

	}
	if (((PlayerInfo*)(peer->data))->haveGrowId) {
		std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

		PlayerInfo* p = ((PlayerInfo*)(peer->data));

		string username = PlayerDB::getProperName(p->rawName);



		if (ifff.fail()) {
			ifff.close();


		}
		if (ifff.is_open()) {
		}
		json j;
		ifff >> j; //load

		int clothback = p->cloth_back;
		int clothhand = p->cloth_hand;
		int clothface = p->cloth_face;
		int clothhair = p->cloth_hair;
		int clothfeet = p->cloth_feet;
		int clothpants = p->cloth_pants;
		int clothneck = p->cloth_necklace;
		int clothshirt = p->cloth_shirt;
		int clothmask = p->cloth_mask;
		int clothances = p->cloth_ances;

		j["ClothBack"] = clothback;
		j["ClothHand"] = clothhand;
		j["ClothFace"] = clothface;
		j["ClothShirt"] = clothshirt;
		j["ClothPants"] = clothpants;
		j["ClothNeck"] = clothneck;
		j["ClothHair"] = clothhair;
		j["ClothFeet"] = clothfeet;
		j["ClothMask"] = clothmask;
		j["ClothAnces"] = clothances;


		//j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;


		std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
		if (!o.is_open()) {
			cout << GetLastError() << endl;
			_getch();
		}

		o << j << std::endl;
	}
	delete p3.data;
}
void sendInvClothes(ENetPeer* peer)
{
	int noSaveInvis = 0;

	ENetPeer* currentPeer;
	GamePacket p3 = packetEnd(appendFloat(appendIntx(appendFloat(appendFloat(appendFloat(appendString(createPacket(), "OnSetClothing"), ((PlayerInfo*)(peer->data))->cloth_hair, ((PlayerInfo*)(peer->data))->cloth_shirt, ((PlayerInfo*)(peer->data))->cloth_pants), ((PlayerInfo*)(peer->data))->cloth_feet, ((PlayerInfo*)(peer->data))->cloth_face, ((PlayerInfo*)(peer->data))->cloth_hand), ((PlayerInfo*)(peer->data))->cloth_back, ((PlayerInfo*)(peer->data))->cloth_mask, ((PlayerInfo*)(peer->data))->cloth_necklace), ((PlayerInfo*)(peer->data))->skinColor), ((PlayerInfo*)(peer->data))->cloth_ances, 0.0f, 0.0f));
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{

			memcpy(p3.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
			ENetPacket* packet3 = enet_packet_create(p3.data,
				p3.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(currentPeer, 0, packet3);
		}

	}

	if (((PlayerInfo*)(peer->data))->haveGrowId && noSaveInvis == 1) {

		PlayerInfo* p = ((PlayerInfo*)(peer->data));

		string username = PlayerDB::getProperName(p->rawName);



		std::ofstream o("players/" + username + ".json");
		if (!o.is_open()) {
			cout << GetLastError() << endl;
			_getch();
		}
		json j;

		int clothback = p->cloth_back;
		int clothhand = p->cloth_hand;
		int clothface = p->cloth_face;
		int clothhair = p->cloth_hair;
		int clothfeet = p->cloth_feet;
		int clothpants = p->cloth_pants;
		int clothneck = p->cloth_necklace;
		int clothshirt = p->cloth_shirt;
		int clothmask = p->cloth_mask;
		int clothances = p->cloth_ances;
		string guild = p->guild;
		bool joinguild = p->joinguild;
		int level = p->level;
		int xp = p->xp;

		string password = ((PlayerInfo*)(peer->data))->tankIDPass;
		j["username"] = username;
		j["password"] = hashPassword(password);
		j["adminLevel"] = ((PlayerInfo*)(peer->data))->adminLevel;
		j["ClothBack"] = clothback;
		j["ClothHand"] = clothhand;
		j["ClothFace"] = clothface;
		j["ClothShirt"] = clothshirt;
		j["ClothPants"] = clothpants;
		j["ClothNeck"] = clothneck;
		j["ClothHair"] = clothhair;
		j["ClothFeet"] = clothfeet;
		j["ClothMask"] = clothmask;
		j["ClothAnces"] = clothances;

		int ban = 0;
		j["isBanned"] = ban;
		int ip;
		j["ipID"] = peer->address.host;
		j["effect"] = ((PlayerInfo*)(peer->data))->effect;

		//j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;
		j["ip"] = ((PlayerInfo*)(peer->data))->charIP;
		j["boughtLGW"] = ((PlayerInfo*)(peer->data))->boughtLGW;
		j["boughtLGK"] = ((PlayerInfo*)(peer->data))->boughtLGK;
		j["boughtLGD"] = ((PlayerInfo*)(peer->data))->boughtLGD;
		j["boughtLGB"] = ((PlayerInfo*)(peer->data))->boughtLGB;
		j["boughtLKW"] = ((PlayerInfo*)(peer->data))->boughtLKW;
		j["boughtCWD"] = ((PlayerInfo*)(peer->data))->boughtCWD;
		j["boughtRFS"] = ((PlayerInfo*)(peer->data))->boughtRFS;
		j["boughtCDG"] = ((PlayerInfo*)(peer->data))->boughtCDG;
		j["boughtLTIT"] = ((PlayerInfo*)(peer->data))->boughtLTIT;
		j["boughtLWHIP"] = ((PlayerInfo*)(peer->data))->boughtLWHIP;
		j["boughtPHOENIX"] = ((PlayerInfo*)(peer->data))->boughtPHOENIX;
		j["boughtDAV"] = ((PlayerInfo*)(peer->data))->boughtDAV;
		j["boughtZEUS"] = ((PlayerInfo*)(peer->data))->boughtZEUS;
		j["boughtNDEV"] = ((PlayerInfo*)(peer->data))->boughtNDEV;
		j["boughtTXMOM"] = ((PlayerInfo*)(peer->data))->boughtTXMOM;
		j["boughtFLASHAXE"] = ((PlayerInfo*)(peer->data))->boughtFLASHAXE;
		j["boughtVIOLET"] = ((PlayerInfo*)(peer->data))->boughtVIOLET;
		j["boughtCHIMERA"] = ((PlayerInfo*)(peer->data))->boughtCHIMERA;
		j["boughtBRAIN"] = ((PlayerInfo*)(peer->data))->boughtBRAIN;
		j["boughtCCROWN"] = ((PlayerInfo*)(peer->data))->boughtCCROWN;
		j["boughtGBOW"] = ((PlayerInfo*)(peer->data))->boughtGBOW;
		j["boughtGANGEL"] = ((PlayerInfo*)(peer->data))->boughtGANGEL;
		j["boughtGROB"] = ((PlayerInfo*)(peer->data))->boughtGROB;
		j["boughtHSCYTHE"] = ((PlayerInfo*)(peer->data))->boughtHSCYTHE;
		j["boughtGDIAPER"] = ((PlayerInfo*)(peer->data))->boughtGDIAPER;
		j["boughtGTANGEL"] = ((PlayerInfo*)(peer->data))->boughtGTANGEL;
		j["boughtGNECK"] = ((PlayerInfo*)(peer->data))->boughtGNECK;
		j["boughtGGLASS"] = ((PlayerInfo*)(peer->data))->boughtGGLASS;
		j["boughtGPEGASUS"] = ((PlayerInfo*)(peer->data))->boughtGPEGASUS;
		j["boughtGBUG"] = ((PlayerInfo*)(peer->data))->boughtGBUG;
		j["boughtWAR"] = ((PlayerInfo*)(peer->data))->boughtWAR;
		j["boughtRAY"] = ((PlayerInfo*)(peer->data))->boughtRAY;
		j["boughtAAC"] = ((PlayerInfo*)(peer->data))->boughtAAC;
		j["boughtSPD"] = ((PlayerInfo*)(peer->data))->boughtSPD;
		j["boughtTK"] = ((PlayerInfo*)(peer->data))->boughtTK;
		j["aap"] = ((PlayerInfo*)(peer->data))->isAAP;
		j["receivedwarns"] = ((PlayerInfo*)(peer->data))->warns;
		j["receivedbans"] = ((PlayerInfo*)(peer->data))->bans;
		j["guild"] = guild;
		j["joinguild"] = joinguild;
		j["level"] = level;
		j["xp"] = xp;
		j["rubble"] = ((PlayerInfo*)(peer->data))->rubble;
		j["rubblexp"] = ((PlayerInfo*)(peer->data))->rubblexp;
		// Mining update starts here
		j["amber"] = ((PlayerInfo*)(peer->data))->amber;
		j["amberxp"] = ((PlayerInfo*)(peer->data))->amberxp;

		j["opal"] = ((PlayerInfo*)(peer->data))->opal;
		j["opalxp"] = ((PlayerInfo*)(peer->data))->opalxp;

		j["gold"] = ((PlayerInfo*)(peer->data))->gold;
		j["goldxp"] = ((PlayerInfo*)(peer->data))->goldxp;

		j["sapphire"] = ((PlayerInfo*)(peer->data))->sapphire;
		j["sapphirexp"] = ((PlayerInfo*)(peer->data))->sapphirexp;

		j["diamond"] = ((PlayerInfo*)(peer->data))->diamond;
		j["diamondxp"] = ((PlayerInfo*)(peer->data))->diamondxp;

		j["emerald"] = ((PlayerInfo*)(peer->data))->emerald;
		j["emeraldxp"] = ((PlayerInfo*)(peer->data))->emeraldxp;
		// Mining update ends here
		j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned;


		o << j << std::endl;
	}

	//enet_host_flush(server);
	delete p3.data;
}
void SendPacketRaw2(int a1, void *packetData, size_t packetDataSize, void *a4, ENetPeer* peer, int packetFlag)
{
	ENetPacket *p;

	if (peer) // check if we have it setup
	{
		if (a1 == 4 && *((BYTE *)packetData + 12) & 8)
		{
			p = enet_packet_create(0, packetDataSize + *((DWORD *)packetData + 13) + 5, packetFlag);
			int four = 4;
			memcpy(p->data, &four, 4);
			memcpy((char *)p->data + 4, packetData, packetDataSize);
			memcpy((char *)p->data + packetDataSize + 4, a4, *((DWORD *)packetData + 13));
			enet_peer_send(peer, 0, p);

		}
		else
		{
			if (a1 == 192) {
				a1 = 4;
				p = enet_packet_create(0, packetDataSize + 5, packetFlag);
				memcpy(p->data, &a1, 4);
				memcpy((char *)p->data + 4, packetData, packetDataSize);
				enet_peer_send(peer, 0, p);


			}
			else {
				p = enet_packet_create(0, packetDataSize + 5, packetFlag);
				memcpy(p->data, &a1, 4);
				memcpy((char *)p->data + 4, packetData, packetDataSize);
				enet_peer_send(peer, 0, p);


			}
		}
	}

	delete packetData;
}
void sendCollect(ENetPeer* peer, int netID, int x, int y, int uid, int item, int count)
{

	if (uid >= 9999) return;
	if (uid < 0) return;
	ENetPeer * currentPeer;
	string name = "";
	GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Collect worked!"));
	ENetPacket* packet2 = enet_packet_create(p2.data,
		p2.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet2);
	delete p2.data;
	cout << std::hex << netID;
	bool success = true;
	SaveShopsItemMoreTimes(item, count, peer, success);


	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{

		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			PlayerMoving data;
			data.packetType = 14;
			data.x = x;
			data.y = y;
			data.netID = netID;
			data.plantingTree = uid;
			SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

		}
	}
}
/*struct TileExtra {
	int packetType;
	int characterState;
	float objectSpeedX;
	int punchX;
	int punchY;
	int charStat;
	int blockid;
	int visual;
	int signs;
	int backgroundid;
	int displayblock;
	int time;
	int netID;
	int weatherspeed;
	int bpm;
	//int unused1;
	//int unused2;
	//int unused3;
	//int bpm;
};
void updateStuffWeather(ENetPeer* peer, int x, int y, int tile, int bg, int gravity, bool isInverted, bool isSpinning) {


	ENetPeer * currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {




			//cout << "bruh" << endl;
			TileExtra data;
			data.packetType = 0x5;
			data.characterState = 8;
			data.punchX = x;
			data.punchY = y;
			data.charStat = 18; // 13
			data.blockid = 3832;
			data.backgroundid = bg; // 2946
								   //data.netID = ((PlayerInfo)(peer->data))->netID;
								   //dataxx.backgroundid = 65536;
			data.visual = 0; //0x00210000
										//world->items[x + (yworld->width)].displayblock = tile;
			int n = tile;
			string hex = "";
			{
				std::stringstream ss;
				ss << std::hex << n; // int decimal_value
				std::string res(ss.str());
				hex = res + "31";
			}
			int gravi = gravity;
			string hexg = "";
			{
				int temp = gravi;
				if (gravi < 0) temp = -gravi;
				std::stringstream ss;
				ss << std::hex << temp; // int decimal_value
				std::string res(ss.str());
				hexg = res + "00";
			}
			int xx = 0;
			std::stringstream ss;
			ss << std::hex << hex;
			if (!ss.fail()) {
				ss >> xx;
			}
			//cout << xx << endl;
			data.displayblock = xx;
			int xxs = 0;
			std::stringstream sss;
			sss << std::hex << hexg;
			if (!sss.fail()) {
				sss >> xxs;
			}
			if (gravi < 0) xxs = -xxs;
			//cout << to_string(xxs) << endl;
			if (gravi < 0) {
				SendPacketRaw2(192, packStuffVisual(&data, 0x03FFFFFF, xxs), 102, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
			}
			else
			{
				SendPacketRaw2(192, packStuffVisual(&data, 0x02000000, xxs), 102, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
			}
			GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), 29));
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(currentPeer, 0, packet2);
			delete p2.data;
		}
	}
}*/

void sendPData(ENetPeer* peer, PlayerMoving* data)
{
	ENetPeer* currentPeer;


	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (peer != currentPeer)
		{
			if (isHere(peer, currentPeer))
			{
				data->netID = ((PlayerInfo*)(peer->data))->netID;


				SendPacketRaw(4, packPlayerMoving(data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
			}
		}
	}
}

void sendPlayerLeave(ENetPeer* peer, PlayerInfo* player)
{
	//((PlayerInfo*)(peer->data))->cpX = 3040;
	//((PlayerInfo*)(peer->data))->cpY = 736;
	((PlayerInfo*)(peer->data))->cpY = 0;
	((PlayerInfo*)(peer->data))->cpY = 0;
	((PlayerInfo*)(peer->data))->usedCP = false;
	ENetPeer* currentPeer;
	if (find(((PlayerInfo*)(peer->data))->lastworlds.begin(), ((PlayerInfo*)(peer->data))->lastworlds.end(), player->currentWorld) != ((PlayerInfo*)(peer->data))->lastworlds.end()) {
	}
	else {
		((PlayerInfo*)(peer->data))->lastworlds.push_back(player->currentWorld);
	}

	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnRemove"), "netID|" + std::to_string(player->netID) + "\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
	GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5left, `w" + std::to_string(getPlayersCountInWorld(player->currentWorld) - 1) + "`` `5others here>```w"));
	string name = ((PlayerInfo*)(peer->data))->displayName;
	string text = "action|play_sfx\nfile|audio/door_shut.wav\ndelayMS|0\n";
	BYTE* data = new BYTE[5 + text.length()];
	BYTE zero = 0;
	int type = 3;
	memcpy(data, &type, 4);
	memcpy(data + 4, text.c_str(), text.length());
	memcpy(data + 4 + text.length(), &zero, 1);
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;

		if (isHere(peer, currentPeer)) {
			{

				ENetPacket* packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);

				{

					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet);
					ENetPacket* packet3 = enet_packet_create(data,
						5 + text.length(),
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(currentPeer, 0, packet3);

				}
				if (((PlayerInfo*)(peer->data))->isinv == false)
				{
					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet2);


					GamePacket p4 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5left, `w" + std::to_string(getPlayersCountInWorld(player->currentWorld) - 1) + "`` `5others here>```w"));
					ENetPacket* packet4 = enet_packet_create(p4.data,
						p4.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(currentPeer, 0, packet4);
					delete p4.data;

					//SaveInventoryAfterLeaveWorld(peer);

					/*if ((getPlayersCountInWorld(player->currentWorld) - 1 == 0))
					{
						WorldInfo info = worldDB.get(player->currentWorld);
						SaveWorldAfterExitWorld(info);
					}*/

				}
				//	SaveInventoryAfterLeaveWorld(peer);
			}
			{

			}
		}
	}
	delete p.data;
	delete p2.data;
}
void sendWizard(ENetPeer* peer, int x, int y)
{
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`9The Legendary Wizard!`|left|1790|\nadd_label|small|`oGreetings, traveler! I am the Legendary Wizard. Should you wish to embark on a Legendary Quest, simply choose one below.``|left|4|\n\nadd_spacer|small|\nadd_button|legendname|`9Quest For Honor``|0|0|\nadd_button|legenddragon|`9Quest For Fire``|0|0|\nadd_button|legendbot|`9Quest Of Steel``|0|0|\nadd_button|legendwing|`9Quest Of The Heavens``|0|0|\nadd_button|legendkatana|`9Quest For The Blade``|0|0|\nadd_button|legendwhip|`9Quest For Candour``|0|0|\nadd_spacer|small|\nadd_quick_exit|\nend_dialog|noty|No Thanks||gazette||"));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);

	//enet_host_flush(server);
	delete p.data;
}
void showWrong(ENetPeer* peer, string listFull, string itemFind) {
	GamePacket fff = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`9Find item: " + itemFind + "``|left|3146|\n" + listFull + "add_textbox|Enter a word below to find the item|\nadd_text_input|item|Item Name||30|\nend_dialog|findid|Cancel|Find the item!|\n"));
	ENetPacket* packetd = enet_packet_create(fff.data,
		fff.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packetd);

	//enet_host_flush(server);
	delete fff.data;
}

void sendSlotmachine(ENetPeer* peer, int x, int y)
{
	ENetPeer* currentPeer;
	int val = rand() % 100;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{
			string name = ((PlayerInfo*)(peer->data))->displayName;

			string lose = "`7[`w" + name + " `4loses at slots.`7]";
			string win = "`7[`w" + name + " `2wins at slots!`7]";

			if (val > 80) {
				GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), win), 0));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packet2);
				delete p2.data;
				GamePacket p2s = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), win));
				ENetPacket* packet2s = enet_packet_create(p2s.data,
					p2s.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packet2s);
				delete p2s.data;

			}
			else {
				GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), lose), 0));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packet2);

				GamePacket p2s = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), lose));
				ENetPacket* packet2s = enet_packet_create(p2s.data,
					p2s.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packet2s);
				delete p2.data;
				delete p2s.data;
			}
		}


		//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
	}
}

void sendRoulete(ENetPeer* peer, int x, int y)
{
	ENetPeer* currentPeer;
	int val = rand() % 37;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{
			GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`w[" + ((PlayerInfo*)(peer->data))->displayName + " `wspun the wheel and got `6" + std::to_string(val) + "`w!]"), 0));
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(currentPeer, 0, packet2);
			delete p2.data;
		}



		//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
	}
}

void updateDoor(ENetPeer* peer, int foreground, int x, int y, string text)
{
	PlayerMoving sign;
	sign.packetType = 0x3;
	sign.characterState = 0x0;
	sign.x = x;
	sign.y = y;
	sign.punchX = x;
	sign.punchY = y;
	sign.XSpeed = 0;
	sign.YSpeed = 0;
	sign.netID = -1;
	sign.plantingTree = foreground;
	SendPacketRaw(4, packPlayerMoving(&sign), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
	int hmm = 8;
	int text_len = text.length();
	int lol = 0;
	int wut = 5;
	int yeh = hmm + 3 + 1;
	int idk = 15 + text_len;
	int is_locked = 0;
	int bubble_type = 1;
	int ok = 52 + idk;
	int kek = ok + 4;
	int yup = ok - 8 - idk;
	int four = 4;
	int magic = 56;
	int wew = ok + 5 + 4;
	int wow = magic + 4 + 5;

	BYTE* data = new BYTE[kek];
	ENetPacket* p = enet_packet_create(0, wew, ENET_PACKET_FLAG_RELIABLE);
	for (int i = 0; i < kek; i++) data[i] = 0;
	memcpy(data, &wut, four); //4
	memcpy(data + yeh, &hmm, four); //8
	memcpy(data + yup, &x, 4); //12
	memcpy(data + yup + 4, &y, 4); //16
	memcpy(data + 4 + yup + 4, &idk, four); //20
	memcpy(data + magic, &foreground, 2); //22
	memcpy(data + four + magic, &lol, four); //26
	memcpy(data + magic + 4 + four, &bubble_type, 1); //27
	memcpy(data + wow, &text_len, 2); //data + wow = text_len, pos 29
	memcpy(data + 2 + wow, text.c_str(), text_len); //data + text_len_len + text_len_offs = text, pos 94
	memcpy(data + ok, &is_locked, four); //98
	memcpy(p->data, &four, four); //4
	memcpy((char*)p->data + four, data, kek); //kek = data_len
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			enet_peer_send(currentPeer, 0, p);
		}
	}
	delete data;
}
void updateSign(ENetPeer* peer, int foreground, int x, int y, string text, int background)
{
	PlayerMoving sign;
	sign.packetType = 0x3;
	sign.characterState = 0x0;
	sign.x = x;
	sign.y = y;
	sign.punchX = x;
	sign.punchY = y;
	sign.XSpeed = 0;
	sign.YSpeed = 0;
	sign.netID = -1;
	sign.plantingTree = foreground;
	SendPacketRaw(4, packPlayerMoving(&sign), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
	int hmm = 8, wot = text.length(), lol = 0, wut = 5;
	int yeh = hmm + 3 + 1, idk = 15 + wot, lmao = -1, yey = 2; //idk = text_len + 15, wut = type(?), wot = text_len, yey = len of text_len
	int ok = 52 + idk;
	int kek = ok + 4, yup = ok - 8 - idk;
	int thonk = 4, magic = 56, wew = ok + 5 + 4;
	int wow = magic + 4 + 5;
	BYTE* data = new BYTE[kek];
	ENetPacket* p = enet_packet_create(0, wew, ENET_PACKET_FLAG_RELIABLE);
	for (int i = 0; i < kek; i++) data[i] = 0;
	memcpy(data, &wut, thonk);
	memcpy(data + yeh, &hmm, thonk); //read discord
	memcpy(data + yup, &x, 4);
	memcpy(data + yup + 4, &y, 4);
	memcpy(data + 4 + yup + 4, &idk, thonk);
	memcpy(data + magic, &foreground, yey);
	memcpy(data + magic + 2, &background, yey); //p100 fix by the one and only lapada
	memcpy(data + thonk + magic, &lol, thonk);
	memcpy(data + magic + 4 + thonk, &yey, 1);
	memcpy(data + wow, &wot, yey); //data + wow = text_len
	memcpy(data + yey + wow, text.c_str(), wot); //data + text_len_len + text_len_offs = text
	memcpy(data + ok, &lmao, thonk); //end ?
	memcpy(p->data, &thonk, thonk);
	memcpy((char*)p->data + thonk, data, kek); //kek = data_len
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			enet_peer_send(currentPeer, 0, p);
		}
	}
	delete data;
}

void doorlocked(ENetPeer* peer, int foreground, int x, int y, string text)
{
	PlayerMoving sign;
	sign.packetType = 0x3;
	sign.characterState = 0x0;
	sign.x = x;
	sign.y = y;
	sign.punchX = x;
	sign.punchY = y;
	sign.XSpeed = 0;
	sign.YSpeed = 0;
	sign.netID = -1;
	sign.plantingTree = foreground;
	SendPacketRaw(4, packPlayerMoving(&sign), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
	int hmm = 8;
	int text_len = text.length();
	int lol = 0;
	int wut = 5;
	int yeh = hmm + 3 + 1;
	int idk = 15 + text_len;
	int is_locked = -1;
	int bubble_type = 1;
	int ok = 52 + idk;
	int kek = ok + 4;
	int yup = ok - 8 - idk;
	int four = 4;
	int magic = 56;
	int wew = ok + 5 + 4;
	int wow = magic + 4 + 5;

	BYTE* data = new BYTE[kek];
	ENetPacket* p = enet_packet_create(0, wew, ENET_PACKET_FLAG_RELIABLE);
	for (int i = 0; i < kek; i++) data[i] = 0;
	memcpy(data, &wut, four); //4
	memcpy(data + yeh, &hmm, four); //8
	memcpy(data + yup, &x, 4); //12
	memcpy(data + yup + 4, &y, 4); //16
	memcpy(data + 4 + yup + 4, &idk, four); //20
	memcpy(data + magic, &foreground, 2); //22
	memcpy(data + four + magic, &lol, four); //26
	memcpy(data + magic + 4 + four, &bubble_type, 1); //27
	memcpy(data + wow, &text_len, 2); //data + wow = text_len, pos 29
	memcpy(data + 2 + wow, text.c_str(), text_len); //data + text_len_len + text_len_offs = text, pos 94
	memcpy(data + ok, &is_locked, four); //98
	memcpy(p->data, &four, four); //4
	memcpy((char*)p->data + four, data, kek); //kek = data_len
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			enet_peer_send(currentPeer, 0, p);
		}
	}
	delete data;
}


void sendWorld(ENetPeer* peer, WorldInfo* worldInfo)
{

	int zero = 0;
	((PlayerInfo*)(peer->data))->droppeditemcount = 0;
#ifdef TOTAL_LOG

	cout << "Entering a world..." << endl;
#endif
	if (worldproperlock == false)
	{

		((PlayerInfo*)(peer->data))->joinClothesUpdated = false;
		string asdf = "0400000004A7379237BB2509E8E0EC04F8720B050000000000000000FBBB0000010000007D920100FDFDFDFD04000000040000000000000000000000070000000000"; // 0400000004A7379237BB2509E8E0EC04F8720B050000000000000000FBBB0000010000007D920100FDFDFDFD04000000040000000000000000000000080000000000000000000000000000000000000000000000000000000000000048133A0500000000BEBB0000070000000000
		string worldName = worldInfo->name;
		int xSize = worldInfo->width;
		int ySize = worldInfo->height;
		int square = xSize * ySize;
		__int16 nameLen = (__int16)worldName.length();
		int payloadLen = asdf.length() / 2;
		int dataLen = payloadLen + 2 + nameLen + 12 + (square * 8) + 4 + 100;
		int offsetData = dataLen - 100;
		int allocMem = payloadLen + 2 + nameLen + 12 + (square * 8) + 4 + 16000 + 100 + (worldInfo->droppedCount * 20);
		BYTE* data = new BYTE[allocMem];
		memset(data, 0, allocMem);
		for (int i = 0; i < asdf.length(); i += 2)
		{
			char x = ch2n(asdf[i]);
			x = x << 4;
			x += ch2n(asdf[i + 1]);
			memcpy(data + (i / 2), &x, 1);
		}
		__int16 item = 0;
		int smth = 0;
		for (int i = 0; i < square * 8; i += 4) memcpy(data + payloadLen + i + 14 + nameLen, &zero, 4);
		for (int i = 0; i < square * 8; i += 8) memcpy(data + payloadLen + i + 14 + nameLen, &item, 2);
		memcpy(data + payloadLen, &nameLen, 2);
		memcpy(data + payloadLen + 2, worldName.c_str(), nameLen);
		memcpy(data + payloadLen + 2 + nameLen, &xSize, 4);
		memcpy(data + payloadLen + 6 + nameLen, &ySize, 4);
		memcpy(data + payloadLen + 10 + nameLen, &square, 4);
		BYTE* blockPtr = data + payloadLen + 14 + nameLen;

		int sizeofblockstruct = 8;
		for (int i = 0; i < square; i++) {
			if (isMail(worldInfo->items[i].foreground))
			{
				int mailX = i % worldInfo->width;
				int mailY = i / worldInfo->width;
				std::ifstream ifs("mails/" + worldInfo->name + "." + std::to_string(mailX) + "." + std::to_string(mailY) + ".json");
				if (ifs.is_open())
				{
					json j;
					ifs >> j;
					int amount = j["amount"];
					//
					if (amount == 10)
					{
						updateSign(peer, worldInfo->items[i].foreground, i % worldInfo->width, i / worldInfo->width, "`wThere is `210 `wletters in it (`4Full`w)``", worldInfo->items[i].background);
					}
					else
					{
						updateSign(peer, worldInfo->items[i].foreground, i % worldInfo->width, i / worldInfo->width, "`wThere is `2" + std::to_string(amount) + " `wletters in it``", worldInfo->items[i].background);
					}
				}
				else
				{
				}
			}
			if ((worldInfo->items[i].foreground == 0) || (worldInfo->items[i].foreground == 2) || (worldInfo->items[i].foreground == 8) || (worldInfo->items[i].foreground == 100)/* || (worldInfo->items[i].foreground%2)*/)
			{
				memcpy(blockPtr, &worldInfo->items[i].foreground, 2);
				int type = 0x00000000;
				// type 1 = locked
				if (worldInfo->items[i].water)
					type |= 0x04000000;
				if (worldInfo->items[i].glue)
					type |= 0x08000000;
				if (worldInfo->items[i].fire)
					type |= 0x10000000;
				if (worldInfo->items[i].red)
					type |= 0x20000000;
				if (worldInfo->items[i].green)
					type |= 0x40000000;
				if (worldInfo->items[i].blue)
					type |= 0x80000000;

				// int type = 0x04000000; = water
				// int type = 0x08000000 = glue
				// int type = 0x10000000; = fire
				// int type = 0x20000000; = red color
				// int type = 0x40000000; = green color
				// int type = 0x80000000; = blue color
				memcpy(blockPtr + 4, &type, 4);
				/*if (worldInfo->items[i].foreground % 2)
				{
					blockPtr += 6;
				}*/
			}
			else
			{
				memcpy(blockPtr, &zero, 2);
			}
			memcpy(blockPtr + 2, &worldInfo->items[i].background, 2);
			blockPtr += 8;
			/*if (blockPtr - data < allocMem - 2000) // realloc
			{
				int wLen = blockPtr - data;
				BYTE* oldData = data;

				data = new BYTE[allocMem + 16000];
				memcpy(data, oldData, allocMem);
				allocMem += 16000;
				delete oldData;
				blockPtr = data + wLen;

			}*/
		}
		memcpy(data + dataLen - 4, &smth, 4);
		ENetPacket* packet2 = enet_packet_create(data,
			dataLen,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet2);
		//enet_host_flush(server);
		for (int i = 0; i < square; i++) {
			ItemDefinition asdfhjkgask;
			asdfhjkgask = getItemDef(worldInfo->items[i].foreground);
			if ((worldInfo->items[i].foreground == 0) || (worldInfo->items[i].foreground == 2) || (worldInfo->items[i].foreground == 8) || (worldInfo->items[i].foreground == 100))
				; // nothing
			else if (worldInfo->items[i].foreground == 6) updateDoor(peer, worldInfo->items[i].foreground, i % worldInfo->width, i / worldInfo->width, "`wEXIT``");
			else
			{
				PlayerMoving data;
				//data.packetType = 0x14;
				data.packetType = 0x3;

				//data.characterState = 0x924; // animation
				data.characterState = 0x0; // animation
				data.x = i % worldInfo->width;
				data.y = i / worldInfo->height;
				data.punchX = i % worldInfo->width;
				data.punchY = i / worldInfo->width;
				data.XSpeed = 0;
				data.YSpeed = 0;
				data.netID = -1;
				data.plantingTree = worldInfo->items[i].foreground;
				SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);

				if (asdfhjkgask.blockType == BlockTypes::DOOR)
				{
					string labelForDoor = worldInfo->items[i].label == "" ? (worldInfo->items[i].destId == "" ? worldInfo->items[i].destWorld : worldInfo->items[i].destWorld + "...") : worldInfo->items[i].label;
					updateDoor(peer, worldInfo->items[i].foreground, i % worldInfo->width, i / worldInfo->width, labelForDoor);
				}



			}


		}
		((PlayerInfo*)(peer->data))->currentWorld = worldInfo->name;
		for (int i = 0; i < xSize; i++) {
			for (int j = 0; j < ySize; j++) {
				int squaresign = i + (j * 100);

				bool displaysss = std::experimental::filesystem::exists("display/" + worldInfo->name + "X" + std::to_string(squaresign) + ".txt");

				if (displaysss) {


					if (worldInfo->items[squaresign].foreground == 2946)
					{

						int x = squaresign % worldInfo->width;
						int y = squaresign / worldInfo->width;
						//cout << "foundzzzzzzzzzzzzzz!";
						WorldInfo* world = getPlyersWorld(peer);
						ENetPeer* currentPeer;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer)) {
								BlockVisual data;
								data.packetType = 0x5;
								data.characterState = 8;
								data.punchX = x;
								data.punchY = y;
								data.charStat = 13; // 13y
								data.blockid = 2946; // 2946 3794 = display shelf
													 //data.netID = ((PlayerInfo*)(peer->data))->netID;
								data.backgroundid = 6864;
								data.visual = 0x00010000; //0x00210000

								std::ifstream ifs("display/" + worldInfo->name + "X" + std::to_string(squaresign) + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifs)), (std::istreambuf_iterator<char>()));
								int id = atoi(content.c_str());

								world->items[x + (y * world->width)].displayblock = id;

								int n = id;
								string hex = "";
								{
									std::stringstream ss;
									ss << std::hex << n; // int decimal_value
									std::string res(ss.str());

									hex = res + "17";
								}

								if (hex == "2017") {
									continue;
								}


								int xx;
								std::stringstream ss;
								ss << std::hex << hex;
								ss >> xx;
								data.displayblock = xx;


								SendPacketRaw(192, packBlockVisual(&data), 69, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

							}
						}
					}
				}
			}
		}




		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`2Newbie`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`2Newbie`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`2Newbie`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`2Newbie`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}









		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`1Warrior`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`1Warrior`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`1Warrior`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`1Warrior`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}









		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`@Samurai`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`@Samurai`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`@Samurai`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`@Samurai`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}



















		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`bNinja`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`bNinja`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`bNinja`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`bNinja`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}



















		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`eKing`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`eKing`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`eKing`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`eKing`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}

















		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`oVIP`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`oVIP`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`oVIP`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`oVIP`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}



















		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`5Premium`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`5Premium`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`5Premium`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`5Premium`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}






















		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`#MOD`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`#MOD`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`#MOD`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`#MOD`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}


















		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`qAdmin`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`qAdmin`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`qAdmin`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`qAdmin`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}








		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`4YouTuber`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`4YouTuber`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`4YouTuber`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`4YouTuber`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}














		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`4Leader`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`4Leader`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`w[`4Leader`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;
					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`w[`4Leader`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
		}



















		if (((PlayerInfo*)(peer->data))->haveGrowId) {
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						//if (((PlayerInfo*)(peer->data))->rawName == "btw") {
							//((PlayerInfo*)(peer->data))->displayName = "`w[`#MOMO`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
						//}
						if (((PlayerInfo*)(peer->data))->isDr == true) {
							((PlayerInfo*)(peer->data))->displayName = "`w[`9Guardian`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

						}


						else if (((PlayerInfo*)(peer->data))->isCreator == true) {
							((PlayerInfo*)(peer->data))->displayName = "`w[`4Creator`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
						}

						else {
							((PlayerInfo*)(peer->data))->displayName = "`w[`9Guardian`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
						}
					}
				}
			}
		}
		else
		{
			if (((PlayerInfo*)(peer->data))->rawName == worldInfo->owner)
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
					if (((PlayerInfo*)(peer->data))->isDr == true) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

					}
					else {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}
				}
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
					else {
						//if (((PlayerInfo*)(peer->data))->rawName == "btw") {
							//((PlayerInfo*)(peer->data))->displayName = "`w[`#MOMO`w] " + ((PlayerInfo*)(peer->data))->tankIDName;

						//}
						if (((PlayerInfo*)(peer->data))->isDr == true) {
							((PlayerInfo*)(peer->data))->displayName = "`w[`9Guardian`w] `4Dr." + ((PlayerInfo*)(peer->data))->tankIDName;

						}
						else if (((PlayerInfo*)(peer->data))->isCreator == true) {
							((PlayerInfo*)(peer->data))->displayName = "`w[`4Creator`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
						}

						else {
							((PlayerInfo*)(peer->data))->displayName = "`w[`9Guardian`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
						}
					}
				}
			}
		}








		if (((PlayerInfo*)(peer->data))->haveGrowId) {



			PlayerInfo* p = ((PlayerInfo*)(peer->data));
			std::ifstream ifff("players/" + PlayerDB::getProperName(p->rawName) + ".json");
			json j;
			ifff >> j;

			p->currentWorld = worldInfo->name;

			int bac, han, fac, hai, fee, pan, nec, shi, mas, anc, ban, lgk, lgw, lgb, lgd, lkw, cwd, rfs, cdg, join, level, xp, adminlevel, rubble, rubblexp, amber, amberxp, opal, opalxp, gold, goldxp, sapphire, sapphirexp, diamond, diamondxp, emerald, emeraldxp;
			bool joinguild;
			bool ltit, lwhip, phoenix, dav, zeus, ndev, txmom, flashaxe, violet, chimera, brain, ccrown, gbow, gangel, grob, hscythe, gdiaper, gtangel, gneck, gglass, gpegasus, gbug, war, ray, aac, spd, tk;
			bac = j["ClothBack"];
			han = j["ClothHand"];
			fac = j["ClothFace"];
			hai = j["ClothHair"];
			fee = j["ClothFeet"];
			pan = j["ClothPants"];
			nec = j["ClothNeck"];
			shi = j["ClothShirt"];
			mas = j["ClothMask"];
			anc = j["ClothAnces"];
			ban = j["isBanned"];
			lgk = j["boughtLGK"];
			lgw = j["boughtLGW"];
			lgb = j["boughtLGB"];
			lgd = j["boughtLGD"];
			lkw = j["boughtLKW"];
			cwd = j["boughtCWD"];
			rfs = j["boughtRFS"];
			cdg = j["boughtCDG"];
			ltit = j["boughtLTIT"];
			adminlevel = j["adminLevel"];
			vector <string>frns;
			if (j.count("worldsowned") == 1) {
				for (int i = 0; i < j["worldsowned"].size(); i++) {
					frns.push_back(j["worldsowned"][i]);
				}
			}
			else {
				frns = {};
			}
			level = j["level"];
			xp = j["xp"];
			/*vector <string>frns;
			if (j.count("friends") == 1) {
				for (int i = 0; i < j["friends"].size(); i++) {
					frns.push_back(j["friends"][i]);
				}
			}
			else {
				frns = {};
			}*/
			string guild;
			if (j.count("guild") == 1) {
				guild = j["guild"];
			}
			else {
				guild = "";
			}
			if (j.count("joinguild") == 1) {
				join = j["joinguild"];
			}
			else {
				join = false;
			}
			if (j.count("boughtLWHIP") == 1) {
				lwhip = j["boughtLWHIP"];
			}
			else {
				lwhip = false;
			}
			if (j.count("boughtPHOENIX") == 1) {
				phoenix = j["boughtPHOENIX"];
			}
			else {
				phoenix = false;
			}
			if (j.count("boughtDAV") == 1) {
				dav = j["boughtDAV"];
			}
			else {
				dav = false;
			}
			if (j.count("boughtZEUS") == 1) {
				zeus = j["boughtZEUS"];
			}
			else {
				zeus = false;
			}
			if (j.count("boughtNDEV") == 1) {
				ndev = j["boughtNDEV"];
			}
			else {
				ndev = false;
			}
			if (j.count("boughtTXMOM") == 1) {
				txmom = j["boughtTXMOM"];
			}
			else {
				txmom = false;
			}
			if (j.count("boughtFLASHAXE") == 1) {
				flashaxe = j["boughtFLASHAXE"];
			}
			else {
				flashaxe = false;
			}
			if (j.count("boughtVIOLET") == 1) {
				violet = j["boughtVIOLET"];
			}
			else {
				violet = false;
			}
			if (j.count("boughtCHIMERA") == 1) {
				chimera = j["boughtCHIMERA"];
			}
			else {
				chimera = false;
			}
			if (j.count("boughtBRAIN") == 1) {
				brain = j["boughtBRAIN"];
			}
			else {
				brain = false;
			}
			if (j.count("boughtCCROWN") == 1) {
				ccrown = j["boughtCCROWN"];
			}
			else {
				ccrown = false;
			}
			if (j.count("rubble") == 1) {
				rubble = j["rubble"];
			}
			else {
				rubble = 0;
			}
			if (j.count("rubblexp") == 1) {
				rubblexp = j["rubblexp"];
			}
			else {
				rubblexp = 0;
			}
			// Mining update starts here
			if (j.count("amber") == 1) {
				amber = j["amber"];
			}
			else {
				amber = 0;
			}
			if (j.count("amberxp") == 1) {
				amberxp = j["amberxp"];
			}
			else {
				amberxp = 0;
			}


			if (j.count("opal") == 1) {
				opal = j["opal"];
			}
			else {
				opal = 0;
			}
			if (j.count("opalxp") == 1) {
				opalxp = j["opalxp"];
			}
			else {
				opalxp = 0;
			}


			if (j.count("gold") == 1) {
				gold = j["gold"];
			}
			else {
				gold = 0;
			}
			if (j.count("goldxp") == 1) {
				goldxp = j["goldxp"];
			}
			else {
				goldxp = 0;
			}


			if (j.count("sapphire") == 1) {
				sapphire = j["sapphire"];
			}
			else {
				sapphire = 0;
			}
			if (j.count("sapphirexp") == 1) {
				sapphirexp = j["sapphirexp"];
			}
			else {
				sapphirexp = 0;
			}


			if (j.count("diamond") == 1) {
				diamond = j["diamond"];
			}
			else {
				diamond = 0;
			}
			if (j.count("diamondxp") == 1) {
				diamondxp = j["diamondxp"];
			}
			else {
				diamondxp = 0;
			}


			if (j.count("emerald") == 1) {
				emerald = j["emerald"];
			}
			else {
				emerald = 0;
			}
			if (j.count("emeraldxp") == 1) {
				emeraldxp = j["emeraldxp"];
			}
			else {
				emeraldxp = 0;
			}


			// Mining update ends here
			if (j.count("boughtGBOW") == 1) {
				gbow = j["boughtGBOW"];
			}
			else {
				gbow = false;
			}
			if (j.count("boughtGANGEL") == 1) {
				gangel = j["boughtGANGEL"];
			}
			else {
				gangel = false;
			}
			if (j.count("boughtGROB") == 1) {
				grob = j["boughtGROB"];
			}
			else {
				grob = false;
			}
			if (j.count("boughtHSCYTHE") == 1) {
				hscythe = j["boughtHSCYTHE"];
			}
			else {
				hscythe = false;
			}
			if (j.count("boughtGDIAPER") == 1) {
				gdiaper = j["boughtGDIAPER"];
			}
			else {
				gdiaper = false;
			}
			if (j.count("boughtGTANGEL") == 1) {
				gtangel = j["boughtGTANGEL"];
			}
			else {
				gtangel = false;
			}
			if (j.count("boughtGNECK") == 1) {
				gneck = j["boughtGNECK"];
			}
			else {
				gneck = false;
			}
			if (j.count("boughtGGLASS") == 1) {
				gglass = j["boughtGGLASS"];
			}
			else {
				gglass = false;
			}
			if (j.count("boughtGPEGASUS") == 1) {
				gpegasus = j["boughtGPEGASUS"];
			}
			else {
				gpegasus = false;
			}
			if (j.count("boughtGBUG") == 1) {
				gbug = j["boughtGBUG"];
			}
			else {
				gbug = false;
			}
			if (j.count("boughtWAR") == 1) {
				war = j["boughtWAR"];
			}
			else {
				war = false;
			}
			if (j.count("boughtRAY") == 1) {
				ray = j["boughtRAY"];
			}
			else {
				ray = false;
			}
			if (j.count("boughtAAC") == 1) {
				aac = j["boughtAAC"];
			}
			else {
				aac = false;
			}
			if (j.count("boughtSPD") == 1) {
				spd = j["boughtSPD"];
			}
			else {
				spd = false;
			}
			if (j.count("boughtTK") == 1) {
				tk = j["boughtTK"];
			}
			else {
				tk = false;
			}

			p->worldsowned = frns;
			p->adminLevel = adminlevel;
			p->cloth_back = bac;
			p->cloth_hand = han;
			p->cloth_face = fac;
			p->cloth_hair = hai;
			p->cloth_feet = fee;
			p->cloth_pants = pan;
			p->cloth_necklace = nec;
			p->cloth_shirt = shi;
			p->cloth_mask = mas;
			p->boughtLGB = lgb;
			p->boughtLGD = lgd;
			p->boughtLGW = lgw;
			p->boughtLGK = lgk;
			p->boughtLKW = lkw;
			p->boughtCWD = cwd;
			p->boughtRFS = rfs;
			p->boughtCDG = cdg;
			p->boughtLTIT = ltit;
			p->boughtLWHIP = lwhip;
			p->boughtPHOENIX = phoenix;
			p->boughtDAV = dav;
			p->boughtZEUS = zeus;
			p->boughtNDEV = ndev;
			p->boughtTXMOM = txmom;
			p->boughtFLASHAXE = flashaxe;
			p->boughtVIOLET = violet;
			p->boughtCHIMERA = chimera;
			p->boughtBRAIN = brain;
			p->boughtCCROWN = ccrown;
			p->boughtGANGEL = gangel;
			p->boughtGROB = grob;
			p->boughtHSCYTHE = hscythe;
			p->boughtGDIAPER = gdiaper;
			p->boughtGTANGEL = gtangel;
			p->boughtGNECK = gneck;
			p->boughtGGLASS = gglass;
			p->boughtGPEGASUS = gpegasus;
			p->boughtGBUG = gbug;
			p->boughtWAR = war;
			p->boughtRAY = ray;
			p->boughtAAC = aac;
			p->boughtSPD = spd;
			p->boughtTK = tk;
			p->guild = guild;
			p->joinguild = join;
			p->level = level;
			p->xp = xp;
			p->rubble = rubble;
			p->rubblexp = rubblexp;
			// Mining update starts here
			p->amber = amber;
			p->amberxp = amberxp;

			p->opal = opal;
			p->opalxp = opalxp;

			p->gold = gold;
			p->goldxp = goldxp;

			p->sapphire = sapphire;
			p->sapphirexp = sapphirexp;

			p->diamond = diamond;
			p->diamondxp = diamondxp;

			p->emerald = emerald;
			p->emeraldxp = emeraldxp;
			// Mining update ends here
			p->boughtGBOW = gbow;
			//p->friendinfo = frns;

			//p->cloth_ances = anc;

			updateAllClothes(peer);

			ifff.close();
			PlayerInventory inventory;
			InventoryItem item;
			item.itemCount = 1;
			item.itemID = 18;
			inventory.items.push_back(item);
			item.itemCount = 1;
			item.itemID = 32;
			inventory.items.push_back(item);
			sendInventory(peer, inventory);
			string guildname = PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild);
			if (guildname != "") {
				std::ifstream ifff("guilds/" + guildname + ".json");
				if (ifff.fail()) {
					ifff.close();
					cout << "Failed loading guilds/" + guildname + ".json! From " + ((PlayerInfo*)(peer->data))->displayName + "." << endl;
					((PlayerInfo*)(peer->data))->guild = "";

				}
				json j;
				ifff >> j;

				int gfbg, gffg;

				string gstatement, gleader;

				vector<string> gmembers;

				gfbg = j["backgroundflag"];
				gffg = j["foregroundflag"];
				gstatement = j["GuildStatement"];
				gleader = j["Leader"];
				for (int i = 0; i < j["Member"].size(); i++) {
					gmembers.push_back(j["Member"][i]);
				}

				((PlayerInfo*)(peer->data))->guildBg = gfbg;
				((PlayerInfo*)(peer->data))->guildFg = gffg;
				((PlayerInfo*)(peer->data))->guildStatement = gstatement;
				((PlayerInfo*)(peer->data))->guildLeader = gleader;
				((PlayerInfo*)(peer->data))->guildMembers = gmembers;

				ifff.close();
			}







			if (!std::experimental::filesystem::exists("gemplant/" + PlayerDB::getProperName(p->rawName) + ".txt"))
			{
				ofstream create("gemplant/" + PlayerDB::getProperName(p->rawName) + ".txt");
				create << 0;

			}
			ifstream fdss("gemplant/" + PlayerDB::getProperName(p->rawName) + ".txt");

			fdss >> p->plantgems;
			fdss.close();







			if (!std::experimental::filesystem::exists("fragments/" + PlayerDB::getProperName(p->rawName) + ".txt"))
			{
				ofstream create("fragments/" + PlayerDB::getProperName(p->rawName) + ".txt");
				create << 0;
				create << 0;
				create << 0;
				create << 0;

			}
			ifstream fd("fragments/" + PlayerDB::getProperName(p->rawName) + ".txt");

			fd >> p->fEarth;
			fd >> p->fDark;
			fd >> p->fFire;
			fd >> p->fWater;
			fd.close();

			if (std::experimental::filesystem::exists("creators/" + PlayerDB::getProperName(p->rawName) + ".txt")) p->isCreator = true;


			if (std::experimental::filesystem::exists("timemuted/" + PlayerDB::getProperName(p->rawName) + ".txt"))
			{
				using namespace std::chrono;
				int mutedMinutes = 0;
				ifstream fd("timemuted/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				fd >> mutedMinutes;
				fd.close();

				//p->mutedMiliseconds *= 60 * 1000;
				p->taped = true;
				p->isDuctaped = true;
				p->cantsay = true;
				p->lastMuted = ((duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) + (mutedMinutes * 60 * 1000);

				sendClothes(peer);
			}


		}

		delete data;

	}
}



void joinWorld(ENetPeer* peer, string act, int x2, int y2)
{

	if (((PlayerInfo*)(peer->data))->isBot == true) {
		enet_peer_disconnect_now(peer, 0);
	}


	try {




		if (act.length() > 24) {
			sendConsoleMsg(peer, "`4Sorry, but world names with more than 24 characters are not allowed!");

			GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnFailedToEnterWorld"), 1));
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet2);
			delete p2.data;
		}
		else {
			using namespace std::chrono;
			if (((PlayerInfo*)(peer->data))->lastJoinReq + 500 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
			{
				((PlayerInfo*)(peer->data))->lastJoinReq = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
			}
			else {
				Player::OnConsoleMessage(peer, "`oSlow down when entering worlds, jeez!``");
				Player::OnFailedToEnterWorld(peer);

				return;
			}
			string upsd = act;
			std::transform(upsd.begin(), upsd.end(), upsd.begin(), ::toupper);
			if (upsd == "TEST") {
				Player::OnConsoleMessage(peer, "`4To reduce confusion, this is not a valid world name`w. `oTry another one`w?``");
				Player::OnFailedToEnterWorld(peer);

				return;
			}
			WorldInfo info = worldDB.get(act);
			sendWorld(peer, &info);

			int x = 3040;
			int y = 736;

			for (int j = 0; j < info.width * info.height; j++)
			{
				if (info.items[j].foreground == 6) {
					x = (j % info.width) * 32;
					y = (j / info.width) * 32;
				}
			}


			if (x2 != 0 && y2 != 0)
			{
				x = x2;
				y = y2;
			}
			int id = 244;
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
			//GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;

			/* Weather change
			{
				GamePacket p = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), info.weather));
				ENetPacket * packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);
				delete p.data;
			}
			*/

			((PlayerInfo*)(peer->data))->netID = cId;
			onPeerConnect(peer);
			cId++;
			sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);


			WorldInfo* world = getPlyersWorld(peer);
			string nameworld = world->name;
			string ownerworld = world->owner;
			int count = 0;
			ENetPeer* currentPeer;
			string name = "";
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				count++;
			}


			{
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;

						/*GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket * packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;

						int effect = ((PlayerInfo*)(peer->data))->entereffect;*/
						int x = ((PlayerInfo*)(peer->data))->x;
						int y = ((PlayerInfo*)(peer->data))->y;
						updateAllClothes(peer);
						/*GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

						ENetPacket * packetd = enet_packet_create(psp.data,
							psp.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(currentPeer, 0, packetd);
						delete psp.data;*/
					}

				}
			}
			//updateInvis(peer);
			//sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->puncheffect);
			/*{
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{

						int ID = ((PlayerInfo*)(currentPeer->data))->puncheffect;
						((PlayerInfo*)(currentPeer->data))->puncheffect = ID;
						sendPuncheffect(currentPeer);

					}

				}

			}
			*/





			int otherpeople = 0;
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (isHere(peer, currentPeer))
					otherpeople++;
			}
			int otherpeoples = otherpeople - 1;;
			GamePacket p4 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` `5others here>```w"));
			ENetPacket* packet4 = enet_packet_create(p4.data,
				p4.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet4);
			delete p4.data;
			if (ownerworld != "") {
				GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`0" + nameworld + " `$World Locked `oby " + ownerworld + "`5]"));
				ENetPacket* packet3 = enet_packet_create(p3.data,
					p3.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet3);
				delete p3.data;
				if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
					if (((PlayerInfo*)(peer->data))->boughtLTIT == true) {
						((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName + " of Legend";
					}
				}
			}

			/*if (((PlayerInfo*)(peer->data))->mute == 1) {
				((PlayerInfo*)(peer->data))->cantsay = true;
				sendState(peer);
			}*/
			GamePacket p22 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` others here>``"));
			delete p22.data;

			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				/*if (isHere(peer, currentPeer) && ((PlayerInfo*)(peer->data))->isMod == 0) {
					{

						ENetPacket * packet2 = enet_packet_create(p22.data,
							p22.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(currentPeer, 0, packet2);

					}
				}*/
			}
		}

	}
	catch (int e) {
		if (e == 1) {
			((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You have exited the world."));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;
			//enet_host_flush(server);
		}
		else if (e == 2) {
			((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You have entered bad characters in the world name!"));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;
			//enet_host_flush(server);
		}
		else if (e == 3) {
			((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Exit from what? Click back if you're done playing."));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;
			//enet_host_flush(server);
		}
		else {
			((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "I know this menu is magical and all, but it has its limitations! You can't visit this world!"));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;
			//enet_host_flush(server);
		}
	}
}



void sendNothingHappened(ENetPeer* peer, int x, int y) {
	PlayerMoving data;
	data.netID = ((PlayerInfo*)(peer->data))->netID;
	data.packetType = 0x8;
	data.plantingTree = 0;
	data.netID = -1;
	data.x = x;
	data.y = y;
	data.punchX = x;
	data.punchY = y;
	SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
}

void sendEditWorld(int i, int tile, int causedBy, ENetPeer* peer)
{
	PlayerMoving data;
	//data.packetType = 0x14;
	data.packetType = 0x3;


	//data.characterState = 0x924; // animation
	data.characterState = 0x0; // animation
	data.XSpeed = 0;
	data.YSpeed = 0;
	data.netID = causedBy;
	data.plantingTree = 0;
	WorldInfo* world = getPlyersWorld(peer);


	ENetPeer* currentPeer;


	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
			SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

		//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
	}

}


void sendDrop(ENetPeer* peer, int netID, int x, int y, int item, int count, BYTE specialEffect)
{
	if (item >= 9308) return;
	if (item < 0) return;



	bool success = true;
	SaveShopsItemMoreTimes(item, count, peer, success);
	ENetPeer* currentPeer;
	string name = "";
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			PlayerMoving data;
			data.packetType = 14;
			data.x = x;
			data.y = y;
			data.netID = netID;
			data.plantingTree = item;
			float val = count; // item count
			BYTE val2 = specialEffect;

			BYTE* raw = packPlayerMoving(&data);
			memcpy(raw + 16, &val, 4);
			memcpy(raw + 1, &val2, 1);

			SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
		}
	}
}





void Player::OnInvis(ENetPeer* peer, int state, int netID) {
	GamePacket p = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), state));
	memcpy(p.data + 8, &netID, 4);
	ENetPacket * packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnFailedToEnterWorld(ENetPeer* peer) {
	GamePacket p = packetEnd(appendIntx(appendString(createPacket(), "OnFailedToEnterWorld"), 1));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnTextOverlay(ENetPeer* peer, string text) {
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), text));
	ENetPacket * packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnKilled(ENetPeer* peer, int netID) {
	GamePacket p = packetEnd(appendString(createPacket(), "OnKilled"));
	memcpy(p.data + 8, &netID, 4);
	ENetPacket * packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::SetRespawnPos(ENetPeer* peer, int posX, int posY, int netID) {
	GamePacket p22 = packetEnd(appendInt(appendString(createPacket(), "SetRespawnPos"), posX + posY)); // (world->width * posY)
	memcpy(p22.data + 8, &netID, 4);
	ENetPacket* packet22 = enet_packet_create(p22.data,
		p22.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet22);
	delete p22.data;
}

void Player::OnZoomCamera(ENetPeer * peer, float value1, int value2) {
	GamePacket p = packetEnd(appendIntx(appendFloat(appendString(createPacket(), "OnZoomCamera"), value1), value2));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}



void Player::SmoothZoom(ENetPeer* peer) {
	GamePacket p = packetEnd(appendIntx(appendFloat(appendString(createPacket(), "OnZoomCamera"), 10000.0f), 1000));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnRaceStart(ENetPeer * peer, int netID)
{
	GamePacket p = packetEnd(appendString(createPacket(), "OnRaceStart"));
	memcpy(p.data + 8, &netID, 4);
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnRaceEnd(ENetPeer * peer, int netID)
{
	GamePacket p = packetEnd(appendString(createPacket(), "OnRaceStart"));
	memcpy(p.data + 8, &netID, 4);
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::Ping(ENetPeer * peer)
{
	GamePacket p = packetEnd(appendString(createPacket(), "Ping"));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnDialogRequest(ENetPeer * peer, string args)
{
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), args));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnSetPos(ENetPeer* peer, int netID, int x, int y) {
	GamePacket p = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
	memcpy(p.data + 8, &netID, 4);
	ENetPacket * packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnSetFreezeState(ENetPeer* peer, int state, int netID) {
	GamePacket p = packetEnd(appendInt(appendString(createPacket(), "OnSetFreezeState"), state));
	memcpy(p.data + 8, &netID, 4);
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnSetCurrentWeather(ENetPeer* peer, int weather) {
	GamePacket p = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), weather));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnTradeStatus(ENetPeer * peer, int netIDOther, string offerstatus, string offer)
{
	//"add_slot|20|3locked|0reset_locks|1accepted|1"
	GamePacket p = packetEnd(appendString(appendString(appendString(appendInt(appendString(createPacket(), "OnTradeStatus"), netIDOther), ""), offerstatus + "'s offer"), offer));
	ENetPacket * packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnSetBux(ENetPeer * peer, int gems, int accountstate)
{
	GamePacket p = packetEnd(appendInt(appendInt(appendString(createPacket(), "OnSetBux"), gems), accountstate));
	ENetPacket * packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);

	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnParticleEffect(ENetPeer* peer, int effect, float x, float y, int delay) {
	GamePacket p = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));
	int deathFlag = 0x19;
	memcpy(p.data + 24, &delay, 4);
	memcpy(p.data + 56, &deathFlag, 4);
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::SetHasGrowID(ENetPeer * peer, int status, string username, string password)
{
	GamePacket p2 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), status), username), password));
	ENetPacket * packet2 = enet_packet_create(p2.data,
		p2.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet2);
	delete p2.data;
}

void Player::OnNameChanged(ENetPeer * peer, int netID, string name)
{
	GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`0`0" + name));
	memcpy(p3.data + 8, &netID, 4);
	ENetPacket * packet3 = enet_packet_create(p3.data,
		p3.len,
		ENET_PACKET_FLAG_RELIABLE);
	ENetPeer * currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
		{
			enet_peer_send(currentPeer, 0, packet3);
		}
	}
	delete p3.data;
}

void Player::OnSendToServer(ENetPeer * peer, int userID, int token, string ip, int port, string doorId, int lmode)
{
	auto p = packetEnd(appendInt(appendString(appendInt(appendInt(appendInt(appendString(createPacket(), "OnSendToServer"), port), token), userID), ip + "|" + doorId), lmode));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnChangeSkin(ENetPeer* peer, int skinColor, int netID) {
	auto p = packetEnd(appendInt(appendString(createPacket(), "OnChangeSkin"), skinColor));
	memcpy(p.data + 8, &netID, 4);
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnCountdownStart(ENetPeer* peer, int netID, int time, int score) {
	if (score == -1) {
		auto p = packetEnd(appendInt(appendString(createPacket(), "OnCountdownStart"), time));
		memcpy(p.data + 8, &netID, 4);
		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete p.data;
	}
	else
	{
		auto p = packetEnd(appendInt(appendInt(appendString(createPacket(), "OnCountdownStart"), time), score));
		memcpy(p.data + 8, &netID, 4);
		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete p.data;
	}
}

void Player::OnPlayPositioned(ENetPeer * peer, string audiofile, int netID, bool broadcastInWorld, ENetPacket* pk) // packet only externally used when broadcasting / sending to multiple players to reduce memory leaks / cpu usage cuz we dont want to loop creating the packet for each player that would be insanely stupid.
{
	if (broadcastInWorld) {
		ENetPeer * currentPeer;

		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)
		{
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
				continue;
			if (isHere(peer, currentPeer)) {
				enet_peer_send(currentPeer, 0, pk);
			}
		}
	}
	else
	{
		auto p = packetEnd(appendString(appendString(createPacket(), "OnPlayPositioned"), audiofile));
		memcpy(p.data + 8, &netID, 4);
		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete p.data;
	}
}

void Player::OnBillboardChange(ENetPeer* peer, int netID) {

	GamePacket p = packetEnd(appendInt(appendInt(appendInt(appendInt(appendIntx(appendString(createPacket(), "OnBillboardChange"), 1 /*???*/), 12), 1), 5), 1)); //2 == ItemID
	memcpy(p.data + 8, &netID, 4);
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);

	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnFlagMay2019(ENetPeer* peer, int state, int netID) {
	GamePacket p = packetEnd(appendIntx(appendString(createPacket(), "OnFlagMay2019"), state));
	memcpy(p.data + 8, &netID, 4);
	ENetPacket * packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnStartTrade(ENetPeer * peer, int netID1, int netID2)
{
	GamePacket p = packetEnd(appendInt(appendInt(appendString(createPacket(), "OnStartTrade"), netID1), netID2));
	ENetPacket * packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnForceTradeEnd(ENetPeer * peer)
{
	GamePacket p = packetEnd(appendString(createPacket(), "OnForceTradeEnd"));
	ENetPacket * packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::PlayAudio(ENetPeer * peer, string audioFile, int delayMS)
{
	string text = "action|play_sfx\nfile|" + audioFile + "\ndelayMS|" + to_string(delayMS) + "\n";
	BYTE* data = new BYTE[5 + text.length()];
	BYTE zero = 0;
	int type = 3;
	memcpy(data, &type, 4);
	memcpy(data + 4, text.c_str(), text.length());
	memcpy(data + 4 + text.length(), &zero, 1);
	ENetPacket * packet = enet_packet_create(data,
		5 + text.length(),
		ENET_PACKET_FLAG_RELIABLE);

	enet_peer_send(peer, 0, packet);
	delete data;
}
class GTDialog
{
public:
	string dialogstr = "";
	void addSpacer(SpacerTypes type);
	void addLabelWithIcon(string text, int tileid, LabelStyles type);
	void addButton(string buttonname, string buttontext);
	void addCheckbox(string checkboxname, string string, CheckboxTypes type);
	void addTextBox(string str);
	void addSmallText(string str);
	void addInputBox(string name, string text, string cont, int size);
	void addQuickExit();
	void endDialog(string name, string accept, string nvm);
	void addCustom(string name);
	string finishDialog();

	operator string() {
		return this->dialogstr;
	}
};


void GTDialog::addSpacer(SpacerTypes type) {
	switch (type)
	{
	case SPACER_BIG:
		this->dialogstr.append("add_spacer|big|\n");
		break;
	case SPACER_SMALL:
		this->dialogstr.append("add_spacer|small|\n");
		break;
	default:
		break;
	}
}

void GTDialog::addLabelWithIcon(string text, int tileid, LabelStyles type) {
	switch (type)
	{
	case LABEL_BIG:
		this->dialogstr.append("add_label_with_icon|big|" + text + "|left|" + to_string(tileid) + "|\n");
		break;
	case LABEL_SMALL:
		this->dialogstr.append("add_label_with_icon|small|" + text + "|left|" + to_string(tileid) + "|\n");
		break;
	default:
		break;
	}
}

void GTDialog::addButton(string buttonname, string buttontext) {
	this->dialogstr.append("add_button|" + buttonname + "|" + buttontext + "|noflags|0|0|\n");
}

void GTDialog::addCheckbox(string checkboxname, string string, CheckboxTypes type) {
	switch (type)
	{
	case CHECKBOX_SELECTED:
		this->dialogstr.append("add_checkbox|" + checkboxname + "|" + string + "|1|\n");
		break;
	case CHECKBOX_NOT_SELECTED:
		this->dialogstr.append("add_checkbox|" + checkboxname + "|" + string + "|0|\n");
		break;
	default:
		break;
	}
}

void GTDialog::addTextBox(string str) {
	this->dialogstr.append("add_textbox|" + str + "|left|\n");
}

void GTDialog::addSmallText(string str) {
	this->dialogstr.append("add_smalltext|" + str + "|\n");
}

void GTDialog::addInputBox(string name, string text, string cont, int size) {
	this->dialogstr.append("add_text_input|" + name + "|" + text + "|" + cont + "|" + to_string(size) + "|\n");
}

void GTDialog::addQuickExit() {
	this->dialogstr.append("add_quick_exit|\n");
}

void GTDialog::endDialog(string name, string accept, string nvm) {
	this->dialogstr.append("end_dialog|" + name + "|" + nvm + "|" + accept + "|\n");
}

void GTDialog::addCustom(string name) {
	this->dialogstr.append(name + "\n");
}

string GTDialog::finishDialog() {
	return this->dialogstr;
}
void Player::showWrong(ENetPeer* peer, string itemFind, string listFull) {

	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wFind item: " + itemFind + "``|left|206|\nadd_spacer|small|\n" + listFull + "add_textbox|Enter a word below to find the item|\nadd_text_input|item|Item Name||30|\nend_dialog|findid|Cancel|Find the item!|\n"));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}



void Player::SendTileAnimation(ENetPeer * peer, int x, int y, int causedBy, int tile)
{
	if (x > -1 && y > -1 && causedBy > -1)
	{
		PlayerMoving data;
		data.characterState = 0x0; // animation
		data.x = x;
		data.y = y;
		data.punchX = 0;
		data.punchY = 0;
		data.XSpeed = 0;
		data.YSpeed = 0;
		data.netID = causedBy;
		data.plantingTree = 6;
		data.packetType = 0x8;
		SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
	}
}

void Player::OnStartAcceptLogon(ENetPeer* peer, int itemdathash) {
	GamePacket p = packetEnd(appendString(appendString(appendString(appendString(appendInt(appendString(createPacket(),
		"OnSuperMainStartAcceptLogonHrdxs47254722215a"), itemdathash), "5.20.120.177"), "realcache/"),
		"cc.cz.madkite.freedom org.aqua.gg idv.aqua.bulldog com.cih.gamecih2 com.cih.gamecih com.cih.game_cih cn.maocai.gamekiller com.gmd.speedtime org.dax.attack com.x0.strai.frep com.x0.strai.free org.cheatengine.cegui org.sbtools.gamehack com.skgames.traffikrider org.sbtoods.gamehaca com.skype.ralder org.cheatengine.cegui.xx.multi1458919170111 com.prohiro.macro me.autotouch.autotouch com.cygery.repetitouch.free com.cygery.repetitouch.pro com.proziro.zacro com.slash.gamebuster"),
		"proto=80|choosemusic=audio/mp3/theme4.mp3|active_holiday=0|"));

	ENetPacket * packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnRemove(ENetPeer * peer, int netID)
{
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnRemove"), "netID|" + std::to_string(netID) + "\n"));
	ENetPacket * packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnConsoleMessage(ENetPeer * peer, string text)
{
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), text));
	ENetPacket * packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}

void Player::OnTalkBubble(ENetPeer * peer, int netID, string text, int chatColor, bool isOverlay)
{
	if (isOverlay == true) {
		GamePacket p = packetEnd(appendIntx(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"),
			((PlayerInfo*)(peer->data))->netID), text), chatColor), 1));

		ENetPacket * packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete p.data;
	}
	else
	{
		GamePacket p = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"),
			((PlayerInfo*)(peer->data))->netID), text), chatColor));

		ENetPacket * packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete p.data;
	}
}
void updateSignWrench(ENetPeer* peer, int foreground, int x, int y, string text, int background)
{
	int hmm = 8, wot = text.length(), lol = 0, wut = 5;
	int yeh = hmm + 3 + 1, idk = 15 + wot, lmao = -1, yey = 2; //idk = text_len + 15, wut = type(?), wot = text_len, yey = len of text_len
	int ok = 52 + idk;
	int kek = ok + 4, yup = ok - 8 - idk;
	int thonk = 4, magic = 56, wew = ok + 5 + 4;
	int wow = magic + 4 + 5;
	BYTE* data = new BYTE[kek];
	ENetPacket* p = enet_packet_create(0, wew, ENET_PACKET_FLAG_RELIABLE);
	for (int i = 0; i < kek; i++) data[i] = 0;
	memcpy(data, &wut, thonk);
	memcpy(data + yeh, &hmm, thonk); //read discord
	memcpy(data + yup, &x, 4);
	memcpy(data + yup + 4, &y, 4);
	memcpy(data + 4 + yup + 4, &idk, thonk);
	memcpy(data + magic, &foreground, yey);
	memcpy(data + magic + 2, &background, yey); //p100 fix by the one and only lapada
	memcpy(data + thonk + magic, &lol, thonk);
	memcpy(data + magic + 4 + thonk, &yey, 1);
	memcpy(data + wow, &wot, yey); //data + wow = text_len
	memcpy(data + yey + wow, text.c_str(), wot); //data + text_len_len + text_len_offs = text
	memcpy(data + ok, &lmao, thonk); //end ?
	memcpy(p->data, &thonk, thonk);
	memcpy((char*)p->data + thonk, data, kek); //kek = data_len
	ENetPeer* currentPeer;
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			enet_peer_send(currentPeer, 0, p);
		}
	}
	delete data;
}
void sendWorldOffers(ENetPeer* peer)
{
	if (!((PlayerInfo*)(peer->data))->isIn) return;
	vector<WorldInfo> worlds = worldDB.getRandomWorlds();
	string worldOffers = "default|";
	if (worlds.size() > 0) {
		worldOffers += worlds[0].name;
	}

	for (int i = 0; i < worlds.size(); i++) {
		worldOffers += "add_floater|" + worlds[i].name + "|" + std::to_string(getPlayersCountInWorld(worlds[i].name)) + "|0.55|3529161471\n";
	}
	for (int i = 0; i < ((PlayerInfo*)(peer->data))->lastworlds.size(); i++) {
		worldOffers += "add_floater|" + ((PlayerInfo*)(peer->data))->lastworlds[i] + "|" + std::to_string(getPlayersCountInWorld(((PlayerInfo*)(peer->data))->lastworlds[i])) + "|0.55|3417414143\n";
	}
	//worldOffers += "\nadd_floater|START|0|0.8|4278190335\n";
	//GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), "default|GO FOR IT\nadd_button|Showing: `wFake Worlds``|_catselect_|0.6|3529161471|\nadd_floater|Subscribe|5|0.55|3529161471\nadd_floater|Growtopia|4|0.52|428190335\7nadd_floater|Noobs|150|0.49|3529161471\nadd_floater|...|3|0.49|3529161471\nadd_floater|`6:O :O :O``|2|0.46|3529161471\nadd_floater|SEEMS TO WORK|2|0.46|3529161471\nadd_floater|?????|1|0.43|3529161471\nadd_floater|KEKEKEKEK|13|0.7|3417414143\n"));
	//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
	GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), worldOffers));
	ENetPacket* packet3 = enet_packet_create(p3.data,
		p3.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet3);
	delete p3.data;
	//enet_host_flush(server);
}
void Player::OnAddNotification(ENetPeer * peer, string text, string audiosound, string interfaceimage)
{
	auto p = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"),
		interfaceimage),
		text),
		audiosound),
		0));

	ENetPacket * packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}


bool has_only_digits(const string s) {
	return s.find_first_not_of("0123456789") == string::npos;
}
bool has_only_digits_wnegative(const string s) {
	return s.find_first_not_of("-0123456789") == string::npos;
}


void playerRespawn(ENetPeer* peer, bool isDeadByTile) {
	int netID = ((PlayerInfo*)(peer->data))->netID;
	if (isDeadByTile == false) {
		Player::OnKilled(peer, ((PlayerInfo*)(peer->data))->netID);
	}
	GamePacket p2x = packetEnd(appendInt(appendString(createPacket(), "OnSetFreezeState"), 0));
	memcpy(p2x.data + 8, &netID, 4);
	int respawnTimeout = 2000;
	int deathFlag = 0x19;
	memcpy(p2x.data + 24, &respawnTimeout, 4);
	memcpy(p2x.data + 56, &deathFlag, 4);
	ENetPacket* packet2x = enet_packet_create(p2x.data,
		p2x.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet2x);
	delete p2x.data;
	Player::OnSetFreezeState(peer, 2, netID);
	GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), ((PlayerInfo*)(peer->data))->respawnX, ((PlayerInfo*)(peer->data))->respawnY));
	memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
	respawnTimeout = 2000;
	memcpy(p2.data + 24, &respawnTimeout, 4);
	memcpy(p2.data + 56, &deathFlag, 4);
	ENetPacket* packet2 = enet_packet_create(p2.data,
		p2.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet2);
	delete p2.data;
	GamePacket p2a = packetEnd(appendString(appendString(createPacket(), "OnPlayPositioned"), "audio/teleport.wav"));
	memcpy(p2a.data + 8, &netID, 4);
	respawnTimeout = 2000;
	memcpy(p2a.data + 24, &respawnTimeout, 4);
	memcpy(p2a.data + 56, &deathFlag, 4);
	ENetPacket* packet2a = enet_packet_create(p2a.data,
		p2a.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet2a);
	delete p2a.data;
}


void sendTileUpdate(int x, int y, int tile, int causedBy, ENetPeer* peer)
{
	if (worldproperlock == true) return;

	PlayerMoving data;
	//data.packetType = 0x14;
	data.packetType = 0x3;


	//data.characterState = 0x924; // animation
	data.characterState = 0x0; // animation
	data.x = x;
	data.y = y;
	data.punchX = x;
	data.punchY = y;
	data.XSpeed = 0;
	data.YSpeed = 0;
	data.netID = causedBy;
	data.plantingTree = tile;

	WorldInfo* world = getPlyersWorld(peer);
	if (world == NULL) return;
	if (x<0 || y<0 || x>world->width || y>world->height) return;
	sendNothingHappened(peer, x, y);
	if (world->items[x + (y * world->width)].foreground == 1790)
		sendWizard(peer, x, y);
	if (world->items[x + (y * world->width)].foreground == 2946 && tile != 18 && tile > 0) {
		if (((PlayerInfo*)(peer->data))->rawName == world->owner || ((PlayerInfo*)(peer->data))->rawName == "sebia") {
			((PlayerInfo*)(peer->data))->blockx = x;
			((PlayerInfo*)(peer->data))->blocky = y;
			//cout << "put" << endl;
			ENetPeer* currentPeer;
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (isHere(peer, currentPeer)) {
					BlockVisual data;
					data.packetType = 0x5;
					data.characterState = 8;
					data.punchX = x;
					data.punchY = y;
					data.charStat = 13; // 13
					data.blockid = 2946; // 2946 3794 = display shelf
					//data.netID = ((PlayerInfo*)(peer->data))->netID;
					data.backgroundid = 6864;
					data.visual = 0x00010000; //0x00210000
					world->items[x + (y * world->width)].displayblock = tile;

					int n = tile;

					string hex = "";
					{
						std::stringstream ss;
						ss << std::hex << n; // int decimal_value
						std::string res(ss.str());

						hex = res + "17";
					}
					//cout << hex << endl;
					int squaresign = ((PlayerInfo*)(peer->data))->blockx + (((PlayerInfo*)(peer->data))->blocky * 100);
					string world = ((PlayerInfo*)(peer->data))->currentWorld;
					std::ofstream outfile("display/" + world + "X" + std::to_string(squaresign) + ".txt");
					outfile << n;
					outfile.close();


					int xx;
					std::stringstream ss;
					ss << std::hex << hex;
					ss >> xx;
					data.displayblock = xx;

					SendPacketRaw(192, packBlockVisual(&data), 69, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
				}
			}
			return;
		}
	}

	if (world != NULL) {
		if (((PlayerInfo*)(peer->data))->rawName == world->owner || ((PlayerInfo*)(peer->data))->rawName == "sebia")
		{
			if (isMail(world->items[x + (y * world->width)].foreground))
			{

				std::ifstream ifs("mails/" + world->name + "." + to_string(x) + "." + to_string(y) + ".json");
				if (ifs.is_open())
				{
					WorldInfo* wrld = getPlyersWorld(peer);
					json j;
					ifs >> j;
					string line1 = j["line1"];
					string line2 = j["line2"];
					string line3 = j["line3"];
					string line4 = j["line4"];
					string line5 = j["line5"];
					string line6 = j["line6"];
					string line7 = j["line7"];
					string line8 = j["line8"];
					string line9 = j["line9"];
					string line10 = j["line10"];
					int amount = j["amount"];
					//
					GTDialog mail;
					mail.addLabelWithIcon("`w" + itemDefs.at(wrld->items[x + (y * wrld->width)].foreground).name + "``", itemDefs.at(wrld->items[x + (y * wrld->width)].foreground).id, LABEL_BIG);
					mail.addSpacer(SPACER_SMALL);
					mail.addTextBox("`oYou have `w" + std::to_string(amount) + " `oletters:");
					mail.addCustom("embed_data|tilex|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchx) + "");
					mail.addCustom("embed_data|tiley|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchy) + "");
					if (line1 != "")
					{
						mail.addSpacer(SPACER_SMALL);
						vector<string> mailEx = explode("|", line1);
						mail.addCustom("add_label_with_icon|small|`5" + mailEx[0] + " `5- `w" + mailEx[1] + "``|left|660|");
					}
					if (line2 != "")
					{
						mail.addSpacer(SPACER_SMALL);
						vector<string> mailEx = explode("|", line2);
						mail.addCustom("add_label_with_icon|small|`5" + mailEx[0] + " `5- `w" + mailEx[1] + "``|left|660|");
					}
					if (line3 != "")
					{
						mail.addSpacer(SPACER_SMALL);
						vector<string> mailEx = explode("|", line3);
						mail.addCustom("add_label_with_icon|small|`5" + mailEx[0] + " `5- `w" + mailEx[1] + "``|left|660|");
					}
					//
					if (line4 != "")
					{
						mail.addSpacer(SPACER_SMALL);
						vector<string> mailEx = explode("|", line4);
						mail.addCustom("add_label_with_icon|small|`5" + mailEx[0] + " `5- `w" + mailEx[1] + "``|left|660|");
					}
					if (line5 != "")
					{
						mail.addSpacer(SPACER_SMALL);
						vector<string> mailEx = explode("|", line5);
						mail.addCustom("add_label_with_icon|small|`5" + mailEx[0] + " `5- `w" + mailEx[1] + "``|left|660|");
					}
					if (line6 != "")
					{
						mail.addSpacer(SPACER_SMALL);
						vector<string> mailEx = explode("|", line6);
						mail.addCustom("add_label_with_icon|small|`5" + mailEx[0] + " `5- `w" + mailEx[1] + "``|left|660|");
					}
					if (line7 != "")
					{
						mail.addSpacer(SPACER_SMALL);
						vector<string> mailEx = explode("|", line7);
						mail.addCustom("add_label_with_icon|small|`5" + mailEx[0] + " `5- `w" + mailEx[1] + "``|left|660|");
					}
					if (line8 != "")
					{
						mail.addSpacer(SPACER_SMALL);
						vector<string> mailEx = explode("|", line8);
						mail.addCustom("add_label_with_icon|small|`5" + mailEx[0] + " `5- `w" + mailEx[1] + "``|left|660|");
					}
					if (line9 != "")
					{
						mail.addSpacer(SPACER_SMALL);
						vector<string> mailEx = explode("|", line9);
						mail.addCustom("add_label_with_icon|small|`5" + mailEx[0] + " `5- `w" + mailEx[1] + "``|left|660|");
					}
					if (line10 != "")
					{
						mail.addSpacer(SPACER_SMALL);
						vector<string> mailEx = explode("|", line10);
						mail.addCustom("add_label_with_icon|small|`5" + mailEx[0] + " `5- `w" + mailEx[1] + "``|left|660|");
					}
					if (amount != 0)
					{
						mail.addSpacer(SPACER_SMALL);
						mail.addButton("emptyMail;" + to_string(((PlayerInfo*)(peer->data))->wrenchx) + ";" + to_string(((PlayerInfo*)(peer->data))->wrenchy) + "", "`4Empty " + itemDefs.at(wrld->items[x + (y * wrld->width)].foreground).name + "``");
					}
					if (amount == 10)
					{
						mail.addTextBox("`oThis `w" + itemDefs.at(wrld->items[x + (y * wrld->width)].foreground).name + " `o already has `w" + std::to_string(amount) + " `oletters in it, can't add more until you clear them.``");
					}
					mail.addSpacer(SPACER_SMALL);
					mail.addQuickExit();
					mail.addButton("null", "`wClose``");
					//
					OnDialogRequest(peer, mail.finishDialog());
				}
			}
		}
		else
		{
			std::ifstream ifs("mails/" + world->name + "." + to_string(x) + "." + to_string(y) + ".json");
			if (ifs.is_open())
			{
				WorldInfo* wrld = getPlyersWorld(peer);
				json j;
				ifs >> j;
				int amount = j["amount"];
				if (amount == 10)
				{
					GTDialog mail;
					mail.addLabelWithIcon("`wEdit " + itemDefs.at(wrld->items[x + (y * wrld->width)].foreground).name + "``", itemDefs.at(wrld->items[x + (y * wrld->width)].foreground).id, LABEL_BIG);
					mail.addTextBox("`oThis `w" + itemDefs.at(wrld->items[x + (y * wrld->width)].foreground).name + " `oalready has `w" + std::to_string(amount) + " `oin it, you can't leave a message anymore until they got cleared.``");
					mail.addButton("null", "`wClose``");
					//
					OnDialogRequest(peer, mail.finishDialog());
				}
				else
				{
					GTDialog mail;
					mail.addLabelWithIcon("`wEdit " + itemDefs.at(wrld->items[x + (y * wrld->width)].foreground).name + "``", itemDefs.at(wrld->items[x + (y * wrld->width)].foreground).id, LABEL_BIG);
					mail.addTextBox("`oWant to leave a message for the owner?``");
					mail.addInputBox("ch3", "", "", 100);
					mail.addCustom("embed_data|tilex|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchx) + "");
					mail.addCustom("embed_data|tiley|" + std::to_string(((PlayerInfo*)(peer->data))->wrenchy) + "");
					mail.endDialog("mail_edit", "`2Send Letter``", "`wCancel``");
					//
					OnDialogRequest(peer, mail.finishDialog());
				}
			}
		}
		if (((PlayerInfo*)(peer->data))->rawName == world->owner || ((PlayerInfo*)(peer->data))->rawName == "sebia")
		{
			if (isMail(world->items[x + (y * world->width)].foreground))
			{
				std::ofstream o("mails/" + world->name + "." + to_string(x) + "." + to_string(y) + ".json");
				if (!o.is_open()) {
					cout << GetLastError() << endl;
					_getch();
				}
				json j;

				j["line1"] = "";
				j["line2"] = "";
				j["line3"] = "";
				j["line4"] = "";
				j["line5"] = "";
				j["line6"] = "";
				j["line7"] = "";
				j["line8"] = "";
				j["line9"] = "";
				j["line10"] = "";
				j["amount"] = 0;
				o << j << std::endl;
				updateSignWrench(peer, world->items[x + (y * world->width)].foreground, x, y, "", world->items[x + (y * world->width)].background);
			}
		}
		if (((PlayerInfo*)(peer->data))->rawName == world->owner || ((PlayerInfo*)(peer->data))->rawName == "sebia")
		{
			if (isMail(tile))
			{
				world->items[x + (y * world->width)].foreground = tile;
				std::ofstream o("mails/" + world->name + "." + to_string(x) + "." + to_string(y) + ".json");
				if (!o.is_open()) {
					cout << GetLastError() << endl;
					_getch();
				}
				json j;

				j["line1"] = "";
				j["line2"] = "";
				j["line3"] = "";
				j["line4"] = "";
				j["line5"] = "";
				j["line6"] = "";
				j["line7"] = "";
				j["line8"] = "";
				j["line9"] = "";
				j["line10"] = "";
				j["amount"] = 0;
				o << j << std::endl;
				//
				updateSignWrench(peer, world->items[x + (y * world->width)].foreground, x, y, "`wThere is `20 `wletters in this `o" + itemDefs.at(world->items[x + (y * world->width)].foreground).name + "``", world->items[x + (y * world->width)].background);
			}
		}
		if (getItemDef(world->items[x + (y * world->width)].foreground).blockType == BlockTypes::DOOR) {
			if (world->owner != "") {
				if (((PlayerInfo*)(peer->data))->rawName == world->owner) {
					if (tile == 32) {
						((PlayerInfo*)(peer->data))->wrenchsession = x + (y * world->width);
						WorldItem item = world->items[x + (y * world->width)];
						string a = item.destWorld + ":" + item.destId;
						if (a == ":") a = "";
						if (item.foreground == 72462 || item.foreground == 41940)
						{
							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit Password Door``|left|" + to_string(item.foreground) + "|\n\nadd_text_input|dest|`oTarget World|" + a + "|100|\nadd_text_input|label|Display Label (optional)|" + item.label + "|100|\nadd_text_input|password|Password|" + item.password + "|35|\nend_dialog|editpdoor|Cancel|OK|"));
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);
							delete p.data;
						}
						if (item.foreground == 5444 || item.foreground == 5446)
						{
							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit Portal``|left|" + to_string(item.foreground) + "|\n\nadd_text_input|dest|`oTarget World|" + a + "|100|\nadd_text_input|label|Display Label (optional)|" + item.label + "|100|\nadd_text_input|password|Password|" + item.password + "|35|\nend_dialog|editpdoor|Cancel|OK|"));
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);
							delete p.data;
						}
						else {
							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit Portal``|left|" + to_string(item.foreground) + "|\n\nadd_text_input|dest|`oTarget World|" + a + "|100|\nadd_text_input|label|Display Label (optional)|" + item.label + "|100|\nadd_text_input|destid|ID|" + item.destId + "|35|\nend_dialog|editpdoor|Cancel|OK|"));
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);
							delete p.data;
						}
					}
				}
			}
		}
	}



	if (tile == 32 || tile == 18)
	{
		if (world->items[x + (y * world->width)].foreground == 9288) {
			GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wThe Underground Trader``|left|9288|0|0|\n\nadd_spacer|small|\nadd_textbox|`oWelcome Traveler! Here you can exchange `bDark Fragments `oInto `9Powerful `oItems Or Blocks! Click `^View Offers `oTo See!|\n\nadd_spacer|small|\nadd_button|undergroundtrader|`9View Offers|0|0|\nadd_quick_exit|"));
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(peer, 0, packet2);
			delete p2.data;
		}
	}





	if (tile == 32)
	{
		if (world->items[x + (y * world->width)].foreground == 9418) {
			if (((PlayerInfo*)(peer->data))->rawName == world->owner) {
				UpdateLocalPlayerGems(peer);
				int gem = ((PlayerInfo*)(peer->data))->plantgems;
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`#Gem Storage``|left|9418|0|0|\n\nadd_spacer|small|\nadd_textbox|`#Gem Storage `oAllows you to `9Store Gems `oIn It! You can store as many as you want! `w[`4Warning`w] `oThis `9Storage `oIs personal, Other `9Players `oIn your world `@Won't `oBe able to `@Collect/Add `9Gems`o! If you will `^Sell `oYour `9world `oYour `9Gems `4WILL BE STILL `oIn your `9Account`o!|\n\nadd_spacer|small|\nadd_textbox|`oCurrently Stored `9Gems `2" + to_string(gem) + "`o!|\n\nadd_spacer|small|\nadd_button|collectgems|`9Collect|\nadd_button|addgems|`9Add Gems|0|0|\nadd_quick_exit|"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(peer, 0, packet2);
				delete p2.data;
			}
			else {
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You must be world owner to use `#Gem Storage`#!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;


			}


		}



	}


	if (tile == 32)
	{
		if (world->items[x + (y * world->width)].foreground == 5086) {
			if (((PlayerInfo*)(peer->data))->haveGrowId && ((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || ((PlayerInfo*)(peer->data))->rawName == "sebia") {

				bool iscontains = false;
				SearchInventoryItem(peer, 5078, 1, iscontains);
				if (!iscontains)
				{
					bool iscontains = false;
					SearchInventoryItem(peer, 5080, 1, iscontains);
					if (!iscontains)
					{
						bool iscontains = false;
						SearchInventoryItem(peer, 5082, 1, iscontains);
						if (!iscontains)
						{
							bool iscontains = false;
							SearchInventoryItem(peer, 5084, 1, iscontains);
							if (!iscontains)
							{
								bool iscontains = false;
								SearchInventoryItem(peer, 7166, 1, iscontains);
								if (!iscontains)
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`9Ancient Goddess``|left|5086|0|0|\n\nadd_spacer|small|\nadd_textbox|`oGreetings, mortal! Oh dear... you don't seem to have any ancient relics on which I might work my wonders. *sigh* Perhaps another time...|\n\nadd_spacer|small|\nadd_button|exit222|`9Return|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {

									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`9Ancient Goddess``|left|5086|0|0|\n\nadd_spacer|small|\nadd_textbox|`oGreetings, mortal! It seems you have some ancient thing I can enchance through magic old. Tell me: Which would you like to mold? Choose wisely, for once I work my wonders, it will be bound to you for eternity...|\n\nadd_spacer|small|\nadd_button|upgradetime|`9Upgrade Ancestral Of Time|\n\nadd_spacer|small|\nadd_button|exit222|`9Return|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
							}
							else {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`9Ancient Goddess``|left|5086|0|0|\n\nadd_spacer|small|\nadd_textbox|`oGreetings, mortal! It seems you have some ancient thing I can enchance through magic old. Tell me: Which would you like to mold? Choose wisely, for once I work my wonders, it will be bound to you for eternity...|\n\nadd_spacer|small|\nadd_button|upgraderiches|`9Upgrade Ancestral Of Riches|\n\nadd_spacer|small|\nadd_button|exit222|`9Return|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
						}
						else {
							GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`9Ancient Goddess``|left|5086|0|0|\n\nadd_spacer|small|\nadd_textbox|`oGreetings, mortal! It seems you have some ancient thing I can enchance through magic old. Tell me: Which would you like to mold? Choose wisely, for once I work my wonders, it will be bound to you for eternity...|\n\nadd_spacer|small|\nadd_button|upgradelife|`9Upgrade Ancestral Of Life|\n\nadd_spacer|small|\nadd_button|exit222|`9Return|0|0|\nadd_quick_exit|"));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(peer, 0, packet2);
							delete p2.data;
						}
					}
					else {
						GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`9Ancient Goddess``|left|5086|0|0|\n\nadd_spacer|small|\nadd_textbox|`oGreetings, mortal! It seems you have some ancient thing I can enchance through magic old. Tell me: Which would you like to mold? Choose wisely, for once I work my wonders, it will be bound to you for eternity...|\n\nadd_spacer|small|\nadd_button|upgradedimensions|`9Upgrade Ancestral Of Dimensions|\n\nadd_spacer|small|\nadd_button|exit222|`9Return|0|0|\nadd_quick_exit|"));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(peer, 0, packet2);
						delete p2.data;
					}

				}
				else {
					GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`9Ancient Goddess``|left|5086|0|0|\n\nadd_spacer|small|\nadd_textbox|`oGreetings, mortal! It seems you have some ancient thing I can enchance through magic old. Tell me: Which would you like to mold? Choose wisely, for once I work my wonders, it will be bound to you for eternity...|\n\nadd_spacer|small|\nadd_button|upgradewisdom|`9Upgrade Ancestral Of Wisdom|\n\nadd_spacer|small|\nadd_button|exit222|`9Return|0|0|\nadd_quick_exit|"));
					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(peer, 0, packet2);
					delete p2.data;
				}

			}
			else {

				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You must be world owner to use `^Ancient Altar`#!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;

			}


		}
	}







	if (tile == 32)
	{
		if (world->items[x + (y * world->width)].foreground == 9170) {
			if (((PlayerInfo*)(peer->data))->haveGrowId && ((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || ((PlayerInfo*)(peer->data))->rawName == "sebia") {
				if (((PlayerInfo*)(peer->data))->level < 80)
				{
					GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@You Must Be Aleast `9Level `480 `@To Use `3This Machine`@!"));
					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet);
					delete p.data;

				}
				else {
					GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wMagic Machine``|left|9170|0|0|\n\nadd_spacer|small|\nadd_textbox|`oThis machine is stronger than you think! It has ability to convert premium blocks into crystals! `4Warning! `oYou must have at least 100 blocks! Click `9Start `oTo get started!|\n\nadd_spacer|small|\nadd_button|magicmachine|`9Start|0|0|\nadd_quick_exit|"));
					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(peer, 0, packet2);
					delete p2.data;
				}
			}
			else {

				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You must be world owner to use this machine!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;

			}


		}
	}










	if (tile == 32)
	{
		if (world->items[x + (y * world->width)].foreground == 2398) {

			if (((PlayerInfo*)(peer->data))->level < 120)
			{
				GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@You Must Be Aleast `9Level `480 `@To Use `3Trade With Locke`@!"));
				ENetPacket* packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);
				delete p.data;

			}
			else {
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wLocke The Salesman``|left|2398|0|0|\n\nadd_spacer|small|\nadd_textbox|`oWelcome `9GTLT `oPlayers, I'm here to `^trade `oAll yours `9Crystals `oInto `^Awesome `9World locks `oPress `9Trade `oTo View My Exclusive `9Offers!|\n\nadd_spacer|small|\nadd_button|locke|`9Trade|0|0|\nadd_quick_exit|"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(peer, 0, packet2);
				delete p2.data;
			}
		}
	}






	if (tile == 18)
	{
		if (world->items[x + (y * world->width)].foreground == 1008) {
			if (((PlayerInfo*)(peer->data))->haveGrowId && ((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || ((PlayerInfo*)(peer->data))->rawName == "sebia") {
				int valgem;
				valgem = rand() % 40;
				std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string content((std::istreambuf_iterator<char>(ifs)),
					(std::istreambuf_iterator<char>()));
				if (((PlayerInfo*)(peer->data))->level < 15)
				{
					GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@You Must Be Aleast `9Level `415 `@To Harvest `eATM Machines`@!"));
					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet);
					delete p.data;
				}
				else {
					using namespace std::chrono;
					if (((PlayerInfo*)(peer->data))->lastATM + 1200 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
					{
						((PlayerInfo*)(peer->data))->lastATM = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
						ofstream fd("blocks/atm/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
						fd << ((PlayerInfo*)(peer->data))->lastATM;
						fd.close();
					}
					else {
						int kiekDar = (((PlayerInfo*)(peer->data))->lastATM + 1200 - (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count());
						long milli = kiekDar;
						//3600000 milliseconds in an hour
						long hr = milli / 3600000;
						milli = milli - 3600000 * hr;
						//60000 milliseconds in a minute
						long min = milli / 60000;
						milli = milli - 60000 * min;

						//1000 milliseconds in a second
						long sec = milli / 1000;

						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Cooldown `@Please Wait `9" + to_string(sec) + "s. `@To Use ATM!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);


						enet_peer_send(peer, 0, packet);
						delete p.data;
						//enet_host_flush(server);
						return;
					}

					GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `9" + std::to_string(valgem) + " `2gems `^from the `eATM Machine`^!"));
					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet);
					delete p.data;
					GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`^You found `9" + std::to_string(valgem) + " `2Gems`w!"));
					ENetPacket* packet3 = enet_packet_create(p3.data,
						p3.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet3);
					delete p3.data;
					int gembux = atoi(content.c_str());
					int fingembux = gembux + valgem;
					ofstream myfile;
					myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
					myfile << fingembux;
					myfile.close();
					int gemcalc = gembux + valgem;
					GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
					ENetPacket* packetpp = enet_packet_create(pp.data,
						pp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packetpp);
					delete pp.data;
					int hi = data.punchX * 32;
					int hi2 = data.punchY * 32;
					GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 29), hi, hi2));
					ENetPacket* packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packetd);
					delete psp.data;
				}

			}
			else {

				GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@You don't have access to break this `eATM Machine`@!"));
				ENetPacket* packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);
				delete p.data;

			}
		}




	}












	if (tile == 18)
	{
		if (world->items[x + (y * world->width)].foreground == 1636) {
			if (((PlayerInfo*)(peer->data))->haveGrowId && ((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || ((PlayerInfo*)(peer->data))->rawName == "sebia") {
				if (((PlayerInfo*)(peer->data))->level < 99)
				{
					GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@You Must Be Aleast `9Level `499 `@To Harvest `#Unicorns`@!"));
					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet);
					delete p.data;
				}
				else {
					using namespace std::chrono;
					if (((PlayerInfo*)(peer->data))->lastATM + 3200 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
					{
						((PlayerInfo*)(peer->data))->lastATM = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
						ofstream fd("unicorn/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
						fd << ((PlayerInfo*)(peer->data))->lastATM;
						fd.close();
					}
					else {
						int kiekDar = (((PlayerInfo*)(peer->data))->lastATM + 3200 - (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count());
						long milli = kiekDar;
						//3600000 milliseconds in an hour
						long hr = milli / 3600000;
						milli = milli - 3600000 * hr;
						//60000 milliseconds in a minute
						long min = milli / 60000;
						milli = milli - 60000 * min;

						//1000 milliseconds in a second
						long sec = milli / 1000;

						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Cooldown `@Please Wait `9" + to_string(sec) + "s. `@To Use `#Unicorn!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);


						enet_peer_send(peer, 0, packet);
						delete p.data;
						//enet_host_flush(server);
						return;
					}
					string crystaluMas[26] = { "gold", "sapphire", "sapphire", "diamond", "rubble", "sapphire", "rubble", "rubble", "opal", "opal", "opal", "opal", "gold", "emerald", "amber", "sapphire", "amber", "sapphire", "amber", "amber", "amber", "emerald", "gold", "gold", "gold", "amber" };
					int crystalChance = rand() % 3;
					int randIndex = rand() % 26;
					string crystalName = crystaluMas[randIndex];
					GiveChestPrizeCrystal(peer, crystalName, crystalChance);
					int hi = data.punchX * 32;
					int hi2 = data.punchY * 32;
					GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 72), hi, hi2));
					ENetPacket* packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packetd);
					delete psp.data;
				}

			}
			else {

				GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@You don't have access to break this `#Unicorn`@!"));
				ENetPacket* packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);
				delete p.data;

			}
		}




	}
























	if (((PlayerInfo*)(peer->data))->rawName != "sebia")
	{
		if (world->items[x + (y * world->width)].foreground == 6 || world->items[x + (y * world->width)].foreground == 8 || world->items[x + (y * world->width)].foreground == 7372 || world->items[x + (y * world->width)].foreground == 3760) {
			if (((PlayerInfo*)(peer->data))->cloth_hand == 8452) {

				//Tai OK Gal

			}


			else {
				GamePacket p2 = packetEnd(appendIntx(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wIt's too strong to break."), 0), 1));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
				return;
			}
		}

		if (tile == 32) {
			if (world->items[x + (y*world->width)].foreground == 3832) { // stuff weather dialog
				if (x != 0)
				{
					//((PlayerInfo*)(peer->data))->lastPunchX = x;
				}
				if (y != 0)
				{
					//((PlayerInfo*)(peer->data))->lastPunchY = y;
				}
				/*GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wStuff Weather Machine``|left|3832|\nadd_item_picker|stuffitem|Edit Item|Choose any item you want to pick|\nadd_spacer|small|\nadd_text_input|gravity|Gravity Value||4|\nadd_spacer|small|\nadd_quick_exit|\nend_dialog|stuff|Apply||"));
				ENetPacket * packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);
				delete p.data;*/
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
			}

		}

		if (tile == 6 || tile == 3760 || tile == 1000 || tile == 7372 || tile == 1770 || tile == 1832 || tile == 4720)
		{
			GamePacket p2 = packetEnd(appendIntx(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wIt's too heavy to place."), 0), 1));
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet2);
			delete p2.data;
			return;
		}

	}






























	if (world->name == "ADMIN" && !((PlayerInfo*)(peer->data))->adminLevel)
	{
		if (world->items[x + (y * world->width)].foreground == 1790)
			sendWizard(peer, x, y);
		return;
	}

	if (world->name == "HELL" && !((PlayerInfo*)(peer->data))->adminLevel)
	{
		if (world->items[x + (y * world->width)].foreground == 1790)
			sendWizard(peer, x, y);
		return;
	}

	if (world->name != "ADMIN" || world->name != "HELL") {
		if (world->owner != "") {

			/*if (world->items[x + (y * world->width)].foreground == 758)
			{

				if (((PlayerInfo*)(peer->data))->rawName == world->owner) {

					if (((PlayerInfo*)(peer->data))->unwheel == false)
					{
						sendRoulete(peer, x, y);
					}
					else
					{

						data.plantingTree = 0;

						world->items[x + (y * world->width)].foreground = 0;

						ENetPeer* currentPeer;


						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer))
								SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);

							//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
						}







						data.plantingTree = tile;


					}
				}
				else
				{
					sendRoulete(peer, x, y);
				}

			}*/
		}
	}
	if (world->name != "ADMIN" || world->name != "HELL") {
		if (world->owner != "") {


		}
	}



	if (tile == 18)
	{
		if (world->items[x + (y * world->width)].foreground == 758)
		{
			sendRoulete(peer, x, y);
		}
	}



	if (tile == 18 || tile == 32)
	{

		if (world->items[x + (y * world->width)].foreground == 4358)
		{

			/*GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`7Rankup``|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oUnfortunately, since `#Robertas `oLeft `9GTLT `oTeam, We have been forced to close `4Rankup `9Feature `o, you may ask why? the answer is that i'm alone in `9GTLT `oDevelopment `w[`4I actually was thinking about closing `9GTLT `4at all`w] `oAnd I can't allow players anymore to get `#ranks `oFor free, but don't get `6dissapointed `oI can promise you its `#not `4Forever `o~Sebia`2 2/17/2020`o.|left|112|\nadd_spacer|small|\nadd_button|closea222|`2Close!|0|0|\nadd_spacer|\nadd_quick_exit"));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);

			//enet_host_flush(server);
			delete p.data;*/







			string nextlvlname = "";

			int Pgems = 0;

			ifstream gemfd("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
			gemfd >> Pgems;
			gemfd.close();

			int Pruby = ((PlayerInfo*)(peer->data))->rubble;
			int Pamber = ((PlayerInfo*)(peer->data))->amber;
			int Pgold = ((PlayerInfo*)(peer->data))->gold;
			int Pdiamond = ((PlayerInfo*)(peer->data))->diamond;
			int Popal = ((PlayerInfo*)(peer->data))->opal;
			int Psapphire = ((PlayerInfo*)(peer->data))->sapphire;
			int Pemerald = ((PlayerInfo*)(peer->data))->emerald;

			int gems = 50000;
			int amber = 120;
			int opal = 100;
			int gold = 80;
			int ruby = 70;
			int sapphire = 60;
			int diamond = 60;
			int emerald = 50;

			int kiek, lvl;

			ifstream fd("rankup.txt");
			fd >> kiek;

			for (int i = 0; i < kiek; i++)
			{
				fd >> lvl >> nextlvlname;
				if (((PlayerInfo*)(peer->data))->adminLevel == lvl)
				{
					amber *= i + 1;
					opal *= i + 1;
					gold *= i + 1;
					ruby *= i + 1;
					sapphire *= i + 1;
					diamond *= i + 1;
					emerald *= i + 1;
					gems *= i + 1;
					break;
				}
			}

			if (nextlvlname != "NONE") {

				((PlayerInfo*)(peer->data))->rankupInfo.nextlvlName = nextlvlname;
				if (((PlayerInfo*)(peer->data))->adminLevel == 999)
				{
					((PlayerInfo*)(peer->data))->rankupInfo.nextRankId = 1000;
				}
				else
				{
					((PlayerInfo*)(peer->data))->rankupInfo.nextRankId = lvl + 111;
				}
				((PlayerInfo*)(peer->data))->rankupInfo.gems = gems;
				((PlayerInfo*)(peer->data))->rankupInfo.amber = amber;
				((PlayerInfo*)(peer->data))->rankupInfo.opal = opal;
				((PlayerInfo*)(peer->data))->rankupInfo.gold = gold;
				((PlayerInfo*)(peer->data))->rankupInfo.ruby = ruby;
				((PlayerInfo*)(peer->data))->rankupInfo.sapphire = sapphire;
				((PlayerInfo*)(peer->data))->rankupInfo.diamond = diamond;
				((PlayerInfo*)(peer->data))->rankupInfo.emerald = emerald;
				GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`7Rankup``|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oYou have: `1" + to_string(Pamber) + " `8Amber's`0!|left|1432|small|\nadd_textbox|`oYou have: `1" + to_string(Popal) + " `1Opal's`0!|left|1432|small|\nadd_textbox|`oYou have: `1" + to_string(Pgold) + " `9Gold's`0!|left|1432|small|\nadd_textbox|`oYou have: `1" + to_string(Pruby) + " `4Ruby's`0!|left|1432|small|\nadd_textbox|`oYou have: `1" + to_string(Psapphire) + " `bSapphire's`0!|left|1432|small|\nadd_textbox|`oYou have: `1" + to_string(Pdiamond) + " `3Diamond's`0!|left|1432|small|\nadd_textbox|`oYou have: `1" + to_string(Pemerald) + " `2Emerald's`0!|left|1432|small|\nadd_textbox|`oYou have: `1" + to_string(Pgems) + " `9Gem's`0|left|826|\nadd_spacer|small|\nadd_textbox|`oTo `5upgrade `oyou need " + to_string(amber) + " `8Amber's`o!|left|1432|small|\nadd_textbox|`oTo `5upgrade `oyou need " + to_string(opal) + " `1Opal's`o!|left|1432|small|\nadd_textbox|`oTo `5upgrade `oyou need " + to_string(gold) + " `9Gold's`o!|left|1432|small|\nadd_textbox|`oTo `5upgrade `oyou need " + to_string(ruby) + " `4Ruby's`o!|left|1432|small|\nadd_textbox|`oTo `5upgrade `oyou need " + to_string(sapphire) + " `bSapphire's`o!|left|1432|small|\nadd_textbox|`oTo `5upgrade `oyou need " + to_string(diamond) + " `3Diamond's`o!|left|1432|small|\nadd_textbox|`oTo `5upgrade `oyou need " + to_string(emerald) + " `2Emerald's`o!|left|1432|small|\nadd_textbox|`oTo `5upgrade `oyou need " + to_string(gems) + " `9Gem's`o!|left|826|\nadd_spacer|\nadd_label_with_icon|small|`7Your next available rank is `1" + nextlvlname + "`7. Ranking UP will give you new commands and new features!|left|112|\nadd_spacer|small|\nadd_button|rankup|`2Rankup!|0|0|\nadd_spacer|\nadd_quick_exit"));
				ENetPacket* packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);

				//enet_host_flush(server);
				delete p.data;
			}
			else
			{

				GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`8Whoops!``|left|1048|\nadd_spacer|small|\nadd_label_with_icon|small|`4Unfortunately `oyou are the highest rank of all available ranks!|left|6126|\nadd_spacer|small|\nadd_button|close|`8Close|0|0|\nadd_spacer|\nadd_quick_exit"));
				ENetPacket* packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet);

				//enet_host_flush(server);
				delete p.data;
			}


		}
	}


	if (world->items[x + (y * world->width)].foreground == 2978)
	{
		if (tile == 32) {
			string ownername = world->owner;

			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n \nadd_label_with_icon|big|`wVending Machine|left|2978| \nadd_spacer|small| \nadd_label|small|``This machine is empty.``|left|4|\nadd_item_picker|netid|`wAdd|\nadd_spacer|small|\nadd_quick_exit|\nend_dialog|noty|Close||gazette||"));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);

			//enet_host_flush(server);
			delete p.data;

			return;
		}
	}

	if (world->items[x + (y * world->width)].foreground == 20 || world->items[x + (y * world->width)].foreground == 24 || world->items[x + (y * world->width)].foreground == 26 || world->items[x + (y * world->width)].foreground == 28 || world->items[x + (y * world->width)].foreground == 608 || world->items[x + (y * world->width)].foreground == 780 || world->items[x + (y * world->width)].foreground == 986 || world->items[x + (y * world->width)].foreground == 1426 || world->items[x + (y * world->width)].foreground == 1428 || world->items[x + (y * world->width)].foreground == 1430 || world->items[x + (y * world->width)].foreground == 1432 || world->items[x + (y * world->width)].foreground == 1446 || world->items[x + (y * world->width)].foreground == 780 || world->items[x + (y * world->width)].foreground == 1906 || world->items[x + (y * world->width)].foreground == 2396 || world->items[x + (y * world->width)].foreground == 2414 || world->items[x + (y * world->width)].foreground == 2586 || world->items[x + (y * world->width)].foreground == 2948 || world->items[x + (y * world->width)].foreground == 3758 || world->items[x + (y * world->width)].foreground == 4470 || world->items[x + (y * world->width)].foreground == 4488 || world->items[x + (y * world->width)].foreground == 5622 || world->items[x + (y * world->width)].foreground == 6102 || world->items[x + (y * world->width)].foreground == 6272)
	{
		if (world->owner != "") {
			if (((PlayerInfo*)(peer->data))->rawName == world->owner) {
				if (tile == 32) {
					((PlayerInfo*)(peer->data))->SignPosX;
					((PlayerInfo*)(peer->data))->SignPosY;
					int yy = ((PlayerInfo*)(peer->data))->SignPosX / 32;
					int xx = ((PlayerInfo*)(peer->data))->SignPosY / 32;
					int posX = ((PlayerInfo*)(peer->data))->posX / 32; // good value is actually 31.16-31.33
					int posY = ((PlayerInfo*)(peer->data))->posY / 32;
					string world = ((PlayerInfo*)(peer->data))->currentWorld;
					string posx = std::to_string(yy);
					string posy = std::to_string(xx);
					bool exist = std::experimental::filesystem::exists("signs/" + world + posx + posy + ".txt");

					if (exist)
					{
						std::ifstream ifs("signs/" + world + posx + posy + ".txt");
						std::string content((std::istreambuf_iterator<char>(ifs)),
							(std::istreambuf_iterator<char>()));
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit Sign``|left|20|\n\nadd_textbox|`oWhat would you like to write on this sign?|\nadd_text_input|text||" + content + "|100|\nend_dialog|signsshitit|Cancel|OK|\n"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;
					}
					else
					{
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit Sign``|left|20|\n\nadd_textbox|`oWhat would you like to write on this sign?|\nadd_text_input|text|||100|\nend_dialog|signsshitit|Cancel|OK|\n"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;
					}
				}
			}
		}
	}
	if (world->name != "ADMIN" || world->name != "HELL") {
		if (world->owner != "") {



			/*
			if (((PlayerInfo*)(peer->data))->rawName != world->owner)
			{

				if (tile == 32)
				{
					if (world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 5814 || world->items[x + (y * world->width)].foreground == 2408 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 4428 || world->items[x + (y * world->width)].foreground == 7188)
					{

						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit World Lock``||18||\nadd_textbox|`oHow many gems?: |\nadd_text_input|worldoffer|||3|\nend_dialog|reqoffer|Cancel|TRADE|\n"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);

						delete p.data;


					}

				}
			}
			*/



			if (((PlayerInfo*)(peer->data))->rawName == world->owner)
			{




				// WE ARE GOOD TO GO

				if (tile == 32)
				{
					if (world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 2408 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 4428 || world->items[x + (y * world->width)].foreground == 7188)
					{
						std::ostringstream oss;
						if (!world->worldaccess.empty())
						{
							std::copy(world->worldaccess.begin(), world->worldaccess.end() - 1,
								std::ostream_iterator<string>(oss, ", "));

							// Now add the last element with no delimiter
							oss << world->worldaccess.back();
						}
						else {
							string oss = "You dont have any accessed player!";
						}
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit World Lock``|left|242|\nadd_spacer|small|\nadd_label|small|Access list: " + oss.str() + "|left|\nadd_spacer|small|\nadd_button|worldPublic|`wSet world to `9PUBLIC|0|0|\nadd_button|worldPrivate|`wSet world to `4PRIVATE|0|0|\nadd_spacer|big|\nadd_player_picker|netid|`wAdd|\nadd_spacer|small|\nadd_button_with_icon|allowMod|Allow Noclip|noflags|1796||\nadd_button_with_icon|allowMod1|Disallow Noclip|noflags|242||\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);

						//enet_host_flush(server);
						delete p.data;
					}
				}


				if (tile == 32)
				{
					if (world->items[x + (y * world->width)].foreground == 9290)
					{
						std::ostringstream oss;
						if (!world->worldaccess.empty())
						{
							std::copy(world->worldaccess.begin(), world->worldaccess.end() - 1,
								std::ostream_iterator<string>(oss, ", "));

							// Now add the last element with no delimiter
							oss << world->worldaccess.back();
						}
						else {
							string oss = "You dont have any accessed player!";
						}
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit `bDark Lock``|left|9290|\nadd_spacer|small|\nadd_label|small|Access list: " + oss.str() + "|left|\nadd_spacer|small|\nadd_button|worldPublic|`wSet world to `9PUBLIC|0|0|\nadd_button|worldPrivate|`wSet world to `4PRIVATE|0|0|\nadd_spacer|big|\nadd_player_picker|netid|`wAdd|\nadd_spacer|small|\nadd_button_with_icon|allowMod|Allow Noclip|noflags|1796||\nadd_button_with_icon|allowMod1|Disallow Noclip|noflags|242||\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);

						//enet_host_flush(server);
						delete p.data;
					}
				}



				if (tile == 32)
				{
					if (world->items[x + (y * world->width)].foreground == 9308)
					{
						std::ostringstream oss;
						if (!world->worldaccess.empty())
						{
							std::copy(world->worldaccess.begin(), world->worldaccess.end() - 1,
								std::ostream_iterator<string>(oss, ", "));

							// Now add the last element with no delimiter
							oss << world->worldaccess.back();
						}
						else {
							string oss = "You dont have any accessed player!";
						}
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit `4Lava Lock``|left|9308|\nadd_spacer|small|\nadd_label|small|Access list: " + oss.str() + "|left|\nadd_spacer|small|\nadd_button|worldPublic|`wSet world to `9PUBLIC|0|0|\nadd_button|worldPrivate|`wSet world to `4PRIVATE|0|0|\nadd_spacer|big|\nadd_player_picker|netid|`wAdd|\nadd_spacer|small|\nadd_button_with_icon|allowMod|Allow Noclip|noflags|1796||\nadd_button_with_icon|allowMod1|Disallow Noclip|noflags|242||\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);

						//enet_host_flush(server);
						delete p.data;
					}
				}




				if (tile == 32)
				{
					if (world->items[x + (y * world->width)].foreground == 8470)
					{
						std::ostringstream oss;
						if (!world->worldaccess.empty())
						{
							std::copy(world->worldaccess.begin(), world->worldaccess.end() - 1,
								std::ostream_iterator<string>(oss, ", "));

							// Now add the last element with no delimiter
							oss << world->worldaccess.back();
						}
						else {
							string oss = "You dont have any accessed player!";
						}
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit `2Dirt Lock``|left|8470|\nadd_spacer|small|\nadd_label|small|Access list: " + oss.str() + "|left|\nadd_spacer|small|\nadd_button|worldPublic|`wSet world to `9PUBLIC|0|0|\nadd_button|worldPrivate|`wSet world to `4PRIVATE|0|0|\nadd_spacer|big|\nadd_player_picker|netid|`wAdd|\nadd_spacer|small|\nadd_button_with_icon|allowMod|Allow Noclip|noflags|1796||\nadd_button_with_icon|allowMod1|Disallow Noclip|noflags|242||\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);

						//enet_host_flush(server);
						delete p.data;
					}
				}


			}


			/*if (world->name != "ADMIN") //todo1 {
				if (world->owner != "") {

					if (((PlayerInfo*)(peer->data))->rawName == world->owner || (((PlayerInfo*)(peer->data))->rawName == world->worldaccess || ((PlayerInfo*)(peer->data))->adminLevel ==999)) {
						if (((PlayerInfo*)(peer->data))->rawName == "") return;
						// WE ARE GOOD TO GO

						if (world->items[x + (y*world->width)].foreground == 242 && (((PlayerInfo*)(peer->data))->rawName == world->worldaccess))
						{
							return;
						}

						if (tile == 32 && ((PlayerInfo*)(peer->data))->rawName == world->worldaccess) {
							return;
						}
						string offlinelist = "";
						string offname = "";
						int ischecked;

						for (std::vector<string>::const_iterator i = world->accessworld.begin(); i != world->accessworld.end(); ++i) {
							offname = *i;
							offlinelist += "\nadd_checkbox|isAccessed|" + offname + "|0|\n";

						}

						if (world->isPublic == true) {
							ischecked = 1;
						}
						else {
							ischecked = 0;
						}
						if (tile == 32) {
							if (world->accessworld.size() == 0) {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit World Lock``|left|242|\nadd_textbox|`wAccess list:|left|\nadd_spacer|small|\nadd_textbox|Currently, you're the only one with the access.|left|\nadd_spacer|small|\nadd_player_picker|netid|`wAdd|\nadd_checkbox|isWorldPublic|Allow anyone to build|" + std::to_string(ischecked) + "| \nend_dialog|wlmenu|Cancel|OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							else {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wEdit World Lock``|left|242|\nadd_textbox|`wAccess list:|left|\nadd_spacer|small|" + offlinelist + "add_spacer|small|\nadd_player_picker|netid|`wAdd|\nadd_checkbox|isWorldPublic|Allow anyone to build|" + std::to_string(ischecked) + "| \nend_dialog|wlmenu|Cancel|OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

						}
					}
				}
			}*/

			else if (find(world->worldaccess.begin(), world->worldaccess.end(), ((PlayerInfo*)(peer->data))->rawName) != world->worldaccess.end())
			{
				if (world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 2408 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 4428 || world->items[x + (y * world->width)].foreground == 7188 || world->items[x + (y * world->width)].foreground == 9308 || world->items[x + (y * world->width)].foreground == 9290 || world->items[x + (y * world->width)].foreground == 8470)
				{


					string ownername = world->Displayowner;
					GamePacket p2 = packetEnd(appendIntx(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`0" + ownername + "'s `$World Lock`0. (`2Access Granted`w)"), 0), 1));


					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet2);
					delete p2.data;

					return;
					string text = "action|play_sfx\nfile|audio/punch_locked.wav\ndelayMS|0\n";
					BYTE* data = new BYTE[5 + text.length()];
					BYTE zero = 0;
					int type = 3;
					memcpy(data, &type, 4);
					memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
					memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

					ENetPacket* packetsou = enet_packet_create(data,
						5 + text.length(),
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(peer, 0, packetsou);


					return;
					//}
				}

			}
			else if (world->isPublic)
			{
				if (world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 2408 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 4428 || world->items[x + (y * world->width)].foreground == 7188 || world->items[x + (y * world->width)].foreground == 9308 || world->items[x + (y * world->width)].foreground == 9290 || world->items[x + (y * world->width)].foreground == 8470)
				{


					string ownername = world->Displayowner;
					GamePacket p2 = packetEnd(appendIntx(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`0" + ownername + "'s `$World Lock`0. (`9Open to Public`w)"), 0), 1));


					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet2);
					delete p2.data;

					return;
				}
				string text = "action|play_sfx\nfile|audio/punch_locked.wav\ndelayMS|0\n";
				BYTE* data = new BYTE[5 + text.length()];
				BYTE zero = 0;
				int type = 3;
				memcpy(data, &type, 4);
				memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
				memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

				ENetPacket* packetsou = enet_packet_create(data,
					5 + text.length(),
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(peer, 0, packetsou);


				return;
				//}

			}
			else if (world->isEvent)
			{
				if (world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 2408 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 4428 || world->items[x + (y * world->width)].foreground == 7188 || world->items[x + (y * world->width)].foreground == 9308 || world->items[x + (y * world->width)].foreground == 9290 || world->items[x + (y * world->width)].foreground == 8470)
				{


					string ownername = world->Displayowner;
					GamePacket p2 = packetEnd(appendIntx(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`0" + ownername + "'s `$World Lock`0. (`4No Access`w)"), 0), 1));


					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet2);
					delete p2.data;
					string text = "action|play_sfx\nfile|audio/punch_locked.wav\ndelayMS|0\n";
					BYTE* data = new BYTE[5 + text.length()];
					BYTE zero = 0;
					int type = 3;
					memcpy(data, &type, 4);
					memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
					memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

					ENetPacket* packetsou = enet_packet_create(data,
						5 + text.length(),
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(peer, 0, packetsou);
					return;
				}
				else if (world->items[x + (y * world->width)].foreground != 1000)
				{
					string text = "action|play_sfx\nfile|audio/punch_locked.wav\ndelayMS|0\n";
					BYTE* data = new BYTE[5 + text.length()];
					BYTE zero = 0;
					int type = 3;
					memcpy(data, &type, 4);
					memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
					memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

					ENetPacket* packetsou = enet_packet_create(data,
						5 + text.length(),
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(peer, 0, packetsou);
					return;
				}


			}
			else {
				if (world->items[x + (y * world->width)].foreground == 242)
				{
					string ownername = world->Displayowner;
					GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`0" + ownername + "'s `$World Lock`0."), 0));


					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet2);
					delete p2.data;


				}
				if (((PlayerInfo*)(peer->data))->haveGrowId == false) {
					GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Create `9Grow-ID `#First`9!"));
					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet2);
					delete p2.data;
				}
				else
				{
					string text = "action|play_sfx\nfile|audio/punch_locked.wav\ndelayMS|0\n";
					BYTE* data = new BYTE[5 + text.length()];
					BYTE zero = 0;
					int type = 3;
					memcpy(data, &type, 4);
					memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
					memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

					ENetPacket* packetsou = enet_packet_create(data,
						5 + text.length(),
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(peer, 0, packetsou);


					return;
				}

			} /*lockeds*/
			if (tile == 242 || tile == 2408 || tile == 1796 || tile == 4428 || tile == 7188 || tile == 8470 || tile == 9290 || tile == 9308) {



				GamePacket p3 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`0Only one `$World Lock`0 can be placed in a world!"), 0));


				ENetPacket* packet3 = enet_packet_create(p3.data,
					p3.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet3);
				delete p3.data;
				return;
			}
		}
	}



		
		
		
		
		
		
		
		
		
		
		



	if (tile == 18)
	{
		if (world->items[x + (y * world->width)].foreground == 1490)
		{
			world->weather = 10;
			ENetPeer* currentPeer;

			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (isHere(peer, currentPeer))
				{
					GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(currentPeer, 0, packet2);
					delete p2.data;
					continue;
				}
			}
		}
	}





	if (tile == 18)
	{
		if (world->items[x + (y * world->width)].foreground == 934)
		{
			world->weather = 2;
			ENetPeer* currentPeer;

			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (isHere(peer, currentPeer))
				{
					GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(currentPeer, 0, packet2);
					delete p2.data;
					continue;
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 946)
			{
				world->weather = 3;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 1490)
			{
				world->weather = 10;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 932)
			{
				world->weather = 4;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 984)
			{
				world->weather = 5;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 1210)
			{
				world->weather = 8;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 1364)
			{
				world->weather = 11;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 1750)
			{
				world->weather = 15;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 2046)
			{
				world->weather = 17;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 2284)
			{
				world->weather = 18;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 2744)
			{
				world->weather = 19;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 3252)
			{
				world->weather = 20;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 3446)
			{
				world->weather = 21;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 3534)
			{
				world->weather = 22;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 3694)
			{
				world->weather = 25;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 3832)
			{
				world->weather = 29;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 1490)
			{
				world->weather = 10;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 4242)
			{
				world->weather = 30;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 4486)
			{
				world->weather = 31;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 4776)
			{
				world->weather = 32;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 4892)
			{
				world->weather = 33;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 5000)
			{
				world->weather = 34;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 5112)
			{
				world->weather = 35;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 5654)
			{
				world->weather = 36;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 5716)
			{
				world->weather = 37;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 5958)
			{
				world->weather = 38;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 6854)
			{
				world->weather = 42;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}
	{

		if (tile == 18)
		{
			if (world->items[x + (y * world->width)].foreground == 7644)
			{
				world->weather = 44;
				ENetPeer* currentPeer;

				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), world->weather));
						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(currentPeer, 0, packet2);
						delete p2.data;
						continue;
					}
				}
			}
		}
	}























	if (tile == 3764) {
		if (((PlayerInfo*)(peer->data))->rawName == world->owner) {
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`4Use atomic fireball on this world? Warning! This will delete all blocks placed in your world!``|left|3764|\nadd_spacer|\nadd_button|nukeyes|`4YES!|\nadd_button|`2Cancel|cancel|\nadd_quick_exit|"));
			ENetPacket* packet = enet_packet_create(p.data,
				p.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p.data;

		}
		else {
			GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You must be world owner to use `4Atomic Fireball`#!"));
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet2);
			delete p2.data;
		}
	}






	if (tile == 6204) {
		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`oAre You Sure You Want To Open `8Bronze `oChest`9?``|left|6204|\nadd_spacer|\nadd_button|openbronze|`2Open!|\nadd_quick_exit|"));
		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete p.data;
	}
	if (tile == 6202) {
		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`oAre You Sure You Want To Open `sSilver `oChest`9?``|left|6202|\nadd_spacer|\nadd_button|opensilver|`2Open!|\nadd_quick_exit|"));
		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete p.data;
	}
	if (tile == 6200) {
		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`oAre You Sure You Want To Open `9Gold `oChest`9?``|left|6200|\nadd_spacer|\nadd_button|opengold|`2Open!|\nadd_quick_exit|"));
		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete p.data;
	}
	if (tile == 7484) {
		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`oAre You Sure You Want To Open `qWinter `oChest`9?``|left|7484|\nadd_spacer|\nadd_button|openwinter|`2Open!|\nadd_quick_exit|"));
		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete p.data;
	}
	if (tile == 7954) {
		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`9Are You Sure You Want To Open `2Spring `oChest`9?``|left|7954|\nadd_spacer|\nadd_button|openspring|`2Open!|\nadd_quick_exit|"));
		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);
		delete p.data;
	}








	// DOOR MOVER
	if (tile == 1404) {
		if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
			GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@You Must Be `2World-Owner `@To Use `wDoor Mover`@!"));
			ENetPacket* packet = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);
			enet_peer_send(peer, 0, packet);
			delete p2.data;
		}
		if (((PlayerInfo*)(peer->data))->rawName == world->owner) {
			if (world->items[x + (y * world->width)].foreground != 0) {
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@There Is No Space For `wMain Door`@!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;

			}
			else if (world->items[x + (y * world->width) + 100].foreground != 0) {
				GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@There Is `4No `@Space For `wMain Door`@!"));
				ENetPacket* packet2 = enet_packet_create(p2.data,
					p2.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(peer, 0, packet2);
				delete p2.data;
			}
			else
			{
				for (int i = 0; i < world->width * world->height; i++)
				{
					if (i >= 5400) {
						world->items[i].foreground = 8;
					}
					else if (world->items[i].foreground == 6) {
						world->items[i].foreground = 0;
						world->items[i + 100].foreground = 0;
					}
					else if (world->items[i].foreground != 6) {
						world->items[x + (y * world->width)].foreground = 6;
						world->items[x + (y * world->width) + 100].foreground = 8;
					}
				}
				WorldInfo* wrld = getPlyersWorld(peer);
				ENetPeer* currentPeer;
				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer))
					{
						string act = ((PlayerInfo*)(peer->data))->currentWorld;
						sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
						joinWorld(currentPeer, act, 0, 0);
						GamePacket p8 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^You Have `2Used `wDoor Mover`^!"));
						ENetPacket* packet8 = enet_packet_create(p8.data,
							p8.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet8);
						delete p8.data;
					}
				}
			}
			return;
		}
	}




	if (tile == 1280) {
		GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
		ENetPacket* packet2 = enet_packet_create(p2.data,
			p2.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet2);
		delete p2.data;
		return;
	}
	if (tile == 32) {
		return;
	}
	if (tile == 822) {
		GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
		ENetPacket* packet2 = enet_packet_create(p2.data,
			p2.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet2);
		delete p2.data;
		return;
	}
	if (tile == 3062)
	{
		world->items[x + (y * world->width)].fire = !world->items[x + (y * world->width)].fire;
		return;
	}
	if (tile == 1866)
	{
		world->items[x + (y * world->width)].glue = !world->items[x + (y * world->width)].glue;
		return;
	}
	ItemDefinition def;
	try {
		def = getItemDef(tile);
		if (def.clothType != ClothTypes::NONE) return;
	}
	catch (int e) {
		def.breakHits = 5;
		if (def.blockType = BlockTypes::SEED) return;
		def.blockType = BlockTypes::UNKNOWN;
#ifdef TOTAL_LOG
		cout << "Ugh, unsupported item " << tile << endl;
#endif
	}
	int test;
	int test2;
	if (((PlayerInfo*)(peer->data))->cloth_hand == 2952) {
		test = 1;
	}
	else {
		test = 4;
	}
	bool iscontains = false;
	SearchInventoryItem(peer, tile, 1, iscontains);
	if (!iscontains)
	{
		return;
	}
	iscontains = false;
	if (tile == 544 || tile == 54600 || tile == 4520 || tile == 382 || tile == 3116 || tile == 4520 || tile == 1792 || tile == 5666 || tile == 2994 || tile == 4368) return;
	if (tile == 5708 || tile == 5709 || tile == 5780 || tile == 5781 || tile == 5782 || tile == 5783 || tile == 5784 || tile == 5785 || tile == 5710 || tile == 5711 || tile == 5786 || tile == 5787 || tile == 5788 || tile == 5789 || tile == 5790 || tile == 5791 || tile == 6146 || tile == 6147 || tile == 6148 || tile == 6149 || tile == 6150 || tile == 6151 || tile == 6152 || tile == 6153 || tile == 5670 || tile == 5671 || tile == 5798 || tile == 5799 || tile == 5800 || tile == 5801 || tile == 5802 || tile == 5803 || tile == 5668 || tile == 5669 || tile == 5792 || tile == 5793 || tile == 5794 || tile == 5795 || tile == 5796 || tile == 5797 || tile == 544 || tile == 54600 || tile == 4520 || tile == 382 || tile == 3116 || tile == 1792 || tile == 5666 || tile == 2994 || tile == 4368 || tile == 6204 || tile == 6202 || tile == 6200 || tile == 7484 || tile == 7954) return;
	if (tile == 1902 || tile == 1508 || tile == 428 || tile == 3764 || tile == 3808 || tile == 5132 || tile == 7166 || tile == 5078 || tile == 5080 || tile == 5082 || tile == 5084 || tile == 5126 || tile == 5128 || tile == 5130 || tile == 5144 || tile == 5146 || tile == 5148 || tile == 5150 || tile == 5162 || tile == 5164 || tile == 5166 || tile == 5168 || tile == 5180 || tile == 5182 || tile == 5184 || tile == 5186 || tile == 7168 || tile == 7170 || tile == 7172 || tile == 7174 || tile == 2480) return;
	if (tile == 9999 || tile == 1770 || tile == 4720 || tile == 4882 || tile == 6392 || tile == 3212 || tile == 1832 || tile == 4742 || tile == 3496 || tile == 3270 || tile == 4722 || tile == 9212 || tile == 5134 || tile == 5152 || tile == 5170 || tile == 5188) return;
	if (tile == 0 || tile == 18) {
		if (world->items[x + (y * world->width)].background == 6864 && world->items[x + (y * world->width)].foreground == 0) return;
		if (world->items[x + (y * world->width)].background == 0 && world->items[x + (y * world->width)].foreground == 0) return;
		data.packetType = 0x8;
		data.plantingTree = 4;
		using namespace std::chrono;
		if ((duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count() - world->items[x + (y * world->width)].breakTime >= 5000)
		{
			world->items[x + (y * world->width)].breakTime = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
			world->items[x + (y * world->width)].breakLevel = 5;
			if (world->items[x + (y * world->width)].foreground == 1790)
				sendWizard(peer, x, y);
		}
		else
			if (y < world->height && world->items[x + (y * world->width)].breakLevel + 4 >= def.breakHits * test) {
				data.packetType = 0x3;
				data.netID = -1;
				data.plantingTree = tile;
				data.punchX = x;
				data.punchY = y;
				world->items[x + (y * world->width)].breakLevel = 0;
				int hi = data.punchX * 32;
				int hi2 = data.punchY * 32;
				if (((PlayerInfo*)(peer->data))->cloth_hand == 1874) {
					GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 97), hi, hi2));
					ENetPacket* packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packetd);
					delete psp.data;
				}
				if (((PlayerInfo*)(peer->data))->cloth_hand == 2952) {
					GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 97), hi, hi2));
					ENetPacket* packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packetd);
					delete psp.data;
				}


				//BLOKAI
				int crystalChange;
				if (world->items[x + (y * world->width)].foreground == 4762) {
					int hi = data.punchX * 32;
					int hi2 = data.punchY * 32;
					GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 286), hi, hi2));
					ENetPacket* packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packetd);
					delete psp.data;
				}
				else if (world->items[x + (y * world->width)].foreground == 7382)
				{

					std::vector<int> list{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9240 };
					int index = rand() % list.size(); // pick a random index
					int value = list[index];

					if (value == 9240) {
						bool success = true;
						SaveShopsItemMoreTimes(9240, 1, peer, success);
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `1Light Crystal `^from the `bOnyx Block`^!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);

						delete p.data;
						int hi = data.punchX * 32;
						int hi2 = data.punchY * 32;
						GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 86), hi, hi2));
						ENetPacket* packetd = enet_packet_create(psp.data,
							psp.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packetd);
						delete psp.data;
					}
					else {

					}
				}












				else if (world->items[x + (y * world->width)].foreground == 9414) {
					world->items[x + (y * world->width)].foreground = 0;
					int kuriPrizaDuot = rand() % 3 + 1;

					if (kuriPrizaDuot == 1)
					{
						int gemChance = rand() % 12000;
						GiveChestPrizeGems(peer, gemChance);
					}

					if (kuriPrizaDuot == 2)
					{
						int luck = rand() % 3 + 1;

						if (luck == 1) {
							GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`^Your `1Luck `^Shines Away..."), 0));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet2);
							delete p2.data;
						}
						if (luck == 2) {
							GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`^The `1Ocean `9Gods `^Didn't Want To Play With You..."), 0));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet2);
							delete p2.data;
						}
						if (luck == 3) {
							GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`^You `9Starting `^To Feel `1Tired`^..."), 0));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet2);
							delete p2.data;
						}


					}


					if (kuriPrizaDuot == 3)
					{

						int itemuMas[62] = { 9416, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 9416, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 9414, 9414, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 9414, 1796, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328, 7328 };
						int ItemChance = 1;

						int randIndex = rand() % 62;
						int itemId = itemuMas[randIndex];

						GiveOceanPrize(peer, itemId, ItemChance, 1);
					}
				}



















				else if (world->items[x + (y * world->width)].foreground == 3402) {
					world->items[x + (y * world->width)].foreground = 0;
					int kuriPrizaDuot = rand() % 3 + 1;

					if (kuriPrizaDuot == 1)
					{
						int gemChance = rand() % 2000;
						GiveChestPrizeGems(peer, gemChance);
					}

					if (kuriPrizaDuot == 2)
					{
						string crystaluMas[18] = { "gold", "sapphire", "sapphire", "sapphire","diamond", "diamond", "diamond", "diamond", "rubble", "opal", "opal", "gold", "amber", "emerald", "emerald", "emerald", "emerald", "gold" };
						int crystalChance = rand() % 3;

						int randIndex = rand() % 18;
						string crystalName = crystaluMas[randIndex];

						GiveChestPrizeCrystal(peer, crystalName, crystalChance);
					}

					if (kuriPrizaDuot == 3)
					{

						int itemuMas[62] = { 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 9408, 9408, 242, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1458, 1796, 1796, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 };
						int ItemChance = 1;

						int randIndex = rand() % 62;
						int itemId = itemuMas[randIndex];

						GiveGBCPrize(peer, itemId, ItemChance, 1);
					}
				}



				else if (world->items[x + (y * world->width)].foreground == 8 || world->items[x + (y * world->width)].foreground == 7382 || world->items[x + (y * world->width)].foreground == 4762 || world->items[x + (y * world->width)].foreground == 7382)
				{

					std::vector<int> list{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9358 };
					int index = rand() % list.size(); // pick a random index
					int value = list[index];

					if (value == 9358) {
						bool success = true;
						SaveShopsItemMoreTimes(9358, 1, peer, success);
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have obtained `eXP `9Block`^!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);

						delete p.data;
						int hi = data.punchX * 32;
						int hi2 = data.punchY * 32;
						GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 86), hi, hi2));
						ENetPacket* packetd = enet_packet_create(psp.data,
							psp.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packetd);
						delete psp.data;
					}
					else {

					}
				}
				else if (world->items[x + (y * world->width)].foreground == 7382) {
					int hi = data.punchX * 32;
					int hi2 = data.punchY * 32;
					GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 116), hi, hi2));
					ENetPacket* packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packetd);
					delete psp.data;
				}

				//BLOKU PABAIGA


				else if (((PlayerInfo*)(peer->data))->cloth_hand == 8452) {
					int hi = data.punchX * 32;
					int hi2 = data.punchY * 32;
					GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 150), hi, hi2));
					ENetPacket* packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packetd);
					delete psp.data;
				}
				else if (((PlayerInfo*)(peer->data))->cloth_hand == 9058) {
					int hi = data.punchX * 32;
					int hi2 = data.punchY * 32;
					GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 262), hi, hi2));
					ENetPacket* packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packetd);
					delete psp.data;
					def.breakHits = 0;
				}
				else if (((PlayerInfo*)(peer->data))->cloth_hand == 5480) {
					int hi = data.punchX * 32;
					int hi2 = data.punchY * 32;
					GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 29), hi, hi2));
					ENetPacket* packetd = enet_packet_create(psp.data,
						psp.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packetd);
					delete psp.data;
					def.breakHits = 0;
				}
				else if (((PlayerInfo*)(peer->data))->cloth_hair == 40) {

					ENetPeer* currentPeer;
					int effect = 262;
					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer)) {

							int x = ((PlayerInfo*)(peer->data))->x;
							int y = ((PlayerInfo*)(peer->data))->y;
							GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

							ENetPacket* packetd = enet_packet_create(psp.data,
								psp.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(currentPeer, 0, packetd);
							delete psp.data;
						}
					}
				}




				if (world->items[x + (y * world->width)].foreground != 0)
				{
					ItemDefinition yologay;
					yologay = getItemDef(world->items[x + (y * world->width)].foreground);
					if (yologay.MultiFacing == "MultiFacing")
					{
						world->items[x + (y * world->width)].rotatedLeft = false;
					}
					if (world->items[x + (y * world->width)].foreground == 2408 || world->items[x + (y * world->width)].foreground == 4428 || world->items[x + (y * world->width)].foreground == 7188)
					{
						world->owner = "";
						world->Displayowner = "";
						world->worldaccess.clear();
						world->pIsVip = false;
						world->pIsMod = false;
						world->pIsDev = false;
						world->pIsPlay = false;
						world->isPublic = false;


						if (((PlayerInfo*)(peer->data))->isNicked == true)
						{
							((PlayerInfo*)(peer->data))->isNicked = false;
							if (((PlayerInfo*)(peer->data))->adminLevel == 0 || ((PlayerInfo*)(peer->data))->adminLevel == 0) {
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;

							}

							if (((PlayerInfo*)(peer->data))->adminLevel == 998)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 1000 && ((PlayerInfo*)(peer->data))->isCreator == true)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 999)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 777)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 555)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;

							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 888)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 444)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}

							GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), ((PlayerInfo*)(peer->data))->displayNamebackup));
							memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor


							ENetPacket* packet7 = enet_packet_create(p7.data,
								p7.len,
								ENET_PACKET_FLAG_RELIABLE);



							ENetPeer* currentPeer;
							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								if (isHere(peer, currentPeer))
								{
									if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
										enet_peer_send(currentPeer, 0, packet7);
									}
								}
							}
							delete p7.data;
						}

						if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`2Newbie`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}




						else if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`1Warrior`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}




						else if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`@Samurai`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}








						else if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`bNinja`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`eKing`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`oVIP`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}









						else if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`5Premium`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}













						else if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`#MOD`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`qAdmin`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}







						else if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`4YouTuber`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}








						else if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`4Leader`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}















						else if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
							{
								if (((PlayerInfo*)(peer->data))->isCreator == true) {
									//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`4Creator`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
									memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
									}

									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);

									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
									}
									delete p7.data;
								}
								/*else if (((PlayerInfo*)(peer->data))->rawName == "btw") {
									//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`#MOMO`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
									memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
									}

									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);

									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
									}
									delete p7.data;
								}*/
								else {
									//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`9Guardian`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
									memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
									}

									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);

									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
									}
									delete p7.data;
								}
							}
						}

























						WorldInfo* world = getPlyersWorld(peer);
						string nameworld = world->name;
						GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`w" + nameworld + " `ohas had its `$World Lock `oremoved!`5]"));
						ENetPacket* packet3 = enet_packet_create(p3.data,
							p3.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet3);
						delete p3.data;
						((PlayerInfo*)(peer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(peer->data))->worldsowned.begin(), ((PlayerInfo*)(peer->data))->worldsowned.end(), nameworld), ((PlayerInfo*)(peer->data))->worldsowned.end());
						string text = "action|play_sfx\nfile|audio/metal_destroy.wav\ndelayMS|0\n";
						BYTE* data = new BYTE[5 + text.length()];
						BYTE zero = 0;
						int type = 3;
						memcpy(data, &type, 4);
						memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
						memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

						ENetPacket* packetsou = enet_packet_create(data,
							5 + text.length(),
							ENET_PACKET_FLAG_RELIABLE);

						ENetPeer* currentPeer;


						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer))
							{
							}

						}

					}


					if (world->items[x + (y * world->width)].foreground == 1796) {
						world->owner = "";
						world->Displayowner = "";
						world->worldaccess.clear();
						world->pIsVip = false;
						world->pIsMod = false;
						world->pIsDev = false;
						world->pIsPlay = false;
						world->isPublic = false;


						if (((PlayerInfo*)(peer->data))->isNicked == true)
						{
							((PlayerInfo*)(peer->data))->isNicked = false;
							if (((PlayerInfo*)(peer->data))->adminLevel == 0 || ((PlayerInfo*)(peer->data))->adminLevel == 0) {
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;

							}
							if (((PlayerInfo*)(peer->data))->adminLevel == 998)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 1000 && ((PlayerInfo*)(peer->data))->isCreator == true)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 999)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 777)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 555)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;

							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 888)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 444)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}

							GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), ((PlayerInfo*)(peer->data))->displayNamebackup));
							memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor


							ENetPacket* packet7 = enet_packet_create(p7.data,
								p7.len,
								ENET_PACKET_FLAG_RELIABLE);



							ENetPeer* currentPeer;
							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								if (isHere(peer, currentPeer))
								{
									if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
										enet_peer_send(currentPeer, 0, packet7);
									}
								}
							}
							delete p7.data;
						}

						if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`2Newbie`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}




						else if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`1Warrior`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}




						else if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`@Samurai`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}








						else if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`bNinja`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`eKing`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`oVIP`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}









						else if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`5Premium`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}













						else if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`#MOD`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`qAdmin`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}







						else if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`4YouTuber`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}








						else if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`4Leader`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}















						else if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
							{
								if (((PlayerInfo*)(peer->data))->isCreator == true) {
									//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`4Creator`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
									memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
									}

									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);

									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
									}
									delete p7.data;
								}
								/*else if (((PlayerInfo*)(peer->data))->rawName == "btw") {
									//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`#MOMO`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
									memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
									}

									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);

									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
									}
									delete p7.data;
								}*/
								else {
									//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`9Guardian`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
									memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
									}

									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);

									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
									}
									delete p7.data;
								}
							}
						}














































						bool success = false;
						WorldInfo* world = getPlyersWorld(peer);
						string nameworld = world->name;
						world->items[x + (y * world->width)].foreground = 0;
						GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`w" + nameworld + " `ohas had its `1Diamond Lock `oremoved!`5]"));
						ENetPacket* packet3 = enet_packet_create(p3.data,
							p3.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet3);
						delete p3.data;
						((PlayerInfo*)(peer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(peer->data))->worldsowned.begin(), ((PlayerInfo*)(peer->data))->worldsowned.end(), nameworld), ((PlayerInfo*)(peer->data))->worldsowned.end());
						string text = "action|play_sfx\nfile|audio/metal_destroy.wav\ndelayMS|0\n";
						BYTE* data = new BYTE[5 + text.length()];
						BYTE zero = 0;
						int type = 3;
						memcpy(data, &type, 4);
						memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
						memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

						ENetPacket* packetsou = enet_packet_create(data,
							5 + text.length(),
							ENET_PACKET_FLAG_RELIABLE);

						ENetPeer* currentPeer;

						SaveShopsItemMoreTimes(1796, 1, peer, success);
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have received your `1Diamond Lock `^Back to your `#Inventory`^!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);

						delete p.data;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer))
							{
							}

						}

					}







					if (world->items[x + (y * world->width)].foreground == 9308) {
						world->owner = "";
						world->Displayowner = "";
						world->worldaccess.clear();
						world->pIsVip = false;
						world->pIsMod = false;
						world->pIsDev = false;
						world->pIsPlay = false;
						world->isPublic = false;


						if (((PlayerInfo*)(peer->data))->isNicked == true)
						{
							((PlayerInfo*)(peer->data))->isNicked = false;
							if (((PlayerInfo*)(peer->data))->adminLevel == 0 || ((PlayerInfo*)(peer->data))->adminLevel == 0) {
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;

							}

							if (((PlayerInfo*)(peer->data))->adminLevel == 998)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 1000 && ((PlayerInfo*)(peer->data))->isCreator == true)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 999)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 777)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 555)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;

							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 888)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 444)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}

							GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), ((PlayerInfo*)(peer->data))->displayNamebackup));
							memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor


							ENetPacket* packet7 = enet_packet_create(p7.data,
								p7.len,
								ENET_PACKET_FLAG_RELIABLE);



							ENetPeer* currentPeer;
							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								if (isHere(peer, currentPeer))
								{
									if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
										enet_peer_send(currentPeer, 0, packet7);
									}
								}
							}
							delete p7.data;
						}

						if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`2Newbie`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}




						else if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`1Warrior`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}




						else if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`@Samurai`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}








						else if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`bNinja`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`eKing`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`oVIP`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}









						else if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`5Premium`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}













						else if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`#MOD`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`qAdmin`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}
















						else if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`4Leader`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}






						else if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`4YouTuber`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}








						else if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
							{
								if (((PlayerInfo*)(peer->data))->isCreator == true) {
									//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`4Creator`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
									memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
									}

									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);

									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
									}
									delete p7.data;
								}
								/*else if (((PlayerInfo*)(peer->data))->rawName == "btw") {
									//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`#MOMO`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
									memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
									}

									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);

									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
									}
									delete p7.data;
								}*/
								else {
									//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`9Guardian`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
									memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
									}

									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);

									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
									}
									delete p7.data;
								}
							}
						}









						bool success = false;
						WorldInfo* world = getPlyersWorld(peer);
						string nameworld = world->name;
						world->items[x + (y * world->width)].foreground = 0;
						GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`w" + nameworld + " `ohas had its `4Lava Lock `oremoved!`5]"));
						ENetPacket* packet3 = enet_packet_create(p3.data,
							p3.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet3);
						delete p3.data;
						((PlayerInfo*)(peer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(peer->data))->worldsowned.begin(), ((PlayerInfo*)(peer->data))->worldsowned.end(), nameworld), ((PlayerInfo*)(peer->data))->worldsowned.end());
						string text = "action|play_sfx\nfile|audio/metal_destroy.wav\ndelayMS|0\n";
						BYTE* data = new BYTE[5 + text.length()];
						BYTE zero = 0;
						int type = 3;
						memcpy(data, &type, 4);
						memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
						memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

						ENetPacket* packetsou = enet_packet_create(data,
							5 + text.length(),
							ENET_PACKET_FLAG_RELIABLE);

						ENetPeer* currentPeer;

						SaveShopsItemMoreTimes(9308, 1, peer, success);
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have received your `4Lava Lock `^Back to your `#Inventory`^!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);

						delete p.data;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer))
							{
							}

						}

					}




					if (world->items[x + (y * world->width)].foreground == 9290) {
						world->owner = "";
						world->Displayowner = "";
						world->worldaccess.clear();
						world->pIsVip = false;
						world->pIsMod = false;
						world->pIsDev = false;
						world->pIsPlay = false;
						world->isPublic = false;


						if (((PlayerInfo*)(peer->data))->isNicked == true)
						{
							((PlayerInfo*)(peer->data))->isNicked = false;
							if (((PlayerInfo*)(peer->data))->adminLevel == 0 || ((PlayerInfo*)(peer->data))->adminLevel == 0) {
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;

							}
							if (((PlayerInfo*)(peer->data))->adminLevel == 998)
							{

								//((PlayerInfo*)(peer->data))->country = "../rtsoft_logo";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 1000 && ((PlayerInfo*)(peer->data))->isCreator == true)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 999)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 777)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 555)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;

							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 888)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 444)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}

							GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), ((PlayerInfo*)(peer->data))->displayNamebackup));
							memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor


							ENetPacket* packet7 = enet_packet_create(p7.data,
								p7.len,
								ENET_PACKET_FLAG_RELIABLE);



							ENetPeer* currentPeer;
							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								if (isHere(peer, currentPeer))
								{
									if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
										enet_peer_send(currentPeer, 0, packet7);
									}
								}
							}
							delete p7.data;
						}

						if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`2Newbie`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}




						else if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`1Warrior`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}




						else if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`@Samurai`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}








						else if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`bNinja`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`eKing`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`oVIP`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}









						else if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`5Premium`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}













						else if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`#MOD`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`qAdmin`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}
















						else if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`4Leader`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}



						else if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`4YouTuber`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}











						else if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
							{
								if (((PlayerInfo*)(peer->data))->isCreator == true) {
									//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`4Creator`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
									memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
									}

									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);

									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
									}
									delete p7.data;
								}
								/*else if (((PlayerInfo*)(peer->data))->rawName == "btw") {
									//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`#MOMO`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
									memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
									}

									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);

									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
									}
									delete p7.data;
								}*/
								else {
									//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`9Guardian`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
									memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
									}

									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);

									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
									}
									delete p7.data;
								}
							}
						}










						bool success = false;
						WorldInfo* world = getPlyersWorld(peer);
						string nameworld = world->name;
						world->items[x + (y * world->width)].foreground = 0;
						GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`w" + nameworld + " `ohas had its `bDark Lock `oremoved!`5]"));
						ENetPacket* packet3 = enet_packet_create(p3.data,
							p3.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet3);
						delete p3.data;
						((PlayerInfo*)(peer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(peer->data))->worldsowned.begin(), ((PlayerInfo*)(peer->data))->worldsowned.end(), nameworld), ((PlayerInfo*)(peer->data))->worldsowned.end());
						string text = "action|play_sfx\nfile|audio/metal_destroy.wav\ndelayMS|0\n";
						BYTE* data = new BYTE[5 + text.length()];
						BYTE zero = 0;
						int type = 3;
						memcpy(data, &type, 4);
						memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
						memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

						ENetPacket* packetsou = enet_packet_create(data,
							5 + text.length(),
							ENET_PACKET_FLAG_RELIABLE);

						ENetPeer* currentPeer;

						SaveShopsItemMoreTimes(9290, 1, peer, success);
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have received your `bDark Lock `^Back to your `#Inventory`^!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);

						delete p.data;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer))
							{
							}

						}

					}



					if (world->items[x + (y * world->width)].foreground == 8470) {
						world->owner = "";
						world->Displayowner = "";
						world->worldaccess.clear();
						world->pIsVip = false;
						world->pIsMod = false;
						world->pIsDev = false;
						world->pIsPlay = false;
						world->isPublic = false;


						if (((PlayerInfo*)(peer->data))->isNicked == true)
						{
							((PlayerInfo*)(peer->data))->isNicked = false;
							if (((PlayerInfo*)(peer->data))->adminLevel == 0 || ((PlayerInfo*)(peer->data))->adminLevel == 0) {
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;

							}
							if (((PlayerInfo*)(peer->data))->adminLevel == 998)
							{

								//((PlayerInfo*)(peer->data))->country = "../rtsoft_logo";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 1000 && ((PlayerInfo*)(peer->data))->isCreator == true)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 999)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 777)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 555)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;

							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 888)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 444)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}

							GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), ((PlayerInfo*)(peer->data))->displayNamebackup));
							memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor


							ENetPacket* packet7 = enet_packet_create(p7.data,
								p7.len,
								ENET_PACKET_FLAG_RELIABLE);



							ENetPeer* currentPeer;
							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								if (isHere(peer, currentPeer))
								{
									if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
										enet_peer_send(currentPeer, 0, packet7);
									}
								}
							}
							delete p7.data;
						}

						if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`2Newbie`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}




						else if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`1Warrior`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}




						else if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`@Samurai`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}








						else if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`bNinja`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`eKing`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`oVIP`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}









						else if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`5Premium`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}













						else if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`#MOD`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`qAdmin`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}
















						else if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`4Leader`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}




						else if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`4YouTuber`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}










						else if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
							{
								if (((PlayerInfo*)(peer->data))->isCreator == true) {
									//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`4Creator`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
									memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
									}

									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);

									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
									}
									delete p7.data;
								}
								/*else if (((PlayerInfo*)(peer->data))->rawName == "btw") {
									//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`#MOMO`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
									memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
									}

									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);

									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
									}
									delete p7.data;
								}*/
								else {
									//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`9Guardian`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
									memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
									}

									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);

									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
									}
									delete p7.data;
								}
							}
						}







						bool success = false;
						WorldInfo* world = getPlyersWorld(peer);
						string nameworld = world->name;
						world->items[x + (y * world->width)].foreground = 0;
						GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`w" + nameworld + " `ohas had its `2Dirt Lock `oremoved!`5]"));
						ENetPacket* packet3 = enet_packet_create(p3.data,
							p3.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet3);
						delete p3.data;
						((PlayerInfo*)(peer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(peer->data))->worldsowned.begin(), ((PlayerInfo*)(peer->data))->worldsowned.end(), nameworld), ((PlayerInfo*)(peer->data))->worldsowned.end());
						string text = "action|play_sfx\nfile|audio/metal_destroy.wav\ndelayMS|0\n";
						BYTE* data = new BYTE[5 + text.length()];
						BYTE zero = 0;
						int type = 3;
						memcpy(data, &type, 4);
						memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
						memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

						ENetPacket* packetsou = enet_packet_create(data,
							5 + text.length(),
							ENET_PACKET_FLAG_RELIABLE);

						ENetPeer* currentPeer;

						SaveShopsItemMoreTimes(8470, 1, peer, success);
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have received your `2Dirt Lock `^Back to your `#Inventory`^!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);

						delete p.data;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer))
							{
							}

						}

					}


					if (world->items[x + (y * world->width)].foreground == 9170) {
						bool success = true;
						SaveShopsItemMoreTimes(9170, 1, peer, success);
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have received your `9Magic Machine `^Back to your `#Inventory`^!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;
					}



					if (world->items[x + (y * world->width)].foreground == 5086) {
						bool success = true;
						SaveShopsItemMoreTimes(5086, 1, peer, success);
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have received your `1Ancient Altar `^Back to your `#Inventory`^!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;
					}
					if (world->items[x + (y * world->width)].foreground == 9418) {
						bool success = true;
						SaveShopsItemMoreTimes(9418, 1, peer, success);
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have received your `#Gem Storage `^Back to your `#Inventory`^!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;
					}
					if (world->items[x + (y * world->width)].foreground == 1008) {
						bool success = true;
						SaveShopsItemMoreTimes(1008, 1, peer, success);
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have received your `eATM Machine `^Back to your `#Inventory`^!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;
					}
					if (world->items[x + (y * world->width)].foreground == 1636) {
						bool success = true;
						SaveShopsItemMoreTimes(1636, 1, peer, success);
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have received your `#Unicorn `^Back to your `#Inventory`^!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;
					}
					if (world->items[x + (y * world->width)].foreground == 242) {
						world->owner = "";
						world->Displayowner = "";
						world->worldaccess.clear();
						world->pIsVip = false;
						world->pIsMod = false;
						world->pIsDev = false;
						world->pIsPlay = false;
						world->isPublic = false;


						if (((PlayerInfo*)(peer->data))->isNicked == true)
						{
							((PlayerInfo*)(peer->data))->isNicked = false;
							if (((PlayerInfo*)(peer->data))->adminLevel == 0 || ((PlayerInfo*)(peer->data))->adminLevel == 0) {
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;

							}
							if (((PlayerInfo*)(peer->data))->adminLevel == 998)
							{

								//((PlayerInfo*)(peer->data))->country = "../rtsoft_logo";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 1000 && ((PlayerInfo*)(peer->data))->isCreator == true)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 999)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 777)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 555)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;

							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 888)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}
							else if (((PlayerInfo*)(peer->data))->adminLevel == 444)
							{
								((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;
								//((PlayerInfo*)(peer->data))->country = "../";
							}

							GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), ((PlayerInfo*)(peer->data))->displayNamebackup));
							memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor


							ENetPacket* packet7 = enet_packet_create(p7.data,
								p7.len,
								ENET_PACKET_FLAG_RELIABLE);



							ENetPeer* currentPeer;
							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								if (isHere(peer, currentPeer))
								{
									if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
										enet_peer_send(currentPeer, 0, packet7);
									}
								}
							}
							delete p7.data;
						}

						if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`2Newbie`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}




						else if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`1Warrior`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}




						else if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`@Samurai`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}








						else if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`bNinja`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`eKing`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`oVIP`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}









						else if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`5Premium`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}













						else if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`#MOD`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}














						else if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`qAdmin`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}
















						else if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`4Leader`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}









						else if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
							{
								//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`4YouTuber`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
								if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
									((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
								}

								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeer;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
											enet_peer_send(currentPeer, 0, packet7);
										}
									}
								}
								delete p7.data;
							}
						}





						else if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
							{
								if (((PlayerInfo*)(peer->data))->isCreator == true) {
									//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`4Creator`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
									memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
									}

									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);

									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
									}
									delete p7.data;
								}
								/*else if (((PlayerInfo*)(peer->data))->rawName == "btw") {
									//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`#MOMO`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
									memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
									}

									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);

									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
									}
									delete p7.data;
								}*/
								else {
									//string name2 = "``" + str.substr(6, cch.length() - 6 - 1);
									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`w[`9Guardian`w] " + ((PlayerInfo*)(peer->data))->tankIDName));
									memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->tankIDName;
									}

									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);

									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
									}
									delete p7.data;
								}
							}
						}



						bool success = false;
						WorldInfo* world = getPlyersWorld(peer);
						string nameworld = world->name;
						GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`w" + nameworld + " `ohas had its `$World Lock `oremoved!`5]"));
						ENetPacket* packet3 = enet_packet_create(p3.data,
							p3.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet3);
						delete p3.data;
						((PlayerInfo*)(peer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(peer->data))->worldsowned.begin(), ((PlayerInfo*)(peer->data))->worldsowned.end(), nameworld), ((PlayerInfo*)(peer->data))->worldsowned.end());
						string text = "action|play_sfx\nfile|audio/metal_destroy.wav\ndelayMS|0\n";
						BYTE* data = new BYTE[5 + text.length()];
						BYTE zero = 0;
						int type = 3;
						memcpy(data, &type, 4);
						memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
						memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

						ENetPacket* packetsou = enet_packet_create(data,
							5 + text.length(),
							ENET_PACKET_FLAG_RELIABLE);

						ENetPeer* currentPeer;
						SaveShopsItemMoreTimes(242, 1, peer, success);
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have received your `$World Lock `^Back to your `#Inventory`^!"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer))
							{
							}

						}

					}




					int valgem;
					int crystalChange;





					if (((PlayerInfo*)(peer->data))->cloth_hand == 7912) {
						if (world->items[x + (y * world->width)].foreground == 1008 || world->items[x + (y * world->width)].foreground == 1636 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 9290 || world->items[x + (y * world->width)].foreground == 8470 || world->items[x + (y * world->width)].foreground == 8 || world->items[x + (y * world->width)].foreground == 9308) {
							world->items[x + (y * world->width)].foreground = 0;
						}
						else {


							if (world->items[x + (y * world->width)].foreground == 8) {

								world->items[x + (y * world->width)].foreground = 0;

								valgem = rand() % 6;

								if (valgem > 0) {
									((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `9" + std::to_string(valgem) + " `bDark `9fragments `^from the `#Bedrock Block`^!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									AddPlayerFragmentDark(peer, valgem);



								}



							}



							else {

								if (world->items[x + (y * world->width)].foreground == 2) {


									world->items[x + (y * world->width)].foreground = 0;
									srand(time(0));

									valgem = rand() % 10;



									

									((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;


									std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifs)),
										(std::istreambuf_iterator<char>()));

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `4" + std::to_string(valgem) + " `1Gems`^!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									delete p.data;




									int gembux = atoi(content.c_str());
									int fingembux = gembux + valgem;
									ofstream myfile;
									myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile << fingembux;
									myfile.close();

									int gemcalc = gembux + valgem;
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;
									valgem = rand() % 3;

									if (valgem > 0) {
										((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;
										/*GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `9" + std::to_string(valgem) + " `2Earth `9fragments`^!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;*/
										AddPlayerFragmentEarth(peer, valgem);



									}



								}
								else {
									world->items[x + (y * world->width)].foreground = 0;
									srand(time(0));

									valgem = rand() % 10;



									((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;



									std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifs)),
										(std::istreambuf_iterator<char>()));

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `4" + std::to_string(valgem) + " `1Gems`^!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									delete p.data;




									int gembux = atoi(content.c_str());
									int fingembux = gembux + valgem;
									ofstream myfile;
									myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile << fingembux;
									myfile.close();

									int gemcalc = gembux + valgem;
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;




								}
							}
						}
					}
					else if (((PlayerInfo*)(peer->data))->cloth_ances == 7166) {
						if (world->items[x + (y * world->width)].foreground == 1008 || world->items[x + (y * world->width)].foreground == 1636 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 9290 || world->items[x + (y * world->width)].foreground == 8470 || world->items[x + (y * world->width)].foreground == 8 || world->items[x + (y * world->width)].foreground == 9308) {
							world->items[x + (y * world->width)].foreground = 0;
						}
						else {
							if (world->items[x + (y * world->width)].foreground == 8) {

								world->items[x + (y * world->width)].foreground = 0;

								valgem = rand() % 6;

								if (valgem > 0) {
									((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `9" + std::to_string(valgem) + " `bDark `9Fragments`^!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									delete p.data;

									GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`^You found `9" + std::to_string(valgem) + " `bDark `9Fragments`w!"));
									ENetPacket* packet3 = enet_packet_create(p3.data,
										p3.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet3);
									delete p3.data;

									AddPlayerFragmentDark(peer, valgem);



								}



							}



							else {


								if (world->items[x + (y * world->width)].foreground == 2) {


									world->items[x + (y * world->width)].foreground = 0;
									srand(time(0));

									valgem = rand() % 10;




									((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;



									std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifs)),
										(std::istreambuf_iterator<char>()));

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `4" + std::to_string(valgem) + " `1Gems`^!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									delete p.data;




									int gembux = atoi(content.c_str());
									int fingembux = gembux + valgem;
									ofstream myfile;
									myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile << fingembux;
									myfile.close();

									int gemcalc = gembux + valgem;
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;
									valgem = rand() % 3;

									if (valgem > 0) {
										((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;
										/*GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `9" + std::to_string(valgem) + " `2Earth `9Fragments`^!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);

										delete p.data;

										GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`^You found `9" + std::to_string(valgem) + " `2Earth `9Fragments`w!"));
										ENetPacket* packet3 = enet_packet_create(p3.data,
											p3.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet3);
										delete p3.data;*/

										AddPlayerFragmentEarth(peer, valgem);



									}



								}


								else {
									world->items[x + (y * world->width)].foreground = 0;
									valgem = rand() % 20;


									((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;




									std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifs)),
										(std::istreambuf_iterator<char>()));

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `4" + std::to_string(valgem) + " `1Gems`^!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									delete p.data;




									int gembux = atoi(content.c_str());
									int fingembux = gembux + valgem;
									ofstream myfile;
									myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile << fingembux;
									myfile.close();

									int gemcalc = gembux + valgem;
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;



								}



							}
						}

					}
					else if (((PlayerInfo*)(peer->data))->cloth_feet == 8834) {
						if (world->items[x + (y * world->width)].foreground == 1008 || world->items[x + (y * world->width)].foreground == 1636 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 9290 || world->items[x + (y * world->width)].foreground == 8470 || world->items[x + (y * world->width)].foreground == 8 || world->items[x + (y * world->width)].foreground == 9308) {
							world->items[x + (y * world->width)].foreground = 0;
						}
						else {

							if (world->items[x + (y * world->width)].foreground == 8) {

								world->items[x + (y * world->width)].foreground = 0;

								valgem = rand() % 6;

								if (valgem > 0) {
									((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `9" + std::to_string(valgem) + " `bDark `9Fragments`^!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									delete p.data;

									GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`^You found `9" + std::to_string(valgem) + " `bDark `9Fragments`w!"));
									ENetPacket* packet3 = enet_packet_create(p3.data,
										p3.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet3);
									delete p3.data;

									AddPlayerFragmentDark(peer, valgem);



								}



							}




							else {


								if (world->items[x + (y * world->width)].foreground == 2) {

									world->items[x + (y * world->width)].foreground = 0;
									srand(time(0));

									valgem = rand() % 10;
									((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;


									std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifs)),
										(std::istreambuf_iterator<char>()));

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `4" + std::to_string(valgem) + " `1Gems`^!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									delete p.data;




									int gembux = atoi(content.c_str());
									int fingembux = gembux + valgem;
									ofstream myfile;
									myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile << fingembux;
									myfile.close();

									int gemcalc = gembux + valgem;
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;

									valgem = rand() % 3;

									if (valgem > 0) {
										((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;
										/*GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `9" + std::to_string(valgem) + " `2Earth `9Fragments`^!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);

										delete p.data;

										GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`^You found `9" + std::to_string(valgem) + " `2Earth `9Fragments`w!"));
										ENetPacket* packet3 = enet_packet_create(p3.data,
											p3.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet3);
										delete p3.data;*/

										AddPlayerFragmentEarth(peer, valgem);



									}



								}
								else {
									world->items[x + (y * world->width)].foreground = 0;
									valgem = rand() % 13;
									((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;

									std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifs)),
										(std::istreambuf_iterator<char>()));

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `4" + std::to_string(valgem) + " `1Gems`^!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									delete p.data;




									int gembux = atoi(content.c_str());
									int fingembux = gembux + valgem;
									ofstream myfile;
									myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile << fingembux;
									myfile.close();

									int gemcalc = gembux + valgem;
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;




								}
							}

						}
					}
					else {




						if (world->items[x + (y * world->width)].foreground == 4762) {
							world->items[x + (y * world->width)].foreground = 0;
							valgem = rand() % 200;
							((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 2;

							std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
							std::string content((std::istreambuf_iterator<char>(ifs)),
								(std::istreambuf_iterator<char>()));

							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `9" + std::to_string(valgem) + " `2Gems `^from the `#Amethyst Block`^!"));
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);

							delete p.data;

							GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`^You found `9" + std::to_string(valgem) + " `2Gems`w!"));
							ENetPacket* packet3 = enet_packet_create(p3.data,
								p3.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet3);
							delete p3.data;

							int gembux = atoi(content.c_str());
							int fingembux = gembux + valgem;
							ofstream myfile;
							myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
							myfile << fingembux;
							myfile.close();

							int gemcalc = gembux + valgem;
							GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
							ENetPacket* packetpp = enet_packet_create(pp.data,
								pp.len,
								ENET_PACKET_FLAG_RELIABLE);

							enet_peer_send(peer, 0, packetpp);
							delete pp.data;










						}


						else {

							if (world->items[x + (y * world->width)].foreground == 7382) {
								world->items[x + (y * world->width)].foreground = 0;
								valgem = rand() % 300;
								((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 2;

								std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifs)),
									(std::istreambuf_iterator<char>()));

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `9" + std::to_string(valgem) + " `2Gems `^from the `bOnyx Block`^!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								delete p.data;

								GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`^You found `9" + std::to_string(valgem) + " `2Gems`w!"));
								ENetPacket* packet3 = enet_packet_create(p3.data,
									p3.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet3);
								delete p3.data;

								int gembux = atoi(content.c_str());
								int fingembux = gembux + valgem;
								ofstream myfile;
								myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								myfile << fingembux;
								myfile.close();

								int gemcalc = gembux + valgem;
								GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
								ENetPacket* packetpp = enet_packet_create(pp.data,
									pp.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packetpp);
								delete pp.data;





							}

							else {


								if (world->items[x + (y * world->width)].foreground == 9240) {
									world->items[x + (y * world->width)].foreground = 0;
									valgem = rand() % 2000;
									((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 3;

									std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifs)),
										(std::istreambuf_iterator<char>()));

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `9" + std::to_string(valgem) + " `2Gems `^from the `1Light Crystal`^!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									delete p.data;

									GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`^You found `9" + std::to_string(valgem) + " `2Gems`w!"));
									ENetPacket* packet3 = enet_packet_create(p3.data,
										p3.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet3);
									delete p3.data;

									int gembux = atoi(content.c_str());
									int fingembux = gembux + valgem;
									ofstream myfile;
									myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile << fingembux;
									myfile.close();

									int gemcalc = gembux + valgem;
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;





								}


								else {

									if (world->items[x + (y * world->width)].foreground == 9358) {
										world->items[x + (y * world->width)].foreground = 0;
										valgem = rand() % 60;
										((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 15;

										std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string content((std::istreambuf_iterator<char>(ifs)),
											(std::istreambuf_iterator<char>()));

										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `9" + std::to_string(valgem) + " `2Gems `^from the `eXP `9Block`^!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);

										delete p.data;

										GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`^You found `9" + std::to_string(valgem) + " `2Gems`w!"));
										ENetPacket* packet3 = enet_packet_create(p3.data,
											p3.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet3);
										delete p3.data;

										int gembux = atoi(content.c_str());
										int fingembux = gembux + valgem;
										ofstream myfile;
										myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										myfile << fingembux;
										myfile.close();

										int gemcalc = gembux + valgem;
										GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
										ENetPacket* packetpp = enet_packet_create(pp.data,
											pp.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packetpp);
										delete pp.data;





									}

									else {
										if (world->items[x + (y * world->width)].foreground == 1008 || world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 1636) {
											world->items[x + (y * world->width)].foreground = 0;
										}
										else {

											if (world->items[x + (y * world->width)].foreground == 1796) {
												world->items[x + (y * world->width)].foreground = 0;
											}

											else {
												if (world->items[x + (y * world->width)].background == 1796) {
													world->items[x + (y * world->width)].background = 0;
												}
												else {

													if (world->items[x + (y * world->width)].foreground == 8) {

														world->items[x + (y * world->width)].foreground = 0;

														valgem = rand() % 6;

														if (valgem > 0) {
															((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `9" + std::to_string(valgem) + " `bDark `9Fragments`^!"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);

															delete p.data;

															GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`^You found `9" + std::to_string(valgem) + " `bDark `9Fragments`w!"));
															ENetPacket* packet3 = enet_packet_create(p3.data,
																p3.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet3);
															delete p3.data;

															AddPlayerFragmentDark(peer, valgem);



														}



													}



													else {

														if (world->items[x + (y * world->width)].foreground == 2) {

															world->items[x + (y * world->width)].foreground = 0;



												

															





															// BAIGIAU CIA kjk
															srand(time(0));

															valgem = rand() % 10;
															((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;



															std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															std::string content((std::istreambuf_iterator<char>(ifs)),
																(std::istreambuf_iterator<char>()));

															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `4" + std::to_string(valgem) + " `3Gems`^!"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);

															delete p.data;




															int gembux = atoi(content.c_str());
															int fingembux = gembux + valgem;
															ofstream myfile;
															myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															myfile << fingembux;
															myfile.close();

															int gemcalc = gembux + valgem;
															GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
															ENetPacket* packetpp = enet_packet_create(pp.data,
																pp.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(peer, 0, packetpp);
															delete pp.data;

															valgem = rand() % 3;

															if (valgem > 0) {
																((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;
																/*GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `9" + std::to_string(valgem) + " `2Earth `9Fragments`^!"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);

																delete p.data;

																GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`^You found `9" + std::to_string(valgem) + " `2Earth `9Fragments`w!"));
																ENetPacket* packet3 = enet_packet_create(p3.data,
																	p3.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet3);
																delete p3.data;*/

																AddPlayerFragmentEarth(peer, valgem);



															}



														}


														else {
															valgem = rand() % 5;

															world->items[x + (y * world->width)].foreground = 0;
															((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;
															((PlayerInfo*)(peer->data))->rubblexp = ((PlayerInfo*)(peer->data))->rubblexp + 1;


															std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															std::string content((std::istreambuf_iterator<char>(ifs)),
																(std::istreambuf_iterator<char>()));

															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `4" + std::to_string(valgem) + " `1Gems`^!"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);

															delete p.data;




															int gembux = atoi(content.c_str());
															int fingembux = gembux + valgem;
															ofstream myfile;
															myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															myfile << fingembux;
															myfile.close();

															int gemcalc = gembux + valgem;
															GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
															ENetPacket* packetpp = enet_packet_create(pp.data,
																pp.len,
																ENET_PACKET_FLAG_RELIABLE);

															enet_peer_send(peer, 0, packetpp);
															delete pp.data;




														}
													}
												}
											}
										}
									}
								}
							}
						}
					}



#pragma region crystals
					crystalChange = rand() % 10001;













					if (world->items[x + (y * world->width)].foreground == 1008 || world->items[x + (y * world->width)].foreground == 1636 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 9290 || world->items[x + (y * world->width)].foreground == 8470 || world->items[x + (y * world->width)].foreground == 8 || world->items[x + (y * world->width)].foreground == 9308) {
						world->items[x + (y * world->width)].foreground = 0;
					}

					else {


						if (crystalChange >= 301 && crystalChange <= 400) {
							((PlayerInfo*)(peer->data))->amberxp = 0;
							((PlayerInfo*)(peer->data))->amber = ((PlayerInfo*)(peer->data))->amber + 1;
							string name = ((PlayerInfo*)(peer->data))->displayName;


							GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found a `8Amber`^!"));
							ENetPacket* packet = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);

							delete p2.data;


							GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wYou found `8Amber`w!"));
							ENetPacket* packet3 = enet_packet_create(p3.data,
								p3.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet3);






						}
						else if (crystalChange >= 204 && crystalChange <= 300) {
							((PlayerInfo*)(peer->data))->opalxp = 0;
							((PlayerInfo*)(peer->data))->opal = ((PlayerInfo*)(peer->data))->opal + 1;
							string name = ((PlayerInfo*)(peer->data))->displayName;


							GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found a `1Opal`^!"));
							ENetPacket* packet = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);

							delete p2.data;


							GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wYou found `1Opal`w!"));
							ENetPacket* packet3 = enet_packet_create(p3.data,
								p3.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet3);






							//GamePacket p4 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), ((PlayerInfo*)(peer->data))->displayName + " was thrown a bucket of " + (((PlayerInfo*)(peer->data))->addgems)), 0));
							//ENetPacket* packet4 = enet_packet_create(p4.data,
								//p4.len,
								//ENET_PACKET_FLAG_RELIABLE);
							//enet_peer_send(peer, 0, packet4);
						}
						else if (crystalChange >= 104 && crystalChange <= 203) {
							((PlayerInfo*)(peer->data))->goldxp = 0;
							((PlayerInfo*)(peer->data))->gold = ((PlayerInfo*)(peer->data))->gold + 1;
							string name = ((PlayerInfo*)(peer->data))->displayName;


							GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found a `9Gold`^!"));
							ENetPacket* packet = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);

							delete p2.data;


							GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wYou found `9Gold`w!"));
							ENetPacket* packet3 = enet_packet_create(p3.data,
								p3.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet3);






						}
						else if (crystalChange >= 90 && crystalChange <= 103) {
							((PlayerInfo*)(peer->data))->rubblexp = 0;
							((PlayerInfo*)(peer->data))->rubble = ((PlayerInfo*)(peer->data))->rubble + 1;
							string name = ((PlayerInfo*)(peer->data))->displayName;


							GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found a `4Ruby`^!"));
							ENetPacket* packet = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);

							delete p2.data;


							GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wYou found `4Ruby`w!"));
							ENetPacket* packet3 = enet_packet_create(p3.data,
								p3.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet3);






						}
						else if (crystalChange >= 60 && crystalChange <= 80) {
							((PlayerInfo*)(peer->data))->sapphirexp = 0;
							((PlayerInfo*)(peer->data))->sapphire = ((PlayerInfo*)(peer->data))->sapphire + 1;
							string name = ((PlayerInfo*)(peer->data))->displayName;


							GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found a `bSapphire`^!"));
							ENetPacket* packet = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);

							delete p2.data;


							GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wYou found `bSapphire`w!"));
							ENetPacket* packet3 = enet_packet_create(p3.data,
								p3.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet3);






						}
						else if (crystalChange >= 20 && crystalChange <= 50) {
							((PlayerInfo*)(peer->data))->diamondxp = 0;
							((PlayerInfo*)(peer->data))->diamond = ((PlayerInfo*)(peer->data))->diamond + 1;
							string name = ((PlayerInfo*)(peer->data))->displayName;


							GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found a `3Diamond`^!"));
							ENetPacket* packet = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);

							delete p2.data;


							GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wYou found `3Diamond`w!"));
							ENetPacket* packet3 = enet_packet_create(p3.data,
								p3.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet3);






						}
						else if (crystalChange == 10) {
							((PlayerInfo*)(peer->data))->emeraldxp = 0;
							((PlayerInfo*)(peer->data))->emerald = ((PlayerInfo*)(peer->data))->emerald + 1;
							string name = ((PlayerInfo*)(peer->data))->displayName;


							GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found a `2Emerald`^!"));
							ENetPacket* packet = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);

							delete p2.data;


							GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wYou found `2Emerald`w!"));
							ENetPacket* packet3 = enet_packet_create(p3.data,
								p3.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet3);






						}
					}

#pragma endregion


					if (((PlayerInfo*)(peer->data))->xp >= 300 && ((PlayerInfo*)(peer->data))->level < 100) {
						((PlayerInfo*)(peer->data))->xp = 0;
						((PlayerInfo*)(peer->data))->level = ((PlayerInfo*)(peer->data))->level + 1;
						ENetPeer* currentPeer;

						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer)) {
								string name = ((PlayerInfo*)(peer->data))->displayName;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `wis now level " + std::to_string(((PlayerInfo*)(peer->data))->level) + "!"));
								string text = "action|play_sfx\nfile|audio/levelup2.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(currentPeer, 0, packet);

								ENetPacket* packet2 = enet_packet_create(data,
									5 + text.length(),
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(currentPeer, 0, packet2);

								delete data;
								delete p.data;

								GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), name + " `wis now level " + std::to_string(((PlayerInfo*)(peer->data))->level) + "!"));
								ENetPacket* packet3 = enet_packet_create(p3.data,
									p3.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(currentPeer, 0, packet3);
								//GamePacket p3 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), ((PlayerInfo*)(peer->data))->displayName + " was thrown a bucket of " + (((PlayerInfo*)(peer->data))->addgems)), 0));

							}
						}
					}
					if (((PlayerInfo*)(peer->data))->haveGrowId) {
						std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

						PlayerInfo* p = ((PlayerInfo*)(peer->data));

						string username = PlayerDB::getProperName(p->rawName);



						if (ifff.fail()) {
							ifff.close();


						}
						if (ifff.is_open()) {
						}
						json j;
						ifff >> j; //load
						j["level"] = p->level;
						j["xp"] = p->xp;
						j["rubblexp"] = p->rubblexp;
						j["rubble"] = p->rubble;
						j["amberxp"] = p->amberxp;
						j["amber"] = p->amber;
						j["opalxp"] = p->opalxp;
						j["opal"] = p->opal;
						j["goldxp"] = p->goldxp;
						j["gold"] = p->gold;
						j["sapphirexp"] = p->sapphirexp;
						j["sapphire"] = p->sapphire;
						j["diamondxp"] = p->diamondxp;
						j["diamond"] = p->diamond;
						j["emeraldxp"] = p->emeraldxp;
						j["emerald"] = p->emerald;


						std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
						if (!o.is_open()) {
							cout << GetLastError() << endl;
							_getch();
						}

						o << j << std::endl;
					}
				}
				else {

					world->items[x + (y * world->width)].background = 6864;
					((PlayerInfo*)(peer->data))->xp = ((PlayerInfo*)(peer->data))->xp + 1;
					int valgem = rand() % 5;

					std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
					std::string content((std::istreambuf_iterator<char>(ifs)),
						(std::istreambuf_iterator<char>()));

					GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found `4" + std::to_string(valgem) + " `1Gems`^!"));
					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(peer, 0, packet);

					delete p.data;




					int gembux = atoi(content.c_str());
					int fingembux = gembux + valgem;
					ofstream myfile;
					myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
					myfile << fingembux;
					myfile.close();

					int gemcalc = gembux + valgem;
					GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
					ENetPacket* packetpp = enet_packet_create(pp.data,
						pp.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(peer, 0, packetpp);
					delete pp.data;


					int rubblechange = rand() % 70 + 4;





					if (world->items[x + (y * world->width)].foreground == 1008 || world->items[x + (y * world->width)].foreground == 1636 || world->items[x + (y * world->width)].foreground == 1796 || world->items[x + (y * world->width)].foreground == 242 || world->items[x + (y * world->width)].foreground == 9290 || world->items[x + (y * world->width)].foreground == 8470 || world->items[x + (y * world->width)].foreground == 8 || world->items[x + (y * world->width)].foreground == 9308) {
						world->items[x + (y * world->width)].foreground = 0;
					}
					else {
						int rubblechange = rand() % 70 + 4;
						if (rubblechange <= 5) {
							((PlayerInfo*)(peer->data))->rubblexp = 0;
							((PlayerInfo*)(peer->data))->rubble = ((PlayerInfo*)(peer->data))->rubble + 1;
							string name = ((PlayerInfo*)(peer->data))->displayName;


							GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found a `4Ruby`^!"));
							ENetPacket* packet = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);

							delete p2.data;


							GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wYou found `4Ruby`w!"));
							ENetPacket* packet3 = enet_packet_create(p3.data,
								p3.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet3);





						}





						int amberchange = rand() % 130 + 4;
						if (amberchange <= 5) {
							((PlayerInfo*)(peer->data))->amberxp = 0;
							((PlayerInfo*)(peer->data))->amber = ((PlayerInfo*)(peer->data))->amber + 1;
							string name = ((PlayerInfo*)(peer->data))->displayName;


							GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found a `8Amber`^!"));
							ENetPacket* packet = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);

							delete p2.data;


							GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wYou found `8Amber`w!"));
							ENetPacket* packet3 = enet_packet_create(p3.data,
								p3.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet3);






						}
















						int opalchange = rand() % 200 + 4;
						if (opalchange <= 5) {
							((PlayerInfo*)(peer->data))->opalxp = 0;
							((PlayerInfo*)(peer->data))->opal = ((PlayerInfo*)(peer->data))->opal + 1;
							string name = ((PlayerInfo*)(peer->data))->displayName;


							GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found a `1Opal`^!"));
							ENetPacket* packet = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);

							delete p2.data;


							GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wYou found `1Opal`w!"));
							ENetPacket* packet3 = enet_packet_create(p3.data,
								p3.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet3);





						}






















						int goldchange = rand() % 240 + 4;
						if (goldchange <= 5) {
							((PlayerInfo*)(peer->data))->goldxp = 0;
							((PlayerInfo*)(peer->data))->gold = ((PlayerInfo*)(peer->data))->gold + 1;
							string name = ((PlayerInfo*)(peer->data))->displayName;


							GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found a `9Gold`^!"));
							ENetPacket* packet = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);

							delete p2.data;


							GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wYou found `9Gold`w!"));
							ENetPacket* packet3 = enet_packet_create(p3.data,
								p3.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet3);






						}
























						int sapphirechange = rand() % 250 + 4;
						if (sapphirechange <= 5) {
							((PlayerInfo*)(peer->data))->sapphirexp = 0;
							((PlayerInfo*)(peer->data))->sapphire = ((PlayerInfo*)(peer->data))->sapphire + 1;
							string name = ((PlayerInfo*)(peer->data))->displayName;


							GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found a `bSapphire`^!"));
							ENetPacket* packet = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);

							delete p2.data;


							GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wYou found `bSapphire`w!"));
							ENetPacket* packet3 = enet_packet_create(p3.data,
								p3.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet3);





						}

























						int diamondchange = rand() % 290 + 4;
						if (diamondchange <= 5) {
							((PlayerInfo*)(peer->data))->diamondxp = 0;
							((PlayerInfo*)(peer->data))->diamond = ((PlayerInfo*)(peer->data))->diamond + 1;
							string name = ((PlayerInfo*)(peer->data))->displayName;


							GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found a `3Diamond`^!"));
							ENetPacket* packet = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);

							delete p2.data;


							GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wYou found `3Diamond`w!"));
							ENetPacket* packet3 = enet_packet_create(p3.data,
								p3.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet3);






						}
















						int emeraldchange = rand() % 300 + 4;
						if (emeraldchange <= 5) {
							((PlayerInfo*)(peer->data))->emeraldxp = 0;
							((PlayerInfo*)(peer->data))->emerald = ((PlayerInfo*)(peer->data))->emerald + 1;
							string name = ((PlayerInfo*)(peer->data))->displayName;


							GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9[LOGS]`^ You have found a `2Emerald`^!"));
							ENetPacket* packet = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);

							delete p2.data;


							GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`wYou found `2Emerald`w!"));
							ENetPacket* packet3 = enet_packet_create(p3.data,
								p3.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet3);





						}
					}



					if (((PlayerInfo*)(peer->data))->xp >= 300) {
						((PlayerInfo*)(peer->data))->xp = 0;
						((PlayerInfo*)(peer->data))->level = ((PlayerInfo*)(peer->data))->level + 1;
						ENetPeer* currentPeer;
						for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
						{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
								continue;
							if (isHere(peer, currentPeer)) {
								string name = ((PlayerInfo*)(peer->data))->displayName;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `wis now level " + std::to_string(((PlayerInfo*)(peer->data))->level) + "!"));
								string text = "action|play_sfx\nfile|audio/levelup2.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(currentPeer, 0, packet);

								ENetPacket* packet2 = enet_packet_create(data,
									5 + text.length(),
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(currentPeer, 0, packet2);

								delete data;
								delete p.data;

								GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), name + " `wis now level " + std::to_string(((PlayerInfo*)(peer->data))->level) + "!"));
								ENetPacket* packet3 = enet_packet_create(p3.data,
									p3.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(currentPeer, 0, packet3);
							}
							//GamePacket p3 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), ((PlayerInfo*)(peer->data))->displayName + " was thrown a bucket of " + (((PlayerInfo*)(peer->data))->addgems)), 0));


							data.plantingTree = tile;
						}
					}
				}
				if (((PlayerInfo*)(peer->data))->haveGrowId) {
					std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

					PlayerInfo* p = ((PlayerInfo*)(peer->data));

					string username = PlayerDB::getProperName(p->rawName);



					if (ifff.fail()) {
						ifff.close();


					}
					if (ifff.is_open()) {
					}
					json j;
					ifff >> j; //load
					j["level"] = p->level;
					j["xp"] = p->xp;
					j["rubblexp"] = p->rubblexp;
					j["rubble"] = p->rubble;
					j["amberxp"] = p->amberxp;
					j["amber"] = p->amber;

					j["opalxp"] = p->opalxp;
					j["opal"] = p->opal;


					j["goldxp"] = p->goldxp;
					j["gold"] = p->gold;


					j["sapphirexp"] = p->sapphirexp;
					j["sapphire"] = p->sapphire;


					j["diamondxp"] = p->diamondxp;
					j["diamond"] = p->diamond;


					j["emeraldxp"] = p->emeraldxp;
					j["emerald"] = p->emerald;

					std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
					if (!o.is_open()) {
						cout << GetLastError() << endl;
						_getch();
					}

					o << j << std::endl;
				}
			}
			else
				if (y < world->height)
				{
					world->items[x + (y * world->width)].breakTime = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
					world->items[x + (y * world->width)].breakLevel += 6; // TODO
				}


	}
	else {
		for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
		{
			if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == tile)
			{
				if ((unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount > 1)
				{
					((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount--;
					SaveInventoryWhenBuildingBlock(peer);
				}
				else {
					((PlayerInfo*)(peer->data))->inventory.items.erase(((PlayerInfo*)(peer->data))->inventory.items.begin() + i);
					SaveInventoryWhenBuildingBlock(peer);
				}
			}
		}
		ItemDefinition yologay;
		if (def.blockType == BlockTypes::BACKGROUND)
		{
			world->items[x + (y * world->width)].background = tile;
			data.plantingTree = tile;
		}
		else {
			ENetPeer* currentPeer;
			if (tile == 242 || tile == 2408 || tile == 1796 || tile == 4428 || tile == 7188 || tile == 8470 || tile == 9290) {

				ENetPeer* currentPeer;
				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
				}
				//enet_host_flush(server);






				world->items[x + (y * world->width)].foreground = tile;
				world->owner = ((PlayerInfo*)(peer->data))->rawName;
				world->Displayowner = ((PlayerInfo*)(peer->data))->rawName;
				world->isPublic = false;
				((PlayerInfo*)(peer->data))->worldsowned.push_back(world->name);
				std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


				if (ifff.fail()) {
					ifff.close();


				}
				if (ifff.is_open()) {
				}
				json j;
				ifff >> j; //load


				j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned; //edit




				std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
				if (!o.is_open()) {
					cout << GetLastError() << endl;
					_getch();
				}

				o << j << std::endl;
				if (((PlayerInfo*)(peer->data))->haveGrowId)
				{
					GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName));
					memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
					if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}

					ENetPacket* packet7 = enet_packet_create(p7.data,
						p7.len,
						ENET_PACKET_FLAG_RELIABLE);

					delete p7.data;
					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer)) {
							if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
								enet_peer_send(currentPeer, 0, packet7);
							}
						}
					}
				}
				else
				{
					GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->displayName));
					memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
					if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->displayName;
					}
					ENetPacket* packet7 = enet_packet_create(p7.data,
						p7.len,
						ENET_PACKET_FLAG_RELIABLE);

					delete p7.data;
					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer)) {
							if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
								enet_peer_send(currentPeer, 0, packet7);

								/*string text = "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
								memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

								ENetPacket * packetsou = enet_packet_create(data,
									5 + text.length(),
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(currentPeer, 0, packetsou);*/
								string text = "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
								memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

								ENetPacket* packetsou = enet_packet_create(data,
									5 + text.length(),
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(currentPeer, 0, packetsou);
							}
						}
					}
				}

				if (((PlayerInfo*)(peer->data))->isNicked == true)
				{
					((PlayerInfo*)(peer->data))->isNicked = false;
					((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;

					if (((PlayerInfo*)(peer->data))->adminLevel == 998)
					{

						//((PlayerInfo*)(peer->data))->country = "../rtsoft_logo";
					}
					else if (((PlayerInfo*)(peer->data))->adminLevel == 1000 && ((PlayerInfo*)(peer->data))->isCreator == true)
					{

						//((PlayerInfo*)(peer->data))->country = "../rtsoft_logo";
					}
					else if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
					{

						//((PlayerInfo*)(peer->data))->country = "../rtsoft_logo";
					}
					else if (((PlayerInfo*)(peer->data))->adminLevel == 999)
					{

						//((PlayerInfo*)(peer->data))->country = "../rtsoft_logo";
					}
					else if (((PlayerInfo*)(peer->data))->adminLevel == 777)
					{

						//((PlayerInfo*)(peer->data))->country = "../atomic_button";
					}
					else if (((PlayerInfo*)(peer->data))->adminLevel == 555)
					{


					}
					else if (((PlayerInfo*)(peer->data))->adminLevel == 888)
					{

						//((PlayerInfo*)(peer->data))->country = "../rtsoft_logo";
					}
					else if (((PlayerInfo*)(peer->data))->adminLevel == 444)
					{

						//((PlayerInfo*)(peer->data))->country = "../rtsoft_logo";
					}

					GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), ((PlayerInfo*)(peer->data))->displayNamebackup));
					memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor


					ENetPacket* packet7 = enet_packet_create(p7.data,
						p7.len,
						ENET_PACKET_FLAG_RELIABLE);



					ENetPeer* currentPeer;
					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							enet_peer_send(currentPeer, 0, packet7);
						}
					}
					delete p7.data;
				}
				std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string contentx((std::istreambuf_iterator<char>(ifszi)),
					(std::istreambuf_iterator<char>()));


				int updgem = atoi(contentx.c_str());
				GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
				ENetPacket* packetpp = enet_packet_create(pp.data,
					pp.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(peer, 0, packetpp);
				delete pp.data;







				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer)) {
						if (((PlayerInfo*)(peer->data))->adminLevel == 1000 && ((PlayerInfo*)(peer->data))->isCreator != true) {
							world->pIsDev = true;
						}
						else if (((PlayerInfo*)(peer->data))->isCreator == true && ((PlayerInfo*)(peer->data))->adminLevel == 1000)
						{
							world->pIsPlay = true;
						}
						else if (((PlayerInfo*)(peer->data))->isCreator == true && ((PlayerInfo*)(peer->data))->adminLevel == 999)
						{
							world->pIsPlay = true;
						}
						else if (((PlayerInfo*)(peer->data))->adminLevel == 999 && ((PlayerInfo*)(peer->data))->isCreator != true) {
							world->pIsDev = true;
						}
						else if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
							world->pIsMod = true;
						}
						else if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
							world->pIsVip = true;
						}
						else if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
							world->pIsAdmin = true;
						}
						else if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
							world->pIsKing = true;
						}
						else
						{
							world->pIsPlay = false;
							world->pIsDev = false;
							world->pIsMod = false;
							world->pIsVip = false;
							world->pIsAdmin = false;
							world->pIsKing = false;
						}
						if (((PlayerInfo*)(peer->data))->adminLevel == 998)
						{




							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `6" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(currentPeer, 0, packet);
							delete p.data;
						}
						else
						{
							if (((PlayerInfo*)(peer->data))->isCreator == true && ((PlayerInfo*)(peer->data))->adminLevel == 1000)
							{




								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `4" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(currentPeer, 0, packet);
								delete p.data;
							}
							else
							{
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
								{




									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `6" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet);
									delete p.data;
								}
								else
								{
									if (((PlayerInfo*)(peer->data))->isCreator == true && ((PlayerInfo*)(peer->data))->adminLevel == 999)
									{




										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `4" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										delete p.data;
									}
									else
									{
										if (((PlayerInfo*)(peer->data))->adminLevel == 999)
										{




											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `6" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											delete p.data;
										}
										else
										{
											if (((PlayerInfo*)(peer->data))->adminLevel == 777)
											{




												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `#" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												delete p.data;
											}
											else
											{
												if (((PlayerInfo*)(peer->data))->adminLevel == 444)
												{




													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `#" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet);
													delete p.data;
												}
												else
												{
													if (((PlayerInfo*)(peer->data))->adminLevel == 888)
													{




														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `#" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet);
														delete p.data;
													}
													else
													{
														if (((PlayerInfo*)(peer->data))->adminLevel == 555)
														{



															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `e" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet);
															delete p.data;
														}
														else
														{
															std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															std::string content((std::istreambuf_iterator<char>(ifsz)),
																(std::istreambuf_iterator<char>()));

															int b = atoi(content.c_str());

															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been World Locked by `2" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet);
															delete p.data;










														}

													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}



			world->items[x + (y * world->width)].foreground = tile;
			yologay = getItemDef(tile);
			if (yologay.MultiFacing == "MultiFacing") {
				if (((PlayerInfo*)(peer->data))->RotatedLeft == true) {
					((PlayerInfo*)(peer->data))->wrenchx = x;
					((PlayerInfo*)(peer->data))->wrenchy = y;
					int squaresign = x + (y * 100);
					//world->items[x + (y * world->width)].rotatedLeft = true;
					world->items[squaresign].rotatedLeft = true;
				}
				else {
					world->items[x + (y * world->width)].rotatedLeft = false;
				}
			}










			if (tile == 9308) {

				ENetPeer* currentPeer;
				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
				}
				//enet_host_flush(server);






				world->items[x + (y * world->width)].foreground = tile;
				world->owner = ((PlayerInfo*)(peer->data))->rawName;
				world->Displayowner = ((PlayerInfo*)(peer->data))->rawName;
				world->isPublic = false;
				((PlayerInfo*)(peer->data))->worldsowned.push_back(world->name);
				std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


				if (ifff.fail()) {
					ifff.close();


				}
				if (ifff.is_open()) {
				}
				json j;
				ifff >> j; //load


				j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned; //edit




				std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
				if (!o.is_open()) {
					cout << GetLastError() << endl;
					_getch();
				}

				o << j << std::endl;
				if (((PlayerInfo*)(peer->data))->haveGrowId)
				{
					GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName));
					memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
					if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;
					}

					ENetPacket* packet7 = enet_packet_create(p7.data,
						p7.len,
						ENET_PACKET_FLAG_RELIABLE);

					delete p7.data;
					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer)) {
							if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
								enet_peer_send(currentPeer, 0, packet7);
							}
						}
					}
				}
				else
				{
					GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->displayName));
					memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
					if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
						((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->displayName;
					}
					ENetPacket* packet7 = enet_packet_create(p7.data,
						p7.len,
						ENET_PACKET_FLAG_RELIABLE);

					delete p7.data;
					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer)) {
							if (((PlayerInfo*)(peer->data))->adminLevel >= 0) {
								enet_peer_send(currentPeer, 0, packet7);

								/*string text = "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
								memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

								ENetPacket * packetsou = enet_packet_create(data,
									5 + text.length(),
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(currentPeer, 0, packetsou);*/
								string text = "action|play_sfx\nfile|audio/use_lock.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
								memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

								ENetPacket* packetsou = enet_packet_create(data,
									5 + text.length(),
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(currentPeer, 0, packetsou);
							}
						}
					}
				}

				if (((PlayerInfo*)(peer->data))->isNicked == true)
				{
					((PlayerInfo*)(peer->data))->isNicked = false;
					((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->displayNamebackup;


					if (((PlayerInfo*)(peer->data))->adminLevel == 998)
					{

						//((PlayerInfo*)(peer->data))->country = "../rtsoft_logo";
					}
					else if (((PlayerInfo*)(peer->data))->adminLevel == 1000 && ((PlayerInfo*)(peer->data))->isCreator == true)
					{

						//((PlayerInfo*)(peer->data))->country = "../rtsoft_logo";
					}
					else if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
					{

						//((PlayerInfo*)(peer->data))->country = "../rtsoft_logo";
					}
					else if (((PlayerInfo*)(peer->data))->adminLevel == 999)
					{

						//((PlayerInfo*)(peer->data))->country = "../rtsoft_logo";
					}
					else if (((PlayerInfo*)(peer->data))->adminLevel == 777)
					{

						//((PlayerInfo*)(peer->data))->country = "../atomic_button";
					}
					else if (((PlayerInfo*)(peer->data))->adminLevel == 555)
					{


					}
					else if (((PlayerInfo*)(peer->data))->adminLevel == 888)
					{

						//((PlayerInfo*)(peer->data))->country = "../rtsoft_logo";
					}
					else if (((PlayerInfo*)(peer->data))->adminLevel == 444)
					{

						//((PlayerInfo*)(peer->data))->country = "../rtsoft_logo";
					}

					GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), ((PlayerInfo*)(peer->data))->displayNamebackup));
					memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor


					ENetPacket* packet7 = enet_packet_create(p7.data,
						p7.len,
						ENET_PACKET_FLAG_RELIABLE);



					ENetPeer* currentPeer;
					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer))
						{
							enet_peer_send(currentPeer, 0, packet7);
						}
					}
					delete p7.data;
				}
				std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
				std::string contentx((std::istreambuf_iterator<char>(ifszi)),
					(std::istreambuf_iterator<char>()));


				int updgem = atoi(contentx.c_str());
				GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
				ENetPacket* packetpp = enet_packet_create(pp.data,
					pp.len,
					ENET_PACKET_FLAG_RELIABLE);

				enet_peer_send(peer, 0, packetpp);
				delete pp.data;







				for (currentPeer = server->peers;
					currentPeer < &server->peers[server->peerCount];
					++currentPeer)
				{
					if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (isHere(peer, currentPeer)) {
						if (((PlayerInfo*)(peer->data))->adminLevel == 1000 && ((PlayerInfo*)(peer->data))->isCreator != true) {
							world->pIsDev = true;
						}
						else if (((PlayerInfo*)(peer->data))->isCreator == true && ((PlayerInfo*)(peer->data))->adminLevel == 1000)
						{
							world->pIsPlay = true;
						}
						else if (((PlayerInfo*)(peer->data))->isCreator == true && ((PlayerInfo*)(peer->data))->adminLevel == 999)
						{
							world->pIsPlay = true;
						}
						else if (((PlayerInfo*)(peer->data))->adminLevel == 999 && ((PlayerInfo*)(peer->data))->isCreator != true) {
							world->pIsDev = true;
						}
						else if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
							world->pIsMod = true;
						}
						else if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
							world->pIsVip = true;
						}
						else if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
							world->pIsAdmin = true;
						}
						else if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
							world->pIsKing = true;
						}
						else
						{
							world->pIsPlay = false;
							world->pIsDev = false;
							world->pIsMod = false;
							world->pIsVip = false;
							world->pIsAdmin = false;
							world->pIsKing = false;
						}
						if (((PlayerInfo*)(peer->data))->adminLevel == 998)
						{




							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been `4Lava Locked `oby `4" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(currentPeer, 0, packet);
							delete p.data;



						}
						else
						{
							if (((PlayerInfo*)(peer->data))->isCreator == true && ((PlayerInfo*)(peer->data))->adminLevel == 1000)
							{




								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been `4Lava Locked `oby `4" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(currentPeer, 0, packet);
								delete p.data;



							}
							else
							{
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
								{




									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been `4Lava Locked `oby `6" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet);
									delete p.data;




								}
								else
								{
									if (((PlayerInfo*)(peer->data))->isCreator == true && ((PlayerInfo*)(peer->data))->adminLevel == 999)
									{




										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been `4Lava Locked `oby `4" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										delete p.data;




									}
									else
									{
										if (((PlayerInfo*)(peer->data))->adminLevel == 999)
										{




											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been `4Lava Locked `oby `6" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											delete p.data;





										}
										else
										{
											if (((PlayerInfo*)(peer->data))->adminLevel == 777)
											{




												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been `4Lava Locked `oby `#" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												delete p.data;





											}
											else
											{
												if (((PlayerInfo*)(peer->data))->adminLevel == 444)
												{




													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been `4Lava Locked `oby `#" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet);
													delete p.data;





												}
												else
												{
													if (((PlayerInfo*)(peer->data))->adminLevel == 888)
													{




														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been `4Lava Locked `oby `#" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet);
														delete p.data;






													}
													else
													{
														if (((PlayerInfo*)(peer->data))->adminLevel == 555)
														{



															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been `4Lava Locked `oby `e" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet);
															delete p.data;





														}
														else
														{
															std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
															std::string content((std::istreambuf_iterator<char>(ifsz)),
																(std::istreambuf_iterator<char>()));

															int b = atoi(content.c_str());

															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3[`w" + world->name + " `ohas been `4Lava Locked `oby `2" + ((PlayerInfo*)(peer->data))->displayName + "`3]"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeer, 0, packet);
															delete p.data;










														}

													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
			}

			else {
				world->items[x + (y * world->width)].foreground = tile;
			}

		}


		world->items[x + (y * world->width)].breakLevel = 0;
	}


	ENetPeer * currentPeer;


	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer))
			SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
		ItemDefinition retard;
		retard = getItemDef(tile);
		if (retard.MultiFacing == "MultiFacing") {
			if (((PlayerInfo*)(peer->data))->RotatedLeft == true) {
				int squaresign = x + (y * 100);
				world->items[squaresign].rotatedLeft = true;
				updateRotatedItem(peer, world->items[squaresign].foreground, squaresign % world->width, squaresign / world->width, "", world->items[squaresign].background);
			}
		}
		if (tile == 224) {
			int squaresign = x + (y * 100);
			updateEntrance(peer, world->items[squaresign].foreground, squaresign % world->width, squaresign / world->width, "", world->items[squaresign].background);
		}
		//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
	}
}



void sendPlayerBan(ENetPeer* peer, PlayerInfo* player)
{
	ENetPeer* currentPeer;
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnRemove"), "netID|" + std::to_string(player->netID) + "\n")); // ((PlayerInfo*)(server->peers[i].data))->tankIDName
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT")
		{
			if (isHere(peer, currentPeer)) {
				{
					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet);
				}
			}
		}
		delete p.data;
	}
}



void sendPlayerWBan(ENetPeer* peer, string from, string to)
{
	ENetPeer* currentPeerp;

	for (currentPeerp = server->peers;
		currentPeerp < &server->peers[server->peerCount];
		++currentPeerp)
	{
		if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
			continue;

		if (((PlayerInfo*)(currentPeerp->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeerp->data))->adminLevel == 998 || ((PlayerInfo*)(currentPeerp->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeerp->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeerp->data))->adminLevel == 888 || ((PlayerInfo*)(currentPeerp->data))->adminLevel == 444) {

		}
		else
		{
			string name = from;
			string kickname = to;
			//string kickname = ((PlayerInfo*)(peer->data))->displayName;
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `4world bans " + "`o" + kickname));
			string text = "action|play_sfx\nfile|audio/repair.wav\ndelayMS|0\n";
			BYTE* data = new BYTE[5 + text.length()];
			BYTE zero = 0;
			int type = 3;
			memcpy(data, &type, 4);
			memcpy(data + 4, text.c_str(), text.length());
			memcpy(data + 4 + text.length(), &zero, 1);




			if (isHere(peer, currentPeerp))
			{

				ENetPacket* packetsou = enet_packet_create(data,
					5 + text.length(),
					ENET_PACKET_FLAG_RELIABLE);

				ENetPacket* packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);




				enet_peer_send(currentPeerp, 0, packetsou);
				enet_peer_send(currentPeerp, 0, packet);
				delete data;
				delete p.data;
			}
		}
	}
}

static inline void ltrim(string &s)
{
	s.erase(s.begin(), find_if(s.begin(), s.end(), [](int ch) {
		return !isspace(ch);
	}));
}

static inline void rtrim(string &s)
{
	s.erase(find_if(s.rbegin(), s.rend(), [](int ch) {
		return !isspace(ch);
	}).base(), s.end());
}

static inline void trim(string &s)
{
	ltrim(s);
	rtrim(s);
}

static inline string trimString(string s)
{
	trim(s);
	return s;
}

int countSpaces(string& str)
{
	int count = 0;
	int length = str.length();
	for (int i = 0; i < length; i++)
	{
		int c = str[i];
		if (isspace(c))
			count++;
	}
	return count;
}

void removeExtraSpaces(string &str)
{
	int n = str.length();
	int i = 0, j = -1;
	bool spaceFound = false;
	while (++j < n && str[j] == ' ');

	while (j < n)
	{
		if (str[j] != ' ')
		{
			if ((str[j] == '.' || str[j] == ',' ||
				str[j] == '?') && i - 1 >= 0 &&
				str[i - 1] == ' ')
				str[i - 1] = str[j++];
			else
				str[i++] = str[j++];

			spaceFound = false;
		}

		else if (str[j++] == ' ')
		{
			if (!spaceFound)
			{
				str[i++] = ' ';
				spaceFound = true;
			}
		}
	}
	if (i <= 1)
		str.erase(str.begin() + i, str.end());
	else
		str.erase(str.begin() + i, str.end());
}

void sendChatMessage(ENetPeer* peer, int netID, string message)
{



	if (message.length() == 0) return;

	if (1 > (message.size() - countSpaces(message))) return;
	removeExtraSpaces(message);
	message = trimString(message);
	if (((PlayerInfo*)(peer->data))->haveGrowId == true) {
		string ccode;
		if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
			ccode = "4";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
			ccode = "9";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
			ccode = "4";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
			ccode = "^";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
			ccode = "#";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
			ccode = "5";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
			ccode = "^";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
			ccode = "e";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
			ccode = "b";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
			ccode = "^";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
			ccode = "^";
		}
		if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
			ccode = "^";
		}


		if (((PlayerInfo*)(peer->data))->adminLevel > 222 && ((PlayerInfo*)(peer->data))->isNicked == false) {
			for (char c : message)

				if (c < 0x18 || std::all_of(message.begin(), message.end(), isspace))
				{
					return;
				}

			ENetPeer* currentPeer;
			string name = "";
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (((PlayerInfo*)(currentPeer->data))->netID == netID)
					name = ((PlayerInfo*)(currentPeer->data))->displayName;

			}
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`o<`w" + name + "`o> `" + ccode + message));
			GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), netID), "`" + ccode + message), 0));
			//GamePacket pf2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), netID), "`" + ccode + message), 0));
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (isHere(peer, currentPeer))
				{

					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(currentPeer, 0, packet);

					//enet_host_flush(server);

					ENetPacket* packet2 = enet_packet_create(p2.data,
						p2.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet2);

					//enet_host_flush(server);
				}
			}
			delete p.data;
			delete p2.data;
		}
		else {
			for (char c : message)
				if (c < 0x18 || std::all_of(message.begin(), message.end(), isspace))
				{
					return;
				}

			ENetPeer* currentPeer;
			string name = "";
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (((PlayerInfo*)(currentPeer->data))->netID == netID)
					name = ((PlayerInfo*)(currentPeer->data))->displayName;

			}
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`o<`w" + name + "`o> " + message));

			GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), netID), message), 0));
			GamePacket p2f = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), netID), +"`!" + message), 0));
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (isHere(peer, currentPeer))
				{

					ENetPacket* packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);

					enet_peer_send(currentPeer, 0, packet);

					//enet_host_flush(server);

					if (((PlayerInfo*)(peer->data))->isFrozen == false)
					{

						ENetPacket* packet2 = enet_packet_create(p2.data,
							p2.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(currentPeer, 0, packet2);

					}
					else
					{
						ENetPacket* packet2f = enet_packet_create(p2f.data,
							p2f.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(currentPeer, 0, packet2f);
					}

					//enet_host_flush(server);
				}
			}
			delete p.data;
			delete p2.data;
			delete p2f.data;
		}
	}
	else {
		if (((PlayerInfo*)(peer->data))->haveGrowId) {

			GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oTo prevent abuse, you `4must `obe `2registered `oin order to chat!"));
			ENetPacket* packet0 = enet_packet_create(p0.data,
				p0.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(peer, 0, packet0);
			delete p0.data;
			GamePacket p4 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`oTo prevent abuse, you `4must `obe `2registered `oin order to chat!"));
			ENetPacket* packet4 = enet_packet_create(p4.data,
				p4.len,
				ENET_PACKET_FLAG_RELIABLE);

			enet_peer_send(peer, 0, packet4);
			delete p4.data;
			return;
		}
	}
}

void sendGrowmoji(ENetPeer* peer, string emoji)
{
	ENetPeer* currentPeer;
	GamePacket p2ssw = packetEnd(appendString(appendInt(appendString(createPacket(), "OnEmoticonDataChanged"), 201560520), "(wl)|ā|1&(yes)|Ă|1&(no)|ă|1&(love)|Ą|1&(oops)|ą|1&(shy)|Ć|1&(wink)|ć|1&(tongue)|Ĉ|1&(agree)|ĉ|1&(sleep)|Ċ|1&(punch)|ċ|1&(music)|Č|1&(build)|č|1&(megaphone)|Ď|1&(sigh)|ď|1&(mad)|Đ|1&(wow)|đ|1&(dance)|Ē|1&(see-no-evil)|ē|1&(bheart)|Ĕ|1&(heart)|ĕ|1&(grow)|Ė|1&(gems)|ė|1&(kiss)|Ę|1&(gtoken)|ę|1&(lol)|Ě|1&(smile)|Ā|1&(cool)|Ĝ|1&(cry)|ĝ|1&(vend)|Ğ|1&(bunny)|ě|1&(cactus)|ğ|1&(pine)|Ĥ|1&(peace)|ģ|1&(terror)|ġ|1&(evil)|Ģ|1&(fireworks)|Ħ|1&(football)|ĥ|1&(alien)|ħ|1&(party)|Ĩ|1&(pizza)|ĩ|1&(clap)|Ī|1&(song)|ī|1&(ghost)|Ĭ|1&(nuke)|ĭ|1&(halo)|Į|1&(turkey)|į|1&(gift)|İ|1&(cake)|ı|1&(heartarrow)|Ĳ|1&(lucky)|ĳ|1&(shamrock)|Ĵ|1&(grin)|ĵ|1&(ill)|Ķ|1&"));
	ENetPacket* packet2ssw = enet_packet_create(p2ssw.data,
		p2ssw.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet2ssw);
	delete p2ssw.data;
}


void sendWho(ENetPeer* peer)
{
	ENetPeer* currentPeer;
	string name = "";
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer) && ((PlayerInfo*)(currentPeer->data))->isinv == false)
		{

			GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(currentPeer->data))->netID), ((PlayerInfo*)(currentPeer->data))->displayName), 1));
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);


			enet_peer_send(peer, 0, packet2);
			delete p2.data;
			//enet_host_flush(server);
		}
	}
}
void sendWorldCursed(ENetPeer* peer, WorldInfo* worldInfo)
{
#ifdef TOTAL_LOG
	cout << "Entering a world..." << endl;
#endif
	if (worldproperlock == false)
	{
		((PlayerInfo*)(peer->data))->joinClothesUpdated = false;
		string asdf = "0400000004A7379237BB2509E8E0EC04F8720B050000000000000000FBBB0000010000007D920100FDFDFDFD04000000040000000000000000000000070000000000"; // 0400000004A7379237BB2509E8E0EC04F8720B050000000000000000FBBB0000010000007D920100FDFDFDFD04000000040000000000000000000000080000000000000000000000000000000000000000000000000000000000000048133A0500000000BEBB0000070000000000
		string worldName = "HELL";
		int xSize = worldInfo->width;
		int ySize = worldInfo->height;
		int square = xSize * ySize;
		__int16 nameLen = worldName.length();
		int payloadLen = asdf.length() / 2;
		int dataLen = payloadLen + 2 + nameLen + 12 + (square * 8) + 4;
		int allocMem = payloadLen + 2 + nameLen + 12 + (square * 8) + 4 + 16000;
		BYTE* data = new BYTE[allocMem];
		for (int i = 0; i < asdf.length(); i += 2)
		{
			char x = ch2n(asdf[i]);
			x = x << 4;
			x += ch2n(asdf[i + 1]);
			memcpy(data + (i / 2), &x, 1);
		}
		int zero = 0;
		__int16 item = 0;
		int smth = 0;
		for (int i = 0; i < square * 8; i += 4) memcpy(data + payloadLen + i + 14 + nameLen, &zero, 4);
		for (int i = 0; i < square * 8; i += 8) memcpy(data + payloadLen + i + 14 + nameLen, &item, 2);
		memcpy(data + payloadLen, &nameLen, 2);
		memcpy(data + payloadLen + 2, worldName.c_str(), nameLen);
		memcpy(data + payloadLen + 2 + nameLen, &xSize, 4);
		memcpy(data + payloadLen + 6 + nameLen, &ySize, 4);
		memcpy(data + payloadLen + 10 + nameLen, &square, 4);
		BYTE* blockPtr = data + payloadLen + 14 + nameLen;
		for (int i = 0; i < square; i++) {
			if ((worldInfo->items[i].foreground == 0) || (worldInfo->items[i].foreground == 2) || (worldInfo->items[i].foreground == 8) || (worldInfo->items[i].foreground == 100)/* || (worldInfo->items[i].foreground%2)*/)
			{
				memcpy(blockPtr, &worldInfo->items[i].foreground, 2);
				int type = 0x00000000;
				// type 1 = locked
				if (worldInfo->items[i].water)
					type |= 0x04000000;
				if (worldInfo->items[i].glue)
					type |= 0x08000000;
				if (worldInfo->items[i].fire)
					type |= 0x10000000;
				if (worldInfo->items[i].red)
					type |= 0x20000000;
				if (worldInfo->items[i].green)
					type |= 0x40000000;
				if (worldInfo->items[i].blue)
					type |= 0x80000000;


				// int type = 0x04000000; = water
				// int type = 0x08000000 = glue
				// int type = 0x10000000; = fire
				// int type = 0x20000000; = red color
				// int type = 0x40000000; = green color
				// int type = 0x80000000; = blue color
				memcpy(blockPtr + 4, &type, 4);
				/*if (worldInfo->items[i].foreground % 2)
				{
				blockPtr += 6;
				}*/
			}
			else
			{
				memcpy(blockPtr, &zero, 2);
			}
			memcpy(blockPtr + 2, &worldInfo->items[i].background, 2);
			blockPtr += 8;
			/*if (blockPtr - data < allocMem - 2000) // realloc
			{
			int wLen = blockPtr - data;
			BYTE* oldData = data;


			data = new BYTE[allocMem + 16000];
			memcpy(data, oldData, allocMem);
			allocMem += 16000;
			delete oldData;
			blockPtr = data + wLen;

			}*/
		}
		memcpy(data + dataLen - 4, &smth, 4);
		ENetPacket* packet2 = enet_packet_create(data,
			dataLen,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet2);
		//enet_host_flush(server);
		for (int i = 0; i < square; i++) {
			if ((worldInfo->items[i].foreground == 0) || (worldInfo->items[i].foreground == 2) || (worldInfo->items[i].foreground == 8) || (worldInfo->items[i].foreground == 100))
				; // nothing
			else
			{
				PlayerMoving data;
				//data.packetType = 0x14;
				data.packetType = 0x3;

				//data.characterState = 0x924; // animation
				data.characterState = 0x0; // animation
				data.x = i % worldInfo->width;
				data.y = i / worldInfo->height;
				data.punchX = i % worldInfo->width;
				data.punchY = i / worldInfo->width;
				data.XSpeed = 0;
				data.YSpeed = 0;
				data.netID = -1;
				data.plantingTree = worldInfo->items[i].foreground;
				SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
			}
		}
		((PlayerInfo*)(peer->data))->currentWorld = worldInfo->name;

		//print_ip(peer->address.host);


		if (((PlayerInfo*)(peer->data))->haveGrowId) {

			PlayerInfo* p = ((PlayerInfo*)(peer->data));
			std::ifstream ifff("players/" + PlayerDB::getProperName(p->rawName) + ".json");
			json j;
			ifff >> j;

			p->currentWorld = worldInfo->name;

			int bac, han, fac, hai, fee, pan, nec, shi, mas, anc, ban;
			bac = j["ClothBack"];
			han = j["ClothHand"];
			fac = j["ClothFace"];
			hai = j["ClothHair"];
			fee = j["ClothFeet"];
			pan = j["ClothPants"];
			nec = j["ClothNeck"];
			shi = j["ClothShirt"];
			mas = j["ClothMask"];
			anc = j["ClothAnces"];
			ban = j["isBanned"];
			p->cloth_back = bac;
			p->cloth_hand = han;
			p->cloth_face = fac;
			p->cloth_hair = hai;
			p->cloth_feet = fee;
			p->cloth_pants = pan;
			p->cloth_necklace = nec;
			p->cloth_shirt = shi;
			p->cloth_mask = mas;

			sendClothes(peer);

			ifff.close();

		}

		delete data;

	}
}




void setupQueue() {
	while (1) {
		Sleep(3000);
		ENetPeer * currentPeer;
		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)
		{
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
				continue;
			if (((PlayerInfo*)(currentPeer->data))->isWaitingForMatch) {
				Player::OnAddNotification(currentPeer, "`2Still trying to find match...``", "audio/gong.wav", "interface/hommel.rttex");
			}
		}
	}
}

void Game() {
	while (1) {
		Sleep(10);
		if (match.isMatchRunning) {
			if (match.playersInGame < 2) {
				match.playersInGame = 0;
				ENetPeer * cPeer;
				for (cPeer = server->peers;
					cPeer < &server->peers[server->peerCount];
					++cPeer)
				{
					if (cPeer->state != ENET_PEER_STATE_CONNECTED)
						continue;
					if (((PlayerInfo*)(cPeer->data))->isInGame) {
						Player::OnConsoleMessage(cPeer, "`oNot enough players left, ending match...``");
						((PlayerInfo*)(cPeer->data))->isInGame = false;
						sendPlayerLeave(cPeer, ((PlayerInfo*)(cPeer->data)));
						((PlayerInfo*)(cPeer->data))->currentWorld = "EXIT";
						sendWorldOffers(cPeer);
						Player::PlayAudio(cPeer, "audio/door_shut.wav", 0);
					}
				}
				match.topOne = "";
				match.topTwo = "";
				match.topThree = "";
				match.topFour = "";
				match.topFive = "";
				match.topSix = "";
				match.playersInGame = 0;
				match.isMatchRunning = false;
			}
		}
	}
}

void manageGame() {
	while (1) {
		Sleep(10);
		if (match.isMatchRunning == true) {
			Sleep(420000);
			ENetPeer * currentPeer;
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (((PlayerInfo*)(currentPeer->data))->isInGame) {
					GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|1st - " + match.topOne + "|left|6138|\nadd_label_with_icon|big|2nd - " + match.topTwo + "|left|7672|\nadd_label_with_icon|big|3rd - " + match.topThree + "|left|7336|\nadd_button|backtoexit|Back to EXIT|noflags|0|0|\n\nnend_dialog|pvprank||OK|"));
					ENetPacket * packet = enet_packet_create(p.data,
						p.len,
						ENET_PACKET_FLAG_RELIABLE);
					enet_peer_send(currentPeer, 0, packet);
					delete p.data;
				}
			}
			Sleep(12000);
			ENetPeer * cPeer;
			for (cPeer = server->peers;
				cPeer < &server->peers[server->peerCount];
				++cPeer)
			{
				if (cPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (((PlayerInfo*)(cPeer->data))->isInGame) {
					((PlayerInfo*)(cPeer->data))->isInGame = false;
					sendPlayerLeave(cPeer, ((PlayerInfo*)(cPeer->data)));
					((PlayerInfo*)(cPeer->data))->currentWorld = "EXIT";
					sendWorldOffers(cPeer);

					Player::PlayAudio(cPeer, "audio/door_shut.wav", 0);
				}
			}
			match.topOne = "";
			match.topTwo = "";
			match.topThree = "";
			match.topFour = "";
			match.topFive = "";
			match.topSix = "";
			match.playersInGame = 0;
			match.isMatchRunning = false;
		}
	}
}


void sendAction(ENetPeer* peer, int netID, string action)
{
	ENetPeer* currentPeer;
	string name = "";
	GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnAction"), action));
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {

			memcpy(p2.data + 8, &netID, 4);
			ENetPacket* packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);


			enet_peer_send(currentPeer, 0, packet2);

			//enet_host_flush(server);
		}
	}
	delete p2.data;
}

void sendTake(ENetPeer* peer, int netID, int x, int y, int item)
{
	ENetPeer * currentPeer;
	string name = "";
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {

			PlayerMoving data;
			data.packetType = 14;
			data.x = x;
			data.y = y;
			data.netID = netID;
			data.plantingTree = item;


			BYTE* raw = packPlayerMoving(&data);


			SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_EVENT_TYPE_RECEIVE);
		}
	}
}



void sendResetState(ENetPeer* peer)
{
	if (((PlayerInfo*)(peer->data))->isCursed)
	{
		PlayerInfo* info = ((PlayerInfo*)(peer->data));
		int netID = info->netID;
		ENetPeer* currentPeer;
		//int state = getState(info);
		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)
		{
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
				continue;
			if (isHere(peer, currentPeer)) {
				PlayerMoving data;
				data.packetType = 0x14;
				data.characterState = 0; // animation
				data.x = 1000;
				data.y = 100;
				data.punchX = 0;
				data.punchY = 0;
				data.XSpeed = 300;
				data.YSpeed = 600;
				data.netID = netID;
				data.plantingTree = 4096;
				BYTE* raw = packPlayerMoving(&data);
				int var = info->effect; // placing and breking
				memcpy(raw + 1, &var, 3);
				SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
			}
			else
			{
				if (((PlayerInfo*)(peer->data))->isDuctaped)
				{
					PlayerInfo* info = ((PlayerInfo*)(peer->data));
					int netID = info->netID;
					ENetPeer* currentPeer;
					//int state = getState(info);
					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (isHere(peer, currentPeer)) {
							PlayerMoving data;
							data.packetType = 0x14;
							data.characterState = 0; // animation
							data.x = 1000;
							data.y = 100;
							data.punchX = 0;
							data.punchY = 0;
							data.XSpeed = 300;
							data.YSpeed = 600;
							data.netID = netID;
							data.plantingTree = 8192;
							BYTE* raw = packPlayerMoving(&data);
							int var = info->effect; // placing and breking
							memcpy(raw + 1, &var, 3);
							SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
						}
						else
						{
							PlayerMoving data;
							data.packetType = 0x14;
							data.characterState = 0; // animation
							data.x = 1000;
							data.y = 100;
							data.punchX = 0;
							data.punchY = 0;
							data.XSpeed = 300;
							data.YSpeed = 600;
							data.netID = netID;
							data.plantingTree = 2;
							BYTE* raw = packPlayerMoving(&data);
							int var = info->effect; // placing and breking
							memcpy(raw + 1, &var, 3);
							SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
						}
					}

				}
			}
		}
	}
}
void sendFrozenState(ENetPeer* peer)
{
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	ENetPeer* currentPeer;
	//int state = getState(info);
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			PlayerMoving data;
			data.packetType = 0x14;
			data.characterState = 0; // animation
			data.x = 1000;
			data.y = 100;
			data.punchX = 0;
			data.punchY = 0;
			data.XSpeed = 300;
			data.YSpeed = 600;
			data.netID = netID;
			data.plantingTree = 2048;
			BYTE* raw = packPlayerMoving(&data);
			int var = info->effect; // placing and breking
			memcpy(raw + 1, &var, 3);
			SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
		}
	}
}
void sendState(ENetPeer* peer) {
	//return; // TODO
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	ENetPeer* currentPeer;
	int state = getState(info);
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			PlayerMoving data;
			data.packetType = 0x14;
			data.characterState = ((PlayerInfo*)(peer->data))->characterState; // animation
			data.x = 1000;
			data.y = 100;
			data.punchX = 0;
			data.punchY = 0;
			data.XSpeed = 300;
			data.YSpeed = 600;
			data.netID = netID;
			data.plantingTree = state;
			BYTE* raw = packPlayerMoving(&data);
			int var = 0x808000; // placing and breking
			memcpy(raw + 1, &var, 3);
			SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
		}
	}
	// TODO
}









void sendfakeState(ENetPeer* peer) {
	//return; // TODO
	PlayerInfo* info = ((PlayerInfo*)(peer->data));
	int netID = info->netID;
	ENetPeer* currentPeer;
	int state = getState(info);
	for (currentPeer = server->peers;
		currentPeer < &server->peers[server->peerCount];
		++currentPeer)
	{
		if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
			continue;
		if (isHere(peer, currentPeer)) {
			if (((PlayerInfo*)(peer->data))->adminLevel != 1000)
			{
				PlayerMoving data;
				data.packetType = 0x14;
				data.characterState = 0; // animation
				data.x = 1000;
				data.y = 100;
				data.punchX = 0;
				data.punchY = 0;
				data.XSpeed = 300;
				data.YSpeed = 600;
				data.netID = netID;
				data.plantingTree = state;
				BYTE* raw = packPlayerMoving(&data);
				int var = info->effect; // placing and breking
				memcpy(raw + 1, &var, 3);
				SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
			}
		}
	}
	// TODO
}
void sendDialog(ENetPeer* peer, string message) {
	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), message));
	ENetPacket* packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);
	delete p.data;
}
void sendPlayerToPlayer(ENetPeer* peer, ENetPeer* otherpeer)
{
	{
		sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
	}
	WorldInfo info = worldDB.get(((PlayerInfo*)(otherpeer->data))->currentWorld);
	sendWorld(peer, &info);


	int x = ((PlayerInfo*)(otherpeer->data))->x;
	int y = ((PlayerInfo*)(otherpeer->data))->y;


	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));


	ENetPacket * packet = enet_packet_create(p.data,
		p.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet);


	delete p.data;
	((PlayerInfo*)(peer->data))->netID = cId;
	onPeerConnect(peer);
	cId++;


	sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
}



void sendPlayerToWorld(ENetPeer* peer, PlayerInfo* player, string wrldname)
{




	toUpperCase(wrldname);
	if (wrldname == "CON" || wrldname == "NUL" || wrldname == "PRN" || wrldname == "AUX" || wrldname == "CLOCK$" || wrldname == "COM0" || wrldname == "COM1" || wrldname == "COM2" || wrldname == "COM3" || wrldname == "COM4" || wrldname == "COM5" || wrldname == "COM6" || wrldname == "COM7" || wrldname == "COM8" || wrldname == "COM9" || wrldname == "LPT0" || wrldname == "LPT1" || wrldname == "LPT2" || wrldname == "LPT3" || wrldname == "LPT4" || wrldname == "LPT5" || wrldname == "LPT6" || wrldname == "LPT7" || wrldname == "LPT8" || wrldname == "LPT9")
	{
		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`eWhoops! `wThis `oworld`w can't be warped to, as it is used by `4System`w.``"));
		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);

		delete p.data;
	}
	else
	{
		{
			sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
		}

		WorldInfo info = worldDB.get(wrldname);
		sendWorld(peer, &info);



		int x = 3040;
		int y = 736;


		for (int j = 0; j < info.width * info.height; j++)
		{
			if (info.items[j].foreground == 6) {
				x = (j % info.width) * 32;
				y = (j / info.width) * 32;
			}
		}
		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));


		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);


		delete p.data;
		((PlayerInfo*)(peer->data))->netID = cId;
		onPeerConnect(peer);
		cId++;


		sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);



	}
}

void debugcout()
{
	while (debugcout)
	{
		cout << "debug test 1";
	}
}
void sendPlayerToWorld2(ENetPeer* peer, PlayerInfo* player, string wrldname, int x_ = -1, int y_ = -1)
{




	toUpperCase(wrldname);
	if (wrldname == "LPT9")
	{
		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`eWhoops! `wThis `oworld`w can't be warped to, as it is used by `4System`w.``"));
		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);

		delete p.data;
	}
	else
	{
		{
			sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
		}

		WorldInfo info = worldDB.get(wrldname);
		sendWorld(peer, &info);



		int x = 3040;
		int y = 736;


		for (int j = 0; j < info.width * info.height; j++)
		{
			if (info.items[j].foreground == 6) {
				x = (j % info.width) * 32;
				y = (j / info.width) * 32;
			}
		}
		if (x_ != -1 && y_ != -1) { x = x_ * 32; y = y_ * 32; }
		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));


		ENetPacket* packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_peer_send(peer, 0, packet);


		delete p.data;
		((PlayerInfo*)(peer->data))->netID = cId;
		onPeerConnect(peer);
		cId++;


		sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);




	}
}
void SendGamePacket(ENetPeer* peer, GamePacket* p)
{
	ENetPacket* packet1 = enet_packet_create(p->data,
		p->len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet1);
}

void DoCancelTransitionAndTeleport(ENetPeer* peer, int x, int y)
{
	GamePacket p = packetEnd(appendInt(appendString(createPacket(), "OnZoomCamera"), 2));
	SendGamePacket(peer, &p);
	GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnSetFreezeState"), 0));
	memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
	SendGamePacket(peer, &p2);
	GamePacket p3 = packetEnd(appendInt(appendString(createPacket(), "OnFailedToEnterWorld"), 1));
	SendGamePacket(peer, &p3);
	GamePacket p4 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x * 32, y * 32));
	memcpy(p4.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
	SendGamePacket(peer, &p4);
}

void DoEnterDoor(ENetPeer* peer, WorldInfo* world, int x, int y)
{
	int idx = x + world->width * y;
	//// First determine door data
	//if (world->blocks[idx].blockData == NULL)
	//{
	//	// fail
	//	DoCancelTransitionAndTeleport(peer, x, y);
	//}
	//else if (world->blocks[idx].blockData->type != 2)
	//{
	//	// fail
	//	DoCancelTransitionAndTeleport(peer,v x, y);
	//}
	//else
	{
		WorldItem block = world->items[idx];
		if (block.destWorld == "EXIT")
		{
			// fail
			sendPlayerLeave(peer, ((PlayerInfo*)(peer->data)));
			sendWorldOffers(peer); // this essentially acts just like a Main Door would
		}
		if (block.destWorld == "")
		{
			// it's this world, find a door here
			int x = 0;
			int y = 0;
			for (int i = 0; i < world->width * world->height; i++)
			{
				ItemDefinition def = getItemDef(world->items[i].foreground);
				if (def.blockType == BlockTypes::DOOR) {
					WorldItem blockDest = world->items[i];
					if (blockDest.currId == block.destId)
					{
						x = (i % world->width);
						y = (i / world->width);
						DoCancelTransitionAndTeleport(peer, x, y);
						return;
					}
				}
			}
			x = 0;
			y = 0;

			for (int j = 0; j < world->width * world->height; j++)
			{
				if (world->items[j].foreground == 6) {
					x = (j % world->width);
					y = (j / world->width);
				}
			}
			DoCancelTransitionAndTeleport(peer, x, y);
		}
		else
		{
			try
			{
				WorldInfo worldDest = worldDB.get(block.destWorld);
				if (block.destId == "")
				{
					int x_ = 0;
					int y_ = 0;

					for (int j = 0; j < worldDest.width * worldDest.height; j++)
					{
						if (worldDest.items[j].foreground == 6) {
							x_ = (j % worldDest.width);
							y_ = (j / worldDest.width);
						}
					}
					sendPlayerToWorld2(peer, ((PlayerInfo*)(peer->data)), block.destWorld, x_, y_);
					return;
				}
				else
				{
					int x_ = 0;
					int y_ = 0;
					bool found = false;
					for (int i = 0; i < worldDest.width * worldDest.height; i++)
					{
						ItemDefinition def = getItemDef(worldDest.items[i].foreground);
						if (def.blockType == BlockTypes::DOOR) {
							WorldItem blockDest = worldDest.items[i];
							if (block.currId == blockDest.destId)
							{
								x_ = (i % world->width);
								y_ = (i / world->width);
								sendPlayerToWorld2(peer, ((PlayerInfo*)(peer->data)), block.destWorld, x_, y_);
								found = true;
								break;
							}
						}
					}
					if (!found)
					{
						int x = 0;
						int y = 0;

						for (int j = 0; j < worldDest.width * worldDest.height; j++)
						{
							if (worldDest.items[j].foreground == 6) {
								x = (j % worldDest.width);
								y = (j / worldDest.width);
							}
						}
						sendPlayerToWorld2(peer, ((PlayerInfo*)(peer->data)), block.destWorld, x, y);
					}
				}
			}
			catch (int e)
			{
				DoCancelTransitionAndTeleport(peer, x, y);
				sendChatMessage(peer, (((PlayerInfo*)(peer->data))->netID), "That door can't lead to such an awesome place!");
			}
		}
	}
	GamePacket p5 = packetEnd(appendInt(appendString(createPacket(), "OnSetFreezeState"), 0));
	memcpy(p5.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
	ENetPacket* packet5 = enet_packet_create(p5.data,
		p5.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet5);
	enet_host_flush(server);

	GamePacket p4 = packetEnd(appendIntx(appendString(createPacket(), "OnFailedToEnterWorld"), 1));
	ENetPacket* packet4 = enet_packet_create(p4.data,
		p4.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet4);
	enet_host_flush(server);
}
void sendWorldFail(ENetPeer* peer)
{
	if (!((PlayerInfo*)(peer->data))->isIn) return;
	vector<WorldInfo> worlds = worldDB.getRandomWorlds();
	string worldOffers = "default|";
	if (worlds.size() > 0) {
		worldOffers += worlds[0].name;
	}


	for (int i = 0; i < worlds.size(); i++) {
		worldOffers += "add_floater|" + worlds[i].name + "|" + std::to_string(getPlayersCountInWorld(worlds[i].name)) + "|0.55|3529161471\n";
	}
	for (int i = 0; i < ((PlayerInfo*)(peer->data))->lastworlds.size(); i++) {
		worldOffers += "add_floater|" + ((PlayerInfo*)(peer->data))->lastworlds[i] + "|" + std::to_string(getPlayersCountInWorld(((PlayerInfo*)(peer->data))->lastworlds[i])) + "|0.55|3417414143\n";
	}
	//GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), "default|GO FOR IT\nadd_button|Showing: `wFake Worlds``|_catselect_|0.6|3529161471|\nadd_floater|Subscribe|5|0.55|3529161471\nadd_floater|Growtopia|4|0.52|428190335\7nadd_floater|Noobs|150|0.49|3529161471\nadd_floater|...|3|0.49|3529161471\nadd_floater|`6:O :O :O``|2|0.46|3529161471\nadd_floater|SEEMS TO WORK|2|0.46|3529161471\nadd_floater|?????|1|0.43|3529161471\nadd_floater|KEKEKEKEK|13|0.7|3417414143\n"));
	//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
	GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), worldOffers));
	ENetPacket* packet3 = enet_packet_create(p3.data,
		p3.len,
		ENET_PACKET_FLAG_RELIABLE);
	enet_peer_send(peer, 0, packet3);
	delete p3.data;
	//enet_host_flush(server);
}

void WhiteDoor(int x, int y, int tile, int causedBy, ENetPeer * peer)
{
	PlayerMoving data;
	//data.packetType = 0x14;
	data.packetType = 0x3;

	//data.characterState = 0x924; // animation
	data.characterState = 0x0; // animation
	data.x = x;
	data.y = y;
	data.punchX = x;
	data.punchY = y;
	data.XSpeed = 0;
	data.YSpeed = 0;
	data.netID = causedBy;
	data.plantingTree = tile;

	WorldInfo* world = getPlyersWorld(peer);

	if (world->items[x + (y * world->width)].foreground == 6)
	{
		sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
		sendWorldOffers(peer);
		if (((PlayerInfo*)(peer->data))->isIn)
		{
			if (((PlayerInfo*)(peer->data))->haveGrowId) {
				((PlayerInfo*)(peer->data))->canWalkInBlocks = false;

				PlayerInfo* p = ((PlayerInfo*)(peer->data));

				string username = PlayerDB::getProperName(p->rawName);

				std::ofstream o("players/" + username + ".json");
				if (!o.is_open()) {
					cout << GetLastError() << endl;
					_getch();
				}
				json j;

				int clothback = p->cloth_back;
				int clothhand = p->cloth_hand;
				int clothface = p->cloth_face;
				int clothhair = p->cloth_hair;
				int clothfeet = p->cloth_feet;
				int clothpants = p->cloth_pants;
				int clothneck = p->cloth_necklace;
				int clothshirt = p->cloth_shirt;
				int clothmask = p->cloth_mask;
				int clothances = p->cloth_ances;
				string guild = p->guild;
				bool joinguild = p->joinguild;
				int level = p->level;
				int xp = p->xp;
				bool join = p->joinguild;
				p->usedCP = false;
				string password = ((PlayerInfo*)(peer->data))->tankIDPass;
				j["username"] = username;
				j["password"] = hashPassword(password);
				j["adminLevel"] = ((PlayerInfo*)(peer->data))->adminLevel;
				j["ClothBack"] = clothback;
				j["ClothHand"] = clothhand;
				j["ClothFace"] = clothface;
				j["ClothShirt"] = clothshirt;
				j["ClothPants"] = clothpants;
				j["ClothNeck"] = clothneck;
				j["ClothHair"] = clothhair;
				j["ClothFeet"] = clothfeet;
				j["ClothMask"] = clothmask;
				j["ClothAnces"] = clothances;

				int ban = 0;
				j["isBanned"] = ban;
				int ip;
				j["ipID"] = peer->address.host;
				j["effect"] = ((PlayerInfo*)(peer->data))->effect;

				//j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;
				j["ip"] = ((PlayerInfo*)(peer->data))->charIP;
				j["boughtLGW"] = ((PlayerInfo*)(peer->data))->boughtLGW;
				j["boughtLGK"] = ((PlayerInfo*)(peer->data))->boughtLGK;
				j["boughtLGD"] = ((PlayerInfo*)(peer->data))->boughtLGD;
				j["boughtLGB"] = ((PlayerInfo*)(peer->data))->boughtLGB;
				j["boughtLKW"] = ((PlayerInfo*)(peer->data))->boughtLKW;
				j["boughtCWD"] = ((PlayerInfo*)(peer->data))->boughtCWD;
				j["boughtRFS"] = ((PlayerInfo*)(peer->data))->boughtRFS;
				j["boughtCDG"] = ((PlayerInfo*)(peer->data))->boughtCDG;
				j["boughtLTIT"] = ((PlayerInfo*)(peer->data))->boughtLTIT;
				j["boughtLWHIP"] = ((PlayerInfo*)(peer->data))->boughtLWHIP;
				j["boughtPHOENIX"] = ((PlayerInfo*)(peer->data))->boughtPHOENIX;
				j["boughtDAV"] = ((PlayerInfo*)(peer->data))->boughtDAV;
				j["boughtZEUS"] = ((PlayerInfo*)(peer->data))->boughtZEUS;
				j["boughtNDEV"] = ((PlayerInfo*)(peer->data))->boughtNDEV;
				j["boughtTXMOM"] = ((PlayerInfo*)(peer->data))->boughtTXMOM;
				j["boughtFLASHAXE"] = ((PlayerInfo*)(peer->data))->boughtFLASHAXE;
				j["boughtVIOLET"] = ((PlayerInfo*)(peer->data))->boughtVIOLET;
				j["boughtCHIMERA"] = ((PlayerInfo*)(peer->data))->boughtCHIMERA;
				j["boughtBRAIN"] = ((PlayerInfo*)(peer->data))->boughtBRAIN;
				j["boughtCCROWN"] = ((PlayerInfo*)(peer->data))->boughtCCROWN;
				j["boughtGBOW"] = ((PlayerInfo*)(peer->data))->boughtGBOW;
				j["boughtGANGEL"] = ((PlayerInfo*)(peer->data))->boughtGANGEL;
				j["boughtGROB"] = ((PlayerInfo*)(peer->data))->boughtGROB;
				j["boughtHSCYTHE"] = ((PlayerInfo*)(peer->data))->boughtHSCYTHE;
				j["boughtGDIAPER"] = ((PlayerInfo*)(peer->data))->boughtGDIAPER;
				j["boughtGTANGEL"] = ((PlayerInfo*)(peer->data))->boughtGTANGEL;
				j["boughtGNECK"] = ((PlayerInfo*)(peer->data))->boughtGNECK;
				j["boughtGGLASS"] = ((PlayerInfo*)(peer->data))->boughtGGLASS;
				j["boughtGPEGASUS"] = ((PlayerInfo*)(peer->data))->boughtGPEGASUS;
				j["boughtGBUG"] = ((PlayerInfo*)(peer->data))->boughtGBUG;
				j["boughtWAR"] = ((PlayerInfo*)(peer->data))->boughtWAR;
				j["boughtRAY"] = ((PlayerInfo*)(peer->data))->boughtRAY;
				j["boughtAAC"] = ((PlayerInfo*)(peer->data))->boughtAAC;
				j["boughtSPD"] = ((PlayerInfo*)(peer->data))->boughtSPD;
				j["boughtTK"] = ((PlayerInfo*)(peer->data))->boughtTK;
				j["aap"] = ((PlayerInfo*)(peer->data))->isAAP;
				j["receivedwarns"] = ((PlayerInfo*)(peer->data))->warns;
				j["receivedbans"] = ((PlayerInfo*)(peer->data))->bans;
				j["guild"] = guild;
				j["joinguild"] = joinguild;
				j["level"] = level;
				j["xp"] = xp;
				j["rubble"] = ((PlayerInfo*)(peer->data))->rubble;
				j["rubblexp"] = ((PlayerInfo*)(peer->data))->rubblexp;
				// Mining update starts here
				j["amber"] = ((PlayerInfo*)(peer->data))->amber;
				j["amberxp"] = ((PlayerInfo*)(peer->data))->amberxp;

				j["opal"] = ((PlayerInfo*)(peer->data))->opal;
				j["opalxp"] = ((PlayerInfo*)(peer->data))->opalxp;

				j["gold"] = ((PlayerInfo*)(peer->data))->gold;
				j["goldxp"] = ((PlayerInfo*)(peer->data))->goldxp;

				j["sapphire"] = ((PlayerInfo*)(peer->data))->sapphire;
				j["sapphirexp"] = ((PlayerInfo*)(peer->data))->sapphirexp;

				j["diamond"] = ((PlayerInfo*)(peer->data))->diamond;
				j["diamondxp"] = ((PlayerInfo*)(peer->data))->diamondxp;

				j["emerald"] = ((PlayerInfo*)(peer->data))->emerald;
				j["emeraldxp"] = ((PlayerInfo*)(peer->data))->emeraldxp;
				// Mining update ends here
				j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned;
				o << j << std::endl;
			}
		}
	}

}

void Respawn(ENetPeer* peer) {
	int x = 3040;
	int y = 736;

	WorldInfo* world = getPlyersWorld(peer);
	if (world)
	{


		ENetPeer* currentPeer;

		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)
		{
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
				continue;
			if (isHere(peer, currentPeer)) {

				int x = ((PlayerInfo*)(peer->data))->x;
				int y = ((PlayerInfo*)(peer->data))->y;
				GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 3), x, (y + 8)));

				ENetPacket * packetd = enet_packet_create(psp.data,
					psp.len,
					ENET_PACKET_FLAG_RELIABLE);
				enet_peer_send(currentPeer, 0, packetd);
				delete psp.data;

				string text = "action|play_sfx\nfile|audio/male_scream.wav\ndelayMS|0\n";
				BYTE* data = new BYTE[5 + text.length()];
				BYTE zero = 0;
				int type = 3;
				memcpy(data, &type, 4);
				memcpy(data + 4, text.c_str(), text.length());
				memcpy(data + 4 + text.length(), &zero, 1);

				{
					ENetPacket * packetres = enet_packet_create(data,
						5 + text.length(),
						ENET_PACKET_FLAG_RELIABLE);

					if (isHere(peer, currentPeer)) {
						enet_peer_send(currentPeer, 0, packetres);

					}
				}
			}
		}

		for (int i = 0; i < world->width*world->height; i++)
		{
			if (world->items[i].foreground == 6) {
				x = (i%world->width) * 32;
				y = (i / world->width) * 32;
				//world->items[i].foreground = 8;
			}
		}
		{
			PlayerMoving data;
			data.packetType = 0x0;
			data.characterState = 0x924; // animation
			data.x = x;
			data.y = y;
			data.punchX = -1;
			data.punchY = -1;
			data.XSpeed = 0;
			data.YSpeed = 0;
			data.netID = ((PlayerInfo*)(peer->data))->netID;
			data.plantingTree = 0x0; // 0x0
			SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
		}

		{
			int x = 3040;
			int y = 736;


			for (int i = 0; i < world->width*world->height; i++)
			{
				if (world->items[i].foreground == 6) {
					x = (i%world->width) * 32;
					y = (i / world->width) * 32;
					//world->items[i].foreground = 8;
				}
			}
			GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
			memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
			ENetPacket * packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);


			enet_peer_send(peer, 0, packet2);
			delete p2.data;
			//enet_host_flush(server);
		}
		{
			int x = 3040;
			int y = 736;


			for (int i = 0; i < world->width*world->height; i++)
			{
				if (world->items[i].foreground == 6) {
					x = (i%world->width) * 32;
					y = (i / world->width) * 32;
					//world->items[i].foreground = 8;
				}
			}
			GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnSetFreezeState"), 0));
			memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
			ENetPacket * packet2 = enet_packet_create(p2.data,
				p2.len,
				ENET_PACKET_FLAG_RELIABLE);


			enet_peer_send(peer, 0, packet2);
			delete p2.data;
			enet_host_flush(server);
		}
	}
	if (((PlayerInfo*)(peer->data))->usedCP == false)
	{
		GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
		memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
		ENetPacket * packet2 = enet_packet_create(p2.data,
			p2.len,
			ENET_PACKET_FLAG_RELIABLE);


		enet_peer_send(peer, 0, packet2);
		delete p2.data;
	}
	else
	{
		GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), ((PlayerInfo*)(peer->data))->cpX, ((PlayerInfo*)(peer->data))->cpY));
		memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
		ENetPacket * packet2 = enet_packet_create(p2.data,
			p2.len,
			ENET_PACKET_FLAG_RELIABLE);


		enet_peer_send(peer, 0, packet2);
		delete p2.data;
	}
}








BOOL WINAPI HandlerRoutine(DWORD dwCtrlType)
{
	saveAllWorlds();
	return FALSE;
}

std::ifstream::pos_type filesize(const char* filename)
{
	std::ifstream in(filename, std::ifstream::ate | std::ifstream::binary);
	return in.tellg();
}

uint32_t HashString(unsigned char* str, int len)
{
	if (!str) return 0;

	unsigned char* n = (unsigned char*)str;
	uint32_t acc = 0x55555555;

	if (len == 0)
	{
		while (*n)
			acc = (acc >> 27) + (acc << 5) + *n++;
	}
	else
	{
		for (int i = 0; i < len; i++)
		{
			acc = (acc >> 27) + (acc << 5) + *n++;
		}
	}
	return acc;

}

unsigned char* getA(string fileName, int* pSizeOut, bool bAddBasePath, bool bAutoDecompress)
{
	unsigned char* pData = NULL;
	FILE* fp = fopen(fileName.c_str(), "rb");
	if (!fp)
	{
		cout << "File not found" << endl;
		if (!fp) return NULL;
	}

	fseek(fp, 0, SEEK_END);
	*pSizeOut = ftell(fp);
	fseek(fp, 0, SEEK_SET);

	pData = (unsigned char*)new unsigned char[((*pSizeOut) + 1)];
	if (!pData)
	{
		printf("Out of memory opening %s?", fileName.c_str());
		return 0;
	}
	pData[*pSizeOut] = 0;
	fread(pData, *pSizeOut, 1, fp);
	fclose(fp);

	return pData;
}

void ServerInputPluginByplayingo()
{
	while (ServerInputPluginByplayingo)
	{
		std::string buffer;
		std::cin >> buffer;

		// example:
		if (buffer == "exit") // if exit is typed in server console:
		{
			// do stuff
			exit(0);
		}
		else if (buffer == "online")
		{
			string x;


			ENetPeer* currentPeer;
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;


				x.append(((PlayerInfo*)(currentPeer->data))->rawName + " (" + to_string(((PlayerInfo*)(currentPeer->data))->adminLevel) + ")" + " (" + ((PlayerInfo*)(currentPeer->data))->charIP + ")" + ", ");
			}
			x = x.substr(0, x.length() - 2);

			cout << "(PEERS CONNECTED!)" << x << endl;

		}
		else if (buffer == "saveall")
		{
			saveAllWorlds();
		}

		else if (buffer == "kickall")
		{
			ENetPeer* currentPeer;
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;

				enet_peer_disconnect_later(currentPeer, 0);
			}
		}
		else if (buffer == "restart")
		{
			ENetPeer* currentPeer;
			GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message `o: Restarting server for update in `4ZERO`o seconds! Should be back up in a minute or so. BYE!"));
			string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
			BYTE* data = new BYTE[5 + text.length()];
			BYTE zero = 0;
			int type = 3;
			memcpy(data, &type, 4);
			memcpy(data + 4, text.c_str(), text.length());
			memcpy(data + 4 + text.length(), &zero, 1);
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;
				if (!((PlayerInfo*)(currentPeer->data))->radio)
					continue;
				ENetPacket* packet = enet_packet_create(p.data,
					p.len,
					ENET_PACKET_FLAG_RELIABLE);


				enet_peer_send(currentPeer, 0, packet);




				ENetPacket* packet2 = enet_packet_create(data,
					5 + text.length(),
					ENET_PACKET_FLAG_RELIABLE);


				enet_peer_send(currentPeer, 0, packet2);

				//enet_host_flush(server);
			}
			delete data;
			delete p.data;
			for (currentPeer = server->peers;
				currentPeer < &server->peers[server->peerCount];
				++currentPeer)
			{
				if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
					continue;

				enet_peer_disconnect_later(currentPeer, 0);
			}
		}


		if (buffer.find("addrole") != std::string::npos) {
			// todo

		}



		else if (buffer == "help" || buffer == "?")
		{
			cout << "[CONSOLE]: Available Commands Are " << "help " << "kickall " << "saveall " << "addrole " << "online " << "delete " << "maintenance " << "exit" << endl;
		}



	}
}
void loadConfig()
{
	std::ifstream ifs("config.json");
	if (ifs.is_open()) {


		json j;
		ifs >> j;

		serverhash = j["Hash"];
		serverport = j["port"];
		serverversion = j["Serverversion"];
		cout << "GrowTopiaSC Config :" << endl;
		cout << "[GTLT MANAGER] hosting on port :" << serverhash << endl;
		cout << "[GTLT MANAGER] Server Version :" << serverversion << ".996" << endl;
		serverrolecount = j["rolecount"];
		json roles = j["roles"];
		for (int i = 0; i < serverrolecount; i++) {
			string insertUser = roles[i]["username"].get<string>();
			string insertUserPass = roles[i]["password"].get<string>();
			int insertUserLevel = roles[i]["adminlevel"];
			//addAdmin(insertUser, insertUserPass, insertUserLevel);
		}



	}




	ifs.close();
	// finished
}

void autoSaveWorlds() {
	while (1) {
		//Sleep(1800000);
		Sleep(300000);
		string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
		BYTE* data = new BYTE[5 + text.length()];
		BYTE zero = 0;
		int type = 3;
		memcpy(data, &type, 4);
		memcpy(data + 4, text.c_str(), text.length());
		memcpy(data + 4 + text.length(), &zero, 1);
		ENetPacket * packet2 = enet_packet_create(data,
			5 + text.length(),
			ENET_PACKET_FLAG_RELIABLE);
		enet_host_broadcast(server, 0, packet2);
		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`4SYSTEM`w] `5Auto Saving All Worlds..."));
		ENetPacket * packet = enet_packet_create(p.data,
			p.len,
			ENET_PACKET_FLAG_RELIABLE);
		enet_host_broadcast(server, 0, packet);
		delete data;
		delete p.data;
		ENetPeer * currentPeer;
		for (currentPeer = server->peers;
			currentPeer < &server->peers[server->peerCount];
			++currentPeer)
		{
			if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
				continue;
			//enet_peer_disconnect_now(currentPeer, 0);
		}
		Sleep(500);
		saveAllWorlds();
	}
}

int main()
{
	ofstream ofrestoff("restartedmaintenance.txt");
	ofrestoff << 0;
	ofrestoff.close();
	int count = 0, ch;
wrong:
	std::thread first(ServerInputPluginByplayingo);
	first.detach();

	loadConfig();
	{
		{



		}
		enet_initialize();;
		if (atexit(saveAllWorlds)) {
			cout << "[WARNING]: Worlds Won't Be Saved For This Session!" << endl;
		}
		SetConsoleCtrlHandler(HandlerRoutine, true);
		thread autosaver(autoSaveWorlds);
		if (autosaver.joinable()) {
			autosaver.detach();
		}

		int itemdathash;

		// load items.dat
		{
			std::ifstream file("items.dat", std::ios::binary | std::ios::ate);
			itemsDatSize = file.tellg();



			itemsDat = new BYTE[60 + itemsDatSize];
			string asdf = "0400000010000000FFFFFFFF000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
			for (int i = 0; i < asdf.length(); i += 2)
			{
				char x = ch2n(asdf[i]);
				x = x << 4;
				x += ch2n(asdf[i + 1]);
				memcpy(itemsDat + (i / 2), &x, 1);
				if (asdf.length() > 60 * 2) throw 0;
			}
			memcpy(itemsDat + 56, &itemsDatSize, 4);
			file.seekg(0, std::ios::beg);


			if (file.read((char*)(itemsDat + 60), itemsDatSize))
			{
				uint8_t* pData;
				int size = 0;
				const char filename[] = "items.dat";
				size = filesize(filename);
				pData = getA((string)filename, &size, false, false);
				cout << "[STARTUP]: Updating Items Data " << HashString((unsigned char*)pData, size) << "!" << endl;
				itemdathash = HashString((unsigned char*)pData, size);
				file.close();
			}
			else {
				cout << "[CRITICAL]: Error Occured While Starting Server!" << endl;
			}
		}


		ENetAddress address;
		enet_address_set_host(&address, "0.0.0.0");
		address.port = 17098; // any port serverport
		server = enet_host_create(&address /* the address to bind the server host to */,
			300      /* allow up to 32 clients and/or outgoing connections */,
			2      /* allow up to 2 channels to be used, 0 and 1 */,
			4096      /* assume any amount of incoming bandwidth */,
			0      /* assume any amount of outgoing bandwidth */);
		if (server == NULL)
		{
			fprintf(stderr,
				"[CRITICAL]: Error Occured While Starting Server!");
			while (1);
			exit(EXIT_FAILURE);
		}
		server->checksum = enet_crc32;
		enet_host_compress_with_range_coder(server);

		buildItemsDatabase();
		cout << "[STARTUP]: Server Running On Port 3389!" << endl;

		std::thread two(updateAnswer); // game zaidimas.
		two.detach();

		std::thread rst(RestartForUpdate);
		rst.detach();


		thread queue(setupQueue);
		if (queue.joinable()) queue.detach();
		thread manage(manageGame);
		if (manage.joinable()) manage.detach();
		thread game(Game);
		if (game.joinable()) game.detach();

		ENetEvent event;
		/* Wait up to 1000 milliseconds for an event. */
		while (true)
			while (enet_host_service(server, &event, 1000) > 0)
			{

				ENetPeer* peer = event.peer;

				switch (event.type)
				{
				case ENET_EVENT_TYPE_CONNECT:
				{
#ifdef TOTAL_LOG
					printf("A new client connected.\n");
#endif
					/* Store any relevant client information here. */
										  //event.peer->data = "Client information";



					ENetPeer* currentPeer;
					int count = 0;
					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						if (currentPeer->address.host == peer->address.host)
							count++;

					}


					//char clientConnection[32];
					//((PlayerInfo*)(peer->data))->charIP = enet_address_get_host_ip(&peer->address, clientConnection, 32);

					event.peer->data = new PlayerInfo;



					/* Get the string ip from peer */
					char clientConnection[16];
					enet_address_get_host_ip(&peer->address, clientConnection, 16);
					((PlayerInfo*)(peer->data))->charIP = clientConnection;



					bool isBotHere = false;
					string ipFromFile = "";
					int countIpFromFile = 0;
					ifstream getip("blacklist.txt");
					getip >> countIpFromFile;

					for (int i = 0; i < countIpFromFile; i++)
					{
						getip >> ipFromFile;

						if (((PlayerInfo*)(peer->data))->charIP == ipFromFile)
						{
							cout << "[WARNING]: BlackListed User Tried To Connect " << ((PlayerInfo*)(peer->data))->charIP << "!" << endl;

							isBotHere = true;
						}
					}

					if (isBotHere) continue;




					if (count > 3)
					{
						cout << "[WARNING]: Too Many Account Logged From This IP " << ((PlayerInfo*)(peer->data))->charIP << "!" << endl;
						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rToo many accounts are logged on from this IP. Log off one account before playing please.``"));
						ENetPacket* packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;
						enet_peer_disconnect_later(peer, 0);
					}
					else {
						sendData(peer, 1, 0, 0);
					}




					continue;
				}
				case ENET_EVENT_TYPE_RECEIVE:
				{




					if (((PlayerInfo*)(peer->data))->isUpdating)
					{
						cout << "[WARNING]: Packet Dropped From " << ((PlayerInfo*)(peer->data))->charIP << "!" << endl;
						continue;
					}
					sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
					if (((PlayerInfo*)(peer->data))->forcegemUpdate)
					{
						/*((PlayerInfo*)(peer->data))->forcegemUpdate = false;

						std::ifstream ifszx("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
						std::string contentix((std::istreambuf_iterator<char>(ifszx)),
							(std::istreambuf_iterator<char>()));

						int updvgem = atoi(contentix.c_str());

						GamePacket ppx = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updvgem));
						ENetPacket * packetppx = enet_packet_create(ppx.data,
							ppx.len,
							ENET_PACKET_FLAG_RELIABLE);

						enet_peer_send(peer, 0, packetppx);
						delete ppx.data;


						GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`8You have received some `4gems`8, pal!"));
						ENetPacket * packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
						enet_peer_send(peer, 0, packet);
						delete p.data;*/

					}
					if (((PlayerInfo*)(event.peer->data))->wrongpass == true)
					{
						if (((PlayerInfo*)(peer->data))->isIn) {
							//enet_peer_disconnect_later(peer, 0);

						}
						else
						{



							string text = "action|log\nmsg|`4GrowID or password is wrong! `7Incase you want to recover/change your account/password, contact ! Herino#1175.``";
							string text3 = "action|logon_fail\n";
							string dc = "https://discord.gg/qtSdMWx";
							string url = "action|set_url\nurl|" + dc + "\nlabel|Join discord\n";


							BYTE* data = new BYTE[5 + text.length()];
							BYTE* data3 = new BYTE[5 + text3.length()];
							BYTE* dataurl = new BYTE[5 + url.length()];
							BYTE zero = 0;
							int type = 3;
							memcpy(data, &type, 4);
							memcpy(data + 4, text.c_str(), text.length());
							memcpy(data + 4 + text.length(), &zero, 1);

							memcpy(dataurl, &type, 4);
							memcpy(dataurl + 4, url.c_str(), url.length());
							memcpy(dataurl + 4 + url.length(), &zero, 1);

							memcpy(data3, &type, 4);
							memcpy(data3 + 4, text3.c_str(), text3.length());
							memcpy(data3 + 4 + text3.length(), &zero, 1);

							ENetPacket* p = enet_packet_create(data,
								5 + text.length(),
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, p);
							ENetPacket* p3 = enet_packet_create(dataurl,
								5 + url.length(),
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, p3);
							ENetPacket* p2 = enet_packet_create(data3,
								5 + text3.length(),
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, p2);

							delete data;
							delete dataurl;
							delete data3;

							//enet_peer_disconnect_later(peer, 0);
						}
					}



					ENetPeer* currentPeer;
					int count = 0;
					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;



						std::string mac(((PlayerInfo*)(currentPeer->data))->mac);
						Remove(mac, ":");
						std::string currentip = std::to_string(currentPeer->address.host);
						//((PlayerInfo*)(event.peer->data))->player_age
						bool exist = false;
						if (std::experimental::filesystem::exists("ridbans/" + ((PlayerInfo*)(event.peer->data))->rid + ".txt"))
						{

							exist = true;
						}
						else
						{
							exist = false;
						}


						if (exist == true)
						{
							if (peer->address.host == currentPeer->address.host)
							{

								if (((PlayerInfo*)(peer->data))->isIn) {
									enet_peer_disconnect_later(peer, 0);

								}
								else
								{
									//if (((PlayerInfo*)(peer->data))->isIn == false) checkBan(peer);
									string text = "action|log\nmsg|`4Sorry, this device or location has been suspended. `5Contact ! Herino#1175 on discord``! `wPlease do not request an unban if you know that you have done something wrong.";
									string text3 = "action|logon_fail\n";
									string dc = "https://discord.gg/qtSdMWx";
									string url = "action|set_url\nurl|" + dc + "\nlabel|Join discord\n";


									BYTE* data = new BYTE[5 + text.length()];
									BYTE* data3 = new BYTE[5 + text3.length()];
									BYTE* dataurl = new BYTE[5 + url.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);

									memcpy(dataurl, &type, 4);
									memcpy(dataurl + 4, url.c_str(), url.length());
									memcpy(dataurl + 4 + url.length(), &zero, 1);

									memcpy(data3, &type, 4);
									memcpy(data3 + 4, text3.c_str(), text3.length());
									memcpy(data3 + 4 + text3.length(), &zero, 1);

									ENetPacket* p = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, p);
									ENetPacket* p3 = enet_packet_create(dataurl,
										5 + url.length(),
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, p3);
									ENetPacket* p2 = enet_packet_create(data3,
										5 + text3.length(),
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, p2);

									delete data;
									delete dataurl;
									delete data3;

									enet_peer_disconnect_later(peer, 0);
								}
							}
						}
					}



					int messageType = GetMessageTypeFromPacket(event.packet);
					//cout << "Packet type is " << messageType << endl;
					//cout << (event->packet->data+4) << endl;
					WorldInfo* world = getPlyersWorld(peer);
					switch (messageType) {
					case 2:
					{
						string cch = GetTextPointerFromPacket(event.packet);

						cout << cch << endl;
						//cout << GetTextPointerFromPacket(event.packet) << endl;

						//logs.flush();
						string str = cch.substr(cch.find("text|") + 5, cch.length() - cch.find("text|") - 1);

						if (cch.find("action|wrench") == 0) {
							vector<string> ex = explode("|", cch);


							stringstream ss;


							ss << ex[3];


							string temp;
							int found;
							while (!ss.eof()) {


								ss >> temp;


								if (stringstream(temp) >> found)
									//cout << found;
									((PlayerInfo*)(peer->data))->wrenchsession = found;


								temp = "";
							}
							string worldsowned;

							ENetPeer* currentPeer;
							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;


								if (isHere(peer, currentPeer)) {
									if (((PlayerInfo*)(currentPeer->data))->netID == ((PlayerInfo*)(peer->data))->wrenchsession) {

										((PlayerInfo*)(peer->data))->lastInfo = ((PlayerInfo*)(currentPeer->data))->rawName;
										((PlayerInfo*)(peer->data))->lastInfoname = ((PlayerInfo*)(currentPeer->data))->tankIDName;

										string name = ((PlayerInfo*)(currentPeer->data))->displayName;
										string rawnam = ((PlayerInfo*)(peer->data))->rawName;
										string rawnamofwrench = ((PlayerInfo*)(currentPeer->data))->rawName;
										if (rawnamofwrench != rawnam)
										{

											if (rawnamofwrench != "")
											{
												std::ifstream ifszsx("gemdb/" + ((PlayerInfo*)(peer->data))->lastInfo + ".txt");
												std::string contentch2x((std::istreambuf_iterator<char>(ifszsx)),
													(std::istreambuf_iterator<char>()));
												if (find(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), ((PlayerInfo*)(currentPeer->data))->rawName) != ((PlayerInfo*)(peer->data))->friendinfo.end()) {
													if (world->owner == ((PlayerInfo*)(peer->data))->rawName && ((PlayerInfo*)(peer->data))->haveGrowId || ((PlayerInfo*)(peer->data))->adminLevel >= 777)
													{
														if (((PlayerInfo*)(peer->data))->adminLevel >= 998)
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`w" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2x + "|left|4|\nadd_spacer|small|\nadd_button|punishview|`!Punish/View|0|0|\nadd_button|trade|`9Trade|0|0|\nadd_button|invitemenu|`eInvite...|0|0|\nadd_button|pull|`5Pull|0|0|\nadd_button|kick|`4Kick|0|0|\nadd_button|wban|`4World Ban|0|0|\nadd_button|btntradeworld|`9Sell World|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;
														}
														else
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2x + "|left|4|\nadd_spacer|small|\nadd_button|trade|`9Trade|0|0|\nadd_button|invitemenu|`eInvite..|0|0|\nadd_button|pull|`5Pull|0|0|\nadd_button|kick|`4Kick|0|0|\nadd_button|wban|`4World Ban|0|0|\nadd_button|btntradeworld|`9Sell World|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;
														}
													}
													else
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2x + "|left|4|\nadd_spacer|small|\n\nadd_button|invitemenu|`eInvite...|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
												}
												else {
													if (world->owner == ((PlayerInfo*)(peer->data))->rawName && ((PlayerInfo*)(peer->data))->haveGrowId || ((PlayerInfo*)(peer->data))->adminLevel >= 998)
													{
														if (((PlayerInfo*)(peer->data))->adminLevel >= 998)
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`w" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2x + "|left|4|\nadd_spacer|small|\nadd_button|punishview|`!Punish/View|0|0|\nadd_button|trade|`9Trade|0|0|\nadd_button|invitemenu|`eInvite...|0|0|\nadd_button|pull|`5Pull|0|0|\nadd_button|kick|`4Kick|0|0|\nadd_button|wban|`4World Ban|0|0|\nadd_button|btntradeworld|`9Sell World|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;
														}
														else
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2x + "|left|4|\nadd_spacer|small|\nadd_button|trade|`9Trade|0|0|\nadd_button|invitemenu|`eInvite...|0|0|\nadd_button|pull|`5Pull|0|0|\nadd_button|kick|`4Kick|0|0|\nadd_button|wban|`4World Ban|0|0|\nadd_button|btntradeworld|`9Sell World|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;
														}
													}
													else
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2x + "|left|4|\nadd_spacer|small|\n\nadd_button|invitemenu|`eInvite...|0|0|\nadd_spacer|small|\nadd_button||Continue|0|0|\nadd_quick_exit"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
												}
											}
											else
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + " `w(`2" + to_string(((PlayerInfo*)(currentPeer->data))->level) + "`w)``|left|18|\nadd_spacer|small|\nadd_button|chc0|Close|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;
											}
										}
										else
										{
											std::ifstream ifszs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string contentch2((std::istreambuf_iterator<char>(ifszs)),
												(std::istreambuf_iterator<char>()));
											if (((PlayerInfo*)(peer->data))->isAAP == true)
											{
												if (((PlayerInfo*)(peer->data))->haveGrowId == true)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + "|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2 + "|left|4|\nadd_button|disableaap|`5Disable AAP`w``|noflags|0|0|\nadd_button|chc0|Close|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + "|left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2 + "|left|4|\nadd_button|chc0|Close|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
											else
											{
												if (((PlayerInfo*)(peer->data))->haveGrowId == true)
												{
													std::ostringstream oss;
													if (!((PlayerInfo*)(peer->data))->worldsowned.empty())
													{
														std::copy(((PlayerInfo*)(peer->data))->worldsowned.begin(), ((PlayerInfo*)(peer->data))->worldsowned.end() - 1,
															std::ostream_iterator<string>(oss, " "));

														// Now add the last element with no delimiter
														oss << ((PlayerInfo*)(peer->data))->worldsowned.back();
													}
													else {
														string oss = "You dont have any worlds!";
													}
													int levels = ((PlayerInfo*)(peer->data))->level;
													int xp = ((PlayerInfo*)(peer->data))->xp;
													int rubble = ((PlayerInfo*)(peer->data))->rubble;
													int amber = ((PlayerInfo*)(peer->data))->amber;
													int opal = ((PlayerInfo*)(peer->data))->opal;
													int gold = ((PlayerInfo*)(peer->data))->gold;
													int sapphire = ((PlayerInfo*)(peer->data))->sapphire;
													int diamond = ((PlayerInfo*)(peer->data))->diamond;
													int emerald = ((PlayerInfo*)(peer->data))->emerald;
													string currentworld = ((PlayerInfo*)(peer->data))->currentWorld;


													if (((PlayerInfo*)(peer->data))->isinvited == true)
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_player_info|" + name + "|" + std::to_string(levels) + "|" + std::to_string(xp) + "|300|\nadd_spacer|small|\nadd_button|viewbackpack|`wView `9Backpack``|small|\nadd_button|passbutton|`wChange `4Password``|small|\nadd_button|joinguild|`2Join Guild " + ((PlayerInfo*)(currentPeer->data))->guildlast + "!|\nadd_spacer|small|\nadd_textbox|`oYou Currently Have `@" + contentch2 + " `9Gems`o.|left|\nadd_textbox|`oCurrent World: `w" + currentworld + "|left|\nadd_textbox|`oWorlds Owned:" + oss.str() + "|left|4|\nadd_spacer|small|\nadd_button|chc0|Close|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													else
													{
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_player_info|" + name + "|" + std::to_string(levels) + "|" + std::to_string(xp) + "|300|\nadd_spacer|small|\nadd_button|viewbackpack|`wView `9Backpack``|small|\nadd_button|passbutton|`wChange `4Password``|\nadd_spacer|small|\nadd_textbox|`oYou Currently Have `@" + contentch2 + " `9Gems`o.|left|\nadd_textbox|`oCurrent World: `w" + currentworld + "|left|\nadd_textbox|`oWorlds Owned:" + oss.str() + "|left|4|\nadd_spacer|small|\nadd_button|chc0|Close|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_label_with_icon|big|`0" + name + "        |left|18|\nadd_spacer|small|\nadd_label|small|`4Gems:`w " + contentch2 + "|left|4|\nadd_button|chc0|Close|noflags|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
											}
										}

									}


								}


							}
						}
						if (cch.find("action|dialog_return\ndialog_name|mail_edit") == 0)
						{
							if (world != NULL)
							{
								std::stringstream ss(GetTextPointerFromPacket(event.packet));
								std::string to;
								int x = 0;
								int y = 0;
								bool created = false;
								string text = "";
								while (std::getline(ss, to, '\n'))
								{
									string id = to.substr(0, to.find("|"));
									string act = to.substr(to.find("|") + 1, to.length() - to.find("|") - 1);
									if (id == "ch3")
									{
										text = act;
									}
									else if (id == "tilex")
									{
										x = atoi(act.c_str());
									}
									else if (id == "tiley")
									{
										y = atoi(act.c_str());
										created = true;
									}
									if (created == true)
									{
										string world = ((PlayerInfo*)(peer->data))->currentWorld;

										if (text == "__%&P&%__")
										{
											continue;
										}
										for (char c : text)
										{
											if (c < 0x18 || std::all_of(text.begin(), text.end(), isspace))
											{
											}
										}
										if (text.length() > 0)
										{
											if (text.length() < 255)
											{
												WorldInfo* worldInfo = getPlyersWorld(peer);
												std::ifstream ifs("mails/" + world + "." + to_string(x) + "." + to_string(y) + ".json");
												if (ifs.is_open())
												{
													json j;
													ifs >> j;
													string line1 = j["line1"];
													string line2 = j["line2"];
													string line3 = j["line3"];
													string line4 = j["line4"];
													string line5 = j["line5"];
													string line6 = j["line6"];
													string line7 = j["line7"];
													string line8 = j["line8"];
													string line9 = j["line9"];
													string line10 = j["line10"];
													int amount = j["amount"];
													//
													if (line1 == "")
													{
														std::ofstream o("mails/" + worldInfo->name + "." + to_string(x) + "." + to_string(y) + ".json");
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														json j;
														j["line1"] = text + "|" + ((PlayerInfo*)(peer->data))->rawName;
														j["line2"] = line2;
														j["line3"] = line3;
														j["line4"] = line4;
														j["line5"] = line5;
														j["line6"] = line6;
														j["line7"] = line7;
														j["line8"] = line8;
														j["line9"] = line9;
														j["line10"] = line10;
														j["amount"] = amount + 1;
														o << j << std::endl;
														o.close();
														//
														if (amount + 1 == 10)
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `w(`4Full`w)``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
														else
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
													}
													else if (line2 == "")
													{
														std::ofstream o("mails/" + worldInfo->name + "." + to_string(x) + "." + to_string(y) + ".json");
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														json j;
														j["line1"] = line1;
														j["line2"] = text + "|" + ((PlayerInfo*)(peer->data))->rawName;
														j["line3"] = line3;
														j["line4"] = line4;
														j["line5"] = line5;
														j["line6"] = line6;
														j["line7"] = line7;
														j["line8"] = line8;
														j["line9"] = line9;
														j["line10"] = line10;
														j["amount"] = amount + 1;
														o << j << std::endl;
														o.close();
														//
														if (amount + 1 == 10)
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `w(`4Full`w)``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
														else
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
													}
													else if (line3 == "")
													{
														std::ofstream o("mails/" + worldInfo->name + "." + to_string(x) + "." + to_string(y) + ".json");
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														json j;
														j["line1"] = line1;
														j["line2"] = line2;
														j["line3"] = text + "|" + ((PlayerInfo*)(peer->data))->rawName;
														j["line4"] = line4;
														j["line5"] = line5;
														j["line6"] = line6;
														j["line7"] = line7;
														j["line8"] = line8;
														j["line9"] = line9;
														j["line10"] = line10;
														j["amount"] = amount + 1;
														o << j << std::endl;
														o.close();
														//
														if (amount + 1 == 10)
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `w(`4Full`w)``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
														else
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
													}
													else if (line4 == "")
													{
														std::ofstream o("mails/" + worldInfo->name + "." + to_string(x) + "." + to_string(y) + ".json");
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														json j;
														j["line1"] = line1;
														j["line2"] = line2;
														j["line3"] = line3;
														j["line4"] = text + "|" + ((PlayerInfo*)(peer->data))->rawName;
														j["line5"] = line5;
														j["line6"] = line6;
														j["line7"] = line7;
														j["line8"] = line8;
														j["line9"] = line9;
														j["line10"] = line10;
														j["amount"] = amount + 1;
														o << j << std::endl;
														o.close();
														//
														if (amount + 1 == 10)
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `w(`4Full`w)``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
														else
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
													}
													else if (line5 == "")
													{
														std::ofstream o("mails/" + worldInfo->name + "." + to_string(x) + "." + to_string(y) + ".json");
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														json j;
														j["line1"] = line1;
														j["line2"] = line2;
														j["line3"] = line3;
														j["line4"] = line4;
														j["line5"] = text + "|" + ((PlayerInfo*)(peer->data))->rawName;
														j["line6"] = line6;
														j["line7"] = line7;
														j["line8"] = line8;
														j["line9"] = line9;
														j["line10"] = line10;
														j["amount"] = amount + 1;
														o << j << std::endl;
														o.close();
														//
														if (amount + 1 == 10)
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `w(`4Full`w)``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
														else
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
													}
													else if (line6 == "")
													{
														std::ofstream o("mails/" + worldInfo->name + "." + to_string(x) + "." + to_string(y) + ".json");
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														json j;
														j["line1"] = line1;
														j["line2"] = line2;
														j["line3"] = line3;
														j["line4"] = line4;
														j["line5"] = line5;
														j["line6"] = text + "|" + ((PlayerInfo*)(peer->data))->rawName;
														j["line7"] = line7;
														j["line8"] = line8;
														j["line9"] = line9;
														j["line10"] = line10;
														j["amount"] = amount + 1;
														o << j << std::endl;
														o.close();
														//
														if (amount + 1 == 10)
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `w(`4Full`w)``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
														else
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
													}
													else if (line7 == "")
													{
														std::ofstream o("mails/" + worldInfo->name + "." + to_string(x) + "." + to_string(y) + ".json");
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														json j;
														j["line1"] = line1;
														j["line2"] = line2;
														j["line3"] = line3;
														j["line4"] = line4;
														j["line5"] = line5;
														j["line6"] = line6;
														j["line7"] = text + "|" + ((PlayerInfo*)(peer->data))->rawName;
														j["line8"] = line8;
														j["line9"] = line9;
														j["line10"] = line10;
														j["amount"] = amount + 1;
														o << j << std::endl;
														o.close();
														//
														if (amount + 1 == 10)
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `w(`4Full`w)``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
														else
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
													}
													else if (line8 == "")
													{
														std::ofstream o("mails/" + worldInfo->name + "." + to_string(x) + "." + to_string(y) + ".json");
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														json j;
														j["line1"] = line1;
														j["line2"] = line2;
														j["line3"] = line3;
														j["line4"] = line4;
														j["line5"] = line5;
														j["line6"] = line6;
														j["line7"] = line7;
														j["line8"] = text + "|" + ((PlayerInfo*)(peer->data))->rawName;
														j["line9"] = line9;
														j["line10"] = line10;
														j["amount"] = amount + 1;
														o << j << std::endl;
														o.close();
														//
														if (amount + 1 == 10)
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `w(`4Full`w)``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
														else
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
													}
													else if (line9 == "")
													{
														std::ofstream o("mails/" + worldInfo->name + "." + to_string(x) + "." + to_string(y) + ".json");
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														json j;
														j["line1"] = line1;
														j["line2"] = line2;
														j["line3"] = line3;
														j["line4"] = line4;
														j["line5"] = line5;
														j["line6"] = line6;
														j["line7"] = line7;
														j["line8"] = line8;
														j["line9"] = text + "|" + ((PlayerInfo*)(peer->data))->rawName;
														j["line10"] = line10;
														j["amount"] = amount + 1;
														o << j << std::endl;
														o.close();
														//
														if (amount + 1 == 10)
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `w(`4Full`w)``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
														else
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
													}
													else if (line10 == "")
													{
														std::ofstream o("mails/" + worldInfo->name + "." + to_string(x) + "." + to_string(y) + ".json");
														if (!o.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}
														json j;
														j["line1"] = line1;
														j["line2"] = line2;
														j["line3"] = line3;
														j["line4"] = line4;
														j["line5"] = line5;
														j["line6"] = line6;
														j["line7"] = line7;
														j["line8"] = line8;
														j["line9"] = line9;
														j["line10"] = text + "|" + ((PlayerInfo*)(peer->data))->rawName;
														j["amount"] = amount + 1;
														o << j << std::endl;
														o.close();
														//
														if (amount + 1 == 10)
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `w(`4Full`w)``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
														else
														{
															updateSignWrench(peer, worldInfo->items[x + (y * worldInfo->width)].foreground, x, y, "`wThere is `2" + std::to_string(amount + 1) + " `wletters in this `o" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", worldInfo->items[x + (y * worldInfo->width)].background);
														}
													}
													else {
														GTDialog mail;
														mail.addLabelWithIcon("`wEdit " + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + "``", itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).id, LABEL_BIG);
														mail.addTextBox("`oThis `w" + itemDefs.at(worldInfo->items[x + (y * worldInfo->width)].foreground).name + " `oalready has `w" + std::to_string(amount) + " `oin it, you can't leave a message anymore until they got cleared.``");
														mail.addButton("null", "`wClose``");
														//
														OnDialogRequest(peer, mail.finishDialog());
													}
												}
											}
										}
									}
								}
							}
						}
						if (cch.find("action|setSkin") == 0) {
							if (!world) continue;
							std::stringstream ss(cch);
							std::string to;
							int id = -1;
							string color;
							while (std::getline(ss, to, '\n')) {
								vector<string> infoDat = explode("|", to);
								if (infoDat[0] == "color") color = infoDat[1];
								if (has_only_digits(color) == false) continue;
								id = atoi(color.c_str());
								if (color == "2190853119") {
									id = -2104114177;
								}
								else if (color == "2527912447") {
									id = -1767054849;
								}
								else if (color == "2864971775") {
									id = -1429995521;
								}
								else if (color == "3033464831") {
									id = -1261502465;
								}
								else if (color == "3370516479") {
									id = -924450817;
								}

							}
							((PlayerInfo*)(peer->data))->skinColor = id;
							sendClothes(peer);
						}
						if (cch.find("action|respawn") == 0 && !cch.find("action|respawn_spike") == 0)
						{
							Respawn(peer);
						}
						if (cch.find("action|respawn_spike") == 0)
						{
							//cout << "hey";
							//((PlayerInfo*)(peer->data))->canLeave = false;
							int x = 3040;
							int y = 736;


							if (!world) continue;

							for (int i = 0; i < world->width*world->height; i++)
							{
								if (world->items[i].foreground == 6) {
									x = (i%world->width) * 32;
									y = (i / world->width) * 32;
								}
							}
							{
								PlayerMoving data;
								data.packetType = 0x0;
								data.characterState = 0x924; // animation
								data.x = x;
								data.y = y;
								data.punchX = -1;
								data.punchY = -1;
								data.XSpeed = 0;
								data.YSpeed = 0;
								data.netID = ((PlayerInfo*)(peer->data))->netID;
								data.plantingTree = 0x0;
								SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);
							}

							{
								int x = 3040;
								int y = 736;

								for (int i = 0; i < world->width*world->height; i++)
								{
									if (world->items[i].foreground == 6) {
										x = (i%world->width) * 32;
										y = (i / world->width) * 32;
									}
								}
								GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
								memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
								ENetPacket * packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								//enet_host_flush(server);
							}
							{
								int x = 3040;
								int y = 736;

								for (int i = 0; i < world->width*world->height; i++)
								{
									if (world->items[i].foreground == 6) {
										x = (i%world->width) * 32;
										y = (i / world->width) * 32;
									}
								}
								GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnSetFreezeState"), 0));
								memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
								ENetPacket * packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								//enet_host_flush(server);
								if (((PlayerInfo*)(peer->data))->usedCP == false)
								{
									GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
									memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
									ENetPacket * packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);


									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else
								{
									GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), ((PlayerInfo*)(peer->data))->cpX, ((PlayerInfo*)(peer->data))->cpY));
									memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
									ENetPacket * packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);


									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
							}
#ifdef TOTAL_LOG
							cout << "Respawning... " << endl;
#endif
						}
						if (cch.find("action|friends") == 0)
						{
							if (((PlayerInfo*)(peer->data))->joinguild == true) {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|Social Portal``|left|1366|\n\nadd_spacer|small|\nadd_button|backonlinelist|Show Friends``|0|0|\nadd_button|showguild|Show Guild Members``|0|0|\nadd_button|guildrewards|Guild Rewards``|0|0|\nend_dialog||OK||\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							else {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|Social Portal``|left|1366|\n\nadd_spacer|small|\nadd_button|backonlinelist|Show Friends``|0|0|\nadd_button|createguildinfo|Create Guild``|0|0|\nend_dialog||OK||\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
						}
						if (cch.find("action|growid") == 0)
						{
#ifndef REGISTRATION
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Registration is not supported yet!"));
								ENetPacket * packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								//enet_host_flush(server);
							}
#endif
#ifdef REGISTRATION
							//GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + itemDefs.at(id).name + "``|left|" + std::to_string(id) + "|\n\nadd_spacer|small|\nadd_textbox|" + itemDefs.at(id).description + "|left|\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`@Create Your `#Grow-ID`@!``|left|1048|\n\nadd_spacer|small|\nadd_text_input|username|GrowID: ||100|\nadd_text_input|password|Password: ||100|\nadd_text_input|code|Code: ||100|\nend_dialog|register||`2Complete!|\n"));
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);

							enet_host_flush(server);
							delete p.data;
#endif
						}
						if (cch.find("action|store") == 0)
						{
							if (((PlayerInfo*)(peer->data))->haveGrowId == true)
							{



								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label|big|`wWelcome To `5GTLT `0market!|left|5016|\n\nadd_spacer|small|small|\nadd_button|buywls|`wPurchase `2World Locks|noflags|3233|\nadd_button|no|`wPurchase `eItems|noflags|3233|small|left|212|\nadd_button|ringstore|`wPurchase `4Rings|noflags|1232|small|\nadd_button|chests|`wPurchase `oChests|noflags|1232|small|\nadd_button|blocks|`wPurchase `@Blocks|noflags|3233|small|\nadd_button|resources|`wPurchase `9Crystals|noflags|3233|\nadd_button|consumables|`wPurchase `#Consumables|noflags|3233|\nadd_button|storeinvupgrade|`wPurchase `4Inventory Upgrade|noflags|3233|\nadd_button|craft|`wCraft `8Legendary `eItems|noflags|3233|\nadd_spacer|\nadd_button|close|`2Close|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							else
							{


#ifdef REGISTRATION
								//GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + itemDefs.at(id).name + "``|left|" + std::to_string(id) + "|\n\nadd_spacer|small|\nadd_textbox|" + itemDefs.at(id).description + "|left|\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wGet your GrowID Now!``|left|32|\n\nadd_spacer|small|\nadd_text_input|username|GrowID: ||15|\nadd_text_input|password|Password: ||100|\nadd_text_input|code|Code: ||4|\nend_dialog|register|Cancel|OK|\n"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
#endif

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`5[GTLT] `1You must create `4GrowID `1first before you can access the `2Store`1!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							//enet_host_flush(server);
						}
						if (cch.find("action|dialog_return\ndialog_name|door_edit") == 0) {
							if (world != NULL) {
								if (((PlayerInfo*)(peer->data))->rawName == PlayerDB::getProperName(world->owner)) {
									std::stringstream ss(GetTextPointerFromPacket(event.packet));
									std::string to;
									int x = 0;
									int y = 0;
									bool created = false;
									bool world = false;
									string texts = "";
									string text = "";
									while (std::getline(ss, to, '\n')) {
										string id = to.substr(0, to.find("|"));
										string act = to.substr(to.find("|") + 1, to.length() - to.find("|") - 1);
										if (id == "tilex")
										{
											x = atoi(act.c_str());

										}
										else if (id == "tiley")
										{
											y = atoi(act.c_str());
										}
										else if (id == "label")
										{
											texts = act;
											created = true;
										}
										else if (id == "world")
										{
											text = act;
											world = true;
										}
										if (created == true) {
											if (texts == "__%&P&%__") {
												sendConsoleMsg(peer, ">> Can't use this!");
												continue;
											}
											if (texts.length() > 0) {
												if (texts.length() < 255) {
													WorldInfo* worldInfo = getPlyersWorld(peer);
													int squaredoor = ((PlayerInfo*)(peer->data))->wrenchx + (((PlayerInfo*)(peer->data))->wrenchy * 100);
													updateDoor(peer, worldInfo->items[squaredoor].foreground, squaredoor % worldInfo->width, squaredoor / worldInfo->width, texts);
													string world = ((PlayerInfo*)(peer->data))->currentWorld;
													std::ofstream outfile("doors/" + world + std::to_string(x) + std::to_string(y) + ".txt");

													outfile << texts;

													outfile.close();
												}
											}
										}
									}
								}
							}
						}

						if (cch.find("action|info") == 0)
						{
							std::stringstream ss(cch);
							std::string to;
							int id = -1;
							int count = -1;
							while (std::getline(ss, to, '\n')) {
								vector<string> infoDat = explode("|", to);
								if (infoDat.size() == 3) {
									if (infoDat[1] == "itemID") id = atoi(infoDat[2].c_str());
									if (infoDat[1] == "count") count = atoi(infoDat[2].c_str());
								}
							}
							if (id == -1 || count == -1) continue;
							if (itemDefs.size() < id || id < 0) continue;
							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + itemDefs.at(id).name + "``|left|" + std::to_string(id) + "|\n\nadd_spacer|small|\nadd_textbox|" + itemDefs.at(id).description + "|left|\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);


							//enet_host_flush(server);
							delete p.data;
						}

						if (cch.find("action|info") == 0)
						{
							std::stringstream ss(cch);
							std::string to;
							int id = -1;
							int count = -1;
							while (std::getline(ss, to, '\n')) {
								vector<string> infoDat = explode("|", to);
								if (infoDat.size() == 3) {
									if (infoDat[1] == "itemID") id = atoi(infoDat[2].c_str());
									if (infoDat[1] == "count") count = atoi(infoDat[2].c_str());
								}
							}
							if (id == -1 || count == -1) continue;
							if (itemDefs.size() < id || id < 0) continue;
							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + itemDefs.at(id).name + "``|left|" + std::to_string(id) + "|\n\nadd_spacer|small|\nadd_textbox|" + itemDefs.at(id).description + "|left|\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);


							//enet_host_flush(server);
							delete p.data;
						}


						if (cch.find("action|dialog_return") == 0) // find itemu parodymas
						{
							std::stringstream ss(cch);
							std::string to;
							bool isGuildDialog = false;
							string gguildname;
							string gguildstatement;
							string gguildflagbg;
							string gguildflagfg;
							string stuffitem = "";
							string gravitystr = "";
							string btn = "";
							bool isRegisterDialog = false;
							string username = "";
							string restrictedname = "";
							string password = "";
							string passwordverify = "";
							string password2 = "";
							string username2 = "";
							string password2verify = "";
							string oldpass = "";
							string newgrowid = "";
							//string email = "";
							string discord = "";
							string netid = "";
							string pin;
							string text = "";//done!

							bool isDropDialog = false;
							bool isTrashDialog = false;
							bool isStuffDialog = false;
							string dropitemcount = "";
							string trashitemcount = "";
							bool isPasswordDialog = false;
							bool isGrowidDialog = false;
							bool isFindDialog = false;
							bool isEditDoorDialog = false;
							bool isEditPDoorDialog = false;
							bool isPwdDoorDialog = false;
							string destworld = "", destid = "", label = "", currid = "";
							bool isTradeDialog = false;

							bool isWorldLockBuyDialog = false;
							bool isDiamondLockBuyDialog = false;

							bool isAmbersBuyDialog = false;
							bool isOpalsBuyDialog = false;
							bool isGoldBuyDialog = false;
							bool isRubiesBuyDialog = false;
							bool isSapphiresBuyDialog = false;
							bool isDiamondsBuyDialog = false;
							bool isEmeraldsBuyDialog = false;

							bool isBotDialog = false;

							bool isWarnDialog = false;

							bool Accesspicker = false;

							bool signszzz = false;
							string itemFind = "";
							string warntext = "";
							string strBuyOffer = "";
							string strBuyWorldLockOffer = "";
							string strBuyDiamondLockOffer = "";

							string strAmbersBuyOffer = "";
							string strOpalsBuyOffer = "";
							string strGoldBuyOffer = "";
							string strRubiesBuyOffer = "";
							string strSapphiresBuyOffer = "";
							string strDiamondsBuyOffer = "";
							string strEmeraldsBuyOffer = "";

							string strResult = "";
							int Result = 68662362;
							int buyOffer;

							string dialog_name = "";

							while (std::getline(ss, to, '\n')) {
								vector<string> infoDat = explode("|", to);

								if (infoDat.size() == 2) {
									if (infoDat[0] == "buttonClicked") btn = infoDat[1];
									if (infoDat[0] == "dialog_name" && infoDat[1] == "searchitem1337")
									{
										isFindDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "findid")
									{
										isFindDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "signsshitit")
									{
										signszzz = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "reqoffer")
									{
										isTradeDialog = true;
									}
									if (infoDat[0] == "stuffitem")
									{
										isStuffDialog = true;

									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "reqworldlockoffer")
									{
										isWorldLockBuyDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "reqdiamondlockoffer")
									{
										isDiamondLockBuyDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "reqambersoffer")
									{
										isAmbersBuyDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "reqopalsoffer")
									{
										isOpalsBuyDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "reqgoldoffer")
									{
										isGoldBuyDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "reqrubiesoffer")
									{
										isRubiesBuyDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "reqsapphiresoffer")
									{
										isSapphiresBuyDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "reqdiamondsoffer")
									{
										isDiamondsBuyDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "reqemeraldsoffer")
									{
										isEmeraldsBuyDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "antibotres")
									{
										isBotDialog = true;
									}
									if (infoDat[0] == "netid") {
										netid = infoDat[1];
										Accesspicker = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "dropdialog")
									{
										isDropDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "trashdialog")
									{
										isTrashDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "guildconfirm")
									{
										isGuildDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "editdoor")
									{
										isEditDoorDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "editpdoor")
									{
										isEditPDoorDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "pwddoor")
									{
										isPwdDoorDialog = true;
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "sendwarn")
									{
										isWarnDialog = true;
									}
									if (isEditDoorDialog || isEditPDoorDialog) {
										if (infoDat[0] == "dest")
										{
											string a = getStrUpper(infoDat[1]);
											vector<string> b = explode(":", a);
											if (b.size() == 1)
											{
												destworld = b[0];
											}
											else if (b.size() > 1)
											{
												destworld = b[0];
												destid = b[1];
											}
										}
										if (infoDat[0] == "label")
										{
											label = infoDat[1];
										}
										if (infoDat[0] == "doorid")
										{
											currid = getStrUpper(infoDat[1]);
										}
										if (infoDat[0] == "doorpwd")
										{
											password = getStrUpper(infoDat[1]);
										}
									}
									if (isEditDoorDialog || isEditPDoorDialog)
									{
										PlayerInfo* pinfo = (PlayerInfo*)peer->data;
										if (pinfo->wrenchsession < 0 && pinfo->wrenchsession > 6000) break;
										world->items[pinfo->wrenchsession].destWorld = destworld;
										world->items[pinfo->wrenchsession].destId = destid;
										world->items[pinfo->wrenchsession].currId = currid;
										world->items[pinfo->wrenchsession].label = label;
										world->items[pinfo->wrenchsession].password = password;
										string labelForDoor = label == "" ? (destid == "" ? destworld : destworld + "...") : label;
										updateDoor(peer, world->items[pinfo->wrenchsession].foreground, pinfo->wrenchsession % world->width, pinfo->wrenchsession / world->width, labelForDoor);
										// .....
									}
									if (isDropDialog) {
										if (infoDat[0] == "dropitemcount") dropitemcount = infoDat[1];

									}
									if (isTrashDialog) {
										if (infoDat[0] == "trashitemcount") trashitemcount = infoDat[1];

									}
									if (isDropDialog) {
										int x;

										try {
											x = stoi(dropitemcount);
										}
										catch (std::invalid_argument & e) {
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^Item `@dropped `^successfully!"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										short int currentItemCount = 0;
										for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
										{
											if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lastdropitem)
											{
												currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
											}
										}

										if (x <= 0 || x > currentItemCount) {
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^That too many or too less to drop!"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										else {
											sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y, ((PlayerInfo*)(peer->data))->lastdropitem, x, 0);
											RemoveInventoryItem(((PlayerInfo*)(peer->data))->lastdropitem, x, peer);
											sendSound(peer, "object_spawn.wav");
										}
									}
									if (isWarnDialog) {
										if (infoDat[0] == "warntext")
										{
											warntext = infoDat[1];
											ENetPeer* currentPeerpx;

											for (currentPeerpx = server->peers;
												currentPeerpx < &server->peers[server->peerCount];
												++currentPeerpx)
											{
												if (currentPeerpx->state != ENET_PEER_STATE_CONNECTED)
													continue;

												if (isHere(peer, currentPeerpx))
												{




													if (((PlayerInfo*)(currentPeerpx->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) // if last wrench
													{
														GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`0Warning from `4ADMIN`0: " + warntext), "audio/hub_open.wav"), 0));
														ENetPacket* packet2 = enet_packet_create(ps2.data,
															ps2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeerpx, 0, packet2);
														GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Applied punishment on " + ((PlayerInfo*)(peer->data))->lastInfoname + "."));
														//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
														ENetPacket* packetto = enet_packet_create(pto.data,
															pto.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetto);
													}
												}
											}
											GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD LOGS] `1[`o" + currentDateTime() + "`1] `2" + ((PlayerInfo*)(peer->data))->displayName + " (`$" + ((PlayerInfo*)(peer->data))->tankIDName + "`2) has `4warned `2" + ((PlayerInfo*)(peer->data))->lastInfoname));
											string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);

											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (!((PlayerInfo*)(currentPeer->data))->radio)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->adminLevel > 777) {
													ENetPacket* packet6 = enet_packet_create(p6.data,
														p6.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(currentPeer, 0, packet6);




													ENetPacket* packet2 = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(currentPeer, 0, packet2);

													//enet_host_flush(server);
												}
											}
										}
									}
									if (isTrashDialog) {
										int x;

										try {
											x = stoi(trashitemcount);
										}
										catch (std::invalid_argument & e) {
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^You have `4trashed `^this item successfully`^!"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										short int currentItemCount = 0;
										for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
										{
											if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == ((PlayerInfo*)(peer->data))->lasttrashitem)
											{
												currentItemCount = (unsigned int)((PlayerInfo*)(peer->data))->inventory.items.at(i).itemCount;
											}
										}

										if (x <= 0 || x > currentItemCount) {
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^That too many or too less to `4trash`^!"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										else {
											//	sendDrop(peer, -1, ((PlayerInfo*)(peer->data))->x + (32 * (((PlayerInfo*)(peer->data))->isRotatedLeft ? -1 : 1)), ((PlayerInfo*)(peer->data))->y, ((PlayerInfo*)(peer->data))->lastdropitem, x, 0);
											RemoveInventoryItem(((PlayerInfo*)(peer->data))->lasttrashitem, x, peer);
											sendSound(peer, "trash.wav");
										}
									}

									if (signszzz) {
										if (infoDat[0] == "text")
										{
											text = infoDat[1];
											((PlayerInfo*)(peer->data))->SignPosX;
											((PlayerInfo*)(peer->data))->SignPosY;
											int yy = ((PlayerInfo*)(event.peer->data))->SignPosX / 32;
											int xx = ((PlayerInfo*)(event.peer->data))->SignPosY / 32;
											int posX = ((PlayerInfo*)(event.peer->data))->posX / 32; // good value is actually 31.16-31.33
											int posY = ((PlayerInfo*)(event.peer->data))->posY / 32;
											string world = ((PlayerInfo*)(peer->data))->currentWorld;
											string posx = std::to_string(yy);
											string posy = std::to_string(xx);

											for (char c : text)

												if (c < 0x18 || std::all_of(text.begin(), text.end(), isspace))
												{

												}

											std::ofstream outfile("signs/" + world + posx + posy + ".txt");

											outfile << text;

											outfile.close();
										}
									}

									if (isFindDialog) {
										if (infoDat[0] == "item") itemFind = infoDat[1];
									}
									if (isWorldLockBuyDialog)
									{
										if (infoDat[0] == "worldlockoffer")
										{
											strBuyWorldLockOffer = infoDat[1];

											bool contains_non_int = !std::regex_match(strBuyWorldLockOffer, std::regex("^[0-9]+$"));
											if (contains_non_int == true)
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `2World Lock's `@Format!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
												continue;
											}
											else
											{
												int konvertuotasInt = stoi(strBuyWorldLockOffer);
												if (konvertuotasInt <= 0 || konvertuotasInt >= 200)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9World Lock's `@Should Be Between `91-199`@!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string content((std::istreambuf_iterator<char>(ifsz)),
														(std::istreambuf_iterator<char>()));

													int b = atoi(content.c_str());

													if (b > 1000 * konvertuotasInt)
													{

														bool success = true;
														SaveShopsItemMoreTimes(242, konvertuotasInt, peer, success); // aposition, itemid, quantity, peer, success

														if (!success)continue;
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `2World Lock's`9!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;

														string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
														memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

														ENetPacket* packetsou = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetsou);

														int gemcalc10k = b - 1000 * konvertuotasInt;


														ofstream myfile2;
														myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														myfile2 << std::to_string(gemcalc10k);
														myfile2.close();

														std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string contentx((std::istreambuf_iterator<char>(ifszi)),
															(std::istreambuf_iterator<char>()));


														int updgem = atoi(contentx.c_str());
														GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
														ENetPacket* packetpp = enet_packet_create(pp.data,
															pp.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetpp);
														delete pp.data;


													}
													else
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;
													}
												}
											}

										}
									}
									if (isDiamondLockBuyDialog)
									{
										if (infoDat[0] == "diamondlockoffer")
										{
											strBuyDiamondLockOffer = infoDat[1];

											bool contains_non_int = !std::regex_match(strBuyDiamondLockOffer, std::regex("^[0-9]+$"));
											if (contains_non_int == true)
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `2World Lock's `@Format!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
												continue;
											}
											else
											{
												int konvertuotasInt = stoi(strBuyDiamondLockOffer);
												if (konvertuotasInt <= 0 || konvertuotasInt >= 200)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`1Diamond Lock's `@Should Be Between `91-199`@!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string content((std::istreambuf_iterator<char>(ifsz)),
														(std::istreambuf_iterator<char>()));

													int b = atoi(content.c_str());

													if (b > 100000 * konvertuotasInt)
													{

														bool success = true;
														SaveShopsItemMoreTimes(1796, konvertuotasInt, peer, success);

														if (!success)continue;
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `1Diamond Lock's`9!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;

														string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
														memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

														ENetPacket* packetsou = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetsou);

														int gemcalc10k = b - 100000 * konvertuotasInt;


														ofstream myfile2;
														myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														myfile2 << std::to_string(gemcalc10k);
														myfile2.close();

														std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string contentx((std::istreambuf_iterator<char>(ifszi)),
															(std::istreambuf_iterator<char>()));


														int updgem = atoi(contentx.c_str());
														GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
														ENetPacket* packetpp = enet_packet_create(pp.data,
															pp.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetpp);
														delete pp.data;


													}
													else
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;
													}
												}
											}

										}
									}




									if (isAmbersBuyDialog)
									{
										if (infoDat[0] == "ambersoffer")
										{
											strAmbersBuyOffer = infoDat[1];

											bool contains_non_int = !std::regex_match(strAmbersBuyOffer, std::regex("^[0-9]+$"));
											if (contains_non_int == true)
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `8Amber's `@Format!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
												continue;
											}
											else
											{
												int konvertuotasInt = stoi(strAmbersBuyOffer);
												if (konvertuotasInt <= 0 || konvertuotasInt >= 500)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`8Amber's `@Should Be Between `91-499`@!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string content((std::istreambuf_iterator<char>(ifsz)),
														(std::istreambuf_iterator<char>()));

													int b = atoi(content.c_str());

													if (b > 3000 * konvertuotasInt)
													{

														std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

														json jj;



														if (iffff.fail()) {
															iffff.close();
															cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko amber!" << endl;

														}
														if (iffff.is_open()) {


														}

														iffff >> jj; //load


														std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
														if (!oo.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}

														int dabarTuri = jj["amber"];
														dabarTuri += konvertuotasInt;
														jj["amber"] = dabarTuri;

														oo << jj << std::endl;


														((PlayerInfo*)(peer->data))->amber = ((PlayerInfo*)(peer->data))->amber + konvertuotasInt;

														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `8Amber's`9!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;

														string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
														memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

														ENetPacket* packetsou = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetsou);

														int gemcalc10k = b - 3000 * konvertuotasInt;


														ofstream myfile2;
														myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														myfile2 << std::to_string(gemcalc10k);
														myfile2.close();

														std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string contentx((std::istreambuf_iterator<char>(ifszi)),
															(std::istreambuf_iterator<char>()));


														int updgem = atoi(contentx.c_str());
														GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
														ENetPacket* packetpp = enet_packet_create(pp.data,
															pp.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetpp);
														delete pp.data;


													}
													else
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;
													}
												}
											}

										}
									}




									if (isOpalsBuyDialog)
									{
										if (infoDat[0] == "opalsoffer")
										{
											strOpalsBuyOffer = infoDat[1];

											bool contains_non_int = !std::regex_match(strOpalsBuyOffer, std::regex("^[0-9]+$"));
											if (contains_non_int == true)
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `1Opal's `@Format!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
												continue;
											}
											else
											{
												int konvertuotasInt = stoi(strOpalsBuyOffer);
												if (konvertuotasInt <= 0 || konvertuotasInt >= 500)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`1Opal's `@Should Be Between `91-499`@!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string content((std::istreambuf_iterator<char>(ifsz)),
														(std::istreambuf_iterator<char>()));

													int b = atoi(content.c_str());

													if (b > 10000 * konvertuotasInt)
													{

														std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

														json jj;



														if (iffff.fail()) {
															iffff.close();
															cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko opal!" << endl;

														}
														if (iffff.is_open()) {


														}

														iffff >> jj; //load


														std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
														if (!oo.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}

														int dabarTuri = jj["opal"];
														dabarTuri += konvertuotasInt;
														jj["opal"] = dabarTuri;

														oo << jj << std::endl;


														((PlayerInfo*)(peer->data))->opal = ((PlayerInfo*)(peer->data))->opal + konvertuotasInt;

														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `1Opal's`9!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;

														string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
														memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

														ENetPacket* packetsou = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetsou);

														int gemcalc10k = b - 10000 * konvertuotasInt;


														ofstream myfile2;
														myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														myfile2 << std::to_string(gemcalc10k);
														myfile2.close();

														std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string contentx((std::istreambuf_iterator<char>(ifszi)),
															(std::istreambuf_iterator<char>()));


														int updgem = atoi(contentx.c_str());
														GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
														ENetPacket* packetpp = enet_packet_create(pp.data,
															pp.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetpp);
														delete pp.data;


													}
													else
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;
													}
												}
											}

										}
									}





									if (isGoldBuyDialog)
									{
										if (infoDat[0] == "goldoffer")
										{
											strGoldBuyOffer = infoDat[1];

											bool contains_non_int = !std::regex_match(strGoldBuyOffer, std::regex("^[0-9]+$"));
											if (contains_non_int == true)
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `9Gold's `@Format!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
												continue;
											}
											else
											{
												int konvertuotasInt = stoi(strGoldBuyOffer);
												if (konvertuotasInt <= 0 || konvertuotasInt >= 500)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Gold's `@Should Be Between `91-499`@!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string content((std::istreambuf_iterator<char>(ifsz)),
														(std::istreambuf_iterator<char>()));

													int b = atoi(content.c_str());

													if (b > 20000 * konvertuotasInt)
													{

														std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

														json jj;



														if (iffff.fail()) {
															iffff.close();
															cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko gold!" << endl;

														}
														if (iffff.is_open()) {


														}

														iffff >> jj; //load


														std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
														if (!oo.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}

														int dabarTuri = jj["gold"];
														dabarTuri += konvertuotasInt;
														jj["gold"] = dabarTuri;

														oo << jj << std::endl;


														((PlayerInfo*)(peer->data))->gold = ((PlayerInfo*)(peer->data))->gold + konvertuotasInt;


														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `9Gold's`9!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;

														string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
														memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

														ENetPacket* packetsou = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetsou);

														int gemcalc10k = b - 20000 * konvertuotasInt;


														ofstream myfile2;
														myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														myfile2 << std::to_string(gemcalc10k);
														myfile2.close();

														std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string contentx((std::istreambuf_iterator<char>(ifszi)),
															(std::istreambuf_iterator<char>()));


														int updgem = atoi(contentx.c_str());
														GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
														ENetPacket* packetpp = enet_packet_create(pp.data,
															pp.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetpp);
														delete pp.data;


													}
													else
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;
													}
												}
											}

										}
									}





									if (isRubiesBuyDialog)
									{
										if (infoDat[0] == "rubiesoffer")
										{
											strRubiesBuyOffer = infoDat[1];

											bool contains_non_int = !std::regex_match(strRubiesBuyOffer, std::regex("^[0-9]+$"));
											if (contains_non_int == true)
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `4Rubies `@Format!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
												continue;
											}
											else
											{
												int konvertuotasInt = stoi(strRubiesBuyOffer);
												if (konvertuotasInt <= 0 || konvertuotasInt >= 500)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Rubies `@Should Be Between `91-499`@!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string content((std::istreambuf_iterator<char>(ifsz)),
														(std::istreambuf_iterator<char>()));

													int b = atoi(content.c_str());

													if (b > 1000 * konvertuotasInt)
													{

														std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

														json jj;



														if (iffff.fail()) {
															iffff.close();
															cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko ruby!" << endl;

														}
														if (iffff.is_open()) {


														}

														iffff >> jj; //load


														std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
														if (!oo.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}

														int dabarTuri = jj["rubble"];
														dabarTuri += konvertuotasInt;
														jj["rubble"] = dabarTuri;

														oo << jj << std::endl;


														((PlayerInfo*)(peer->data))->rubble = ((PlayerInfo*)(peer->data))->rubble + konvertuotasInt;


														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `4Rubies`9!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;

														string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
														memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

														ENetPacket* packetsou = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetsou);

														int gemcalc10k = b - 1000 * konvertuotasInt;


														ofstream myfile2;
														myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														myfile2 << std::to_string(gemcalc10k);
														myfile2.close();

														std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string contentx((std::istreambuf_iterator<char>(ifszi)),
															(std::istreambuf_iterator<char>()));


														int updgem = atoi(contentx.c_str());
														GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
														ENetPacket* packetpp = enet_packet_create(pp.data,
															pp.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetpp);
														delete pp.data;


													}
													else
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;
													}
												}
											}

										}
									}





									if (isSapphiresBuyDialog)
									{
										if (infoDat[0] == "sapphiresoffer")
										{
											strSapphiresBuyOffer = infoDat[1];

											bool contains_non_int = !std::regex_match(strSapphiresBuyOffer, std::regex("^[0-9]+$"));
											if (contains_non_int == true)
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `bSapphire's `@Format!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
												continue;
											}
											else
											{
												int konvertuotasInt = stoi(strSapphiresBuyOffer);
												if (konvertuotasInt <= 0 || konvertuotasInt >= 500)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`bSapphire's `@Should Be Between `91-499`@!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string content((std::istreambuf_iterator<char>(ifsz)),
														(std::istreambuf_iterator<char>()));

													int b = atoi(content.c_str());

													if (b > 30000 * konvertuotasInt)
													{

														std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

														json jj;



														if (iffff.fail()) {
															iffff.close();
															cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko sapphire!" << endl;

														}
														if (iffff.is_open()) {


														}

														iffff >> jj; //load


														std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
														if (!oo.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}

														int dabarTuri = jj["sapphire"];
														dabarTuri += konvertuotasInt;
														jj["sapphire"] = dabarTuri;

														oo << jj << std::endl;


														((PlayerInfo*)(peer->data))->sapphire = ((PlayerInfo*)(peer->data))->sapphire + konvertuotasInt;


														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `bSapphire's`9!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;

														string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
														memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

														ENetPacket* packetsou = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetsou);

														int gemcalc10k = b - 30000 * konvertuotasInt;


														ofstream myfile2;
														myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														myfile2 << std::to_string(gemcalc10k);
														myfile2.close();

														std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string contentx((std::istreambuf_iterator<char>(ifszi)),
															(std::istreambuf_iterator<char>()));


														int updgem = atoi(contentx.c_str());
														GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
														ENetPacket* packetpp = enet_packet_create(pp.data,
															pp.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetpp);
														delete pp.data;


													}
													else
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;
													}
												}
											}

										}
									}






									if (isDiamondsBuyDialog)
									{
										if (infoDat[0] == "diamondsoffer")
										{
											strDiamondsBuyOffer = infoDat[1];

											bool contains_non_int = !std::regex_match(strDiamondsBuyOffer, std::regex("^[0-9]+$"));
											if (contains_non_int == true)
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `3Diamond's `@Format!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
												continue;
											}
											else
											{
												int konvertuotasInt = stoi(strDiamondsBuyOffer);
												if (konvertuotasInt <= 0 || konvertuotasInt >= 500)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`eDiamond's `@Should Be Between `91-499`@!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string content((std::istreambuf_iterator<char>(ifsz)),
														(std::istreambuf_iterator<char>()));

													int b = atoi(content.c_str());

													if (b > 100000 * konvertuotasInt)
													{

														std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

														json jj;



														if (iffff.fail()) {
															iffff.close();
															cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko diamond!" << endl;

														}
														if (iffff.is_open()) {


														}

														iffff >> jj; //load


														std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
														if (!oo.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}

														int dabarTuri = jj["diamond"];
														dabarTuri += konvertuotasInt;
														jj["diamond"] = dabarTuri;

														oo << jj << std::endl;


														((PlayerInfo*)(peer->data))->diamond = ((PlayerInfo*)(peer->data))->diamond + konvertuotasInt;


														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `3Diamond's`9!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;

														string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
														memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

														ENetPacket* packetsou = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetsou);

														int gemcalc10k = b - 100000 * konvertuotasInt;


														ofstream myfile2;
														myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														myfile2 << std::to_string(gemcalc10k);
														myfile2.close();

														std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string contentx((std::istreambuf_iterator<char>(ifszi)),
															(std::istreambuf_iterator<char>()));


														int updgem = atoi(contentx.c_str());
														GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
														ENetPacket* packetpp = enet_packet_create(pp.data,
															pp.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetpp);
														delete pp.data;


													}
													else
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;
													}
												}
											}

										}
									}





									if (isEmeraldsBuyDialog)
									{
										if (infoDat[0] == "emeraldsoffer")
										{
											strEmeraldsBuyOffer = infoDat[1];

											bool contains_non_int = !std::regex_match(strEmeraldsBuyOffer, std::regex("^[0-9]+$"));
											if (contains_non_int == true)
											{
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `2Emerald's `@Format!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
												continue;
											}
											else
											{
												int konvertuotasInt = stoi(strEmeraldsBuyOffer);
												if (konvertuotasInt <= 0 || konvertuotasInt >= 500)
												{
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Emerald's `@Should Be Between `91-499`@!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
													continue;
												}
												else
												{
													std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
													std::string content((std::istreambuf_iterator<char>(ifsz)),
														(std::istreambuf_iterator<char>()));

													int b = atoi(content.c_str());

													if (b > 300000 * konvertuotasInt)
													{

														std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

														json jj;



														if (iffff.fail()) {
															iffff.close();
															cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko emerald!" << endl;

														}
														if (iffff.is_open()) {


														}

														iffff >> jj; //load


														std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
														if (!oo.is_open()) {
															cout << GetLastError() << endl;
															_getch();
														}

														int dabarTuri = jj["emerald"];
														dabarTuri += konvertuotasInt;
														jj["emerald"] = dabarTuri;

														oo << jj << std::endl;


														((PlayerInfo*)(peer->data))->emerald = ((PlayerInfo*)(peer->data))->emerald + konvertuotasInt;


														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `2Emerald's`9!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;

														string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
														memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

														ENetPacket* packetsou = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetsou);

														int gemcalc10k = b - 300000 * konvertuotasInt;


														ofstream myfile2;
														myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														myfile2 << std::to_string(gemcalc10k);
														myfile2.close();

														std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string contentx((std::istreambuf_iterator<char>(ifszi)),
															(std::istreambuf_iterator<char>()));


														int updgem = atoi(contentx.c_str());
														GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
														ENetPacket* packetpp = enet_packet_create(pp.data,
															pp.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packetpp);
														delete pp.data;


													}
													else
													{
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9Gem's`9!"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;
													}
												}
											}

										}
									}






									if (isBotDialog)
									{
										if (infoDat[0] == "antibot")
										{
											strResult = infoDat[1];

											bool contains_non_int
												= !std::regex_match(strBuyOffer, std::regex("^[0-9]+$"));

											if (contains_non_int == true)
											{
												Result = atoi(strResult.c_str());
												((PlayerInfo*)(peer->data))->Endresult = Result;
											}

											if (((PlayerInfo*)(peer->data))->resultnbr1 + ((PlayerInfo*)(peer->data))->resultnbr2 != Result)
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4[PLAY-Captcha]: Captcha failed."));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);

												delete p.data;

												((PlayerInfo*)(peer->data))->Endresult = Result;

												enet_peer_disconnect_later(peer, 0);
												cout << "[CAPTCHA FAIL] user typed: " << Result << endl;
												cout << "[CAPTCHA FAIL] answer was: " << ((PlayerInfo*)(peer->data))->resultnbr1 + ((PlayerInfo*)(peer->data))->resultnbr2 << endl;
											}
										}
									}
									if (isTradeDialog) {
										if (infoDat[0] == "worldoffer")
										{
											strBuyOffer = infoDat[1];

											bool contains_non_int
												= !std::regex_match(strBuyOffer, std::regex("^[0-9]+$"));

											if (contains_non_int == true)
											{
												GamePacket pfi = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Requesting offer failed... You may only use positive numbers to begin a trade!"));
												ENetPacket* packetfi = enet_packet_create(pfi.data,
													pfi.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packetfi);

												delete pfi.data;
											}
											else
											{
												buyOffer = std::atoi(strBuyOffer.c_str());

												GamePacket psu = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Requested`w " + ((PlayerInfo*)(peer->data))->lastInfo + " `9for a world-trade (you sell world for`w " + strBuyOffer + " `4Gems`9)."));
												ENetPacket* packetsu = enet_packet_create(psu.data,
													psu.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packetsu);
												delete psu.data;


												ENetPeer* currentPeerpx;

												for (currentPeerpx = server->peers;
													currentPeerpx < &server->peers[server->peerCount];
													++currentPeerpx)
												{
													if (currentPeerpx->state != ENET_PEER_STATE_CONNECTED)
														continue;

													if (isHere(peer, currentPeerpx))
													{




														if (((PlayerInfo*)(currentPeerpx->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) // if last wrench
														{
															GamePacket psu = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), ((PlayerInfo*)(peer->data))->displayName + " `9requested you for a `4world-trade`9 (he/she sells world for`w " + strBuyOffer + " `4Gems`9). Do `4/tradeworld`9 if you want to buy or decline."));
															ENetPacket* packetsu = enet_packet_create(psu.data,
																psu.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(currentPeerpx, 0, packetsu);
															delete psu.data;

															((PlayerInfo*)(peer->data))->lastBuyer = ((PlayerInfo*)(currentPeerpx->data))->rawName;
															((PlayerInfo*)(currentPeerpx->data))->lastSeller = ((PlayerInfo*)(peer->data))->rawName;
															((PlayerInfo*)(currentPeerpx->data))->lastTradeAmount = buyOffer;
															((PlayerInfo*)(peer->data))->lastTradeAmount = buyOffer;
															((PlayerInfo*)(currentPeerpx->data))->lastSellWorld = getPlyersWorld(currentPeerpx)->name;
															((PlayerInfo*)(peer->data))->lastSellWorld = getPlyersWorld(peer)->name;
														}
													}
												}
											}
										}


									}
									if (Accesspicker) {
										if (((PlayerInfo*)(peer->data))->rawName == world->owner) {

											ENetPeer* currentPeer;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->netID == stoi(netid)) {
													if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(currentPeer->data))->rawName) {
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You can't access yourself"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet);
														delete p.data;
													}
													else {
														WorldInfo info;
														world->worldaccess.push_back(((PlayerInfo*)(currentPeer->data))->rawName);
														GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You got world access!"));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(currentPeer, 0, packet);
														delete p.data;
														GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You gave world access to player! (To remove acc type /unacc name!)"));
														ENetPacket* packet2 = enet_packet_create(p2.data,
															p2.len,
															ENET_PACKET_FLAG_RELIABLE);
														enet_peer_send(peer, 0, packet2);
														delete p2.data;
														//enet_host_flush(server);
														string text = "action|play_sfx\nfile|audio/secret.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length());
														memcpy(data + 4 + text.length(), &zero, 1);
														ENetPacket* packet3 = enet_packet_create(data,
															5 + text.length(),
															ENET_PACKET_FLAG_RELIABLE);


														enet_peer_send(currentPeer, 0, packet3);
													}
												}
											}
										}
									}
									if (infoDat[0] == "dialog_name" && infoDat[1] == "pssdia") 	isPasswordDialog = true;
									if (infoDat[0] == "dialog_name" && infoDat[1] == "grodia") 	isGrowidDialog = true;
									if (infoDat[0] == "dialog_name" && infoDat[1] == "register") isRegisterDialog = true;
									if (infoDat[0] == "dialog_name") dialog_name = infoDat[1];
									if (isPasswordDialog) {
										if (infoDat[0] == "oldpass") oldpass = infoDat[1];
										if (infoDat[0] == "newpass") password2 = infoDat[1];
										if (infoDat[0] == "verifypass")	password2verify = infoDat[1];
									}
									if (isGrowidDialog) {
										if (infoDat[0] == "newgrowid") newgrowid = infoDat[1];
										if (infoDat[0] == "username2") username2 = infoDat[1];
									}
									if (isRegisterDialog) {
										if (infoDat[0] == "username")
										{
											username = infoDat[1];
											restrictedname = username;
											toUpperCase(restrictedname);


											//cout << "user typed: " + restrictedname;
											string cleanrname = std::regex_replace(restrictedname, std::regex("^ +| +$|( ) +"), "$1");

											if (restrictedname == "CON" || restrictedname == "NUL" || restrictedname == "PRN" || restrictedname == "AUX" || restrictedname == "CLOCK$" || restrictedname == "COM0" || restrictedname == "COM1" || restrictedname == "COM2" || restrictedname == "COM3" || restrictedname == "COM4" || restrictedname == "COM5" || restrictedname == "COM6" || restrictedname == "COM7" || restrictedname == "COM8" || restrictedname == "COM9" || restrictedname == "LPT0" || restrictedname == "LPT1" || restrictedname == "LPT2" || restrictedname == "LPT3" || restrictedname == "LPT4" || restrictedname == "LPT5" || restrictedname == "LPT6" || restrictedname == "LPT7" || restrictedname == "LPT8" || restrictedname == "LPT9")
											{
												enet_peer_disconnect_now(peer, 0);
											}
											else
											{
												((PlayerInfo*)(peer->data))->canCreate == true;
											}

										}

										if (infoDat[0] == "password") password = infoDat[1];
										if (infoDat[0] == "passwordverify") passwordverify = infoDat[1];
										//if (infoDat[0] == "email") email = infoDat[1];
										if (infoDat[0] == "discord") discord = infoDat[1];
										if (infoDat[0] == "pin") pin = infoDat[1];
									}
								}
								if (isGuildDialog) {
									if (infoDat[0] == "gname") gguildname = infoDat[1];
									if (infoDat[0] == "gstatement") gguildstatement = infoDat[1];
									if (infoDat[0] == "ggcflagbg") gguildflagbg = infoDat[1];
									if (infoDat[0] == "ggcflagfg") gguildflagfg = infoDat[1];
								}
								/*if (isStuffDialog) {

									if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT") {
										int stuffitemi = -1;
										int gravity = 100;

										int x = ((PlayerInfo*)(peer->data))->lastPunchX;
										int y = ((PlayerInfo*)(peer->data))->lastPunchY;

										if (infoDat[0] == "stuffitem") stuffitem = infoDat[1];
										if (infoDat[0] == "gravity") gravitystr = infoDat[1];
										if (has_only_digits(stuffitem)) stuffitemi = atoi(stuffitem.c_str());
										if (has_only_digits_wnegative(gravitystr)) gravity = atoi(gravitystr.c_str());

										if (gravity > -1000 && gravity < 1000 && stuffitemi > -1 && stuffitemi < 9142) {
											world->items[x + (y*world->width)].displayBlock = stuffitemi;
											world->items[x + (y*world->width)].gravity = gravity;
										}


										updateStuffWeather(peer, x, y, stuffitemi, world->items[x + (y * world->width)].background, gravity, false, false); Nebaigta
										getPlyersWorld(peer)->weather = 29;
									}

								}*/
								if (isGuildDialog) {

									cout << gguildname << endl;
									cout << gguildstatement << endl;
									cout << gguildflagbg << endl;
									cout << gguildflagfg << endl;


									int GCState = PlayerDB::guildRegister(peer, gguildname, gguildstatement, gguildflagbg, gguildflagfg);
									if (GCState == -1) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because special characters isnt allowed!``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}
									else if (GCState == -2) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because guild name is too short!``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}
									else if (GCState == -3) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because guild name is too long!``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}
									else if (GCState == -4) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because the guild name is already taken!``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}
									else if (GCState == -5) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because the background block must be a number!``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}
									if (GCState == -6) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because the foreground block must be a number!``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}
									else if (GCState == -7) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because the background id is too long!``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}
									if (GCState == -8) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because the foreground id is too long!``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}
									/*else if (world->owner != ((PlayerInfo*)(peer->data))->rawName) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Guild creation has failed, because you should be the owner of this world!``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}*/
									else {
										if (GCState == 1) {

											((PlayerInfo*)(peer->data))->createGuildName = gguildname;
											((PlayerInfo*)(peer->data))->createGuildStatement = gguildstatement;


											((PlayerInfo*)(peer->data))->createGuildFlagBg = gguildflagbg;
											((PlayerInfo*)(peer->data))->createGuildFlagFg = gguildflagfg;

											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wGrow Guild|left|242|\nadd_textbox|`1Guild Name: `o" + gguildname + "``|\nadd_textbox|`1Guild Statement: `o" + gguildstatement + "``|\nadd_label_with_icon|small|`1<-Guild Flag Background``|left|" + gguildflagbg + "|\nadd_label_with_icon|small|`1<-Guild Flag Foreground``|left|" + gguildflagfg + "|\n\nadd_spacer|small|\nadd_textbox|`oCost: `4250,000 Gems``|\n\nadd_spacer|small|\nadd_button|confirmcreateguild|`oCreate Guild``|\nend_dialog||`wCancel``||\n"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete ps.data;

										}
									}
								}
							}
							if (btn.substr(0, 5) == "found") {
								PlayerInventory inventory;
								InventoryItem item;
								item.itemID = atoi(btn.substr(5, btn.length()).c_str());
								item.itemCount = 200;
								inventory.items.push_back(item);
								item.itemCount = 1;
								item.itemID = 18;
								inventory.items.push_back(item);
								item.itemID = 32;
								inventory.items.push_back(item);
								sendInventory(peer, inventory);
							}





							//enet_host_flush(server);




							int x = ((PlayerMoving*)(peer->data))->punchX;
							int y = ((PlayerMoving*)(peer->data))->punchY;
							int causedBy = ((PlayerMoving*)(peer->data))->netID;
							int tile = ((PlayerMoving*)(peer->data))->plantingTree;




							if (btn == "collectgems")
							{
								UpdateLocalPlayerGems(peer);
								int gem = ((PlayerInfo*)(peer->data))->plantgems;

								int Pgems = 0;
								ifstream gemfd("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								gemfd >> Pgems;
								gemfd.close();
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`#Gem Storage``|left|9418|0|0|\n\nadd_spacer|small|\nadd_textbox|`oCurrently Stored `9Gems `2" + to_string(gem) + "`o!|\n\nadd_spacer|small|\nadd_textbox|`oYou Have `9Gems `2" + to_string(Pgems) + "!|\n\nadd_spacer|small|\nadd_button|collect10k|`9Collect `w[`410K`w] `9Gems|\nadd_button|collect100k|`9Collect `w[`4100K`w] `9Gems|\nadd_button|collect1m|`9Collect `w[`41M`w] `9Gems|\n\nadd_spacer|small|\nadd_button|gemback|`9Back|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;

							}



							if (btn == "addgems")
							{
								UpdateLocalPlayerGems(peer);
								int gem = ((PlayerInfo*)(peer->data))->plantgems;

								int Pgems = 0;
								ifstream gemfd("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								gemfd >> Pgems;
								gemfd.close();
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`#Gem Storage``|left|9418|0|0|\n\nadd_spacer|small|\nadd_textbox|`oCurrently Stored `9Gems `2" + to_string(gem) + "`o!|\n\nadd_spacer|small|\nadd_textbox|`oYou Have `9Gems `2" + to_string(Pgems) + "!|\n\nadd_spacer|small|\nadd_button|deposit10k|`9Deposit `w[`410K`w] `9Gems|\nadd_button|deposit100k|`9Deposit `w[`4100K`w] `9Gems|\nadd_button|deposit1m|`9Deposit `w[`41M`w] `9Gems|\n\nadd_spacer|small|\nadd_button|gemback|`9Back|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;

							}

							if (btn == "gemback")
							{
								UpdateLocalPlayerGems(peer);
								int gem = ((PlayerInfo*)(peer->data))->plantgems;
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`#Gem Storage``|left|9418|0|0|\n\nadd_spacer|small|\nadd_textbox|`#Gem Storage `oAllows you to `9Store Gems `oIn It! You can store as many as you want! `w[`4Warning`w] `oThis `9Storage `oIs personal, Other `9Players `oIn your world `@Won't `oBe able to `@Collect/Add `9Gems`o! If you will `^Sell `oYour `9world `oYour `9Gems `4WILL BE STILL `oIn your `9Account`o!|\n\nadd_spacer|small|\nadd_textbox|`oCurrently Stored `9Gems `2" + to_string(gem) + "`o!|\n\nadd_spacer|small|\nadd_button|collectgems|`9Collect|\nadd_button|addgems|`9Add Gems|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							if (btn == "collect1m") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());


								UpdateLocalPlayerFragments(peer);
								int gem = ((PlayerInfo*)(peer->data))->plantgems;
								if (gem >= 1000000)
								{
									RemovePlayerPlantGems(peer, 1000000);

									int gembux = atoi(content.c_str());
									int fingembux = gembux + 1000000;
									ofstream myfile;
									myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile << fingembux;
									myfile.close();
									int gemcalc = gembux + 1000000;
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packetpp);
									delete pp.data;



									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^You Have `2Received `41000000 `9Gems`^!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;



								}
								else
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Collect `4Aborted`@! Not `4Enough `9Gems`@!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}







							}

							if (btn == "collect100k") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());


								UpdateLocalPlayerFragments(peer);
								int gem = ((PlayerInfo*)(peer->data))->plantgems;
								if (gem >= 100000)
								{
									RemovePlayerPlantGems(peer, 100000);

									int gembux = atoi(content.c_str());
									int fingembux = gembux + 100000;
									ofstream myfile;
									myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile << fingembux;
									myfile.close();
									int gemcalc = gembux + 100000;
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packetpp);
									delete pp.data;



									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^You Have `2Received `4100000 `9Gems`^!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;



								}
								else
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Collect `4Aborted`@! Not `4Enough `9Gems`@!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}







							}

							if (btn == "collect10k") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());


								UpdateLocalPlayerFragments(peer);
								int gem = ((PlayerInfo*)(peer->data))->plantgems;
								if (gem >= 10000)
								{
									RemovePlayerPlantGems(peer, 10000);

									int gembux = atoi(content.c_str());
									int fingembux = gembux + 10000;
									ofstream myfile;
									myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile << fingembux;
									myfile.close();
									int gemcalc = gembux + 10000;
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gemcalc));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packetpp);
									delete pp.data;



									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^You Have `2Received `410000 `9Gems`^!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;



								}
								else
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Collect `4Aborted`@! Not `4Enough `9Gems`@!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}







							}




							if (btn == "deposit10k")
							{
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 9999)
								{

									int b = atoi(content.c_str());
									int gemcalc10k = b - 10000;



									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;

									UpdateLocalPlayerGems(peer);
									int gem = ((PlayerInfo*)(peer->data))->plantgems;
									AddPlayerPlantGems(peer, 10000);

									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Deposit `2Completed`^! Added `410000 `9Gems`^!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Deposit `4Aborted`@! Not `4Enough `9Gems`@!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}







							}


							if (btn == "deposit100k")
							{
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 99999)
								{

									int b = atoi(content.c_str());
									int gemcalc10k = b - 100000;



									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;

									UpdateLocalPlayerGems(peer);
									int gem = ((PlayerInfo*)(peer->data))->plantgems;
									AddPlayerPlantGems(peer, 100000);

									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Deposit `2Completed`^! Added `4100000 `9Gems`^!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Deposit `4Aborted`@! Not `4Enough `9Gems`@!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}


							}


							if (btn == "deposit1m")
							{
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 999999)
								{

									int b = atoi(content.c_str());
									int gemcalc10k = b - 1000000;



									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;

									UpdateLocalPlayerGems(peer);
									int gem = ((PlayerInfo*)(peer->data))->plantgems;
									AddPlayerPlantGems(peer, 1000000);

									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Deposit `2Completed`^! Added `41000000 `9Gems`^!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Deposit `4Aborted`@! Not `4Enough `9Gems`@!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}

							}









							if (btn == "upgradewisdom")
							{
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;

								/*GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`9Ancient Goddess``|left|5086|0|0|\n\nadd_spacer|small|\nadd_textbox|`oGreetings, mortal! It seems you have some ancient thing I can enchance through magic old. Tell me: Which would you like to mold? Choose wisely, for once I work my wonders, it will be bound to you for eternity...|\n\nadd_spacer|small|\nadd_button|upgradedimensions|`9Upgrade Ancestral Of Dimensions|\n\nadd_spacer|small|\nadd_button|exit222|`9Return|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;*/
							}


							if (btn == "upgradetime")
							{
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;

								/*GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`9Ancient Goddess``|left|5086|0|0|\n\nadd_spacer|small|\nadd_textbox|`oGreetings, mortal! It seems you have some ancient thing I can enchance through magic old. Tell me: Which would you like to mold? Choose wisely, for once I work my wonders, it will be bound to you for eternity...|\n\nadd_spacer|small|\nadd_button|upgradedimensions|`9Upgrade Ancestral Of Dimensions|\n\nadd_spacer|small|\nadd_button|exit222|`9Return|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;*/
							}



							if (btn == "upgraderiches")
							{
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;

								/*GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`9Ancient Goddess``|left|5086|0|0|\n\nadd_spacer|small|\nadd_textbox|`oGreetings, mortal! It seems you have some ancient thing I can enchance through magic old. Tell me: Which would you like to mold? Choose wisely, for once I work my wonders, it will be bound to you for eternity...|\n\nadd_spacer|small|\nadd_button|upgradedimensions|`9Upgrade Ancestral Of Dimensions|\n\nadd_spacer|small|\nadd_button|exit222|`9Return|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;*/
							}




							if (btn == "upgradelife")
							{
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;

								/*GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`9Ancient Goddess``|left|5086|0|0|\n\nadd_spacer|small|\nadd_textbox|`oGreetings, mortal! It seems you have some ancient thing I can enchance through magic old. Tell me: Which would you like to mold? Choose wisely, for once I work my wonders, it will be bound to you for eternity...|\n\nadd_spacer|small|\nadd_button|upgradedimensions|`9Upgrade Ancestral Of Dimensions|\n\nadd_spacer|small|\nadd_button|exit222|`9Return|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;*/
							}



							if (btn == "upgradedimensions")
							{
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;

								/*GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`9Ancient Goddess``|left|5086|0|0|\n\nadd_spacer|small|\nadd_textbox|`oGreetings, mortal! It seems you have some ancient thing I can enchance through magic old. Tell me: Which would you like to mold? Choose wisely, for once I work my wonders, it will be bound to you for eternity...|\n\nadd_spacer|small|\nadd_button|upgradedimensions|`9Upgrade Ancestral Of Dimensions|\n\nadd_spacer|small|\nadd_button|exit222|`9Return|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;*/
							}


							if (btn == "hub") {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								sendPlayerToWorld(peer, (PlayerInfo*)(peer->data), "EXIT");
							}



							//MAGIC MACHINE











							if (btn == "locke") {






								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wLocke The Salesman``|left|2398|0|0|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oI'm buying all kind of `9Crystals `oFor `9World Locks! `oTell Me, Which kind of `9Crystals `oDo you want to `^Sell`o?|\nadd_spacer|small|\nadd_button|sellruby|`@Sell `4Ruby's `@[`230/1`@]|\nadd_spacer|small|\nadd_button|sellamber|`@Sell `8Amber's `@[`225/1`@]|\nadd_spacer|small|\nadd_button|sellopal|`@Sell `1Opal's `@[`220/1`@]|\nadd_spacer|small|\nadd_button|sellgold|`@Sell `9Gold's `@[`215/1`@]|\nadd_spacer|small|\nadd_button|sellsapphire|`@Sell `bSapphires's `@[`210/1`@]|\nadd_spacer|small|\nadd_button|selldiamond|`@Sell `3Diamond's `@[`28/1`@]|\nadd_spacer|small|\nadd_button|sellemerald|`@Sell `2Emerald's `@[`25/1`@]|\nadd_spacer|small|\nadd_button|store|`#Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;




							}






							if (btn == "sellruby") {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							if (btn == "sellamber") {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							if (btn == "sellopal") {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							if (btn == "sellgold") {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							if (btn == "sellsapphire") {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							if (btn == "selldiamond") {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							if (btn == "sellemerald") {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}







							if (btn == "magicmachine") {





								bool iscontains = false;
								SearchInventoryItem(peer, 7382, 100, iscontains);
								if (!iscontains)
								{
									bool iscontainss = false;
									SearchInventoryItem(peer, 4762, 100, iscontainss);
									if (!iscontainss)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wMagic Machine``|left|9170|0|0|\n\nadd_spacer|small|\nadd_textbox|`oUnfortunately Magic Machine couldn't find any special blocks that can be shattered in your inventory!|\n\nadd_spacer|small|\nadd_button|close123321|`9Close|0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}

									else {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wMagic Machine``|left|9170|0|0|\n\nadd_spacer|small|\nadd_textbox|`oChoose block which you want to shatter!|\n\nadd_spacer|small|\nadd_button_with_icon|iamethyst||staticBlueFrame|4762|\n\nadd_spacer||0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet2);
										delete p2.data;

									}
								}
								else {

									bool iscontainsss = false;
									SearchInventoryItem(peer, 4762, 100, iscontainsss);
									if (!iscontainsss)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wMagic Machine``|left|9170|0|0|\n\nadd_spacer|small|\nadd_textbox|`oChoose block which you want to shatter!|\n\nadd_spacer|small|\nadd_button_with_icon|ionyx||staticBlueFrame|7382|\n\nadd_spacer||0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wMagic Machine``|left|9170|0|0|\n\nadd_spacer|small|\nadd_textbox|`oChoose block which you want to shatter!|\nadd_button_with_icon|ionyx||staticBlueFrame|7382|\nadd_button_with_icon|iamethyst||staticBlueFrame|4762|\n\nadd_spacer||0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}


							}




							if (btn == "iamethyst") {


								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wMagic Machine``|left|9170|0|0|\n\nadd_spacer|small|\nadd_textbox|`oAre you sure you want to convert `9100 `#Amethyst Blocks `oInto `9crystals`o? [`4This cannot be undone after clicking convert!`o]|\n\nadd_spacer|small|\nadd_button|yesconvertamethyst|`9Convert!|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;



							}


							if (btn == "ionyx") {


								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wMagic Machine``|left|9170|0|0|\n\nadd_spacer|small|\nadd_textbox|`oAre you sure you want to convert `9100 `bOnyx Blocks `oInto `9crystals`o? [`4This cannot be undone after clicking convert!`o]|\n\nadd_spacer|small|\nadd_button|yesconvertonyx|`9Convert!|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;



							}


							if (btn == "yesconvertamethyst") {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You Have Shattered 100 `#Amethyst `9blocks!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;


								int effect = 221;
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}



								RemoveInventoryItem(4762, 100, peer);
								string crystaluMas[26] = { "gold", "sapphire", "sapphire", "diamond", "rubble", "sapphire", "rubble", "rubble", "opal", "opal", "opal", "opal", "gold", "emerald", "amber", "sapphire", "amber", "sapphire", "amber", "amber", "amber", "emerald", "gold", "gold", "gold", "amber" };
								int crystalChance = rand() % 20;
								int randIndex = rand() % 26;
								string crystalName = crystaluMas[randIndex];
								GiveChestPrizeCrystal(peer, crystalName, crystalChance);
								int gemChance = rand() % 50000;
								GiveChestPrizeGems(peer, gemChance);





							}




							if (btn == "yesconvertonyx") {



								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You Have Shattered 100 `bOnyx `9blocks!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;

								int effect = 221;
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}



								RemoveInventoryItem(7382, 100, peer);
								string crystaluMas[26] = { "gold", "sapphire", "sapphire", "diamond", "diamond", "diamond", "rubble", "rubble", "opal", "opal", "sapphire", "opal", "gold", "amber", "amber", "emerald", "amber", "emerald", "amber", "amber", "amber", "emerald", "gold", "gold", "gold", "amber" };
								int crystalChance = rand() % 35;
								int randIndex = rand() % 26;
								string crystalName = crystaluMas[randIndex];
								GiveChestPrizeCrystal(peer, crystalName, crystalChance);
								int gemChance = rand() % 65000;
								GiveChestPrizeGems(peer, gemChance);





							}











							//CHESTU RANDOMIZACIJA CHESTU RANDOMIZACIJA CHESTU RANDOMIZACIJA
							if (btn == "openbronze") {
								RemoveInventoryItem(6204, 1, peer);


								int kuriPrizaDuot = rand() % 3 + 1;

								if (kuriPrizaDuot == 1)
								{
									int gemChance = rand() % 20000;
									GiveChestPrizeGems(peer, gemChance);
								}

								if (kuriPrizaDuot == 2)
								{
									string crystaluMas[26] = { "gold", "sapphire", "sapphire", "diamond", "rubble", "rubble", "rubble", "rubble", "opal", "opal", "opal", "opal", "gold", "amber", "amber", "amber", "amber", "amber", "amber", "amber", "amber", "emerald", "gold", "gold", "gold", "amber" };
									int crystalChance = rand() % 15;

									int randIndex = rand() % 26;
									string crystalName = crystaluMas[randIndex];

									GiveChestPrizeCrystal(peer, crystalName, crystalChance);
								}

								if (kuriPrizaDuot == 3)
								{
									int itemuMas[5] = { 7912, 7912, 7912, 5078, 8834 };
									int ItemChance = 1;

									int randIndex = rand() % 5;
									int itemId = itemuMas[randIndex];

									GiveChestPrizeItem(peer, itemId, ItemChance, 30);
								}
							}


							if (btn == "opensilver") {
								RemoveInventoryItem(6202, 1, peer);
								int kuriPrizaDuot = rand() % 3 + 1;

								if (kuriPrizaDuot == 1)
								{
									int gemChance = rand() % 70000;
									GiveChestPrizeGems(peer, gemChance);
								}

								if (kuriPrizaDuot == 2)
								{

									string crystaluMas[25] = { "gold", "sapphire", "sapphire", "sapphire", "diamond", "diamond", "rubble", "rubble", "rubble", "opal", "opal", "opal", "opal", "gold", "amber", "amber", "amber", "amber", "amber", "emerald", "emerald", "gold", "gold", "gold", "gold" };
									int crystalChance = rand() % 20;

									int randIndex = rand() % 25;
									string crystalName = crystaluMas[randIndex];

									GiveChestPrizeCrystal(peer, crystalName, crystalChance);
								}

								if (kuriPrizaDuot == 3)
								{
									int itemuMas[5] = { 7912, 5078, 5078, 5078, 8834 };
									int ItemChance = 1;

									int randIndex = rand() % 5;
									int itemId = itemuMas[randIndex];

									GiveChestPrizeItem(peer, itemId, ItemChance, 50);
								}
							}

							if (btn == "opengold") {
								RemoveInventoryItem(6200, 1, peer);
								int kuriPrizaDuot = rand() % 3 + 1;

								if (kuriPrizaDuot == 1)
								{
									int gemChance = rand() % 120000;
									GiveChestPrizeGems(peer, gemChance);
								}

								if (kuriPrizaDuot == 2)
								{
									string crystaluMas[19] = { "gold", "sapphire", "sapphire", "gold", "diamond", "diamond", "rubble", "diamond", "rubble", "opal", "opal", "gold", "amber", "emerald", "amber", "emerald", "emerald", "gold" };
									int crystalChance = rand() % 25;

									int randIndex = rand() % 19;
									string crystalName = crystaluMas[randIndex];

									GiveChestPrizeCrystal(peer, crystalName, crystalChance);
								}

								if (kuriPrizaDuot == 3)
								{
									int itemuMas[8] = { 7912, 7912, 7912, 7912, 5078, 5078, 5078, 8834 };
									int ItemChance = 1;

									int randIndex = rand() % 8;
									int itemId = itemuMas[randIndex];

									GiveChestPrizeItem(peer, itemId, ItemChance, 70);
								}
							}

							if (btn == "openwinter") {
								RemoveInventoryItem(7484, 1, peer);
								int kuriPrizaDuot = rand() % 3 + 1;

								if (kuriPrizaDuot == 1)
								{
									int gemChance = rand() % 170000;
									GiveChestPrizeGems(peer, gemChance);
								}

								if (kuriPrizaDuot == 2)
								{
									string crystaluMas[18] = { "gold", "sapphire", "sapphire", "sapphire","diamond", "diamond", "diamond", "diamond", "rubble", "opal", "opal", "gold", "amber", "emerald", "emerald", "emerald", "emerald", "gold" };
									int crystalChance = rand() % 30;

									int randIndex = rand() % 18;
									string crystalName = crystaluMas[randIndex];

									GiveChestPrizeCrystal(peer, crystalName, crystalChance);
								}

								if (kuriPrizaDuot == 3)
								{

									int itemuMas[12] = { 7912, 7912, 7912, 7912, 5078, 5078, 5078, 8834, 8834, 8834, 8834, 8834 };
									int ItemChance = 1;

									int randIndex = rand() % 12;
									int itemId = itemuMas[randIndex];

									GiveChestPrizeItem(peer, itemId, ItemChance, 90);
								}
							}




							if (btn == "openspring") {
								RemoveInventoryItem(7954, 1, peer);
								int kuriPrizaDuot = rand() % 3 + 1;

								if (kuriPrizaDuot == 1)
								{
									int gemChance = rand() % 200000;
									GiveChestPrizeGems(peer, gemChance);
								}

								if (kuriPrizaDuot == 2)
								{
									string crystaluMas[18] = { "gold", "sapphire", "sapphire", "sapphire","diamond", "diamond", "diamond", "diamond", "rubble", "opal", "opal", "gold", "amber", "emerald", "emerald", "emerald", "emerald", "gold" };
									int crystalChance = rand() % 30;

									int randIndex = rand() % 18;
									string crystalName = crystaluMas[randIndex];

									GiveChestPrizeCrystal(peer, crystalName, crystalChance);
								}

								if (kuriPrizaDuot == 3)
								{

									int itemuMas[12] = { 7912, 7912, 7912, 7912, 5078, 5078, 5078, 8834, 8834, 8834, 8834, 8834 };
									int ItemChance = 1;

									int randIndex = rand() % 12;
									int itemId = itemuMas[randIndex];

									GiveChestPrizeItem(peer, itemId, ItemChance, 95);
								}
							}






























































							if (btn == "warptosb") {
								string act = ((PlayerInfo*)(peer->data))->lastSdbWorld;
								if (act == "") {
									GamePacket po = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Unable to track down the location of the broadcast."));
									ENetPacket* packet = enet_packet_create(po.data,
										po.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
								else if (act == ((PlayerInfo*)(peer->data))->currentWorld) {
									GamePacket po = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Sorry, but you are already in the world!"));
									ENetPacket* packet = enet_packet_create(po.data,
										po.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
								else {
									sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
									joinWorld(peer, act, 0, 0);
								}
							}
















							if (btn == "okgo") {
								((PlayerInfo*)(peer->data))->isBot = false;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`#Valentine `^SALE`@!``|1458|1458|\n\nadd_spacer|small|\nadd_label|small|`@Gems `9Are Now `415K/1 `9World Lock`^! `9All `#Ranks `9Are On `4SALE! `9If You Want To Buy Anything Please Join `7Our `#Discord`9!|left|4|\nend_dialog|goodbye222||`2Close|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								enet_host_flush(server);
								delete p.data;
							}



							if (btn == "sutikimas") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`@Create Your `#Grow-ID`@!``|left|1048|\n\nadd_spacer|small|\nadd_text_input|username|GrowID: ||100|\nadd_text_input|password|Password: ||100|\nadd_text_input|code|Code: ||100|\nend_dialog|register||`2Complete!|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								enet_host_flush(server);
								delete p.data;
							}




							if (btn == "atsaukimas") {



								enet_peer_disconnect_later(peer, 0);



							}












							if (btn == "rankup") {


								int Pgems = 0;
								ifstream gemfd("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								gemfd >> Pgems;
								gemfd.close();

								string nextlvlName = ((PlayerInfo*)(peer->data))->rankupInfo.nextlvlName;
								int nextlvl = ((PlayerInfo*)(peer->data))->rankupInfo.nextRankId;
								int gems = ((PlayerInfo*)(peer->data))->rankupInfo.gems;
								int amber = ((PlayerInfo*)(peer->data))->rankupInfo.amber;
								int opal = ((PlayerInfo*)(peer->data))->rankupInfo.opal;
								int gold = ((PlayerInfo*)(peer->data))->rankupInfo.gold;
								int ruby = ((PlayerInfo*)(peer->data))->rankupInfo.ruby;
								int sapphire = ((PlayerInfo*)(peer->data))->rankupInfo.sapphire;
								int diamond = ((PlayerInfo*)(peer->data))->rankupInfo.diamond;
								int emerald = ((PlayerInfo*)(peer->data))->rankupInfo.emerald;
								int Pruby = ((PlayerInfo*)(peer->data))->rubble;
								int Pamber = ((PlayerInfo*)(peer->data))->amber;
								int Pgold = ((PlayerInfo*)(peer->data))->gold;
								int Pdiamond = ((PlayerInfo*)(peer->data))->diamond;
								int Popal = ((PlayerInfo*)(peer->data))->opal;
								int Psapphire = ((PlayerInfo*)(peer->data))->sapphire;
								int Pemerald = ((PlayerInfo*)(peer->data))->emerald;

								if (Pamber >= amber && Pgems >= gems && Popal >= opal && Pgold >= gold && Pruby >= ruby && Psapphire >= sapphire && Pdiamond >= diamond && Pemerald >= emerald)
								{
									((PlayerInfo*)(peer->data))->amber -= amber;
									((PlayerInfo*)(peer->data))->opal -= opal;
									((PlayerInfo*)(peer->data))->rubble -= ruby;
									((PlayerInfo*)(peer->data))->gold -= gold;
									((PlayerInfo*)(peer->data))->sapphire -= sapphire;
									((PlayerInfo*)(peer->data))->diamond -= diamond;
									((PlayerInfo*)(peer->data))->emerald -= emerald;
									((PlayerInfo*)(peer->data))->valgem -= gems;



									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have been promoted to `4" + nextlvlName + "`o!"), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete ps2.data;


									ENetPeer* currentPeer;

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message: `wPlayer `8" + ((PlayerInfo*)(peer->data))->rawName + "`w just got promoted to the `8" + nextlvlName + "`w rank! `8(`wgo `2RANKUP`w to get promoted too!`8)"));
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
									}
									delete p.data;

									if (((PlayerInfo*)(peer->data))->isIn)
									{
										if (((PlayerInfo*)(peer->data))->haveGrowId) {

											std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

											PlayerInfo* p = ((PlayerInfo*)(peer->data));

											string username = PlayerDB::getProperName(p->rawName);

											p->adminLevel = nextlvl;

											if (ifff.fail()) {
												ifff.close();


											}
											if (ifff.is_open()) {
											}
											json j;
											ifff >> j; //load

											j["amberxp"] = p->amberxp;
											j["amber"] = p->amber;

											j["opalxp"] = p->opalxp;
											j["opal"] = p->opal;


											j["goldxp"] = p->goldxp;
											j["gold"] = p->gold;

											j["rubblexp"] = p->rubblexp;
											j["rubble"] = p->rubble;

											j["sapphirexp"] = p->sapphirexp;
											j["sapphire"] = p->sapphire;


											j["diamondxp"] = p->diamondxp;
											j["diamond"] = p->diamond;


											j["emeraldxp"] = p->emeraldxp;
											j["emerald"] = p->emerald;

											j["adminLevel"] = p->adminLevel;


											std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
											if (!o.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}

											o << j << std::endl;

											Pgems -= gems;
											ofstream gemof("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											gemof << Pgems;
											gemof.close();
										}
									}

									enet_peer_disconnect_later(peer, 0);



								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You don't have enought crystals."), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete ps2.data;
								}

							}




							if (btn == "nukeyes") {
								if (((PlayerInfo*)(peer->data))->rawName == world->owner) {
									int effect = 90;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {

											int x = ((PlayerInfo*)(peer->data))->x;
											int y = ((PlayerInfo*)(peer->data))->y;
											GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

											ENetPacket* packetd = enet_packet_create(psp.data,
												psp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd);
											delete psp.data;
										}
									}
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `4Huge explosion appears!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int x = 3040;
									int y = 736;

									RemoveInventoryItem(3764, 1, peer);



									vector<WorldInfo> worlds;

									cout << "World cleared by " << ((PlayerInfo*)(peer->data))->tankIDName << " using atomic" << endl;
									WorldInfo* wrld = getPlyersWorld(peer);

									PlayerMoving data2;
									data2.packetType = 0x3;
									data2.characterState = 0x0; // animation
									data2.x = 3040;
									data2.y = 736;
									data2.punchX = 0;
									data2.punchY = 0;
									data2.XSpeed = 0;
									data2.YSpeed = 0;
									data2.netID = ((PlayerInfo*)(peer->data))->netID;
									data2.plantingTree = 0;

									PlayerMoving data;
									data.packetType = 0x3;
									data.characterState = 0x0; // animation
									data.x = 3040;
									data.y = 736;
									data.punchX = 0;
									data.punchY = 0;
									data.XSpeed = 0;
									data.YSpeed = 0;
									data.netID = ((PlayerInfo*)(peer->data))->netID;
									data.plantingTree = 6864;

									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
										{

											/*for (int x = 0; x < world->width; x++)
											{
												sendTileUpdate(x, x, 758, ((PlayerInfo*)(peer->data))->netID, peer);
											}

											for (int y = 0; y < world->width; y++)
											{
												sendTileUpdate(y, y, 758, ((PlayerInfo*)(peer->data))->netID, peer);
											}*/



											for (int i = 0; i < world->width * world->height; i++)
											{
												//sendTileUpdate(i, i, 758, ((PlayerInfo*)(peer->data))->netID, peer);

												if (world->items[i].foreground == 6) {
													//world->items[i].foreground =0;
												}
												else if (world->items[i].foreground == 8) {

												}
												else if (world->items[i].foreground == 242) {

												}
												else if (world->items[i].foreground == 2408) {

												}
												else if (world->items[i].foreground == 1796) {

												}
												else if (world->items[i].foreground == 4428) {

												}
												else if (world->items[i].foreground == 7188) {

												}
												else if (world->items[i].foreground == 9308) {

												}
												else {
													world->items[i].foreground = 0;
													world->items[i].background = 0;

													data.x = (i % world->width) * 32;
													data.y = (i / world->width) * 32;
													data2.x = (i % world->width) * 32;
													data2.y = (i / world->width) * 32;
													data.punchX = (i % world->width) * 1;
													data.punchY = (i / world->width) * 1;
													data2.punchX = (i % world->width) * 1;
													data2.punchY = (i / world->width) * 1;


													if (isHere(peer, currentPeer)) {
														SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
														SendPacketRaw(4, packPlayerMoving(&data2), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
														//cout << "Tile update at: " << data2->punchX << "x" << data2->punchY << endl;
													}

												}
											}
										}
									}

								}

							}







							if (btn == "legendbot") {
								((PlayerInfo*)(peer->data))->cloth_shirt = 1780;
								sendState(peer);

								((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
								sendClothes(peer);
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You have legendary bot now!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Quest step complete!!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);


								delete p2.data;
								delete p.data;
								int effect = 90;
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}
							}
							if (btn == "legendwing") {
								((PlayerInfo*)(peer->data))->cloth_back = 1784;
								sendState(peer);

								((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
								sendClothes(peer);

								((PlayerInfo*)(event.peer->data))->canDoubleJump = true;

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You have legendary wing now!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Quest step complete!!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								delete p.data;
								int effect = 90;
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}
							}

							if (btn == "legendkatana") {
								((PlayerInfo*)(peer->data))->cloth_hand = 2592;
								sendState(peer);

								((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
								sendClothes(peer);

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You have legendary katana now!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Quest step complete!!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								delete p.data;
								int effect = 90;
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}
							}

							if (btn == "legendname") {

								ENetPeer* currentPeer;
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Quest step complete!!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								int effect = 90;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										GamePacket p3 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), ((PlayerInfo*)(peer->data))->Chatname + " `5earned the achievement ''DARY!''!"));
										ENetPacket * packet3 = enet_packet_create(p3.data,
											p3.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet3);
										delete p3.data;
										delete psp.data;

										sendPlayerLeave(peer, (PlayerInfo*)(event.peer->data));
										((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
										sendWorldOffers(peer);

										((PlayerInfo*)(peer->data))->displayName = ((PlayerInfo*)(peer->data))->rawName + " of Legend";

										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT]`1 You have a `@Legendary Name`1 Now!"));
										ENetPacket * packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet);
										delete ps.data;
										//enet_host_flush(server);
									}
								}
							}

							if (btn == "legenddragon") {
								((PlayerInfo*)(peer->data))->cloth_hand = 1782;
								sendState(peer);

								((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
								sendClothes(peer);

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You have legendary dragon now!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Quest step complete!!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								delete p.data;
								int effect = 90;
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}
							}

							if (btn == "legendwhip") {
								((PlayerInfo*)(peer->data))->cloth_hand = 6026;
								sendState(peer);

								((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
								sendClothes(peer);

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You have whip of truth now!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Quest step complete!!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								delete p.data;
								int effect = 90;
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}
							}


							if (btn == "joinguildzzz") {
								((PlayerInfo*)(peer->data))->guild = ((PlayerInfo*)(peer->data))->guildlast;
								((PlayerInfo*)(peer->data))->isinvited = false;
								((PlayerInfo*)(peer->data))->joinguild = true;

								string fixedguildName = PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild);

								/*
								std::ifstream ifs2("guilds/" + fixedguildName + ".json");
								if (ifs2.fail()) {
									ifs2.close();
								}
								if (ifs2.is_open()) {

								}
								json j2;
								ifs2 >> j2;*/

								guildmem.push_back(((PlayerInfo*)(peer->data))->rawName);

								std::ifstream ifff("guilds/" + fixedguildName + ".json");
								if (ifff.fail()) {
									ifff.close();
									continue;
								}
								if (ifff.is_open()) {
								}
								json j;
								ifff >> j; //load


								j["Member"] = guildmem; //edit

								std::ofstream o("guilds/" + fixedguildName + ".json"); //save
								if (!o.is_open()) {
									cout << GetLastError() << endl;
									_getch();
								}
								o << j << std::endl;
							}
							if (btn == "invitemenu") {


								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`5Invite Options|left|1366|\n\nadd_spacer|small|\nadd_button|addfriendrnbutton|`9Add To Friends|0|0|\nadd_button|inviteguildbutton|`9Invite To Guild|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;




							}
							if (btn == "inviteguildbutton") {
								if (((PlayerInfo*)(peer->data))->guild != "") {
									int number = ((PlayerInfo*)(peer->data))->guildmatelist.size();
									if (number > 9) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ERROR: `oYou already have `450 `ofriends! Please remove some before adding new ones!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{
											if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) {
												string name = ((PlayerInfo*)(currentPeer->data))->rawName;
												if (((PlayerInfo*)(currentPeer->data))->guild != "") {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3GUILD ERROR: `w" + ((PlayerInfo*)(currentPeer->data))->displayName + "`o is already in a Guild!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
												}
												else {
													GamePacket p4 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`5[`wGuild request sent to `2" + ((PlayerInfo*)(currentPeer->data))->displayName + "`5]"));
													ENetPacket* packet4 = enet_packet_create(p4.data,
														p4.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(peer, 0, packet4);
													delete p4.data;
													string text = "action|play_sfx\nfile|audio/tip_start.wav\ndelayMS|0\n";
													BYTE* data = new BYTE[5 + text.length()];
													BYTE zero = 0;
													int type = 3;
													memcpy(data, &type, 4);
													memcpy(data + 4, text.c_str(), text.length());
													memcpy(data + 4 + text.length(), &zero, 1);
													ENetPacket* packet2 = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(currentPeer, 0, packet2);
													delete data;
													((PlayerInfo*)(currentPeer->data))->guildlast = ((PlayerInfo*)(peer->data))->guild;
													((PlayerInfo*)(currentPeer->data))->isinvited = true;
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD REQUEST] `oYou've been invited to join `2" + ((PlayerInfo*)(peer->data))->guild + "`o by `w" + ((PlayerInfo*)(peer->data))->displayName + "`o! To accept, `wwrench yourself `oand then choose `2Join " + ((PlayerInfo*)(peer->data))->guild + "`o."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet);
													delete p.data;
												}
											}
										}
									}
								}
								else {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ERROR] `oYou must be in a Guild as a Elder or higher in order to invite players!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}


							if (btn == "viewbackpack") {
								GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wMy Backpack|left|1458|\nadd_spacer|\nadd_button|viewcrystals|`wView `9Crystals``|\nadd_button|viewfragments|`wView `9Fragments``|\nadd_spacer|\nadd_quick_exit|"));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete ps.data;
								continue;
							}

							if (btn == "viewcrystals") {
								int levels = ((PlayerInfo*)(peer->data))->level;
								int xp = ((PlayerInfo*)(peer->data))->xp;
								int rubble = ((PlayerInfo*)(peer->data))->rubble;
								int amber = ((PlayerInfo*)(peer->data))->amber;
								int opal = ((PlayerInfo*)(peer->data))->opal;
								int gold = ((PlayerInfo*)(peer->data))->gold;
								int sapphire = ((PlayerInfo*)(peer->data))->sapphire;
								int diamond = ((PlayerInfo*)(peer->data))->diamond;
								int emerald = ((PlayerInfo*)(peer->data))->emerald;
								GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wMy Crystals|left|1458|\nadd_spacer|\nadd_label_with_icon|small|`oYou have: `@" + to_string(rubble) + " `4Ruby's`0!|left|828|\nadd_label_with_icon|small|`oYou have: `@" + to_string(amber) + " `8Amber's`0!|left|3948|\nadd_label_with_icon|small|`oYou have: `@" + to_string(opal) + " `!Opal's`0!|left|5270|\nadd_label_with_icon|small|`oYou have: `@" + to_string(gold) + " `9Gold's`0!|left|3424|\nadd_label_with_icon|small|`oYou have: `@" + to_string(sapphire) + " `bSapphire's`0!|left|2812|\nadd_label_with_icon|small|`oYou have: `@" + to_string(diamond) + " `1Diamond's`0!|left|262|\nadd_label_with_icon|small|`oYou have: `@" + to_string(emerald) + " `2Emerald's`0!|left|826|\nadd_spacer|Back|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete ps.data;
								continue;
							}


							if (btn == "viewfragments") {
								UpdateLocalPlayerFragments(peer);
								int earthfragment = ((PlayerInfo*)(peer->data))->fEarth;
								int darkfragment = ((PlayerInfo*)(peer->data))->fDark;
								int firefragment = ((PlayerInfo*)(peer->data))->fFire;
								int waterfragment = ((PlayerInfo*)(peer->data))->fWater;
								GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wMy Fragments|left|1458|\nadd_spacer|\nadd_label_with_icon|small|`oYou have: `@" + to_string(earthfragment) + " `2Earth `9Fragment's`0!|left|5050|\nadd_label_with_icon|small|`oYou have: `@" + to_string(darkfragment) + " `bDark `9Fragment's`0!|left|5052|\nadd_label_with_icon|small|`oYou have: `@" + to_string(firefragment) + " `4Fire `9Fragment's`0!|left|5046|\nadd_label_with_icon|small|`oYou have: `@" + to_string(waterfragment) + " `1Water `9Fragment's`0!|left|5048|\nadd_spacer|Back|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete ps.data;
								continue;
							}




							if (btn == "passbutton") {
								GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wChange Password|left|1280|\nadd_spacer|small|\nadd_text_input|oldpass|`$Current Password``||18|\nadd_text_input|newpass|`$New Password``||18|\nadd_text_input|verifypass|`$Verify Password``||18|\nend_dialog|pssdia|`wCancel``|`wConfirm!``|"));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete ps.data;
								continue;
							}
							if (btn == "joinguild") {
								vector<string> gmembers;
								string guildname = PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guildlast);
								if (guildname != "") {
									std::ifstream ifff("guilds/" + guildname + ".json");
									if (ifff.fail()) {
										ifff.close();
										cout << "Failed loading guilds/" + guildname + ".json! From " + ((PlayerInfo*)(peer->data))->displayName + "." << endl;
									}
									json j;
									ifff >> j;

									for (int i = 0; i < j["Member"].size(); i++) {
										gmembers.push_back(j["Member"][i]);
									}

									ifff.close();

									int membercount = gmembers.size();

									if (membercount > 14) {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `oThat guild is already full!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
									else {
										((PlayerInfo*)(peer->data))->guild = ((PlayerInfo*)(peer->data))->guildlast;
										((PlayerInfo*)(peer->data))->guildlast = "";
										((PlayerInfo*)(peer->data))->isinvited = false;
										((PlayerInfo*)(peer->data))->joinguild = true;
										updateInvis(peer);
										std::ifstream ifff("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
										if (ifff.fail()) {
											ifff.close();
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oGuild does not exist! If you are seeing this message, please take a screenshot and send it to a developer!"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										if (ifff.is_open()) {
										}
										json j;
										ifff >> j; //load

										vector<string> gmlist;

										for (int i = 0; i < j["Member"].size(); i++) {
											gmlist.push_back(j["Member"][i]);
										}

										gmlist.push_back(((PlayerInfo*)(peer->data))->rawName);

										j["Member"] = gmlist; //edit

										std::ofstream o("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json"); //save
										if (!o.is_open()) {
											cout << GetLastError() << endl;
											_getch();
										}

										o << j << std::endl;






										std::ifstream iffff2("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

										json jj2;

										if (iffff2.fail()) {
											iffff2.close();
											continue;
										}
										if (iffff2.is_open()) {


										}

										iffff2 >> jj2; //load

										std::ofstream oo2("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
										if (!oo2.is_open()) {
											cout << GetLastError() << endl;
											_getch();
										}
										jj2["guild"] = ((PlayerInfo*)(peer->data))->guild;
										jj2["joinguild"] = true;
										oo2 << jj2 << std::endl;




										ENetPeer* currentPeer;

										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->guild == ((PlayerInfo*)(peer->data))->guild)
											{
												updateGuild(peer);
												updateGuild(currentPeer);
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `2" + ((PlayerInfo*)(peer->data))->displayName + " `ojoined the guild!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												delete p.data;
												updateInvis(peer);
											}
										}
									}
								}
							}


							if (btn == "showguild") {
								string onlinegmlist = "";
								string grole = "";
								int onlinecount = 0;
								string guildname = PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild);
								if (guildname != "") {
									std::ifstream ifff("guilds/" + guildname + ".json");
									if (ifff.fail()) {
										ifff.close();
										cout << "Failed loading guilds/" + guildname + ".json! From " + ((PlayerInfo*)(peer->data))->displayName + "." << endl;
										((PlayerInfo*)(peer->data))->guild = "";

									}
									json j;
									ifff >> j;

									int gfbg, gffg, guildlvl, guildxp;

									string gstatement, gleader;

									vector<string> gmembers;

									gfbg = j["backgroundflag"];
									gffg = j["foregroundflag"];
									gstatement = j["GuildStatement"];
									gleader = j["Leader"];
									guildlvl = j["GuildLevel"];
									guildxp = j["GuildExp"];
									for (int i = 0; i < j["Member"].size(); i++) {
										gmembers.push_back(j["Member"][i]);
									}
									((PlayerInfo*)(peer->data))->guildlevel = guildlvl;
									((PlayerInfo*)(peer->data))->guildexp = guildxp;

									((PlayerInfo*)(peer->data))->guildBg = gfbg;
									((PlayerInfo*)(peer->data))->guildFg = gffg;
									((PlayerInfo*)(peer->data))->guildStatement = gstatement;
									((PlayerInfo*)(peer->data))->guildLeader = gleader;
									((PlayerInfo*)(peer->data))->guildMembers = gmembers;

									ifff.close();
								}
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									string name = ((PlayerInfo*)(currentPeer->data))->rawName;
									if (find(((PlayerInfo*)(peer->data))->guildMembers.begin(), ((PlayerInfo*)(peer->data))->guildMembers.end(), name) != ((PlayerInfo*)(peer->data))->guildMembers.end()) {
										if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->guildLeader) {
											onlinegmlist += "\nadd_button|onlinegm_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + " `e(GL)``|0|0|";
											onlinecount++;
										}
										else {
											onlinegmlist += "\nadd_button|onlinegm_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + " " + grole + "``|0|0|";
											onlinecount++;
										}
									}
								}
								if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(peer->data))->guildLeader) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_dual_layer_icon_label|big|`wGuild Home|left|" + std::to_string(((PlayerInfo*)(peer->data))->guildBg) + "|" + std::to_string(((PlayerInfo*)(peer->data))->guildFg) + "|1.0|0|\n\nadd_spacer|small|\nadd_textbox|`oGuild Name : " + ((PlayerInfo*)(peer->data))->guild + "``|\nadd_textbox|`oStatement : " + ((PlayerInfo*)(peer->data))->guildStatement + "``|\nadd_textbox|`oGuild size: " + std::to_string(((PlayerInfo*)(peer->data))->guildMembers.size()) + "/15 members|\nadd_textbox|`oGuild Level : " + std::to_string(((PlayerInfo*)(peer->data))->guildlevel) + "|\nadd_textbox|`oGuild Exp : " + std::to_string(((PlayerInfo*)(peer->data))->guildexp) + "|\n\nadd_spacer|small|\nadd_button|leavefromguild|`4Abandon Guild``|0|0|\nadd_button|guildoffline|`wShow offline too``|0|0|\nadd_button|goguildhome|`wGo to Guild Home``|0|0|\n\nadd_spacer|small|\nadd_textbox|`5" + std::to_string(onlinecount) + " of " + std::to_string(((PlayerInfo*)(peer->data))->guildMembers.size()) + " `wGuild Members Online|" + onlinegmlist + "\n\nadd_spacer|small|\nadd_button|backsocialportal|`wBack``|0|0|\nadd_button||`wClose``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_dual_layer_icon_label|big|`wGuild Home|left|" + std::to_string(((PlayerInfo*)(peer->data))->guildBg) + "|" + std::to_string(((PlayerInfo*)(peer->data))->guildFg) + "|1.0|0|\n\nadd_spacer|small|\nadd_textbox|`oGuild Name : " + ((PlayerInfo*)(peer->data))->guild + "``|\nadd_textbox|`oStatement : " + ((PlayerInfo*)(peer->data))->guildStatement + "``|\nadd_textbox|`oGuild size: " + std::to_string(((PlayerInfo*)(peer->data))->guildMembers.size()) + "/15 members|\nadd_textbox|`oGuild Level : " + std::to_string(((PlayerInfo*)(peer->data))->guildlevel) + "|\nadd_textbox|`oGuild Exp : " + std::to_string(((PlayerInfo*)(peer->data))->guildexp) + "|\n\nadd_spacer|small|\nadd_button|leavefromguild|`4Leave from guild``|0|0|\nadd_button|guildoffline|`wShow offline too``|0|0|\nadd_button|goguildhome|`wGo to Guild Home``|0|0| \n\nadd_spacer|small|\nadd_textbox|`5" + std::to_string(onlinecount) + " of " + std::to_string(((PlayerInfo*)(peer->data))->guildMembers.size()) + " `wGuild Members Online|" + onlinegmlist + "\n\nadd_spacer|small|\nadd_button|backsocialportal|`wBack``|0|0|\nadd_button||`wClose``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
							}


							if (btn == "guildrewards")
							{
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}


							if (btn == "lbot")
							{
								((PlayerInfo*)(peer->data))->cloth_shirt = 1780;
								sendClothes(peer);
								PlayerInfo* info = ((PlayerInfo*)(peer->data));
								int netID = info->netID;
								ENetPeer* currentPeer;
								int state = getState(info);
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										PlayerMoving data;
										data.packetType = 0x14;
										data.characterState = 0; // animation
										data.x = 1000;
										data.y = 100;
										data.x = 1000;
										data.y = 1000;
										data.punchX = 0;
										data.punchY = 0;
										data.XSpeed = 300;
										data.YSpeed = 600;
										data.netID = netID;
										data.plantingTree = state;
										BYTE* raw = packPlayerMoving(&data);
										int var = 20; // placing and breking
										memcpy(raw + 1, &var, 3);
										SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
										GamePacket p6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 90), ((PlayerInfo*)peer->data)->x + 10, ((PlayerInfo*)peer->data)->y + 15));
										ENetPacket* packet6 = enet_packet_create(p6.data,
											p6.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet6);
										delete p6.data;
									}
								}
							}
							if (btn == "lwings")
							{
								((PlayerInfo*)(peer->data))->cloth_back = 1784;
								sendClothes(peer);
								PlayerInfo* info = ((PlayerInfo*)(peer->data));
								((PlayerInfo*)(peer->data))->canDoubleJump = true;
								int netID = info->netID;
								ENetPeer* currentPeer;
								int state = getState(info);
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer))
									{
										GamePacket p6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 90), ((PlayerInfo*)peer->data)->x + 10, ((PlayerInfo*)peer->data)->y + 15));
										ENetPacket* packet6 = enet_packet_create(p6.data,
											p6.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet6);
										delete p6.data;
									}
								}
							}
							if (btn == "ldrag")
							{
								((PlayerInfo*)(peer->data))->cloth_hand = 1782;
								sendClothes(peer);
								PlayerInfo* info = ((PlayerInfo*)(peer->data));
								int netID = info->netID;
								ENetPeer* currentPeer;
								int state = getState(info);
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										PlayerMoving data;
										data.packetType = 0x14;
										data.characterState = 0; // animation
										data.x = 1000;
										data.y = 100;
										data.x = 1000;
										data.y = 1000;
										data.punchX = 0;
										data.punchY = 0;
										data.XSpeed = 300;
										data.YSpeed = 600;
										data.netID = netID;
										data.plantingTree = state;
										BYTE* raw = packPlayerMoving(&data);
										int var = 21; // placing and breking
										memcpy(raw + 1, &var, 3);
										SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
										GamePacket p6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 90), ((PlayerInfo*)peer->data)->x + 10, ((PlayerInfo*)peer->data)->y + 15));
										ENetPacket* packet6 = enet_packet_create(p6.data,
											p6.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet6);
										delete p6.data;
									}
								}
							}
							if (btn == "lsky")
							{
								((PlayerInfo*)(peer->data))->cloth_back = 7734;
								sendClothes(peer);
								PlayerInfo* info = ((PlayerInfo*)(peer->data));
								((PlayerInfo*)(peer->data))->canDoubleJump = true;
								int netID = info->netID;
								ENetPeer* currentPeer;
								int state = getState(info);
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer))
									{
										GamePacket p6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 90), ((PlayerInfo*)peer->data)->x + 10, ((PlayerInfo*)peer->data)->y + 15));
										ENetPacket* packet6 = enet_packet_create(p6.data,
											p6.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet6);
										delete p6.data;
									}
								}
							}
							if (btn == "lwhip")
							{
								((PlayerInfo*)(peer->data))->cloth_hand = 6026;
								sendClothes(peer);
								PlayerInfo* info = ((PlayerInfo*)(peer->data));
								int netID = info->netID;
								ENetPeer* currentPeer;
								int state = getState(info);
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										PlayerMoving data;
										data.packetType = 0x14;
										data.characterState = 0; // animation
										data.x = 1000;
										data.y = 100;
										data.x = 1000;
										data.y = 1000;
										data.punchX = 0;
										data.punchY = 0;
										data.XSpeed = 300;
										data.YSpeed = 600;
										data.netID = netID;
										data.plantingTree = state;
										BYTE* raw = packPlayerMoving(&data);
										int var = 76; // placing and breking
										memcpy(raw + 1, &var, 3);
										SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oThe truth is yours! (`oWhip of Truth mod added`o)"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);

										delete p.data;
										((PlayerInfo*)(peer->data))->effect = 8421452;
										sendState(peer); //here
										sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										GamePacket p6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 90), ((PlayerInfo*)peer->data)->x + 10, ((PlayerInfo*)peer->data)->y + 15));
										ENetPacket* packet6 = enet_packet_create(p6.data,
											p6.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet6);
										delete p6.data;
									}
								}
							}
							if (btn == "lkat")
							{
								((PlayerInfo*)(peer->data))->cloth_hand = 2592;
								sendClothes(peer);
								PlayerInfo* info = ((PlayerInfo*)(peer->data));
								int netID = info->netID;
								ENetPeer* currentPeer;
								int state = getState(info);
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										PlayerMoving data;
										data.packetType = 0x14;
										data.characterState = 0; // animation
										data.x = 1000;
										data.y = 100;
										data.x = 1000;
										data.y = 1000;
										data.punchX = 0;
										data.punchY = 0;
										data.XSpeed = 300;
										data.YSpeed = 600;
										data.netID = netID;
										data.plantingTree = state;
										BYTE* raw = packPlayerMoving(&data);
										int var = 43; // placing and breking
										memcpy(raw + 1, &var, 3);
										SendPacketRaw(4, raw, 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oNone can stand against you! (`oLegendary Swordsmaster mod added`o)"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);

										delete p.data;
										((PlayerInfo*)(peer->data))->effect = 8421399;
										sendState(peer); //here
										sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										GamePacket p6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 90), ((PlayerInfo*)peer->data)->x + 10, ((PlayerInfo*)peer->data)->y + 15));
										ENetPacket* packet6 = enet_packet_create(p6.data,
											p6.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet6);
										delete p6.data;
									}
								}
							}
							if (btn == "showguildzz") {

								string fg, bg, guildname, guildleader, gstatement;
								int guildlvl, guildexp;
								string guildName = ((PlayerInfo*)(peer->data))->guild;
								std::ifstream ifs("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
								if (ifs.is_open()) {
									json j;
									ifs >> j;

									gstatement = j["GuildStatement"];
									fg = j["foregroundflag"];
									bg = j["backgroundflag"];
									guildname = j["GuildName"];
									guildlvl = j["GuildLevel"];
									guildexp = j["GuildExp"];
									guildleader = j["Leader"];

									vector<string> gmlists;

									for (int i = 0; i < j["Member"].size(); i++) {
										gmlists.push_back(j["Member"][i]);
									}
									((PlayerInfo*)(peer->data))->guildmatelist = gmlists;

								}

								int block = stoi(fg);
								int wallpaper = stoi(bg);
								int flag = ((65536 * wallpaper) + block);

								string onlinefrnlist = "";
								int onlinecount = 0;
								int totalcount = ((PlayerInfo*)(peer->data))->guildmatelist.size();
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;

									string name = ((PlayerInfo*)(currentPeer->data))->rawName;
									if (find(((PlayerInfo*)(peer->data))->guildmatelist.begin(), ((PlayerInfo*)(peer->data))->guildmatelist.end(), name) != ((PlayerInfo*)(peer->data))->guildmatelist.end()) {
										if (((PlayerInfo*)(currentPeer->data))->rawName == guildleader) {
											onlinefrnlist += "\nadd_button|onlinefrns_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->rawName + " `e(GL)``|0|0|";
											onlinecount++;
										}
										else {
											onlinefrnlist += "\nadd_button|onlinefrns_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->rawName + "``|0|0|";
											onlinecount++;
										}
									}

								}
								if (guildleader == ((PlayerInfo*)(peer->data))->rawName) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_dual_layer_icon_label|big|`wGuild Home|left|" + bg + "|" + fg + "|1.0|0|\nadd_label|small|" + gstatement + "|left|4|\n\nadd_spacer|small|\nadd_textbox|Guild size: " + std::to_string(totalcount) + "/10 members``|\nadd_textbox|`oGuild Level : " + std::to_string(guildlvl) + "|\nadd_textbox|`oGuild Exp : " + std::to_string(guildexp) + "|\nadd_textbox|Guild Name : " + guildname + "|\nadd_textbox|`oGuild Leader : " + guildleader + "|\nadd_spacer|small|\nadd_button|guildoffline|`wShow offline too``|0|0|\nadd_button|goguildhome|`wGo to Guild Home``|0|0|\nadd_spacer|big|\nadd_textbox|`5" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wGuild Members Online|\nadd_spacer|small|" + onlinefrnlist + "\nadd_spacer|small|\nadd_button|backsocialportal|`wBack|\nadd_button|cl0se|`wClose|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_dual_layer_icon_label|big|`wGuild Home|left|" + bg + "|" + fg + "|1.0|0|\nadd_label|small|" + gstatement + "|left|4|\n\nadd_spacer|small|\nadd_textbox|Guild size: " + std::to_string(totalcount) + "/10 members``|\nadd_textbox|`oGuild Level : " + std::to_string(guildlvl) + "|\nadd_textbox|`oGuild Exp : " + std::to_string(guildexp) + "|\nadd_textbox|Guild Name : " + guildname + "|\nadd_textbox|`oGuild Leader : " + guildleader + "|\nadd_spacer|small|\nadd_button|guildoffline|`wShow offline too``|0|0|\nadd_button|goguildhome|`wGo to Guild Home``|0|0| \nadd_spacer|big|\nadd_textbox|`5" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wGuild Members Online|\nadd_spacer|small|" + onlinefrnlist + "\nadd_spacer|small|\nadd_button|backsocialportal|`wBack|\nadd_button|cl0se|`wClose|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;

								}

							}


							if (btn == "leavefromguild")
							{
								if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(peer->data))->guildLeader) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`8Are you sure?``|left|6204|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAfter `4Abandon `ofrom the guild, all guild's members will be `4kicked out `oand the guild will be `4destroyed`o!|left|8|\nadd_spacer|small|\nadd_button|confirmguildleaderleave|`4Yes, Abandon!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}


								else {



									std::ifstream ifff("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
									if (ifff.fail()) {
										ifff.close();
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oGuild does not exist! If you are seeing this message, please take a screenshot and send it to a developer!"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;
										continue;
									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load

									vector<string> gmlist;

									for (int i = 0; i < j["Member"].size(); i++) {
										gmlist.push_back(j["Member"][i]);
									}

									gmlist.erase(std::remove(gmlist.begin(), gmlist.end(), ((PlayerInfo*)(peer->data))->rawName), gmlist.end());


									j["Member"] = gmlist; //edit


									std::ofstream o("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;



									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(currentPeer->data))->guild == ((PlayerInfo*)(peer->data))->guild) {
											updateGuild(currentPeer);
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `2" + ((PlayerInfo*)(peer->data))->rawName + "`o has left the guild!"));
											ENetPacket * packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);
											delete p.data;
											updateInvis(currentPeer);
										}

									}



									((PlayerInfo*)(peer->data))->guildBg = 0;
									((PlayerInfo*)(peer->data))->guildFg = 0;
									((PlayerInfo*)(peer->data))->guildLeader = "";
									((PlayerInfo*)(peer->data))->guild = "";
									((PlayerInfo*)(peer->data))->guildStatement = "";
									//((PlayerInfo*)(currentPeer->data))->guildRole = 0;
									((PlayerInfo*)(peer->data))->guildlast = "";
									((PlayerInfo*)(peer->data))->lastgm = "";
									((PlayerInfo*)(peer->data))->lastgmname = "";
									((PlayerInfo*)(peer->data))->joinguild = false;
									((PlayerInfo*)(peer->data))->lastgmworld = "";
									((PlayerInfo*)(peer->data))->guildMembers.clear();
									updateInvis(peer);


									std::ifstream iffff2("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj2;

									if (iffff2.fail()) {
										iffff2.close();
										continue;
									}
									if (iffff2.is_open()) {


									}

									iffff2 >> jj2; //load

									std::ofstream oo2("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo2.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}
									jj2["guild"] = "";
									jj2["joinguild"] = false;
									oo2 << jj2 << std::endl;




								}
							}

							if (btn == "confirmguildleaderleave")
							{
								//Player::OnConsoleMessage(peer, "Abandoned");

								std::ifstream ifff("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
								if (ifff.fail()) {
									ifff.close();
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oGuild does not exist! If you are seeing this message, please take a screenshot and send it to a developer!"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;
								}
								if (ifff.is_open()) {
								}
								json j;
								ifff >> j; //load


								vector<string> gmlist;

								for (int i = 0; i < j["Member"].size(); i++) {
									gmlist.push_back(j["Member"][i]);
								}





								const int result = remove(("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json").c_str());
								if (result == 0) {
									cout << ((PlayerInfo*)(peer->data))->rawName + " abandoned from the guild" << endl;
								}
								else {
									cout << "ERROR deleting file, when " << ((PlayerInfo*)(peer->data))->rawName + " abandoned from the guild" << endl;
									cout << "His guild is: guilds/" << PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) << ".json" << endl;
									cout << (("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json").c_str());
								}

								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (find(gmlist.begin(), gmlist.end(), ((PlayerInfo*)(currentPeer->data))->rawName) != gmlist.end()) {

										((PlayerInfo*)(currentPeer->data))->guildBg = 0;
										((PlayerInfo*)(currentPeer->data))->guildFg = 0;
										((PlayerInfo*)(currentPeer->data))->guildLeader = "";
										((PlayerInfo*)(currentPeer->data))->guild = "";
										((PlayerInfo*)(currentPeer->data))->guildStatement = "";
										//((PlayerInfo*)(currentPeer->data))->guildRole = 0;
										((PlayerInfo*)(currentPeer->data))->guildlast = "";
										((PlayerInfo*)(currentPeer->data))->lastgm = "";
										((PlayerInfo*)(currentPeer->data))->lastgmname = "";
										((PlayerInfo*)(currentPeer->data))->joinguild = false;
										((PlayerInfo*)(currentPeer->data))->lastgmworld = "";
										((PlayerInfo*)(currentPeer->data))->guildMembers.clear();
										updateInvis(currentPeer);

										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `4Unfortunately, `obut guild's leader `4abandoned `ofrom the guild and you were `4kicked out`o."));
										ENetPacket * packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);
										delete p.data;
									}
								}

								for (int i = 0; i < gmlist.size(); i++)
								{
									std::ifstream iffff2("players/" + gmlist[i] + ".json");

									json jj2;

									if (iffff2.fail()) {
										iffff2.close();
										continue;
									}
									if (iffff2.is_open()) {


									}

									iffff2 >> jj2; //load

									std::ofstream oo2("players/" + gmlist[i] + ".json");
									if (!oo2.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}
									jj2["guild"] = "";
									jj2["joinguild"] = false;
									oo2 << jj2 << std::endl;
								}

							}

							if (btn == "guildoffline") {


								string onlinegmlist = "";
								string offname, offlinegm;
								string grole = "";
								int onlinecount = 0;
								int totalcount = ((PlayerInfo*)(peer->data))->guildMembers.size();

								string gstatement = ((PlayerInfo*)(peer->data))->guildLeader;
								string bg = std::to_string(((PlayerInfo*)(peer->data))->guildBg);
								string fg = std::to_string(((PlayerInfo*)(peer->data))->guildFg);
								string guildname = ((PlayerInfo*)(peer->data))->guild;
								string guildleader = ((PlayerInfo*)(peer->data))->guildLeader;
								string guildlvl = "0";
								string guildexp = "0";
								ENetPeer* currentPeer;
								vector<string>offlineguild = ((PlayerInfo*)(peer->data))->guildMembers;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									string name = ((PlayerInfo*)(currentPeer->data))->rawName;
									if (find(((PlayerInfo*)(peer->data))->guildMembers.begin(), ((PlayerInfo*)(peer->data))->guildMembers.end(), name) != ((PlayerInfo*)(peer->data))->guildMembers.end()) {
										if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->guildLeader) {
											onlinegmlist += "\nadd_button|onlinegm_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + " `e(GL)``|0|0|";
											onlinecount++;
										}
										else {
											onlinegmlist += "\nadd_button|onlinegm_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + " " + grole + "``|0|0|";
											onlinecount++;
											offlineguild.erase(std::remove(offlineguild.begin(), offlineguild.end(), name), offlineguild.end());
										}
									}
								}
								for (std::vector<string>::const_iterator i = offlineguild.begin(); i != offlineguild.end(); ++i) {
									offname = *i;
									offlinegm += "\nadd_button|offlinegm_" + offname + "|`4OFFLINE: `o" + offname + "``|0|0|";

								}
								/*if (onlinecount > 0) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online|left|1366|\n\nadd_spacer|small|\nadd_button|chc0|`wClose``|0|0|\n\nadd_spacer|small|\nadd_textbox|All of your friend are online!|\n\nadd_spacer|small| \n\nadd_spacer|small| \nadd_button|frnoption|`oFriend Options``|0|0|\nadd_button|backonlinelist|Back``|0|0|\nadd_button||`oClose``|0|0|\nadd_quick_exit|"));
									ENetPacket * packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {*/
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\nadd_dual_layer_icon_label|big|`wGuild Home|left|" + bg + "|" + fg + "|1.0|0|\nadd_label|small|" + gstatement + "|left|4|\n\nadd_spacer|small|\nadd_textbox|Guild size: " + std::to_string(totalcount) + "/10 members``|\nadd_textbox|`oGuild Level : " + guildlvl + "|\nadd_textbox|`oGuild Exp : " + guildexp + "|\nadd_textbox|Guild Name : " + guildname + "|\nadd_textbox|`oGuild Leader : " + guildleader + "|\nadd_spacer|small| \nadd_button|goguildhome|`wGo to Guild Home``|0|0| \nadd_spacer|big|\nadd_textbox|`5" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wGuild Members Online|\nadd_spacer|small|" + offlinegm + "\nadd_spacer|small|\nadd_button|showguild|`wBack|\nadd_button|cl0se|`wClose|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;

							}
							if (btn == "goguildhome") {
								string gworld;
								string guildName = ((PlayerInfo*)(peer->data))->guild;
								std::ifstream ifs("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
								if (ifs.is_open()) {
									json j;
									ifs >> j;

									gworld = j["GuildWorld"];

								}
								sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
								joinWorld(peer, gworld, 0, 0);
							}
							if (btn == "backtoexit") {
								if (((PlayerInfo*)(peer->data))->isInGame == true)
								{
									((PlayerInfo*)(peer->data))->isInGame = false;
									match.playersInGame--;
									sendPlayerLeave(peer, (PlayerInfo*)(event.peer->data));
									((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
									sendWorldOffers(peer);
									Player::PlayAudio(peer, "audio/door_shut.wav", 0);
								}
							}
							if (btn == "worldPublic") {

								if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner) getPlyersWorld(peer)->isPublic = true;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wWorld properties changed. Set world to: Public!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "createguildinfo") {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wGrow Guilds|left|242|\nadd_label|small|`9Welcome to Grow Guilds where you can create a Guild! With a Guild you can level up the Guild to add more members!``|left|4|\n\nadd_spacer|small|\nadd_textbox|`9You will be charged `6250,000 `9Gems!``|\nadd_spacer|small|\nadd_button|createguild|`oCreate a Guild``|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								/*	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT]`1 Guilds are going to work on update 3.0!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;*/
							}

							if (btn == "createguild") {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wGrow Guild Creation``|left|242|\nadd_spacer|small|\nadd_text_input|gname|Guild Name: ||20|\nadd_text_input|gstatement|Guild Statement: ||100|\nadd_text_input|ggcflagbg|`oGuild Flag Background ID:``||5|\nadd_text_input|ggcflagfg|`oGuild Flag Foreground ID:``||5|\nadd_spacer|small|\nadd_textbox|`oConfirm your guild settings by selecting `2Create Guild `obelow to create your guild.|\nadd_spacer|small|\nadd_textbox|`8Remember`o: A guild can only be created in a world owned by you and locked with a `5World Lock`o!|\nadd_spacer|small|\nadd_textbox|`4Warning! `oThe guild name cannot be changed once you have confirmed the guild settings!|\nadd_quick_exit|\nadd_spacer|small|\nend_dialog|guildconfirm|Cancel|Create Guild|\n"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}

							if (btn.substr(0, 10) == "offlinegm_") {
								((PlayerInfo*)(peer->data))->lastgm = btn.substr(10, cch.length() - 10 - 1);
								if (btn.substr(10, cch.length() - 10 - 1) == ((PlayerInfo*)(peer->data))->guildLeader) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastgm + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgm + " is `4offline`o.``|\nadd_spacer|small| \nadd_button|guildoffline|`oBack``|0|0|\nadd_quick_exit|"));
									ENetPacket * packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastgm + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgm + " is `4offline`o.``|\nadd_spacer|small|\nadd_button|removegmoffline|`oKick from the guild``|0|0|\nadd_button|guildoffline|`oBack``|0|0|\nadd_quick_exit|"));
									ENetPacket * packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
							}

							if (btn == "removegmoffline") {
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->guild == ((PlayerInfo*)(peer->data))->guild) {
										std::ifstream ifff("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
										if (ifff.fail()) {
											ifff.close();
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oGuild does not exist! If you are seeing this message, please take a screenshot and send it to a developer!"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										if (ifff.is_open()) {
										}
										json j;
										ifff >> j; //load

										vector<string> gmlist;

										for (int i = 0; i < j["Member"].size(); i++) {
											gmlist.push_back(j["Member"][i]);
										}

										gmlist.erase(std::remove(gmlist.begin(), gmlist.end(), ((PlayerInfo*)(peer->data))->lastgm), gmlist.end());


										j["Member"] = gmlist; //edit

										std::ofstream o("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json"); //save
										if (!o.is_open()) {
											cout << GetLastError() << endl;
											_getch();
										}

										o << j << std::endl;



										std::ifstream iffff2("players/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->lastgm) + ".json");

										json jj2;

										if (iffff2.fail()) {
											iffff2.close();
											continue;
										}
										if (iffff2.is_open()) {


										}

										iffff2 >> jj2; //load

										std::ofstream oo2("players/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->lastgm) + ".json");
										if (!oo2.is_open()) {
											cout << GetLastError() << endl;
											_getch();
										}
										jj2["guild"] = "";
										jj2["joinguild"] = false;
										oo2 << jj2 << std::endl;



										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `2" + ((PlayerInfo*)(peer->data))->lastgm + "`o has been kicked from the guild!"));
										ENetPacket * packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);
										delete p.data;
									}
								}
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`4Guild Member removed``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgm + " is no longer in the guild.``|\n\nadd_spacer|small|\nadd_button|guildportalbutton|`oOK``|0|0|\nadd_quick_exit|"));
								ENetPacket * packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;

							}
							if (btn == "removegmonline") {
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastgm) {
										std::ifstream ifff("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json");
										if (ifff.fail()) {
											ifff.close();
											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oGuild does not exist! If you are seeing this message, please take a screenshot and send it to a developer!"));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;
											continue;
										}
										if (ifff.is_open()) {
										}
										json j;
										ifff >> j; //load

										vector<string> gmlist;

										for (int i = 0; i < j["Member"].size(); i++) {
											gmlist.push_back(j["Member"][i]);
										}

										gmlist.erase(std::remove(gmlist.begin(), gmlist.end(), ((PlayerInfo*)(peer->data))->lastgm), gmlist.end());


										j["Member"] = gmlist; //edit

										std::ofstream o("guilds/" + PlayerDB::getProperName(((PlayerInfo*)(peer->data))->guild) + ".json"); //save
										if (!o.is_open()) {
											cout << GetLastError() << endl;
											_getch();
										}

										o << j << std::endl;
										((PlayerInfo*)(currentPeer->data))->guildBg = 0;
										((PlayerInfo*)(currentPeer->data))->guildFg = 0;
										((PlayerInfo*)(currentPeer->data))->guildLeader = "";
										((PlayerInfo*)(currentPeer->data))->guild = "";
										((PlayerInfo*)(currentPeer->data))->guildStatement = "";
										//((PlayerInfo*)(currentPeer->data))->guildRole = 0;
										((PlayerInfo*)(currentPeer->data))->guildlast = "";
										((PlayerInfo*)(currentPeer->data))->lastgm = "";
										((PlayerInfo*)(currentPeer->data))->lastgmname = "";
										((PlayerInfo*)(currentPeer->data))->joinguild = false;
										((PlayerInfo*)(currentPeer->data))->lastgmworld = "";
										((PlayerInfo*)(currentPeer->data))->guildMembers.clear();
										updateInvis(currentPeer);
										updateInvis(peer);


										std::ifstream iffff2("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");

										json jj2;

										if (iffff2.fail()) {
											iffff2.close();
											continue;
										}
										if (iffff2.is_open()) {


										}

										iffff2 >> jj2; //load

										std::ofstream oo2("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");
										if (!oo2.is_open()) {
											cout << GetLastError() << endl;
											_getch();
										}
										jj2["guild"] = "";
										jj2["joinguild"] = false;
										oo2 << jj2 << std::endl;


										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `oYou have been kicked from the guild by `2" + ((PlayerInfo*)(peer->data))->displayName + "`o."));
										ENetPacket * packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);
										delete p.data;
									}
									if (((PlayerInfo*)(currentPeer->data))->guild == ((PlayerInfo*)(peer->data))->guild) {
										updateGuild(currentPeer);
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GUILD ALERT] `2" + ((PlayerInfo*)(peer->data))->lastgmname + "`o has been kicked from the guild!"));
										ENetPacket * packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);
										delete p.data;
									}
								}
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`4Guild Member removed``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgmname + " is no longer in the guild.``|\n\nadd_spacer|small|\nadd_button|guildportalbutton|`oOK``|0|0|\nadd_quick_exit|"));
								ENetPacket * packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}



							if (btn == "skiptutorial") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Now create your GrowID!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								int x = ((PlayerInfo*)(peer->data))->x;
								int y = ((PlayerInfo*)(peer->data))->y;
								GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 48), x, y));

								ENetPacket* packetd = enet_packet_create(psp.data,
									psp.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packetd);
							}
							if (btn == "tutorial") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wChoose destination|left|6128|\nadd_spacer|small|\nadd_button|how2item|`wHow to get any item?|0|0|\nadd_button|how2gem|`wHow to get `2Gems`w?|0|0|\nadd_button|how2level|`wHow to get `2Level`w?|0|0|\nadd_label|small|`wTo see all commands type `2/help `wor `2/?`w.|left|\nadd_spacer|small|\nadd_button|skiptutorial|`2Thanks|0|0|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								//enet_host_flush(server);
								delete p.data;
							}
							if (btn == "how2item") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wHow to get any item?|left|1970|\nadd_label|small|`wAlmost every item is free!|left|\nadd_spacer|small|\nadd_label|small|`wType `2/find `wand enter the item name to get item!|left|\nadd_spacer|small|\nadd_button|backtutorial|`wBack!|0|0|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								//enet_host_flush(server);
								delete p.data;
							}
							if (btn == "how2gem") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wHow to get gem?|left|112|\nadd_spacer|small|\nadd_label|small|`wBreaking blocks will give you `21-5 `wgems!|left|\nadd_spacer|small|\nadd_label|small|`wYou can buy items with gems!|left|\nadd_spacer|\nadd_button|backtutorial|`wBack!|0|0|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								//enet_host_flush(server);
								delete p.data;
							}
							if (btn == "how2level") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wHow to get level?|left|18|\nadd_spacer|small|\nadd_label|small|`wBreaking blocks will give you `21 `wxp collect `2300 `wxp to level up!|left|\nadd_spacer|small|\nadd_label|small|`wYou can get `1Blue Name `wwith being 100 level!|left|\nadd_spacer|\nadd_button|backtutorial|`wBack!|0|0|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								//enet_host_flush(server);
								delete p.data;
							}
							if (btn == "confirmcreateguild") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 249000)
								{
									int gemcalc10k = b - 250000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;
									GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You created guild!"));
									//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
									ENetPacket* packetto = enet_packet_create(pto.data,
										pto.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetto);
									delete pto.data;



									string guildName = ((PlayerInfo*)(peer->data))->createGuildName;
									string guildStatement = ((PlayerInfo*)(peer->data))->createGuildStatement;
									string fixedguildName = PlayerDB::getProperName(guildName);
									string guildFlagbg = ((PlayerInfo*)(peer->data))->createGuildFlagBg;
									string guildFlagfg = ((PlayerInfo*)(peer->data))->createGuildFlagFg;

									//guildmem.push_back(((PlayerInfo*)(peer->data))->rawName);

									std::ofstream o("guilds/" + fixedguildName + ".json");
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}
									json j;
									vector<string> test1s;
									vector<string>test2s;

									((PlayerInfo*)(peer->data))->guildMembers.push_back(((PlayerInfo*)(peer->data))->rawName);
									j["GuildName"] = ((PlayerInfo*)(peer->data))->createGuildName;
									j["GuildRawName"] = fixedguildName;
									j["GuildStatement"] = ((PlayerInfo*)(peer->data))->createGuildStatement;
									j["Leader"] = ((PlayerInfo*)(peer->data))->rawName;
									j["Co-Leader"] = test1s;
									j["Elder-Leader"] = test2s;
									j["Member"] = ((PlayerInfo*)(peer->data))->guildMembers;
									j["GuildLevel"] = 0;
									j["GuildExp"] = 0;
									j["GuildWorld"] = ((PlayerInfo*)(peer->data))->currentWorld;
									j["backgroundflag"] = stoi(((PlayerInfo*)(peer->data))->createGuildFlagBg);
									j["foregroundflag"] = stoi(((PlayerInfo*)(peer->data))->createGuildFlagFg);
									o << j << std::endl;







									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj;

									if (iffff.fail()) {
										iffff.close();
										continue;
									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load

									std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}
									jj["guild"] = guildName;
									jj["joinguild"] = true;
									oo << jj << std::endl;






									updateInvis(peer);


									((PlayerInfo*)(peer->data))->guild = guildName;
									((PlayerInfo*)(peer->data))->joinguild = true;
									/*for (int i = 0; i < world->width * world->height; i++)
									{

										if (world->items[i].foreground == 242) {
											world->items[i].foreground = 5814;
										}
									}*/
									Player::OnAddNotification(peer, "`2You successfully created a guild!", "audio/hub_open.wav", "interface/science_button.rttex");

									enet_peer_disconnect_later(peer, 0);

								}
								else {
									GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You don't have enough gems."));
									//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
									ENetPacket* packetto = enet_packet_create(pto.data,
										pto.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetto);
									delete pto.data;
								}
							}
							if (btn == "backtutorial") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wChoose destination|left|6128|\nadd_spacer|small|\nadd_button|how2item|`wHow to get any item?|0|0|\nadd_button|how2gem|`wHow to get `2Gems`w?|0|0|\nadd_button|how2level|`wHow to get `2Level`w?|0|0|\nadd_label|small|`wTo see all commands type `2/help `wor `2/?`w.|left|\nadd_spacer|small|\nadd_button|skiptutorial|`2Thanks|0|0|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								//enet_host_flush(server);
								delete p.data;
							}
							if (btn == "dotradedialog")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wTrade Menu``|left|242|\nadd_label|small|\nadd_button_with_icon|dotrade|Do the Trade!|noflags|1424||\nadd_button|decline|`4Cancel/Decline|noflags||\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "decline")
							{
								string sellerName = ((PlayerInfo*)(peer->data))->lastSeller;
								string sellingworld = ((PlayerInfo*)(peer->data))->lastSellWorld;
								int gemsforworld = ((PlayerInfo*)(peer->data))->lastTradeAmount;

								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;

									if (((PlayerInfo*)(currentPeer->data))->rawName == sellerName) {
										if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;

										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Player `3'" + ((PlayerInfo*)(peer->data))->rawName + "'`4 declined `2your world '" + sellingworld + "'trading!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										delete p.data;

										((PlayerInfo*)(currentPeer->data))->lastSeller = "";
										((PlayerInfo*)(currentPeer->data))->lastSellWorld = "";
										((PlayerInfo*)(currentPeer->data))->lastTradeAmount = 99999999999;
										((PlayerInfo*)(currentPeer->data))->lastBuyer = "";

										break;
									}
								}


								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You successfully `4decline`2 this world called '" + sellingworld + "' trading"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;

								((PlayerInfo*)(peer->data))->lastSeller = "";
								((PlayerInfo*)(peer->data))->lastSellWorld = "";
								((PlayerInfo*)(peer->data))->lastTradeAmount = 99999999999;
								((PlayerInfo*)(peer->data))->lastBuyer = "";

							}
							if (btn == "dotrade")
							{


								string sellerName = ((PlayerInfo*)(peer->data))->lastSeller;
								string sellingworld = ((PlayerInfo*)(peer->data))->lastSellWorld;
								int gemsforworld = ((PlayerInfo*)(peer->data))->lastTradeAmount;
								string lastbuyerName = ((PlayerInfo*)(peer->data))->rawName;




								ifstream fdseller("gemdb/" + sellerName + ".txt");
								ifstream fdbuyer("gemdb/" + lastbuyerName + ".txt");
								int nowseller;
								int nowbuyer;
								fdseller >> nowseller;
								fdbuyer >> nowbuyer;
								fdseller.close();
								fdbuyer.close();

								if (nowbuyer < gemsforworld)
								{
									GamePacket pError = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You don't how enought gems`3 to buy '`2" + sellingworld + "`3' world for `2" + to_string(gemsforworld) + "`3 gems"));
									ENetPacket* packetError = enet_packet_create(pError.data,
										pError.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packetError);
									delete pError.data;


									((PlayerInfo*)(peer->data))->lastSeller = "";
									((PlayerInfo*)(peer->data))->lastSellWorld = "";
									((PlayerInfo*)(peer->data))->lastTradeAmount = 99999999999;
									((PlayerInfo*)(peer->data))->lastBuyer = "";

									ENetPeer* currentPeerError;

									for (currentPeerError = server->peers;
										currentPeerError < &server->peers[server->peerCount];
										++currentPeerError)
									{
										if (currentPeerError->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(currentPeerError->data))->rawName == sellerName) {
											if (((PlayerInfo*)(currentPeerError->data))->haveGrowId == false) continue;

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`7Player `3" + ((PlayerInfo*)(peer->data))->rawName + "`4 doesn't have '`8" + to_string(gemsforworld) + "`7' to buy your world '`8" + sellingworld + "'"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeerError, 0, packet);
											delete p.data;

											((PlayerInfo*)(currentPeerError->data))->lastSeller = "";
											((PlayerInfo*)(currentPeerError->data))->lastSellWorld = "";
											((PlayerInfo*)(currentPeerError->data))->lastTradeAmount = 99999999999;
											((PlayerInfo*)(currentPeerError->data))->lastBuyer = "";

											break;
										}
									}


									continue;
								}

								nowseller += gemsforworld;
								nowbuyer -= gemsforworld;

								ofstream ofseller("gemdb/" + sellerName + ".txt");
								ofseller << nowseller;
								ofseller.close();

								ofstream ofbuyer("gemdb/" + lastbuyerName + ".txt");
								ofbuyer << nowbuyer;
								ofbuyer.close();



								string text = "action|play_sfx\nfile|audio/keypad_hit.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);


								ENetPacket* packettrd = enet_packet_create(data,
									5 + text.length(),
									ENET_PACKET_FLAG_RELIABLE);

								ENetPeer* currentPeerp;

								for (currentPeerp = server->peers;
									currentPeerp < &server->peers[server->peerCount];
									++currentPeerp)
								{
									if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeerp))
										enet_peer_send(currentPeerp, 0, packettrd);
								}


								/*	GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), nowbuyer));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;*/

								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;

									if (((PlayerInfo*)(currentPeer->data))->rawName == sellerName) {
										if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;

										GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), nowseller));
										ENetPacket* packetpp2 = enet_packet_create(pp.data,
											pp.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packetpp2);
										delete pp.data;

										((PlayerInfo*)(currentPeer->data))->worldsowned.erase(std::remove(((PlayerInfo*)(currentPeer->data))->worldsowned.begin(), ((PlayerInfo*)(currentPeer->data))->worldsowned.end(), sellingworld), ((PlayerInfo*)(currentPeer->data))->worldsowned.end());

										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You successfully sold your world called '`8" + sellingworld + "`2' for `8" + to_string(gemsforworld) + "`2 gems"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										delete p.data;

										/*	GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), ((PlayerInfo*)(currentPeer->data))->tankIDName));
											memcpy(p7.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4); // ffloor
											((PlayerInfo*)(currentPeer->data))->displayName = ((PlayerInfo*)(currentPeer->data))->displayNamebackup;

											ENetPacket* packet7 = enet_packet_create(p7.data,
												p7.len,
												ENET_PACKET_FLAG_RELIABLE);

											delete p7.data;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer)) {
													if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
														enet_peer_send(currentPeer, 0, packet7);
													}
												}
											}*/


										((PlayerInfo*)(currentPeer->data))->lastSeller = "";
										((PlayerInfo*)(currentPeer->data))->lastSellWorld = "";
										((PlayerInfo*)(currentPeer->data))->lastTradeAmount = 99999999999;
										((PlayerInfo*)(currentPeer->data))->lastBuyer = "";


										sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
										sendWorldOffers(currentPeer);
										((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";

										break;
									}
								}




								GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), nowbuyer));
								ENetPacket* packetpp2 = enet_packet_create(pp.data,
									pp.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packetpp2);
								delete pp.data;

								WorldInfo* boughtworld = getPlyersWorld(peer);
								boughtworld->owner = ((PlayerInfo*)(peer->data))->rawName;
								boughtworld->Displayowner = ((PlayerInfo*)(peer->data))->rawName;
								boughtworld->isPublic = false;
								((PlayerInfo*)(peer->data))->worldsowned.push_back(sellingworld);


								std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


								if (ifff.fail()) {
									ifff.close();


								}
								if (ifff.is_open()) {
								}
								json j;
								ifff >> j; //load


								j["worldsowned"] = ((PlayerInfo*)(peer->data))->worldsowned; //edit




								std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
								if (!o.is_open()) {
									cout << GetLastError() << endl;
									_getch();
								}

								o << j << std::endl;


								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You successfully bought this world called '`8" + sellingworld + "`2' for `8" + to_string(gemsforworld) + "`2 gems"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;

								/*	GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName));
									memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									((PlayerInfo*)(peer->data))->displayName = "`2[`^World-Owner`2] " + ((PlayerInfo*)(peer->data))->tankIDName;

									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);

									delete p7.data;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {
											{
												enet_peer_send(currentPeer, 0, packet7);

											}
										}
									}*/

								((PlayerInfo*)(peer->data))->lastSeller = "";
								((PlayerInfo*)(peer->data))->lastSellWorld = "";
								((PlayerInfo*)(peer->data))->lastTradeAmount = 99999999999;
								((PlayerInfo*)(peer->data))->lastBuyer = "";

								sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
								sendWorldOffers(peer);
								((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
							}


							if (btn == "btnitemstrade")
							{

								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);


								delete p2.data;


							}



							if (btn == "btntradeworld") {
								if (((PlayerInfo*)(peer->data))->rawName == world->owner)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wTrade Options``||18||\nadd_textbox|`oHow many gems for this world?: |\nadd_text_input|worldoffer|||7|\nend_dialog|reqoffer|Cancel|SEND TRADE|\n"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									delete p.data;
								}
								else
								{

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4This feature is available only for the owner of the world!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "worldPrivate") {
								if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT") {
									if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner) {
										getPlyersWorld(peer)->isPublic = false;

										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wWorld properties changed. Set world to: Private!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
								}
							}
							if (btn == "allowMod") {
								if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT") {
									if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner)
									{
										getPlyersWorld(peer)->allowMod = true;

										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wWorld properties changed. World flags modified -> ALLOW-MOD = TRUE!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
								}
							}
							if (btn == "allowMod1")
							{
								if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT") {

									if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner) {
										getPlyersWorld(peer)->allowMod = false;

										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wWorld properties changed. World flags modified -> ALLOW-MOD = FALSE!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;


										ENetPeer* currentPeer;


										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;

											if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT") {
												if (((PlayerInfo*)(peer->data))->currentWorld == ((PlayerInfo*)(currentPeer->data))->currentWorld) {

													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Owner `ohas `4disabled `5Mod-Noclip `oin this world."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet);
													delete p.data;


													if (((PlayerInfo*)(currentPeer->data))->rawName != getPlyersWorld(peer)->owner && ((PlayerInfo*)(currentPeer->data))->adminLevel < 777)
													{
														((PlayerInfo*)(currentPeer->data))->canWalkInBlocks = false;
														((PlayerInfo*)(currentPeer->data))->skinColor = 0x8295C3FF;
														sendClothes(currentPeer);
														sendState(currentPeer);


														((PlayerInfo*)(currentPeer->data))->canWalkInBlocks = true;
													}

												}
											}
										}
									}
								}
							}
							if (isFindDialog && btn.substr(0, 4) == "tool") {

								int id = atoi(btn.substr(4, btn.length() - 4).c_str());
								size_t invsize = ((PlayerInfo*)(peer->data))->currentInventorySize;


								if (id == 242 || id == 1796 || id == 2408 || id == 7188 || id == 4428 || id == 5086) {

									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! You must first `2purchase `othis item to use it!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;


									continue;




								}







								if (id == 9310) {

									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! This item is `4Unobtainable`o!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;


									continue;




								}


								if (id == 9356) {
									if (((PlayerInfo*)(peer->data))->rawName == "dyro" || ((PlayerInfo*)(peer->data))->rawName == "Dyro") {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^You Have Received `#Dyro Wings`^!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										bool success = true;
										SaveShopsItemMoreTimes(9356, 1, peer, success);



									}
									else {
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! This item is only available for `#Dyro`o!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;
										continue;
									}
								}










								if (id == 9412) {
									if (((PlayerInfo*)(peer->data))->rawName == "luc1fer" || ((PlayerInfo*)(peer->data))->rawName == "Luc1fer") {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^You Have Received `wLuc1fer `9Wings`^!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										bool success = true;
										SaveShopsItemMoreTimes(9412, 1, peer, success);



									}
									else {
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! This item is only available for `wLuc1fer`o!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;
										continue;
									}
								}











								if (id == 9306) {

									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! You must first `2purchase `othis item to use it!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;


									continue;




								}



								if (id == 8470) {

									int emerald = ((PlayerInfo*)(peer->data))->emerald;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Craft `2Dirt Lock`6!``|left|8470|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oYou have: `1" + to_string(emerald) + " `2Emerald's`0!|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9First ever in the game custom Lock! The `2Dirt Lock! `9Amazing looking + Special floating effects!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo craft this item you need `910 `2Emerald's`o!|left|8|\nadd_spacer|small|\nadd_button|craftdirtlock|`9Craft Item!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}




								if (id == 9290) {

									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! You must first `2purchase `othis item to use it!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;


									continue;




								}

								if (id == 9170) {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `9Magic Machine``|left|9170|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Really heavy and powerfull machine! `9Who knows what it does?... But the creators are sure that it will lead to profit!|\nadd_spacer|small|\nadd_button|buymagicmachine|`7Buy `9Magic Machine `7[`46`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}



								if (id == 1008) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `eATM `3Machine``|left|1008|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`3ATM Machines `1Can give you over `45-10 `2Gems `1Per PUNCH`^!|\nadd_spacer|small|\nadd_button|buyatm|`7Buy `eATM Machine `7[`410`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}


								if (id == 1636) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `#Unicorn``|left|1636|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`#Unicorns `1Can give you over `40-3 `9Crystals `1Per PUNCH`^! `#This item is permanent`^!|\nadd_spacer|small|\nadd_button|buyunicorn|`7Buy `#Unicorn `7[`49`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}






								if (id == 7328) {

									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! This item is too rare!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;

								}


								if (id == 9418) {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `#Gem Storage``|left|9418|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`^Really usefull block! Allows you to `9Store Gems`^! Theres `@No Limits`^ For it!|\nadd_spacer|small|\nadd_button|buygemstorage|`7Buy `#Gem Storage `7[`430`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}


								if (id == 9416) {

									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! This item is too rare!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;

								}





								if (id == 9410) {

									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! This item is too rare!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;

								}




								if (id == 1458) {

									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! This item is too rare!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;

								}



								if (id == 9408) {

									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! This item is too rare!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;

								}





								if (id == 3402) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `9Golden Booty Chest``|left|3402|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`^Only `9Obtainable `^During `#Valentine`^, Gives `4Great `9Loot`^!|\nadd_spacer|small|\nadd_button|buygbc|`7Buy `9GBC `7[`41`e WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}






								if (id == 9414) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `eOcean Chest``|left|9414|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`^Only `9Obtainable `^During `#February, March, April, May`^, Gives `4Great `9Loot`^! `9Small Chance To Obtain `4Rare `9Items `w[`eOcean Wings`9, `eOcean Sword`w]|\nadd_spacer|small|\nadd_button|buyocean|`7Buy `9Ocean Chest `7[`410`e WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;



								}














								if (id == 6204 || id == 6202 || id == 6200 || id == 7484 || id == 7954) {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`#Welcome To `oChest's `2Store`w!``|left|5954|\nadd_button_with_icon|bronzechest||staticBlueFrame|6204|\nadd_button_with_icon|silverchest||staticBlueFrame|6202|\nadd_button_with_icon|goldchest||staticBlueFrame|6200|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_label_with_icon|small|`5Special `oChest's``|left|5954|\nadd_button_with_icon|winterchest||staticBlueFrame|7484|\nadd_button_with_icon|springchest||staticBlueFrame|7954|\nadd_quick_exit|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;


									continue;




								}





								if (id == 9308) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^You Have Received `4Lava Lock`^!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									bool success = true;
									SaveShopsItemMoreTimes(9308, 1, peer, success);
									continue;
								}






								if (id == 9222) {
									if (((PlayerInfo*)(peer->data))->isCreator == true) {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Plasma Eyes `2Enabled`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										((PlayerInfo*)(peer->data))->cloth_face = 9222;
										sendClothes(peer);
										continue;
									}
									else {
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! Your rank is too low for that item!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;
										continue;
									}
								}



								if (id == 9250) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Expensive Cape `2Enabled`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									((PlayerInfo*)(peer->data))->cloth_back = 9250;
									sendClothes(peer);
									((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
									continue;
								}




								if (id == 9288) {
									if (((PlayerInfo*)(peer->data))->isCreator == true) {

									}
									else {
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! Your rank is too low for that item!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;
										continue;
									}



								}
								if (id == 9218) {
									if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Guardian Wings `2Enabled`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										((PlayerInfo*)(peer->data))->cloth_back = 9218;
										sendClothes(peer);
										((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
										continue;
									}
									else {
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! Your rank is too low for that item!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;
										continue;
									}
								}


								if (id == 9358) {

									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! This Block Cannot be taken from here!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;


									continue;



								}




								if (id == 9360) {

									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! This Block Cannot be taken from here!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;


									continue;



								}










								if (id == 9240) {

									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! This Block Cannot be taken from here!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;


									continue;



								}



								if (id == 4762 || id == 7382) {

									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! You must first `2purchase `othese block's to use it!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;
								}


								if (id == 6866 || id == 6868 || id == 6870 || id == 6872 || id == 6874 || id == 6876) {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! Your rank is too low for that item!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;
								}














							



								
								if (id == 6878) {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! Your rank is too low for that item!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;
								}









								if (id == 2480) {

									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! You must first `2purchase `othis item to use it!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;


									continue;
								}




								if (id == 9032) {

									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oThis `4Scythe `oIs Disabled!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;


									continue;
								}

								if (id == 8452) {

									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oThis `1Item `oMust be `8Crafted!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;


									continue;




								}
























								if (id == 1874 || id == 1876 || id == 1904 || id == 1932 || id == 1900 || id == 1986 || id == 1996 || id == 2970 || id == 3140 || id == 3174 || id == 6028 || id == 6846 || id == 8962) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`#Welcome To `4Ring's `2Store`w!``|left|1900|\nadd_button_with_icon|ringofforce||staticBlueFrame|1874|\nadd_button_with_icon|ringofwinds||staticBlueFrame|1876|\nadd_button_with_icon|ringofwater||staticBlueFrame|2970|\nadd_button_with_icon|ringofgemini||staticBlueFrame|1986|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_button_with_icon|ringoffistful||staticBlueFrame|1932|\nadd_button_with_icon|ringofwisdom||staticBlueFrame|1996|\nadd_button_with_icon|ringofsavings||staticBlueFrame|3140|\nadd_button_with_icon|ringofnature||staticBlueFrame|6846|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_button_with_icon|ringofsmithing||staticBlueFrame|3174|\nadd_button_with_icon|ringofnight||staticBlueFrame|8962|\nadd_button_with_icon|ringofshrinking||staticBlueFrame|6028|\nadd_button_with_icon|theonering||staticBlueFrame|1904|\nadd_quick_exit|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}







































								if (id == 3764) {

									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oThis `2Item `oMust be `2purchased `oIn order to use it!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;


									continue;




								}

								if (id == 8) {
									if (((PlayerInfo*)(peer->data))->isCreator != true) {
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Soory!|left|1048|\nadd_spacer|small|\nadd_textbox|`oThis `2Block `o Is too `4Heavy`o For you! You should try to find another way to get it...|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;


										continue;
									}

									else {

										bool success = true;
										SaveShopsItem(8, 200, peer, success);
										if (!success)continue;
										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have received `9200 `#Bedrocks`0!"), "audio/hub_open.wav"), 0));
										ENetPacket * packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete ps2.data;
										continue;


									}


								}

								if (id == 9058) {
									if (((PlayerInfo*)(peer->data))->adminLevel != 1000) {
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Soory!|left|1048|\nadd_spacer|small|\nadd_textbox|`oThis `2Item `o Is not available for players!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;


										continue;
									}

									else {

										bool success = true;
										SaveShopsItem(9058, 1, peer, success);
										if (!success)continue;
										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have received `4Cursed Katana`0!"), "audio/hub_open.wav"), 0));
										ENetPacket * packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete ps2.data;
										continue;


									}


								}




								if (id == 5132 || id == 7166 || id == 5078 || id == 5080 || id == 5082 || id == 5084 || id == 5126 || id == 5128 || id == 5130 || id == 5144 || id == 5146 || id == 5148 || id == 5150 || id == 5162 || id == 5164 || id == 5166 || id == 5168 || id == 5180 || id == 5182 || id == 5184 || id == 5186 || id == 7168 || id == 7170 || id == 7172 || id == 7174 || id == 8834 || id == 7912 || id == 9212 || id == 5134 || id == 5152 || id == 5170 || id == 5188) {


									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! You must first `2purchase `othis item to use it!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;


									continue;
								}
								if (((PlayerInfo*)(peer->data))->inventory.items.size() == invsize) {


									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! Your inventory is full! You can purchase an inventory upgrade in the shop.|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;


									continue;
								}

								bool iscontains = false;
								for (int i = 0; i < ((PlayerInfo*)(peer->data))->inventory.items.size(); i++)
								{


									if (((PlayerInfo*)(peer->data))->inventory.items.at(i).itemID == id) {


										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`4Whoops!|left|1048|\nadd_spacer|small|\nadd_textbox|`oSoory! Your inventory already contains this item!|\nadd_spacer|small|\nadd_button|close|`5Close|0|0|"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;


										iscontains = true;
									}
								}

								if (iscontains)
								{
									iscontains = false;
									continue;
								}












								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `1Item `4" + to_string(id) + " `1Has been `2Added `1To your inventory!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet);
								delete p.data;

								/* remove inventory	if (((PlayerInfo*)(peer->data))->inventory.items.size() == invsize) {
										PlayerInventory inventory;
										InventoryItem item;
										item.itemID = id;
										item.itemCount = 200;
										inventory.items.push_back(item);
										item.itemCount = 1;
										item.itemID = 18;
										inventory.items.push_back(item);
										item.itemID = 32;
										inventory.items.push_back(item);
										((PlayerInfo*)(peer->data))->inventory = inventory;
										}
										*/

										//find iterptimas i json


								SaveFindsItem(id, 200, peer);

								/*InventoryItem item;
								item.itemID = id;
								item.itemCount = 200;
								((PlayerInfo*)(peer->data))->inventory.items.push_back(item);

							sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);*/
							}






							else if (isFindDialog) {
								string itemLower2;
								vector<ItemDefinition> itemDefsfind;
								for (char c : itemFind) if (c < 0x20 || c>0x7A) goto SKIPFind;
								if (itemFind.length() < 3) goto SKIPFind3;
								for (const ItemDefinition& item : itemDefs)
								{
									string itemLower;
									for (char c : item.name) if (c < 0x20 || c>0x7A) goto SKIPFind2;
									if (!(item.id % 2 == 0)) goto SKIPFind2;
									itemLower2 = item.name;
									std::transform(itemLower2.begin(), itemLower2.end(), itemLower2.begin(), ::tolower);
									if (itemLower2.find(itemLower) != std::string::npos) {
										itemDefsfind.push_back(item);
									}
								SKIPFind2:;
								}
							SKIPFind3:;
								string listMiddle = "";
								string listFull = "";

								for (const ItemDefinition& item : itemDefsfind)
								{
									string kys = item.name;
									std::transform(kys.begin(), kys.end(), kys.begin(), ::tolower);
									string kms = itemFind;
									std::transform(kms.begin(), kms.end(), kms.begin(), ::tolower);
									if (kys.find(kms) != std::string::npos)
										listMiddle += "add_button_with_icon|tool" + to_string(item.id) + "|`$" + item.name + "``|left|" + to_string(item.id) + "||\n";
								}
								if (itemFind.length() < 3) {
									listFull = "add_textbox|`4Word is less than 3 letters!``|\n";
									showWrong(peer, listFull, itemFind);
								}
								else if (itemDefsfind.size() == 0) {
									//listFull = "add_textbox|`4Found no item match!``|\nadd_spacer|small|\n";
									showWrong(peer, listFull, itemFind);

								}
								else {
									GamePacket fff = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`9Found item : " + itemFind + "``|left|3146|\nadd_textbox|Enter a word below to find the item|\nadd_text_input|item|Item Name||20|\nend_dialog|findid|Cancel|Find the item!|\nadd_spacer|big|\n" + listMiddle + "add_quick_exit|\n"));
									ENetPacket* packetd = enet_packet_create(fff.data,
										fff.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packetd);

									//enet_host_flush(server);
									delete fff.data;
								}
							}
						SKIPFind:;
							if (btn == "crash")
							{
								sendConsoleMsg(peer, "`8Your set was removed in order to fix the crash. You can now continue playing, before that, we will need to disconnect you `3ONCE`8.");
								((PlayerInfo*)(peer->data))->cloth_hair = 0;
								((PlayerInfo*)(peer->data))->cloth_shirt = 0;
								((PlayerInfo*)(peer->data))->cloth_pants = 0;
								((PlayerInfo*)(peer->data))->cloth_feet = 0;
								((PlayerInfo*)(peer->data))->cloth_face = 0;
								((PlayerInfo*)(peer->data))->cloth_hand = 0;
								((PlayerInfo*)(peer->data))->cloth_back = 0;
								((PlayerInfo*)(peer->data))->cloth_mask = 0;
								((PlayerInfo*)(peer->data))->cloth_necklace = 0;
								((PlayerInfo*)(peer->data))->cloth_ances = 0;
								sendClothes(peer);
								enet_peer_disconnect_later(peer, 0);
							}


							if (btn == "effect0")
							{
								((PlayerInfo*)(peer->data))->effect = -1; // punch

							}
							if (btn == "effect1")
							{
								((PlayerInfo*)(peer->data))->effect = -500;	 // death ray	

							}
							if (btn == "effect2")
							{
								((PlayerInfo*)(peer->data))->effect = 8421381; // shotgun
								sendState(peer); //here
								sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
							}
							if (btn == "effect3")
							{
								((PlayerInfo*)(peer->data))->effect = 8420386; // Tank
							}
							if (btn == "effect4")
							{
								((PlayerInfo*)(peer->data))->effect = 8420396; // Silver Bow
							}
							if (btn == "effect5")
							{
								((PlayerInfo*)(peer->data))->effect = 8420389; // Rock Hammer
							}
							if (btn == "effect6")
							{
								((PlayerInfo*)(peer->data))->effect = 8421382; // Dragon
							}
							if (btn == "effect7")
							{
								((PlayerInfo*)(peer->data))->effect = -979; // egg
							}
							if (btn == "effect8")
							{
								((PlayerInfo*)(peer->data))->effect = -1017; // idk
							}
							if (btn == "effect9")
							{
								((PlayerInfo*)(peer->data))->effect = -991; // ice drag
							}
							if (btn == "effect10")
							{
								((PlayerInfo*)(peer->data))->effect = -1002; // Focused Eyes
							}
							if (btn == "effect11")
							{
								((PlayerInfo*)(peer->data))->effect = -991; // icedrag
							}
							if (btn == "effect12")
							{
								((PlayerInfo*)(peer->data))->effect = -997; // chaos curse wand
							}
							if (btn == "effect13")
							{
								((PlayerInfo*)(peer->data))->effect = 8420394;
							}
							if (btn == "effect14")
							{
								((PlayerInfo*)(peer->data))->effect = 8421391;
							}
							if (btn == "effect15")
							{
								((PlayerInfo*)(peer->data))->effect = 8421391; // battle trout
							}
							if (btn == "effect16")
							{
								((PlayerInfo*)(peer->data))->effect = -1008; // fiesta
							}
							if (btn == "effect17")
							{
								((PlayerInfo*)(peer->data))->effect = -1007; // squirt
							}
							if (btn == "effect18")
							{
								((PlayerInfo*)(peer->data))->effect = -1006; // key tar
							}
							if (btn == "effect19")
							{
								((PlayerInfo*)(peer->data))->effect = -940; // drag V2
							}
							if (btn == "effect20")
							{
								((PlayerInfo*)(peer->data))->effect = -1004; // lbot
							}
							if (btn == "effect21")
							{
								((PlayerInfo*)(peer->data))->effect = -1003; // l drag
							}
							if (btn == "effect22")
							{
								((PlayerInfo*)(peer->data))->effect = -950; // fiesta
							}
							if (btn == "effect23")
							{
								((PlayerInfo*)(peer->data))->effect = -996; // Green Swe
							}
							if (btn == "effect24")
							{
								((PlayerInfo*)(peer->data))->effect = -977; // Gungir
							}
							if (btn == "effect25")
							{
								((PlayerInfo*)(peer->data))->effect = -964; // Blue Soul
							}
							if (btn == "effect26")
							{
								((PlayerInfo*)(peer->data))->effect = -1011; //Black Shadow Effect

							}
							if (btn == "effect27")
							{
								((PlayerInfo*)(peer->data))->effect = -992; // Black Crystal
							}
							if (btn == "effect28")
							{
								((PlayerInfo*)(peer->data))->effect = -981; // l katana
							}
							if (btn == "effect29")
							{
								((PlayerInfo*)(peer->data))->effect = -978; // Black Holes
							}
							if (btn == "effect30")
							{
								((PlayerInfo*)(peer->data))->effect = 8420397; // Pineapple Blur Effect
							}
							if (btn == "effect31")
							{
								((PlayerInfo*)(peer->data))->effect = -995; // digger spade
							}
							if (btn == "effect32")
							{
								((PlayerInfo*)(peer->data))->effect = 0; //
							}
							if (btn == "effect33")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect34")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect35")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect36")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect37")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect38")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect39")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect40")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect41")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect42")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect43")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect44")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect45")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect46")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect47")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect48")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect49")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect50")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect51")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect52")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect53")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect54")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect55")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect56")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect57")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect58")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect59")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect60")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect61")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect62")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect63")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect64")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect65")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect66")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect67")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect67")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect68")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect69")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect70")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect71")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect72")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect73")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect74")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect75")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect76")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect77")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect78")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect79")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect80")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect81")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect82")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect83")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect84")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect85")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect86")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect87")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect88")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect89")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect90")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect91")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect92")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect93")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect94")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect95")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect96")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect97")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect98")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect99")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect100")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect101")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect102")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect103")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect104")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect105")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect106")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect107")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect108")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect109")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect110")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect111")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect112")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect113")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							if (btn == "effect114")
							{
								((PlayerInfo*)(peer->data))->effect = 0;
							}
							sendState(peer); //here
							sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);

							if (btn == "suspend")
							{
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_textbox|`4Punishment Menu|left|\nadd_spacer|small|\nadd_button|1dban|`w<-- `o1 Day BAN|\nadd_spacer|small|\nadd_button|3dban|`w<-- `o3 Day BAN|\nadd_spacer|small|\nadd_button|7dban|`w<-- `o7 day BAN|\nadd_spacer|small|\nadd_button|30dban|`w<-- `o30 day BAN|\nadd_spacer|small|\nadd_button|banmenu|`w<-- `o730 days BAN|\nadd_spacer|small|\nadd_quick_exit|\n"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}






							if (btn == "1dban") {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								/*ENetPeer* currentPeer;
								string name = ((PlayerInfo*)(peer->data))->rawName;
								string punisher = ((PlayerInfo*)(peer->data))->lastInfoname;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + ((PlayerInfo*)(peer->data))->lastInfoname + " `4BANNED FOR 24 HOURS! **`o (/rules to view rules)"));


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet);

								}

								delete p.data;
								Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4BANNED `0from GrowtopiaOS for 24 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
								autoBan(currentPeer, false, 24);*/
							}



							if (btn == "3dban") {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								/*ENetPeer* currentPeer;
								string name = ((PlayerInfo*)(peer->data))->rawName;
								string punisher = ((PlayerInfo*)(peer->data))->lastInfoname;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + ((PlayerInfo*)(peer->data))->lastInfoname + " `4BANNED FOR 3 DAYS! **`o (/rules to view rules)"));


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet);

								}

								delete p.data;
								Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4BANNED `0from GrowtopiaOS for 3 days", "audio/hub_open.wav", "interface/atomic_button.rttex");
								autoBan(currentPeer, false, 72);*/
							}



							if (btn == "7dban") {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								/*ENetPeer* currentPeer;
								string name = ((PlayerInfo*)(peer->data))->rawName;
								string punisher = ((PlayerInfo*)(peer->data))->lastInfoname;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + ((PlayerInfo*)(peer->data))->lastInfoname + " `4BANNED FOR 7 DAYS! **`o (/rules to view rules)"));


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet);

								}

								delete p.data;
								Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4BANNED `0from GrowtopiaOS for 7 days", "audio/hub_open.wav", "interface/atomic_button.rttex");
								autoBan(currentPeer, false, 168);*/
							}


							if (btn == "30dban") {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								/*ENetPeer* currentPeer;
								string name = ((PlayerInfo*)(peer->data))->rawName;
								string punisher = ((PlayerInfo*)(peer->data))->lastInfoname;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + ((PlayerInfo*)(peer->data))->lastInfoname + " `4BANNED FOR 30 DAYS! **`o (/rules to view rules)"));


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet);

								}

								delete p.data;
								Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4BANNED `0from GrowtopiaOS for 30 days", "audio/hub_open.wav", "interface/atomic_button.rttex");
								autoBan(currentPeer, false, 720);*/
							}


							if (btn == "permanent") {

								if (((PlayerInfo*)(peer->data))->adminLevel >= 888) {

									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + ((PlayerInfo*)(peer->data))->lastInfoname + " `4BANNED FOR 730 DAYS! **`o (/rules to view rules)"));
									ENetPeer* currentPeer;

									cout << "Administrator: " << ((PlayerInfo*)(peer->data))->rawName << " used SUSPEND in wrench on " << ((PlayerInfo*)(peer->data))->lastInfo << endl;

									time_t now = time(0);
									char* dt = ctime(&now);
									//ofstream wrench("chatLogs/wrench.txt", std::ios_base::app);
									//wrench << dt << "Administrator " << ((PlayerInfo*)(peer->data))->rawName << " used SUSPEND on " << ((PlayerInfo*)(peer->data))->lastInfo << endl << endl;
									//wrench.close();

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) {
											if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;


											GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`0Warning from `4System`0: You've been `4BANNED `0from GrowtopiaOS for 730 days"), "audio/hub_open.wav"), 0));
											ENetPacket* packet2 = enet_packet_create(ps2.data,
												ps2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet2);
											GamePacket ps3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWarning from `4System`o: You've been `4BANNED `ofrom GrowtopiaOS for 730 days"));
											ENetPacket* packet3 = enet_packet_create(ps3.data,
												ps3.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet3);
											GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Applied punishment on " + ((PlayerInfo*)(peer->data))->lastInfoname + "."));
											//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
											ENetPacket* packetto = enet_packet_create(pto.data,
												pto.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(peer, 0, packetto);
											if (((PlayerInfo*)(currentPeer->data))->haveGrowId) {

												PlayerInfo* p = ((PlayerInfo*)(currentPeer->data));
												p->ban = 1;
												string username = PlayerDB::getProperName(p->rawName);

												std::ifstream ifff("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");

												if (ifff.fail()) {
													ifff.close();


												}
												if (ifff.is_open()) {
												}
												json j;
												ifff >> j; //load

												int effect = p->effect;
												j["isBanned"] = 1;

												//j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;


												std::ofstream o("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json"); //save
												if (!o.is_open()) {
													cout << GetLastError() << endl;
													_getch();
												}

												o << j << std::endl;

												string bannamed = str.substr(5, cch.length() - 5 - 1);
												std::ofstream outfile("bans/" + bannamed + ".txt");

												outfile << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName;

												outfile.close();
											}


											enet_peer_disconnect_later(currentPeer, 0);


										}
										ENetPacket* packet7 = enet_packet_create(p7.data,
											p7.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet7);
									}
								}
							}































							if (btn == "banbysystem")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 998 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888) {

									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + ((PlayerInfo*)(peer->data))->lastInfoname + " `4AUTO-BANNED BY SYSTEM **"));
									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) {
											if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;

											GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`0Warning from `4System`0: You've been `4BANNED `0from GrowtopiaOS for 730 days"), "audio/hub_open.wav"), 0));
											ENetPacket* packet2 = enet_packet_create(ps2.data,
												ps2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet2);
											GamePacket ps3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWarning from `4System`o: You've been `4BANNED `ofrom GrowtopiaOS for 730 days"));
											ENetPacket* packet3 = enet_packet_create(ps3.data,
												ps3.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet3);
											GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Applied punishment on " + ((PlayerInfo*)(peer->data))->lastInfoname + "."));
											//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
											ENetPacket* packetto = enet_packet_create(pto.data,
												pto.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(peer, 0, packetto);
											if (((PlayerInfo*)(currentPeer->data))->haveGrowId) {

												PlayerInfo* p = ((PlayerInfo*)(currentPeer->data));
												p->ban = 1;
												string username = PlayerDB::getProperName(p->rawName);

												std::ifstream ifff("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");

												if (ifff.fail()) {
													ifff.close();


												}
												if (ifff.is_open()) {
												}
												json j;
												ifff >> j; //load

												int effect = p->effect;
												j["isBanned"] = 1;

												//j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;


												std::ofstream o("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json"); //save
												if (!o.is_open()) {
													cout << GetLastError() << endl;
													_getch();
												}

												o << j << std::endl;

												string bannamed = str.substr(5, cch.length() - 5 - 1);
												std::ofstream outfile("bans/" + bannamed + ".txt");

												outfile << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName;

												outfile.close();
											}


											enet_peer_disconnect_later(currentPeer, 0);


										}
										ENetPacket* packet7 = enet_packet_create(p7.data,
											p7.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet7);

										//enet_host_flush(server);
									}

								}

							}
							if (btn == "ban7")
							{
#pragma warning (disable : 4996)
								// current date/time based on current system
								time_t now = time(0);




								cout << now << endl;


								if (((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888)
								{


									ENetPeer* currentPeerp;

									for (currentPeerp = server->peers;
										currentPeerp < &server->peers[server->peerCount];
										++currentPeerp)
									{
										if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(currentPeerp->data))->rawName)
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wFeature doesnt work yet, in the next update it will work for sure!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
										}

									}
								}
							}
							if (btn == "disconnect")
							{

								if ((((PlayerInfo*)(peer->data))->lastInfo == "sebia")) {
									//cout << "[WARNING]" << endl;
									ENetPeer* currentPeer;
									string name = ((PlayerInfo*)(peer->data))->rawName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										//((PlayerInfo*)(currentPeer->data))->isDuctaped = true;
									}

									delete p.data;
									Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from GrowtopiaOS for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
									autoBan(peer, false, 3);
									continue;

								}

								if (((PlayerInfo*)(peer->data))->adminLevel >= 777)
								{
									cout << "[WARNING]: Player " << ((PlayerInfo*)(peer->data))->rawName << " Used Disconnect On " << ((PlayerInfo*)(peer->data))->lastInfo << "!" << endl;

									time_t now = time(0);
									char* dt = ctime(&now);
									//ofstream wrench("chatLogs/wrench.txt", std::ios_base::app);
									//wrench << dt << "Administrator " << ((PlayerInfo*)(peer->data))->rawName << " used DISCONNECT on " << ((PlayerInfo*)(peer->data))->lastInfo << endl << endl;
									//wrench.close();

									ENetPeer* currentPeerp;

									for (currentPeerp = server->peers;
										currentPeerp < &server->peers[server->peerCount];
										++currentPeerp)
									{
										if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(currentPeerp->data))->rawName)
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Fake disconnected player from server."));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											enet_peer_disconnect_later(currentPeerp, 0);
										}
									}
								}
							}
							if (btn == "freeze")
							{


								if ((((PlayerInfo*)(peer->data))->lastInfo == "sebia")) {
									//cout << "[WARNING]" << endl;
									ENetPeer* currentPeer;
									string name = ((PlayerInfo*)(peer->data))->rawName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										//((PlayerInfo*)(currentPeer->data))->isDuctaped = true;
									}

									delete p.data;
									Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from GrowtopiaOS for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
									autoBan(peer, false, 3);
									continue;

								}


								if (((PlayerInfo*)(peer->data))->adminLevel >= 777)
								{

									cout << "Administrator: " << ((PlayerInfo*)(peer->data))->rawName << " used FREEZE in wrench on " << ((PlayerInfo*)(peer->data))->lastInfo << endl;

									time_t now = time(0);
									char* dt = ctime(&now);
									//ofstream wrench("chatLogs/wrench.txt", std::ios_base::app);
									//wrench << dt << "Administrator " << ((PlayerInfo*)(peer->data))->rawName << " used FREEZE on " << ((PlayerInfo*)(peer->data))->lastInfo << endl << endl;
									//wrench.close();

									ENetPeer* currentPeerp;

									for (currentPeerp = server->peers;
										currentPeerp < &server->peers[server->peerCount];
										++currentPeerp)
									{
										if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(currentPeerp->data))->rawName)
										{
											if (((PlayerInfo*)(currentPeerp->data))->isFrozen == false)
											{
												((PlayerInfo*)(currentPeerp->data))->isFrozen = true;



												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wUsed `!Freeze`w mod on `w" + ((PlayerInfo*)(currentPeerp->data))->displayName));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;

												((PlayerInfo*)(currentPeerp->data))->skinColor = -37500;
												sendClothes(currentPeerp);
												sendFrozenState(currentPeerp);

												GamePacket pf = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wSHUSH... pretty cold here. `!(Frozen)`w mod added."));
												ENetPacket* packetf = enet_packet_create(pf.data,
													pf.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeerp, 0, packetf);
												delete pf.data;
											}
											else
											{
												((PlayerInfo*)(currentPeerp->data))->isFrozen = false;
												sendResetState(currentPeerp);

												GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnSetFreezeState"), 0));
												memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeerp->data))->netID), 4);
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(currentPeerp, 0, packet2);
												delete p2.data;

												((PlayerInfo*)(currentPeerp->data))->skinColor = 0x8295C3FF;
												sendClothes(currentPeerp);


												GamePacket pf = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wLiking it warm... `!(Frozen)`w mod removed."));
												ENetPacket* packetf = enet_packet_create(pf.data,
													pf.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeerp, 0, packetf);
												delete pf.data;

												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`!Unfrozen `wplayer `w" + ((PlayerInfo*)(currentPeerp->data))->displayName));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
											}

										}

										string text = "action|play_sfx\nfile|audio/freeze.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
										memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

										ENetPacket* packetso = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										if (isHere(peer, currentPeerp))
										{
											enet_peer_send(currentPeerp, 0, packetso);
										}
									}
								}
							}
							if (btn == "tape")
							{


								if ((((PlayerInfo*)(peer->data))->lastInfo == "sebia")) {
									//cout << "[WARNING]" << endl;
									ENetPeer* currentPeer;
									string name = ((PlayerInfo*)(peer->data))->rawName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										//((PlayerInfo*)(currentPeer->data))->isDuctaped = true;
									}

									delete p.data;
									Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from GrowtopiaOS for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
									autoBan(peer, false, 3);
									continue;

								}


								if (((PlayerInfo*)(peer->data))->adminLevel >= 777)
								{

									cout << "Administrator: " << ((PlayerInfo*)(peer->data))->rawName << " used MUTE in wrench on " << ((PlayerInfo*)(peer->data))->lastInfo << endl;

									time_t now = time(0);
									char* dt = ctime(&now);
									//ofstream wrench("chatLogs/wrench.txt", std::ios_base::app);
									//wrench << dt << "Administrator " << ((PlayerInfo*)(peer->data))->rawName << " used MUTE on " << ((PlayerInfo*)(peer->data))->lastInfo << endl << endl;
									//wrench.close();

									GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave duct-taped `w" + ((PlayerInfo*)(peer->data))->lastInfoname + "`o's mouth. `#** `o(`4/rules `oto see the rules!)"));
									ENetPeer* currentPeerp;

									for (currentPeerp = server->peers;
										currentPeerp < &server->peers[server->peerCount];
										++currentPeerp)
									{
										if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet7 = enet_packet_create(p7.data,
											p7.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet7);

										if (((PlayerInfo*)(peer->data))->lastInfo == ((PlayerInfo*)(currentPeerp->data))->rawName)
										{
											if (((PlayerInfo*)(currentPeerp->data))->taped == false)
											{
												((PlayerInfo*)(currentPeerp->data))->taped = true;
												((PlayerInfo*)(currentPeerp->data))->isDuctaped = true;
												((PlayerInfo*)(currentPeerp->data))->cantsay = true;
												sendState(currentPeerp);



												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wUsed `btape`w mod on `w" + ((PlayerInfo*)(currentPeerp->data))->displayName));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
											}
											else
											{
												((PlayerInfo*)(currentPeerp->data))->taped = false;
												((PlayerInfo*)(currentPeerp->data))->isDuctaped = false;
												((PlayerInfo*)(currentPeerp->data))->cantsay = false;
												sendState(currentPeerp);
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wUn`btaped`w player."));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
											}
											GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Applied punishment on " + ((PlayerInfo*)(peer->data))->lastInfo));
											//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
											ENetPacket* packetto = enet_packet_create(pto.data,
												pto.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(peer, 0, packetto);
										}

										//enet_host_flush(server);
										string text = "action|play_sfx\nfile|audio/lightning.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
										memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

										ENetPacket* packetso = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										if (isHere(peer, currentPeerp))
										{
											enet_peer_send(currentPeerp, 0, packetso);
										}
									}
								}
							}
							if (btn == "punishview")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish/View player|left|1432|\nadd_spacer|small|\nadd_button|banmenu|`1Punish `w(`4Ban`1/`4Kick`1/`4Fake Disconnect`w)|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|\n"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish/View player|left|1432|\nadd_spacer|small|\nadd_button|banmenu|`1Punish `w(`4Ban`1/`4Kick`1/`4Fake Disconnect`w)|\nadd_button|warnmenu|`1Warn `w(`4Swearing`1/`4Spamming`w)|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|\n"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish/View player|left|1432|\nadd_spacer|small|\nadd_button|banmenu|`1Punish `w(`4Ban`1/`4Kick`1/`4Fake Disconnect`w)|\nadd_button|warnmenu|`1Warn `w(`4Swearing`1/`4Spamming`w)|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|\n"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish/View player|left|1432|\nadd_spacer|small|\nadd_button|banmenu|`1Punish `w(`4Ban`1/`4Kick`1/`4Fake Disconnect`w)|\nadd_button|warnmenu|`1Warn `w(`4Swearing`1/`4Spamming`w)|\nadd_button|view|`1View `w(`4Check IP`1/`4Information`w)|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|\n"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish/View player|left|1432|\nadd_spacer|small|\nadd_button|banmenu|`1Punish `w(`4Ban`1/`4Kick`1/`4Fake Disconnect`w)|\nadd_button|warnmenu|`1Warn `w(`4Swearing`1/`4Spamming`w)|\nadd_button|view|`1View `w(`4Check IP`1/`4Information`w)|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|\n"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
							}
							if (btn == "warnmenu")
							{
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish player|left|1432|\nadd_spacer|small|\nadd_label_with_icon|small|`oEnter the reason below and click Warn Player!|left|486|\nadd_spacer|small|\nadd_text_input|warntext|||50|\nend_dialog|sendwarn|Cancel|Warn Player!|\n"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							if (btn == "view")
							{
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									string name = ((PlayerInfo*)(currentPeer->data))->rawName;
									int pullX = ((PlayerInfo*)(peer->data))->x;
									int pullY = ((PlayerInfo*)(peer->data))->y;


									if (name == ((PlayerInfo*)(peer->data))->lastInfo)
									{
										string showplatid = ((PlayerInfo*)(currentPeer->data))->platformID;
										string showplatidplain;
										if (showplatid == "4")
										{
											showplatidplain = "Android";
										}
										else if (showplatid == "0")
										{
											showplatidplain = "PC (Windows)";
										}
										else if (showplatid == "6")
										{
											showplatidplain = "Mac (OS X)";
										}
										else
										{
											showplatidplain = " UNIX (Linux, iOS (most likely), FreeBSD etc.) ";
										}
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1View player|left|1432|\nadd_spacer|small|\nadd_label|small|`oIP: " + ((PlayerInfo*)(currentPeer->data))->charIP + "|left|\nadd_label|small|`oPlatform: " + showplatidplain + "|left|\nadd_label|small|`oGame Version: " + ((PlayerInfo*)(currentPeer->data))->gameversion + "|left|\nadd_spacer|small|\nadd_button|punishview|`wBack|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|\n"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}
							if (btn == "banmenu")
							{
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1Punish player|left|1432|\nadd_spacer|small|\nadd_button|suspend|`4Suspend|noflags|732|\nadd_button|tape|`bTape player|noflags|408|\nadd_button|disconnect|`6Disconnect|noflags|276|\nadd_button|freeze|`1Freeze|noflags|274|\nadd_spacer|small|\nadd_button|punishview|`wBack|\nadd_spacer|small|\nadd_button|cl0se|`wCancel|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							if (btn == "wban")
							{
								if (((PlayerInfo*)(peer->data))->haveGrowId && ((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || ((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 998 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888)
								{
									ENetPeer* currentPeerp;

									for (currentPeerp = server->peers;
										currentPeerp < &server->peers[server->peerCount];
										++currentPeerp)
									{
										if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
											continue;



										string name = ((PlayerInfo*)(peer->data))->displayName;
										string kickname = ((PlayerInfo*)(peer->data))->lastInfoname;
										//string kickname = ((PlayerInfo*)(peer->data))->displayName;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `4world bans " + "`o" + kickname + " from `w" + world->name + "`o!"));
										string text = "action|play_sfx\nfile|audio/repair.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);

										if (isHere(peer, currentPeerp))
										{
											ENetPacket* packetsou = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);



											enet_peer_send(currentPeerp, 0, packetsou);
											enet_peer_send(currentPeerp, 0, packet);
											delete data;
											delete p.data;
											if (((PlayerInfo*)(currentPeerp->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) // if last wrench
											{


												namespace fs = std::experimental::filesystem;

												if (!fs::is_directory("worldbans/" + getPlyersWorld(peer)->name) || !fs::exists("worldbans/" + getPlyersWorld(peer)->name)) {
													fs::create_directory("worldbans/" + getPlyersWorld(peer)->name);

													std::ofstream outfile("worldbans/" + getPlyersWorld(peer)->name + "/" + ((PlayerInfo*)(currentPeerp->data))->rawName);

													outfile << "worldbanned by: " + ((PlayerInfo*)(peer->data))->rawName;

													outfile.close();
												}
												else
												{
													std::ofstream outfile("worldbans/" + getPlyersWorld(peer)->name + "/" + ((PlayerInfo*)(currentPeerp->data))->rawName);

													outfile << "worldbanned by: " + ((PlayerInfo*)(peer->data))->rawName;

													outfile.close();
												}

												sendPlayerLeave(currentPeerp, (PlayerInfo*)(currentPeerp->data));
												sendWorldOffers(currentPeerp);


												((PlayerInfo*)(currentPeerp->data))->currentWorld = "EXIT";

											}
										}


									}

								}
							}
							if (btn == "autoban")
							{
								// Warning from `4System``: You've been `4BANNED`` from `wGrowtopia`` for 60 days``


							}
							if (btn == "kick")
							{
								if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || ((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 998 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888)
								{
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;



										string name = ((PlayerInfo*)(peer->data))->displayName;
										string kickname = ((PlayerInfo*)(peer->data))->lastInfoname;
										//string kickname = ((PlayerInfo*)(peer->data))->displayName;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `4kicks " + "`w" + kickname));
										string text = "action|play_sfx\nfile|audio/male_scream.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);

										if (isHere(peer, currentPeer))
										{
											ENetPacket* packetsou = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);


											enet_peer_send(currentPeer, 0, packetsou);
											enet_peer_send(currentPeer, 0, packet);


											int x = 3040;
											int y = 736;


											for (int i = 0; i < world->width * world->height; i++)
											{
												if (world->items[i].foreground == 6) {
													x = (i % world->width) * 32;
													y = (i / world->width) * 32;
												}
											}
											GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
											memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);

											if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo)
											{
												enet_peer_send(currentPeer, 0, packet2);
											}



											delete p2.data;
											delete p.data;
											delete data;

										}

									}
								}
							}


							if (btn == "pull")
							{
								if (((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || ((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 998 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888)
								{
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										string name = ((PlayerInfo*)(currentPeer->data))->rawName;
										int pullX = ((PlayerInfo*)(peer->data))->x;
										int pullY = ((PlayerInfo*)(peer->data))->y;


										if (name == ((PlayerInfo*)(peer->data))->lastInfo)
										{
											if (isHere(peer, currentPeer) && getPlyersWorld(peer)->name != "EXIT")
											{
												string name = ((PlayerInfo*)(peer->data))->displayName;
												string pullname = ((PlayerInfo*)(currentPeer->data))->displayName;
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `5pulls " + "`w" + pullname));
												string text = "action|play_sfx\nfile|audio/object_spawn.wav\ndelayMS|0\n";
												BYTE* data = new BYTE[5 + text.length()];
												BYTE zero = 0;
												int type = 3;
												memcpy(data, &type, 4);
												memcpy(data + 4, text.c_str(), text.length());
												memcpy(data + 4 + text.length(), &zero, 1);

												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(currentPeer, 0, packet);
												enet_peer_send(peer, 0, packet);




												ENetPacket* packetsou = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(currentPeer, 0, packetsou);
												enet_peer_send(peer, 0, packetsou);

												GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), pullX, pullY));
												memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(currentPeer, 0, packet2);

												GamePacket pto = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You have been pulled by " + ((PlayerInfo*)(peer->data))->displayName));
												//memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
												ENetPacket* packetto = enet_packet_create(pto.data,
													pto.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(currentPeer, 0, packetto);

												delete pto.data;
												delete p2.data;
												delete p.data;

											}
										}
									}
								}






							}
							if (btn == "backsocialportal") {
								if (((PlayerInfo*)(peer->data))->joinguild == true) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|Social Portal``|left|1366|\n\nadd_spacer|small|\nadd_button|backonlinelist|Show Friends``|0|0|\nadd_button|showguild|Show Guild Members``|0|0|\nadd_button|guildrewards|Guild Rewards``|0|0|\nend_dialog||OK||\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|Social Portal``|left|1366|\n\nadd_spacer|small|\nadd_button|backonlinelist|Show Friends``|0|0|\nadd_button|createguildinfo|Create Guild``|0|0|\nend_dialog||OK||\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
							}

							if (btn == "backonlinelist") {

								string onlinefrnlist = "";
								int onlinecount = 0;
								int totalcount = ((PlayerInfo*)(peer->data))->friendinfo.size();
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;

									string name = ((PlayerInfo*)(currentPeer->data))->rawName;
									if (find(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), name) != ((PlayerInfo*)(peer->data))->friendinfo.end()) {
										onlinefrnlist += "\nadd_button|onlinefrns_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->tankIDName + "``|0|0|";
										onlinecount++;

									}

								}
								if (totalcount == 0) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online``|left|1366|\n\nadd_spacer|small|\nadd_label|small|`1To add friends in `4GTLT `1Click on someone's name and click add as a friend!`o.``|left|4|\n\nadd_spacer|small|\nadd_button||`5Close``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else if (onlinecount == 0) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online``|left|1366|\n\nadd_spacer|small|\nadd_button|chc0|`wClose``|0|0|\nadd_label|small|`oNone of your friends are currently online.``|left|4|\n\nadd_spacer|small|\nadd_button|showoffline|`5Show offline``|0|0|\nadd_button||`5Close``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}

								else {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online``|left|1366|\n\nadd_spacer|small|\nadd_button|chc0|`wClose``|0|0|" + onlinefrnlist + "\n\nadd_spacer|small|\nadd_button|showoffline|`5Show offline``|0|0|\nadd_button||`oClose``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
							}
							if (btn.substr(0, 9) == "onlinegm_") {
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->rawName == btn.substr(9, cch.length() - 9 - 1)) {
										((PlayerInfo*)(peer->data))->lastgmworld = ((PlayerInfo*)(currentPeer->data))->currentWorld;
										((PlayerInfo*)(peer->data))->lastgmname = ((PlayerInfo*)(currentPeer->data))->displayName;
										((PlayerInfo*)(peer->data))->lastgm = ((PlayerInfo*)(currentPeer->data))->rawName;
									}
								}
								if (btn.substr(9, cch.length() - 9 - 1) == ((PlayerInfo*)(peer->data))->rawName) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastgmname + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|This is you!|\n\nadd_spacer|small|\nadd_button|showguild|`oBack``|0|0|\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {
									if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(peer->data))->guildLeader) {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastgmname + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgmname + " is `2online `onow in the world `5" + ((PlayerInfo*)(peer->data))->lastgmworld + "`o.|\n\nadd_spacer|small|\nadd_button|gmwarpbutton|`oWarp to `5" + ((PlayerInfo*)(peer->data))->lastgmworld + "``|0|0|\nadd_button|gmmsgbutton|`5Send message``|0|0|\n\nadd_spacer|small| \nadd_button|removegmonline|Kick from guild|0|0|\nadd_button|showguild|`oBack``|0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastgmname + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastgmname + " is `2online `onow in the world `5" + ((PlayerInfo*)(peer->data))->lastgmworld + "`o.|\n\nadd_spacer|small|\nadd_button|gmwarpbutton|`oWarp to `5" + ((PlayerInfo*)(peer->data))->lastgmworld + "``|0|0|\nadd_button|gmmsgbutton|`5Send message``|0|0|\n\nadd_spacer|small| \nadd_button|showguild|`oBack``|0|0|\nadd_quick_exit|"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}
							if (btn == "showoffline") {
								string onlinelist = "";
								string offlinelist = "";
								string offname = "";
								int onlinecount = 0;
								int totalcount = ((PlayerInfo*)(peer->data))->friendinfo.size();
								vector<string>offliness = ((PlayerInfo*)(peer->data))->friendinfo;

								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									string name = ((PlayerInfo*)(currentPeer->data))->rawName;

									if (find(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), name) != ((PlayerInfo*)(peer->data))->friendinfo.end()) {
										onlinelist += "\nadd_button|onlinefrns_" + ((PlayerInfo*)(currentPeer->data))->rawName + "|`2ONLINE: `o" + ((PlayerInfo*)(currentPeer->data))->displayName + "``|0|0|";
										onlinecount++;

										offliness.erase(std::remove(offliness.begin(), offliness.end(), name), offliness.end());
									}
								}
								for (std::vector<string>::const_iterator i = offliness.begin(); i != offliness.end(); ++i) {
									offname = *i;
									offlinelist += "\nadd_button|offlinefrns_" + offname + "|`4OFFLINE: `o" + offname + "``|0|0|";

								}

								/*if (onlinecount > 0) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online|left|1366|\n\nadd_spacer|small|\nadd_button|chc0|`wClose``|0|0|\n\nadd_spacer|small|\nadd_textbox|All of your friend are online!|\n\nadd_spacer|small| \n\nadd_spacer|small| \nadd_button|frnoption|`oFriend Options``|0|0|\nadd_button|backonlinelist|Back``|0|0|\nadd_button||`oClose``|0|0|\nadd_quick_exit|"));
									ENetPacket * packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {*/
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`o" + std::to_string(onlinecount) + " of " + std::to_string(totalcount) + " `wFriends Online|left|1366|\n\nadd_spacer|small|\nadd_button|chc0|`wClose``|0|0|\nadd_spacer|small|" + offlinelist + "\nadd_spacer|small|\n\nadd_button|frnoption|`oFriend Options``|0|0|\nadd_button|backonlinelist|Back``|0|0|\nadd_button||`oClose``|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;

							}
							if (btn == "removecon") {
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastFrn) {


										((PlayerInfo*)(peer->data))->friendinfo.erase(std::remove(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), ((PlayerInfo*)(peer->data))->lastFrn), ((PlayerInfo*)(peer->data))->friendinfo.end());


										((PlayerInfo*)(currentPeer->data))->friendinfo.erase(std::remove(((PlayerInfo*)(currentPeer->data))->friendinfo.begin(), ((PlayerInfo*)(currentPeer->data))->friendinfo.end(), ((PlayerInfo*)(peer->data))->rawName), ((PlayerInfo*)(currentPeer->data))->friendinfo.end());


										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ALERT: `2" + ((PlayerInfo*)(peer->data))->displayName + " `ohas removed you as a friend."));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);
										delete p.data;
									}
								}
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`4Friend removed``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`oOk, you are no longer friends with `o" + ((PlayerInfo*)(peer->data))->lastFrnName + ".``|\n\nadd_spacer|small|\nadd_button||`oOK``|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							if (btn == "removeconoff") {
								((PlayerInfo*)(peer->data))->friendinfo.erase(std::remove(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), ((PlayerInfo*)(peer->data))->lastFrn), ((PlayerInfo*)(peer->data))->friendinfo.end());

								std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->lastFrn + ".json");
								if (ifff.fail()) {
									ifff.close();
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Error: `oPlayer `5" + ((PlayerInfo*)(peer->data))->lastFrn + " `odoes not exist!"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;
								}
								if (ifff.is_open()) {
								}
								json j;
								ifff >> j; //load

								vector<string> friends;

								for (int i = 0; i < j["friends"].size(); i++) {
									friends.push_back(j["friends"][i]);
								}

								friends.erase(std::remove(friends.begin(), friends.end(), ((PlayerInfo*)(peer->data))->rawName), friends.end());

								j["friends"] = friends; //edit

								std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->lastFrn + ".json"); //save
								if (!o.is_open()) {
									cout << GetLastError() << endl;
									_getch();
								}

								o << j << std::endl;

								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`4Friend removed``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`oOk, you are no longer friends with `o" + ((PlayerInfo*)(peer->data))->lastFrn + ".``|\n\nadd_spacer|small|\nadd_button||`oOK``|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							if (btn.substr(0, 11) == "onlinefrns_") {
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->rawName == btn.substr(11, cch.length() - 11 - 1)) {
										((PlayerInfo*)(peer->data))->lastFrnWorld = ((PlayerInfo*)(currentPeer->data))->currentWorld;
										((PlayerInfo*)(peer->data))->lastFrnName = ((PlayerInfo*)(currentPeer->data))->tankIDName;
										((PlayerInfo*)(peer->data))->lastFrn = ((PlayerInfo*)(currentPeer->data))->rawName;
									}
								}

								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastFrnName + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastFrnName + " is `2online `onow in the world `5" + ((PlayerInfo*)(peer->data))->lastFrnWorld + "`o.|\n\nadd_spacer|small|\nadd_button|frnwarpbutton|`oWarp to `5" + ((PlayerInfo*)(peer->data))->lastFrnWorld + "``|0|0|\nadd_button|msgbutton|`5Send message``|0|0|\n\nadd_spacer|small|\nadd_button|removecon|`oRemove as friend``|0|0|\nadd_button|backonlinelist|`oBack``|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							if (btn == "frnwarpbutton") {
								if (((PlayerInfo*)(peer->data))->lastFrnWorld == "server")
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4 You cannot warp to your friend now! `7Try it later."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet);
									delete p.data;
								}
								else
								{
									sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
									joinWorld(peer, ((PlayerInfo*)(peer->data))->lastFrnWorld, 0, 0);
								}
							}
							if (btn == "msgbutton") {

								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`5Message to `o" + ((PlayerInfo*)(peer->data))->lastFrnName + "|left|660|\nadd_spacer|small|\nadd_text_input|msgtext|||50|\nend_dialog|msgdia|Cancel|`5Send``| \nadd_spacer|big|\nadd_button|backonlinelist|`oBack``|0|0|\nadd_quick_exit|\n"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							if (btn.substr(0, 12) == "offlinefrns_") {
								((PlayerInfo*)(peer->data))->lastFrn = btn.substr(12, cch.length() - 12 - 1);

								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`w" + ((PlayerInfo*)(peer->data))->lastFrn + "``|left|1366|\n\nadd_spacer|small|\nadd_textbox|`o" + ((PlayerInfo*)(peer->data))->lastFrn + " is `4offline`o.``|\nadd_spacer|small|\nadd_button|removeconoff|`oRemove as friend``|0|0|\nadd_button|showoffline|`oBack``|0|0|\nadd_quick_exit|"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}
							if (btn.substr(0, 7) == "nothing") {
								sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
								joinWorld(peer, btn.substr(7, cch.length() - 7 - 1), 0, 0);
							}
							if (btn == "addfriendrnbutton") {
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastInfo) { // if last wrench

										if (((PlayerInfo*)(peer->data))->lastfriend == ((PlayerInfo*)(currentPeer->data))->rawName) { // last  h friend

											((PlayerInfo*)(peer->data))->friendinfo.push_back(((PlayerInfo*)(currentPeer->data))->rawName); //add


											((PlayerInfo*)(currentPeer->data))->friendinfo.push_back(((PlayerInfo*)(peer->data))->rawName);

											string text = "action|play_sfx\nfile|audio/love_in.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);
											ENetPacket* packet2 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet2);
											enet_peer_send(peer, 0, packet2);
											delete data;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ADDED: `oYou're now friends with `w" + ((PlayerInfo*)(peer->data))->rawName + "`o!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											delete p.data;
											GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ADDED: `oYou're now friends with `w" + ((PlayerInfo*)(currentPeer->data))->rawName + "`o!"));
											ENetPacket* packet3 = enet_packet_create(p3.data,
												p3.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet3);
											delete p3.data;
											std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


											if (ifff.fail()) {
												ifff.close();


											}
											if (ifff.is_open()) {
											}
											json j;
											ifff >> j; //load


											j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo; //edit

											std::ifstream ifff2("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json");


											if (ifff2.fail()) {
												ifff2.close();


											}
											if (ifff2.is_open()) {
											}
											json x;
											ifff2 >> x; //load


											x["friends"] = ((PlayerInfo*)(currentPeer->data))->friendinfo; //edit


											std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
											if (!o.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}

											o << j << std::endl;

											std::ofstream a("players/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".json"); //save
											if (!a.is_open()) {
												cout << GetLastError() << endl;
												_getch();
											}

											a << x << std::endl;
										}
										else {
											GamePacket p4 = packetEnd(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`5[`wFriend request sent to " + ((PlayerInfo*)(currentPeer->data))->tankIDName + "`5]"));
											ENetPacket* packet4 = enet_packet_create(p4.data,
												p4.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(peer, 0, packet4);
											delete p4.data;
											string text = "action|play_sfx\nfile|audio/tip_start.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);
											ENetPacket* packet2 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet2);
											delete data;
											((PlayerInfo*)(currentPeer->data))->lastfriend = ((PlayerInfo*)(peer->data))->rawName;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND REQUEST: `oYou've received a `wfriend request `ofrom `w" + ((PlayerInfo*)(peer->data))->rawName + "`o! To accept, click the `wwrench by his/her name `oand then choose `wAdd as friend`o."));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											delete p.data;
										}
									}
								}
							}


							if (btn == "starttrd")
							{
								if (world->owner == ((PlayerInfo*)(peer->data))->rawName && world->isPublic == false)
								{
									if (((PlayerInfo*)(peer->data))->haveGrowId == true)
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_button|chc0|Close|noflags|0|0|\nadd_spacer|small|\nadd_textbox|Choose amount of `4Gems`w to sell world for:|\nadd_text_input|worldoffer|World Offer||30|\nend_dialog|disabled111|Cancel|Request Offer!\n"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										// need also to reset seller/buyer when wl breaks and any exits (door or exit world) declines, or disconnects happen.
									}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4ERROR! `w >> `7You need a GrowID first to trade worlds! `wCreate one, it's free."));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4ERROR! `w >> `7You are not the `9world `2owner`w or world is Public!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "hammer")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtWAR == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Super Special items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `bWar hammer``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `bWar hammer `wand get 10-15 gems per block``|left|\nadd_spacer|small|\nadd_button|yeswar|`9Purchase for - `1200.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}


							if (btn == "tk69")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtTK == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Super Special items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `5Tk69 mystical board``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `wTK69 and got 5-13 gems when breaking blocks!``|left|\nadd_spacer|small|\nadd_button|yestk|`9Purchase for - `2350.000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "ances")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtAAC == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Super Special items``|left|1458|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `6Ancestral``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `6Ancestral `wand get 8-20 gems per blocks + /ssb!``|left|\nadd_spacer|small|\nadd_button|yesaac|`9Purchase for - `2950000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}

							if (btn == "spd")
							{
								//	if (((PlayerInfo*)(peer->data))->boughtSPD == false)
								//	{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Super Special items``|left|1486|\nadd_spacer|small|\nadd_label|small|`2Make sure it's the correct item!``|left|\nadd_spacer|small|\nadd_label|small|`4You are about the purchase `bDigger Spade``|left|\nadd_spacer|small|\nadd_label|small|`2This item contains: `bDigger spade `wand 2 hit when breaking block``|left|\nadd_spacer|small|\nadd_button|yesspd|`9Purchase for - `250000!|0|0|\nadd_spacer|small|\nadd_button|cl0se|``Close|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								/*	}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`wYou bought this item.``|left|6126|\nadd_button|no|Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}*/
							}







							if (btn == "megaphone")
							{
								GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Megaphone Coming Soon!"));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete ps.data;
								continue;
							}












							if (btn == "chc0") {

							}






							if (btn == "traderubbles") {
								if (((PlayerInfo*)(peer->data))->rubble > 10) {
									int valgem = rand() % 70;
									std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));
									int b = atoi(content.c_str());
									int bb = b + valgem;
									ofstream myfile;
									myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile << bb;
									myfile.close();
									((PlayerInfo*)(peer->data))->rubble = ((PlayerInfo*)(peer->data))->rubble - 10;
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You got " + to_string(valgem) + " gems."));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`3You need 10 rubble to exchange again!"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}
							}
							if (btn == "traderubble") {
								if (((PlayerInfo*)(peer->data))->rubble > 0) {
									int valgem = rand() % 15;
									std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string content((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));
									int b = atoi(content.c_str());
									int bb = b + valgem;
									ofstream myfile;
									myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile << bb;
									myfile.close();
									((PlayerInfo*)(peer->data))->rubble = ((PlayerInfo*)(peer->data))->rubble - 1;
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You got " + to_string(valgem) + " gems."));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`3You need enough rubble to exchange again!"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}
								if (((PlayerInfo*)(peer->data))->haveGrowId) {
									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									PlayerInfo* p = ((PlayerInfo*)(peer->data));

									string username = PlayerDB::getProperName(p->rawName);



									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load
									j["level"] = p->level;
									j["xp"] = p->xp;
									j["rubblexp"] = p->rubblexp;
									j["rubble"] = p->rubble;

									j["amberxp"] = p->amberxp;
									j["amber"] = p->amber;

									j["opalxp"] = p->opalxp;
									j["opal"] = p->opal;


									j["goldxp"] = p->goldxp;
									j["gold"] = p->gold;


									j["sapphirexp"] = p->sapphirexp;
									j["sapphire"] = p->sapphire;


									j["diamondxp"] = p->diamondxp;
									j["diamond"] = p->diamond;


									j["emeraldxp"] = p->emeraldxp;
									j["emerald"] = p->emerald;
									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;
								}
							}


























							if (btn == "craftatomic")
							{
								int amber = ((PlayerInfo*)(peer->data))->amber;
								int gold = ((PlayerInfo*)(peer->data))->gold;
								if (amber >= 75 && gold >= 15)
								{
									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj;



									if (iffff.fail()) {
										iffff.close();
										cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko atomic!" << endl;

									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load


									std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									int dabarTuri = jj["amber"];
									dabarTuri -= 75;
									jj["amber"] = dabarTuri;

									int dabarTuris = jj["gold"];
									dabarTuris -= 15;
									jj["gold"] = dabarTuris;

									oo << jj << std::endl;
									((PlayerInfo*)(peer->data))->amber = ((PlayerInfo*)(peer->data))->amber - 75;
									((PlayerInfo*)(peer->data))->gold = ((PlayerInfo*)(peer->data))->gold - 15;
									bool success = true;
									SaveShopsItemMoreTimes(3764, 1, peer, success); // aposition, itemid, quantity, peer, success
									if (!success)continue;
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have crafted `4Atomic Fireball`0!"), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete ps2.data;
								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You don't have enought crystals."), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete ps2.data;
								}

							}



							if (btn == "craftdirtlock")
							{
								int emerald = ((PlayerInfo*)(peer->data))->emerald;
								if (emerald >= 10)
								{
									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj;



									if (iffff.fail()) {
										iffff.close();
										cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko dirt lock!" << endl;

									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load


									std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									int dabarTuri = jj["emerald"];
									dabarTuri -= 10;
									jj["emerald"] = dabarTuri;



									oo << jj << std::endl;
									((PlayerInfo*)(peer->data))->emerald = ((PlayerInfo*)(peer->data))->emerald - 10;
									bool success = true;
									SaveShopsItemMoreTimes(8470, 1, peer, success); // aposition, itemid, quantity, peer, success
									if (!success)continue;
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have crafted `9The `2Dirt Lock`0!"), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete ps2.data;
								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You don't have enought crystals."), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete ps2.data;
								}

							}



							if (btn == "craftvoid")
							{
								int gold = ((PlayerInfo*)(peer->data))->gold;
								int sapphire = ((PlayerInfo*)(peer->data))->sapphire;
								if (gold >= 120 && sapphire >= 60)
								{
									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj;



									if (iffff.fail()) {
										iffff.close();
										cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko void hands!" << endl;

									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load


									std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									int dabarTuri = jj["gold"];
									dabarTuri -= 120;
									jj["gold"] = dabarTuri;

									int dabarTuris = jj["sapphire"];
									dabarTuris -= 60;
									jj["sapphire"] = dabarTuris;

									oo << jj << std::endl;
									((PlayerInfo*)(peer->data))->gold = ((PlayerInfo*)(peer->data))->gold - 120;
									((PlayerInfo*)(peer->data))->sapphire = ((PlayerInfo*)(peer->data))->sapphire - 60;
									bool success = true;
									SaveShopsItem(8452, 1, peer, success); // aposition, itemid, quantity, peer, success
									if (!success)continue;
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have crafted `bThe Void Hands`0!"), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete ps2.data;
								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You don't have enought crystals."), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete ps2.data;
								}

							}





							if (btn == "buywl")
							{

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`6Buying `9World Lock `9Options``||242||\nadd_textbox|`oHow many `9World Locks `odo you want to buy? |\nadd_text_input|worldlockoffer|||7|\nend_dialog|reqworldlockoffer|Cancel|`2Purchase!|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								delete p.data;

							}
							if (btn == "buydl")
							{

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`6Buying `1Diamond Lock `9Options``||1796||\nadd_textbox|`oHow many `1Diamond Locks `odo you want to buy? |\nadd_text_input|diamondlockoffer|||7|\nend_dialog|reqdiamondlockoffer|Cancel|`2Purchase!|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								delete p.data;

							}
							if (btn == "confirmamber")
							{

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`6Buying `8Amber `9Options``||3948||\nadd_textbox|`oHow many `8Ambers `odo you want to buy? |\nadd_text_input|ambersoffer|||7|\nend_dialog|reqambersoffer|Cancel|`2Purchase!|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								delete p.data;

							}
							if (btn == "confirmopal")
							{

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`6Buying `1Opal `9Options``||5270||\nadd_textbox|`oHow many `1Opals `odo you want to buy?: |\nadd_text_input|opalsoffer|||7|\nend_dialog|reqopalsoffer|Cancel|`2Purchase!|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								delete p.data;

							}
							if (btn == "confirmgold")
							{

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`6Buying `9Gold `9Options``||3424||\nadd_textbox|`oHow many `9Gold `odo you want to buy?: |\nadd_text_input|goldoffer|||7|\nend_dialog|reqgoldoffer|Cancel|`2Purchase!|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								delete p.data;

							}
							if (btn == "confirmruby")
							{

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`6Buying `4Ruby `9Options``||828||\nadd_textbox|`oHow many `4Rubies `odo you want to buy? |\nadd_text_input|rubiesoffer|||7|\nend_dialog|reqrubiesoffer|Cancel|`2Purchase!|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								delete p.data;

							}
							if (btn == "confirmsapphire")
							{

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`6Buying `bSapphire `9Options``||2812||\nadd_textbox|`oHow many `bSapphires `odo you want to buy?: |\nadd_text_input|sapphiresoffer|||7|\nend_dialog|reqsapphiresoffer|Cancel|`2Purchase!|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								delete p.data;

							}
							if (btn == "confirmdiamond")
							{

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`6Buying `eDiamond `9Options``||262||\nadd_textbox|`oHow many `eDiamonds `odo you want to buy?: |\nadd_text_input|diamondsoffer|||7|\nend_dialog|reqdiamondsoffer|Cancel|`2Purchase!|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								delete p.data;

							}
							if (btn == "confirmemerald")
							{

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`6Buying `2Emerald `9Options``||826||\nadd_textbox|`oHow many `2Emeralds `odo you want to buy?: |\nadd_text_input|emeraldsoffer|||7|\nend_dialog|reqemeraldsoffer|Cancel|`2Purchase!|\n"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								delete p.data;

							}





							if (btn == "craftpurplephoenix") //BAISIOS NESAMONES ATSARGIAU!
							{


								bool iscontains = false;
								SearchInventoryItem(peer, 1458, 6, iscontains);
								if (!iscontains)
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `6Golden Heart Crystal's`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(1458, 6, peer);
										SaveShopsItemMoreTimes(9410, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`0You have crafted `9The `#Purple `4Phoenix Wings`0!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}






							}
							if (btn == "craftdarklock") //BAISIOS NESAMONES ATSARGIAU!
							{


								bool iscontains = false;
								SearchInventoryItem(peer, 8, 100, iscontains);
								if (!iscontains)
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `aBedrock's`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(8, 100, peer);
										SaveShopsItemMoreTimes(9290, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`0You have crafted `9The `bDark Lock`0!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}






							if (btn == "buyamethyst") //BAISIOS NESAMONES ATSARGIAU!
							{

								//KAINA 15
								// SaveShopsItem(4762, 200, peer, success);
								/*													GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`2Successfully bought 200 Amethyst Block's!"), "audio/hub_open.wav"), 0));
										ENetPacket * packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete ps2.data;*/
								bool iscontains = false;
								SearchInventoryItem(peer, 242, 15, iscontains);
								if (!iscontains)
								{
									bool iscontainss = false;
									SearchInventoryItem(peer, 1796, 1, iscontainss);
									if (!iscontainss)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = true;
										if (success)
										{
											bool iscontainssss = false;
											SearchInventoryItem(peer, 4762, 1, iscontainssss);
											if (!iscontainssss)
											{
												RemoveInventoryItem(1796, 1, peer);
												SaveShopsItemMoreTimes(242, 85, peer, success);
												//RemoveInventoryItem(1796, 1, peer);
												SaveShopsItem(4762, 200, peer, success);
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `8200 `#Amethyst `9Blocks!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
											else {
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Your inventory already contains `#Amethyst `9blocks!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}

										}
									}
								}
								else {
									bool success = true;
									if (success)
									{
										bool iscontainssss = false;
										SearchInventoryItem(peer, 4762, 1, iscontainssss);
										if (!iscontainssss)
										{
											RemoveInventoryItem(242, 15, peer);
											SaveShopsItem(4762, 200, peer, success);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `8200 `#Amethyst `9Blocks!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Your inventory already contains `#Amethyst `9Blocks!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}

									}
								}

							}






















							if (btn == "buyaltar") //PRO ITEM ...
							{
								bool iscontains = false;
								SearchInventoryItem(peer, 1796, 3, iscontains);
								if (!iscontains)
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eDiamond Locks`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(1796, 3, peer);
										SaveShopsItemMoreTimes(5086, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `1Ancient Altar!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}



















							if (btn == "buymagicmachine") //PRO ITEM ...
							{
								bool iscontains = false;
								SearchInventoryItem(peer, 1796, 6, iscontains);
								if (!iscontains)
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eDiamond Locks`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(1796, 6, peer);
										SaveShopsItemMoreTimes(9170, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `9Magic Machine!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}





							if (btn == "buydirtlock") //BAISIOS NESAMONES ATSARGIAU!
							{


								// SaveShopsItemMoreTimes(1008, 1, peer, success);
								/* 														GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`2Successfully bought `eATM Machine!"), "audio/hub_open.wav"), 0));
								ENetPacket * packet2 = enet_packet_create(ps2.data,
									ps2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete ps2.data;*/
								//kaina 20



								bool iscontains = false;
								SearchInventoryItem(peer, 242, 100, iscontains);
								if (!iscontains)
								{
									bool iscontainss = false;
									SearchInventoryItem(peer, 1796, 1, iscontainss);
									if (!iscontainss)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = true;
										if (success)
										{
											RemoveInventoryItem(1796, 1, peer);
											//SaveShopsItemMoreTimes(242, 80, peer, success);
											//RemoveInventoryItem(1796, 1, peer);
											SaveShopsItemMoreTimes(8470, 1, peer, success);


											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `2Dirt Lock!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;

										}
									}
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(242, 100, peer);
										SaveShopsItemMoreTimes(8470, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `2Dirt Lock!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}



							}





							if (btn == "buyatm") //BAISIOS NESAMONES ATSARGIAU!
							{


								// SaveShopsItemMoreTimes(1008, 1, peer, success);
								/* 														GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`2Successfully bought `eATM Machine!"), "audio/hub_open.wav"), 0));
								ENetPacket * packet2 = enet_packet_create(ps2.data,
									ps2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete ps2.data;*/
								//kaina 20



								bool iscontains = false;
								SearchInventoryItem(peer, 242, 20, iscontains);
								if (!iscontains)
								{
									bool iscontainss = false;
									SearchInventoryItem(peer, 1796, 1, iscontainss);
									if (!iscontainss)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = true;
										if (success)
										{
											RemoveInventoryItem(1796, 1, peer);
											SaveShopsItemMoreTimes(242, 80, peer, success);
											//RemoveInventoryItem(1796, 1, peer);
											SaveShopsItemMoreTimes(1008, 1, peer, success);


											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `eATM Machine!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;

										}
									}
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(242, 20, peer);
										SaveShopsItemMoreTimes(1008, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `eATM Machine!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}

							}




							if (btn == "buygbc") //PRO ITEM ...
							{
								bool iscontains = false;
								SearchInventoryItem(peer, 242, 1, iscontains);
								if (!iscontains)
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9World Locks`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(242, 1, peer);
										SaveShopsItemMoreTimes(3402, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `9Golden Booty Chest!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}



















							if (btn == "buygemstorage") //PRO ITEM ...
							{
								bool iscontains = false;
								SearchInventoryItem(peer, 1796, 30, iscontains);
								if (!iscontains)
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eDiamond Locks`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(1796, 30, peer);
										SaveShopsItemMoreTimes(9418, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `#Gem Storage`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}








							if (btn == "buyocean") //PRO ITEM ...
							{
								bool iscontains = false;
								SearchInventoryItem(peer, 242, 10, iscontains);
								if (!iscontains)
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `9World Locks`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(242, 10, peer);
										SaveShopsItemMoreTimes(9414, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `eOcean `9Chest!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}











							if (btn == "buyunicorn") //PRO ITEM ...
							{
								bool iscontains = false;
								SearchInventoryItem(peer, 1796, 9, iscontains);
								if (!iscontains)
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `eDiamond Locks`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(1796, 9, peer);
										SaveShopsItemMoreTimes(1636, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `#Unicorn!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}
					






							if (btn == "buyonyx") //BAISIOS NESAMONES ATSARGIAU!
							{



								bool iscontains = false;
								SearchInventoryItem(peer, 242, 30, iscontains);
								if (!iscontains)
								{
									bool iscontainss = false;
									SearchInventoryItem(peer, 1796, 1, iscontainss);
									if (!iscontainss)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = true;
										if (success)
										{
											bool iscontainssss = false;
											SearchInventoryItem(peer, 7382, 1, iscontainssss);
											if (!iscontainssss)
											{
												RemoveInventoryItem(1796, 1, peer);
												SaveShopsItemMoreTimes(242, 85, peer, success);
												SaveShopsItem(7382, 200, peer, success);
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `8200 `bOnyx `9Blocks!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}
											else {
												GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Your inventory already contains `bOnyx `9blocks!"));
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet2);
												delete p2.data;
											}

										}
									}
								}
								else {
									bool success = true;
									if (success)
									{
										bool iscontainssss = false;
										SearchInventoryItem(peer, 7382, 1, iscontainssss);
										if (!iscontainssss)
										{
											RemoveInventoryItem(242, 30, peer);
											SaveShopsItem(7382, 200, peer, success);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `8200 `bOnyx `9Blocks!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
										else {
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Your inventory already contains `bOnyx `9blocks!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}

									}
								}

							}








							if (btn == "buybronzechest") {
								bool iscontains = false;
								SearchInventoryItem(peer, 242, 30, iscontains);
								if (!iscontains)
								{
									bool iscontainss = false;
									SearchInventoryItem(peer, 1796, 1, iscontainss);
									if (!iscontainss)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = true;
										if (success)
										{
											RemoveInventoryItem(1796, 1, peer);
											SaveShopsItemMoreTimes(242, 70, peer, success);
											SaveShopsItemMoreTimes(6204, 1, peer, success);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `8Bronze `oChest`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(242, 30, peer);
										SaveShopsItemMoreTimes(6204, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `8Bronze `oChest`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}























							if (btn == "buyinvupgrade") {
								bool iscontains = false;
								SearchInventoryItem(peer, 242, 30, iscontains);

								if (!iscontains)
								{
									bool iscontainss = false;
									SearchInventoryItem(peer, 1796, 1, iscontainss);

									if (!iscontainss)
									{

										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;


									}
									else {

										bool success = true;


										short nextSpace = 0;

										if (((PlayerInfo*)(peer->data))->currentInventorySize + 30 > 200)
										{
											nextSpace = 200;
										}
										else
										{
											nextSpace = ((PlayerInfo*)(peer->data))->currentInventorySize + 30;
										}

										ofstream fs("usersinventorysize/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										fs << nextSpace;
										fs.close();

										if (success)
										{
											RemoveInventoryItem(1796, 1, peer);
											SaveShopsItemMoreTimes(242, 70, peer, success);
											GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`2Successfully upgraded your inventory to `8" + to_string(nextSpace) + " `2spaces."), "audio/hub_open.wav"), 0));
											ENetPacket * packet2 = enet_packet_create(ps2.data,
												ps2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete ps2.data;
											enet_peer_disconnect_later(peer, 0);
										}

									}

								}
								else {
									bool success = true;
									short nextSpace = 0;

									if (((PlayerInfo*)(peer->data))->currentInventorySize + 30 > 200)
									{
										nextSpace = 200;
									}
									else
									{
										nextSpace = ((PlayerInfo*)(peer->data))->currentInventorySize + 30;
									}

									ofstream fs("usersinventorysize/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									fs << nextSpace;
									fs.close();

									if (success)
									{
										RemoveInventoryItem(242, 30, peer);
										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`2Successfully upgraded your inventory to `8" + to_string(nextSpace) + " `2spaces."), "audio/hub_open.wav"), 0));
										ENetPacket * packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete ps2.data;
										enet_peer_disconnect_later(peer, 0);
									}
								}
							}

















							if (btn == "buysilverchest") {



								bool iscontains = false;
								SearchInventoryItem(peer, 242, 50, iscontains);
								if (!iscontains)
								{
									bool iscontainss = false;
									SearchInventoryItem(peer, 1796, 1, iscontainss);
									if (!iscontainss)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = true;
										if (success)
										{
											RemoveInventoryItem(1796, 1, peer);
											SaveShopsItemMoreTimes(242, 50, peer, success);
											SaveShopsItemMoreTimes(6202, 1, peer, success);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `sSilver `oChest`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(242, 50, peer);
										SaveShopsItemMoreTimes(6202, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `sSilver `oChest`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}



















							if (btn == "buygoldchest") {


								bool iscontains = false;
								SearchInventoryItem(peer, 242, 70, iscontains);
								if (!iscontains)
								{
									bool iscontainss = false;
									SearchInventoryItem(peer, 1796, 1, iscontainss);
									if (!iscontainss)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = true;
										if (success)
										{
											RemoveInventoryItem(1796, 1, peer);
											SaveShopsItemMoreTimes(242, 30, peer, success);
											SaveShopsItemMoreTimes(6200, 1, peer, success);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `9Gold `oChest`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(242, 70, peer);
										SaveShopsItemMoreTimes(6200, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `9Gold `oChest`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}










							if (btn == "buywinterchest") {






								bool iscontains = false;
								SearchInventoryItem(peer, 242, 90, iscontains);
								if (!iscontains)
								{
									bool iscontainss = false;
									SearchInventoryItem(peer, 1796, 1, iscontainss);
									if (!iscontainss)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = true;
										if (success)
										{
											RemoveInventoryItem(1796, 1, peer);
											SaveShopsItemMoreTimes(242, 10, peer, success);
											SaveShopsItemMoreTimes(7484, 1, peer, success);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `qWinter `oChest`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(242, 90, peer);
										SaveShopsItemMoreTimes(7484, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `qWinter `oChest`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}












							if (btn == "buyspringchest") {
								bool iscontains = false;
								SearchInventoryItem(peer, 242, 95, iscontains);
								if (!iscontains)
								{
									bool iscontainss = false;
									SearchInventoryItem(peer, 1796, 1, iscontainss);
									if (!iscontainss)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = true;
										if (success)
										{
											RemoveInventoryItem(1796, 1, peer);
											SaveShopsItemMoreTimes(242, 5, peer, success);
											SaveShopsItemMoreTimes(7954, 1, peer, success);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `2Spring `oChest`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(242, 95, peer);
										SaveShopsItemMoreTimes(7954, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `2Spring `oChest`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}














							if (btn == "buyringofforce")
							{



								bool iscontains = false;
								SearchInventoryItem(peer, 242, 60, iscontains);
								if (!iscontains)
								{
									bool iscontainss = false;
									SearchInventoryItem(peer, 1796, 1, iscontainss);
									if (!iscontainss)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = true;
										if (success)
										{
											RemoveInventoryItem(1796, 1, peer);
											SaveShopsItemMoreTimes(242, 40, peer, success);
											//RemoveInventoryItem(1796, 1, peer);
											SaveShopsItemMoreTimes(1874, 1, peer, success);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `4Ring `#Of `8Force`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(242, 60, peer);
										SaveShopsItemMoreTimes(1874, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `4Ring `#Of `8Force`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}











							if (btn == "buyringofwinds")
							{
								/*										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`2Successfully bought `4Ring `#Of `!Winds`2!"), "audio/hub_open.wav"), 0));
											ENetPacket * packet2 = enet_packet_create(ps2.data,
												ps2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete ps2.data;*/

											// kaina 90
											//SaveShopsItem(1876, 1, peer, success);



								bool iscontains = false;
								SearchInventoryItem(peer, 242, 90, iscontains);
								if (!iscontains)
								{
									bool iscontainss = false;
									SearchInventoryItem(peer, 1796, 1, iscontainss);
									if (!iscontainss)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = true;
										if (success)
										{
											RemoveInventoryItem(1796, 1, peer);
											SaveShopsItemMoreTimes(242, 10, peer, success);
											//RemoveInventoryItem(1796, 1, peer);
											SaveShopsItemMoreTimes(1876, 1, peer, success);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `4Ring `#Of `!Winds`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(242, 90, peer);
										SaveShopsItemMoreTimes(1876, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `4Ring `#Of `!Winds`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}
















							if (btn == "buyringofwater")
							{
								/*														GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`2Successfully bought `4Ring `#Of `eWater`2!"), "audio/hub_open.wav"), 0));
											ENetPacket * packet2 = enet_packet_create(ps2.data,
												ps2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete ps2.data;*/


											// kaina 30
											// SaveShopsItemMoreTimes(2970, 1, peer, success);


								bool iscontains = false;
								SearchInventoryItem(peer, 242, 30, iscontains);
								if (!iscontains)
								{
									bool iscontainss = false;
									SearchInventoryItem(peer, 1796, 1, iscontainss);
									if (!iscontainss)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = true;
										if (success)
										{
											RemoveInventoryItem(1796, 1, peer);
											SaveShopsItemMoreTimes(242, 70, peer, success);
											//RemoveInventoryItem(1796, 1, peer);
											SaveShopsItemMoreTimes(2970, 1, peer, success);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `4Ring `#Of `eWater`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(242, 30, peer);
										SaveShopsItemMoreTimes(2970, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `4Ring `#Of `eWater`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}



















							if (btn == "buyringofgemini")
							{


								/*														GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`2Successfully bought `4Ring `#Of `2Gemini`2!"), "audio/hub_open.wav"), 0));
											ENetPacket * packet2 = enet_packet_create(ps2.data,
												ps2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete ps2.data;*/


											// kaina 90

											// SaveShopsItemMoreTimes(1986, 1, peer, success);
								bool iscontains = false;
								SearchInventoryItem(peer, 242, 90, iscontains);
								if (!iscontains)
								{
									bool iscontainss = false;
									SearchInventoryItem(peer, 1796, 1, iscontainss);
									if (!iscontainss)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You `@Don't `9Have enought `2World Locks`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										bool success = true;
										if (success)
										{
											RemoveInventoryItem(1796, 1, peer);
											SaveShopsItemMoreTimes(242, 10, peer, success);
											//RemoveInventoryItem(1796, 1, peer);
											SaveShopsItemMoreTimes(1986, 1, peer, success);
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `4Ring `#Of `2Gemini`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}
									}
								}
								else {
									bool success = true;
									if (success)
									{
										RemoveInventoryItem(242, 90, peer);
										SaveShopsItemMoreTimes(1986, 1, peer, success);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `4Ring `#Of `2Gemini`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
							}



















							/*

							if (btn == "buydl")
							{
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 100000)
								{

									bool success = true;
									SaveShopsItemMoreTimes(1796, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have bought `1Diamond `^Lock!"), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);

									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

									int gemcalc10k = b - 100000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You don't have enought gems."), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete ps2.data;
								}

							}
							*/












							if (btn == "diamondlock")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `1Diamond `^Locks``|left|1796|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`1Diamond `^Lock `0Allows you to lock any free world! `4WARNING! `1Diamond `^Lock `oCosts `2100000 Gems!|\nadd_spacer|small|\nadd_button|buydl|`9Buy `1Diamond `^Lock!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}



















							if (btn == "ringofshrinking")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Coming Soon!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "theonering")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Coming Soon!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "ringofnight")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Coming Soon!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "ringofsmithing")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Coming Soon!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "ringofnature")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Coming Soon!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "ringofsavings")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Coming Soon!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}





							if (btn == "ringofwisdom")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Coming Soon!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}


							if (btn == "ringoffistful")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Coming Soon!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}


							if (btn == "ringofgemini")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `4Ring `#Of `2Gemini``|left|1986|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`4Ring `#Of `2Gemini `^Gives a clone effect for your player`^!|\nadd_spacer|small|\nadd_button|buyringofgemini|`9Purchase `7[`490`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}


							if (btn == "ringofwater")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `4Ring `#Of `eWater``|left|2970|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`4Ring `#Of `eWater `^Allows you to move faster in water`^!|\nadd_spacer|small|\nadd_button|buyringofwater|`9Purchase `7[`430`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "ringofwinds")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `4Ring `#Of `!Winds``|left|1876|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`4Ring `#Of `!Winds `^Gives you exclusive floating effects and allows you to move faster`^!|\nadd_spacer|small|\nadd_button|buyringofwinds|`9Purchase `7[`490`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "ringofforce")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `4Ring `#Of `8Force``|left|1874|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`4Ring `#Of `8Force `^Gives you exclusive breaking effects`^!|\nadd_spacer|small|\nadd_button|buyringofforce|`9Purchase `7[`460`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "amethyst")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `#Amethyst `^Blocks``|left|4762|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`#Amethyst `^Blocks `1Gives you over `450-100 `2Gems `1Per block`^!|\nadd_spacer|small|\nadd_button|buyamethyst|`7Buy `9200 `7Blocks [`415`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "atm")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `eATM `3Machine``|left|1008|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`3ATM Machines `1Can give you over `45-10 `2Gems `1Per PUNCH`^! `#This item is permanent`^!|\nadd_spacer|small|\nadd_button|buyatm|`7Buy `eATM Machine `7[`420`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "unicorn")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `#Unicorn``|left|1636|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`#Unicorns `1Can give you over `40-3 `9Crystals `1Per PUNCH`^! `#This item is permanent`^!|\nadd_spacer|small|\nadd_button|buyunicorn|`7Buy `#Unicorn `7[`49`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "gbc")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `9Golden Booty Chest``|left|3402|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`^Only `9Obtainable `^During `#Valentine`^, Gives `4Great `9Loot`^!|\nadd_spacer|small|\nadd_button|buygbc|`7Buy `9GBC `7[`41`e WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								continue;
							}

							if (btn == "gemstorage1") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `#Gem Storage``|left|9418|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`^Really usefull block! Allows you to `9Store Gems`^! Theres `@No Limits`^ For it!|\nadd_spacer|small|\nadd_button|buygemstorage|`7Buy `#Gem Storage `7[`430`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								continue;
							}

							if (btn == "oceanchest")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `eOcean Chest``|left|9414|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`^Only `9Obtainable `^During `#February, March, April, May`^, Gives `4Great `9Loot`^! `9Small Chance To Obtain `4Rare `9Items `w[`eOcean Wings`9, `eOcean Sword`w]|\nadd_spacer|small|\nadd_button|buyocean|`7Buy `9Ocean Chest `7[`410`e WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "magicmchn")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `9Magic Machine``|left|9170|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Really heavy and powerfull machine! `9Who knows what it does?... But the creators are sure that it will lead to profit!|\nadd_spacer|small|\nadd_button|buymagicmachine|`7Buy `9Magic Machine `7[`46`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								continue;
							}
							if (btn == "altar")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `1Ancient Altar``|left|5086|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Very Old `9Dusty `8Altar, Made of pure stone! This `8Altar `9Can upgrade any `4Ancestral `9To higher levels! [`4WARNING`9] This `8Altar `9is `4Not Fully Finished!|\nadd_spacer|small|\nadd_button|buyaltar|`7Buy `1Ancient Altar `7[`43`e DLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								continue;
							}
							if (btn == "onyx")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `bOnyx `^Blocks``|left|7382|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`bOnyx `^Blocks `1Gives you over `4150-200 `2Gems `1Per block`^! And a chance to obtain `1Light Crystal `^!|\nadd_spacer|small|\nadd_button|buyonyx|`7Buy `9200 `7Blocks [`430`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "worldlock")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `2World `^Locks``|left|242|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`2World `^Lock `0Allows you to lock any free world! `4WARNING! `2World `^Lock `oCosts `21000 Gems!|\nadd_spacer|small|\nadd_button|buywl|`9Buy `2World `^Lock!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}



							if (btn == "voidhands")
							{
								int gold = ((PlayerInfo*)(peer->data))->gold;
								int sapphire = ((PlayerInfo*)(peer->data))->sapphire;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Craft `bVoid Hands`6!``|left|8452|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oYou have: `1" + to_string(gold) + " `9Gold's`0!|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oYou have: `1" + to_string(sapphire) + " `bSapphire's`0!|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oA hands made by the `bVoid`o! `oHas exclusive `9Effects `o `2Allows `oTo break `bBedrocks `o& `wMain Doors`o! This `3Item `oIs `2PERMANENT `oAnd `4Untradable!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo craft this item you need `9120 `9Gold's`o!|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo craft this item you need `960 `bSapphire's`o!|left|8|\nadd_spacer|small|\nadd_button|craftvoid|`9Craft Item!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "darklock")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Craft `bDark Lock`6!``|left|9290|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9The `bDark Lock `9Amazing `2Lock `9With Cool `^Effects`9! `9But not `^Everyone `9Can get it, probably the `^Rarest Lock`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo craft this item you need `9100 `aBedrock's`o!|left|8|\nadd_spacer|small|\nadd_button|craftdarklock|`9Craft Item!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "dirtlock")
							{
								int emerald = ((PlayerInfo*)(peer->data))->emerald;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Craft `2Dirt Lock`6!``|left|8470|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oYou have: `1" + to_string(emerald) + " `2Emerald's`0!|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9First ever in the game custom Lock! The `2Dirt Lock! `9Amazing looking + Special floating effects!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo craft this item you need `910 `2Emerald's`o!|left|8|\nadd_spacer|small|\nadd_button|craftdirtlock|`9Craft Item!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "purplephoenix")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Craft `#Purple `4Phoenix Wings`6!``|left|9410|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Woah! Take A Look At Those `8Bright `#Purple `4Phoenix Wings `9Hurry! `^Theres Only `63 `9Of Them `^In The `2Game`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo craft this item you need `46 `6Golden Heart Crystals's`o!|left|1458|\nadd_spacer|small|\nadd_button|craftpurplephoenix|`9Craft Item!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}



							if (btn == "atomic")
							{
								int amber = ((PlayerInfo*)(peer->data))->amber;
								int gold = ((PlayerInfo*)(peer->data))->gold;
								int diamond = ((PlayerInfo*)(peer->data))->diamond;
								int emerald = ((PlayerInfo*)(peer->data))->emerald;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Craft `4Atomic Fireball`6!``|left|3764|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oYou have: `1" + to_string(amber) + " `8Amber's`0!|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oYou have: `1" + to_string(gold) + " `9Gold's`0!|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAtomic Fireball allows you to break whole world within seconds! `4Warning! `oBy crafting this item you will get 1 piece!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo craft this item you need `975 `8Amber's`o!|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo craft this item you need `915 `9Gold's`o!|left|8|\nadd_spacer|small|\nadd_button|craftatomic|`9Craft Item!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}


							if (btn == "buywls")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`2World Locks``|left|826|\nadd_button_with_icon|worldlock||staticBlueFrame|242|1000|\nadd_button_with_icon|diamondlock||staticBlueFrame|1796|100000|\nadd_quick_exit|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "resources")
							{
								int gemu = 0;
								ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								gemdb >> gemu;
								gemdb.close();
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Purchase `9Crystals`6!``|left|1792|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oHere you can purchase `1crystals`o! Everything here costs `9gem's`o! If you searching for something `2free `othis place is not for you!|\nadd_spacer|small|\nadd_button|buyruby|`@Buy `4Ruby's `@[`21/1K`@]|\nadd_spacer|small|\nadd_button|buyamber|`@Buy `8Amber's `@[`21/3K`@]|\nadd_spacer|small|\nadd_button|buyopal|`@Buy `1Opal's `@[`21/10K`@]|\nadd_spacer|small|\nadd_button|buygold|`@Buy `9Gold's `@[`21/20K`@]|\nadd_spacer|small|\nadd_button|buysapphire|`@Buy `bSapphires's `@[`21/30K`@]|\nadd_spacer|small|\nadd_button|buydiamond|`@Buy `3Diamond's `@[`21/100K`@]|\nadd_spacer|small|\nadd_button|buyemerald|`@Buy `2Emerald's `@[`21/300K`@]|\nadd_spacer|small|\nadd_button|store|`#Back|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}






							if (btn == "buyruby")
							{
								int gemu = 0;
								ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								gemdb >> gemu;
								gemdb.close();
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Purchase `4Ruby's`6!``|left|828|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase `4Rubies? `oOne `4Ruby `ocosts `21000 Gems`o!|\nadd_spacer|small|\nadd_button|confirmruby|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}



							if (btn == "buyamber")
							{
								int gemu = 0;
								ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								gemdb >> gemu;
								gemdb.close();
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Purchase `8Amber's`6!``|left|3948|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase `8Ambers? `oOne `8Amber `ocosts `23000 Gems`o!|\nadd_spacer|small|\nadd_button|confirmamber|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}



							if (btn == "buyopal")
							{
								int gemu = 0;
								ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								gemdb >> gemu;
								gemdb.close();
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Purchase `1Opal's`6!``|left|5270|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase `1Opals? `oOne `1Opal `ocosts `210000 Gems`o!|\nadd_spacer|small|\nadd_button|confirmopal|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "buygold")
							{
								int gemu = 0;
								ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								gemdb >> gemu;
								gemdb.close();
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Purchase `9Gold's`6!``|left|3424|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase `9Gold? `oOne `9Gold `ocosts `220000 Gems`o!|\nadd_spacer|small|\nadd_button|confirmgold|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "buysapphire")
							{
								int gemu = 0;
								ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								gemdb >> gemu;
								gemdb.close();
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Purchase `bSapphire's`6!``|left|2812|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase `bSapphires? `oOne `bSapphire `ocosts `230000 Gems`o!|\nadd_spacer|small|\nadd_button|confirmsapphire|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;



							}

							if (btn == "buydiamond")
							{
								int gemu = 0;
								ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								gemdb >> gemu;
								gemdb.close();
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Purchase `3Diamond's`6!``|left|262|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase `3Diamonds? `oOne `3Diamond `ocosts `2100000 Gems`o!|\nadd_spacer|small|\nadd_button|confirmdiamond|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "buyemerald")
							{
								int gemu = 0;
								ifstream gemdb("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								gemdb >> gemu;
								gemdb.close();
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Purchase `2Emerald's`6!``|left|826|\nadd_spacer|small|\nadd_label_with_icon|small|`oYou have: `1" + to_string(gemu) + " `9Gem's`0!|left|112|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oAre you sure you want to purchase `2Emeralds? `oOne `2Emerald `ocosts `2300000 Gems`o!|\nadd_spacer|small|\nadd_button|confirmemerald|`2Confirm!|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}



							//Resursu shopo aptarnavimas
						/*	if (btn == "confirmruby")
							{

								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());
								if (b > 1000)
								{

									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have bought `4Ruby`0!"), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);

									int gemcalc10k = b - 1000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;



									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj;



									if (iffff.fail()) {
										iffff.close();
										cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko ruby!" << endl;

									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load


									std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									int dabarTuri = jj["rubble"];
									dabarTuri += 1;
									jj["rubble"] = dabarTuri;

									oo << jj << std::endl;


									((PlayerInfo*)(peer->data))->rubble = ((PlayerInfo*)(peer->data))->rubble + 1;


									ENetPeer* currentPeer;
									int effect = 48;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {

											int x = ((PlayerInfo*)(peer->data))->x;
											int y = ((PlayerInfo*)(peer->data))->y;
											GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

											ENetPacket* packetd = enet_packet_create(psp.data,
												psp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd);
											delete psp.data;
										}
									}


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0Not enought `9Gem's`0!"), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
								}

							}



							if (btn == "confirmamber")
							{

								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());
								if (b > 3000)
								{

									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have bought `8Amber`0!"), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);

									int gemcalc10k = b - 3000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;



									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj;



									if (iffff.fail()) {
										iffff.close();
										cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko amber!" << endl;

									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load


									std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									int dabarTuri = jj["amber"];
									dabarTuri += 1;
									jj["amber"] = dabarTuri;

									oo << jj << std::endl;


									((PlayerInfo*)(peer->data))->amber = ((PlayerInfo*)(peer->data))->amber + 1;


									ENetPeer* currentPeer;
									int effect = 48;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {

											int x = ((PlayerInfo*)(peer->data))->x;
											int y = ((PlayerInfo*)(peer->data))->y;
											GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

											ENetPacket* packetd = enet_packet_create(psp.data,
												psp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd);
											delete psp.data;
										}
									}


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0Not enought `9Gem's`0!"), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
								}

							}


							if (btn == "confirmopal")
							{

								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());
								if (b > 10000)
								{

									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have bought `1Opal`0!"), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);

									int gemcalc10k = b - 10000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;



									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj;



									if (iffff.fail()) {
										iffff.close();
										cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko opal!" << endl;

									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load


									std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									int dabarTuri = jj["opal"];
									dabarTuri += 1;
									jj["opal"] = dabarTuri;

									oo << jj << std::endl;


									((PlayerInfo*)(peer->data))->opal = ((PlayerInfo*)(peer->data))->opal + 1;


									ENetPeer* currentPeer;
									int effect = 48;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {

											int x = ((PlayerInfo*)(peer->data))->x;
											int y = ((PlayerInfo*)(peer->data))->y;
											GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

											ENetPacket* packetd = enet_packet_create(psp.data,
												psp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd);
											delete psp.data;
										}
									}


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0Not enought `9Gem's`0!"), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
								}

							}


							if (btn == "confirmgold")
							{

								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());
								if (b > 20000)
								{

									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have bought `9Gold`0!"), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);

									int gemcalc10k = b - 20000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;



									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj;



									if (iffff.fail()) {
										iffff.close();
										cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko gold!" << endl;

									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load


									std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									int dabarTuri = jj["gold"];
									dabarTuri += 1;
									jj["gold"] = dabarTuri;

									oo << jj << std::endl;


									((PlayerInfo*)(peer->data))->gold = ((PlayerInfo*)(peer->data))->gold + 1;


									ENetPeer* currentPeer;
									int effect = 48;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {

											int x = ((PlayerInfo*)(peer->data))->x;
											int y = ((PlayerInfo*)(peer->data))->y;
											GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

											ENetPacket* packetd = enet_packet_create(psp.data,
												psp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd);
											delete psp.data;
										}
									}


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0Not enought `9Gem's`0!"), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
								}

							}


							if (btn == "confirmsapphire")
							{

								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());
								if (b > 30000)
								{

									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have bought `bSapphire`0!"), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);

									int gemcalc10k = b - 30000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;



									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj;



									if (iffff.fail()) {
										iffff.close();
										cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko sapphire!" << endl;

									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load


									std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									int dabarTuri = jj["sapphire"];
									dabarTuri += 1;
									jj["sapphire"] = dabarTuri;

									oo << jj << std::endl;


									((PlayerInfo*)(peer->data))->sapphire = ((PlayerInfo*)(peer->data))->sapphire + 1;


									ENetPeer* currentPeer;
									int effect = 48;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {

											int x = ((PlayerInfo*)(peer->data))->x;
											int y = ((PlayerInfo*)(peer->data))->y;
											GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

											ENetPacket* packetd = enet_packet_create(psp.data,
												psp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd);
											delete psp.data;
										}
									}


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0Not enought `9Gem's`0!"), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
								}

							}


							if (btn == "confirmdiamond")
							{

								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());
								if (b > 100000)
								{

									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have bought `3Diamond`0!"), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);

									int gemcalc10k = b - 100000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;



									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj;



									if (iffff.fail()) {
										iffff.close();
										cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko diamond!" << endl;

									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load


									std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									int dabarTuri = jj["diamond"];
									dabarTuri += 1;
									jj["diamond"] = dabarTuri;

									oo << jj << std::endl;


									((PlayerInfo*)(peer->data))->diamond = ((PlayerInfo*)(peer->data))->diamond + 1;


									ENetPeer* currentPeer;
									int effect = 48;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {

											int x = ((PlayerInfo*)(peer->data))->x;
											int y = ((PlayerInfo*)(peer->data))->y;
											GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

											ENetPacket* packetd = enet_packet_create(psp.data,
												psp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd);
											delete psp.data;
										}
									}


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0Not enought `9Gem's`0!"), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
								}

							}


							if (btn == "confirmemerald")
							{

								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());
								if (b > 300000)
								{

									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0You have bought `2Emerald`0!"), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);

									int gemcalc10k = b - 300000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;



									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

									json jj;



									if (iffff.fail()) {
										iffff.close();
										cout << "Zaidejo " << ((PlayerInfo*)(peer->data))->rawName << " kritine klaida kai pirko emerald!" << endl;

									}
									if (iffff.is_open()) {


									}

									iffff >> jj; //load


									std::ofstream oo("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									int dabarTuri = jj["emerald"];
									dabarTuri += 1;
									jj["emerald"] = dabarTuri;

									oo << jj << std::endl;


									((PlayerInfo*)(peer->data))->emerald = ((PlayerInfo*)(peer->data))->emerald + 1;


									ENetPeer* currentPeer;
									int effect = 48;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer)) {

											int x = ((PlayerInfo*)(peer->data))->x;
											int y = ((PlayerInfo*)(peer->data))->y;
											GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

											ENetPacket* packetd = enet_packet_create(psp.data,
												psp.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetd);
											delete psp.data;
										}
									}


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0Not enought `9Gem's`0!"), "audio/hub_open.wav"), 0));
									ENetPacket * packet2 = enet_packet_create(ps2.data,
										ps2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
								}

							}*/

							if (btn == "undergroundtrader") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`wThe Underground Trader|left|9288|\nadd_button_with_icon|buybedrock||staticBlueFrame|8|\nadd_button_with_icon|buydarklock||staticBlueFrame|9290|\nadd_button_with_icon|buydarkangel||staticBlueFrame|9306|\nadd_quick_exit|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "buybedrock")
							{
								UpdateLocalPlayerFragments(peer);
								int darkfragment = ((PlayerInfo*)(peer->data))->fDark;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `#Bedrock`6!``|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oYou have: `1" + to_string(darkfragment) + " `bDark `9Fragment's`0!|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Very Rare And Strong Block! Not everyone can break it, So think twice before placing! Only Obtainable from `^The Underground Trader`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo buy this block you need `9300 `bDark `9Fragment's`o!|left|8|\nadd_spacer|small|\nadd_button|buybedrocknow|`9Buy Block!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "buydarklock") {

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `bDark Lock`6!``|left|9290|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9The `bDark Lock `9Amazing `2Lock `9With Cool `^Effects`9! `9But not `^Everyone `9Can get it, probably the `^Rarest Lock`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo craft this item you need `9100 `aBedrock's`o!|left|8|\nadd_spacer|small|\nadd_button|craftdarklock|`9Craft Item!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								continue;


							}

							if (btn == "buydarkangel")
							{
								UpdateLocalPlayerFragments(peer);
								int darkfragment = ((PlayerInfo*)(peer->data))->fDark;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`6Buy `bDark Angel Wings`6!``|left|9306|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oYou have: `1" + to_string(darkfragment) + " `bDark `9Fragment's`0!|left|8|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`9Pure `bDark `9Designed Wings! Nothing `^Special`9, Same as a `wAngel Wings`9, But Take A Look At That `^Awesome Design`9! Only Obtainable from `^The Underground Trader`9!|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oTo buy this item you need `975000 `bDark `9Fragment's`o!|left|8|\nadd_spacer|small|\nadd_button|buydarkangelnow|`9Buy Item!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							if (btn == "buybedrocknow")
							{
								UpdateLocalPlayerFragments(peer);
								int darkfragment = ((PlayerInfo*)(peer->data))->fDark;
								if (darkfragment >= 300)
								{
									RemovePlayerFragmentDark(peer, 300);
									bool success = true;
									SaveShopsItemMoreTimes(8, 1, peer, success); // aposition, itemid, quantity, peer, success
									if (!success)continue;
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `#Bedrock`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Soory`9, But you don't have enought `bDark `9Fragments!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}

							}
							if (btn == "buydarkangelnow")
							{
								UpdateLocalPlayerFragments(peer);
								int darkfragment = ((PlayerInfo*)(peer->data))->fDark;
								if (darkfragment >= 75000)
								{
									RemovePlayerFragmentDark(peer, 75000);
									bool success = true;
									SaveShopsItemMoreTimes(9306, 1, peer, success); // aposition, itemid, quantity, peer, success
									if (!success)continue;
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You have bought `bDark Angel Wings`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Soory`9, But you don't have enought `bDark `9Fragments!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}

							}
							if (btn == "craft")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`8Legendary Craftable `cItems``|left|1790|\nadd_button_with_icon|atomic||staticBlueFrame|3764|\nadd_button_with_icon|voidhands||staticBlueFrame|8452|\nadd_button_with_icon|dirtlock||staticBlueFrame|8470|\nadd_button_with_icon|purplephoenix||staticBlueFrame|9410|\nadd_quick_exit|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							if (btn == "ringstore")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`#Welcome To `4Ring's `2Store`w!``|left|1900|\nadd_button_with_icon|ringofforce||staticBlueFrame|1874|\nadd_button_with_icon|ringofwinds||staticBlueFrame|1876|\nadd_button_with_icon|ringofwater||staticBlueFrame|2970|\nadd_button_with_icon|ringofgemini||staticBlueFrame|1986|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_button_with_icon|ringoffistful||staticBlueFrame|1932|\nadd_button_with_icon|ringofwisdom||staticBlueFrame|1996|\nadd_button_with_icon|ringofsavings||staticBlueFrame|3140|\nadd_button_with_icon|ringofnature||staticBlueFrame|6846|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_button_with_icon|ringofsmithing||staticBlueFrame|3174|\nadd_button_with_icon|ringofnight||staticBlueFrame|8962|\nadd_button_with_icon|ringofshrinking||staticBlueFrame|6028|\nadd_button_with_icon|theonering||staticBlueFrame|1904|\nadd_quick_exit|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}



							if (btn == "chests")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`#Welcome To `oChest's `2Store`w!``|left|5954|\nadd_button_with_icon|bronzechest||staticBlueFrame|6204|\nadd_button_with_icon|silverchest||staticBlueFrame|6202|\nadd_button_with_icon|goldchest||staticBlueFrame|6200|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_label_with_icon|small|`5Special `oChest's``|left|5954|\nadd_button_with_icon|winterchest||staticBlueFrame|7484|\nadd_button_with_icon|springchest||staticBlueFrame|7954|\nadd_quick_exit|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}


							if (btn == "storeinvupgrade")
							{
								short nextSpace = 0;

								if (((PlayerInfo*)(peer->data))->currentInventorySize + 30 > 200)
								{
									nextSpace = 200;
								}
								else
								{
									nextSpace = ((PlayerInfo*)(peer->data))->currentInventorySize + 30;
								}

								if (((PlayerInfo*)(peer->data))->currentInventorySize == 200)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Purchase `8Inventory Upgrade`2!``|left|6204|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`4Your inventory spaces are full upgraded!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Purchase `8Inventory Upgrade`2!``|left|6204|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oYour inventory space is`8 " + to_string(((PlayerInfo*)(peer->data))->currentInventorySize) + " `onow.|\nadd_label|small|\nadd_textbox|`9After purchasing an inventory upgrade, your inventory will have`2 " + to_string(nextSpace) + "`9 spaces.|left|8|\nadd_spacer|small|\nadd_button|buyinvupgrade|`9Purchase `7[`430`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}


							if (btn == "blocks")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`wSpecial Premium `@Blocks``|left|2590|\nadd_button_with_icon|amethyst||staticBlueFrame|4762|\nadd_button_with_icon|onyx||staticBlueFrame|7382|\nadd_button_with_icon|atm||staticBlueFrame|1008|\nadd_button_with_icon|magicmchn||staticBlueFrame|9170|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_button_with_icon|altar||staticBlueFrame|5086|\nadd_button_with_icon|unicorn||staticBlueFrame|1636|\nadd_button_with_icon|gbc||staticBlueFrame|3402|\nadd_button_with_icon|oceanchest||staticBlueFrame|9414|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_button_with_icon|gemstorage1||staticBlueFrame|9418|\nadd_quick_exit|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							//CHESTAI CIA CHESTAI CIA CHESTAI CIA

							if (btn == "bronzechest")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Purchase `8Bronze `oChest`2!``|left|6204|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oThe `eChances `ofor `8Bronze `oChest are:|\nadd_label|small|\nadd_textbox|`9Gems -> `#80% `9[`4MAX `620000`2 Gems!`9]|left|8|\nadd_label|small|\nadd_textbox|`9Crystals -> `#60%|left|8|\nadd_label|small|\nadd_textbox|`9Fragments -> `#35%|left|8|\nadd_label|small|\nadd_textbox|`9Special Blocks -> `#10%|left|8|\nadd_label|small|\nadd_textbox|`9Items -> `#4%|left|8|\nadd_spacer|small|\nadd_button|buybronzechest|`9Purchase `7[`430`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}



							if (btn == "silverchest")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Purchase `sSilver `oChest`2!``|left|6202|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oThe `eChances `ofor `sSilver `oChest are:|\nadd_label|small|\nadd_textbox|`9Gems -> `#40% `9[`4MAX `670000`2 Gems!`9]|left|8|\nadd_label|small|\nadd_textbox|`9Crystals -> `#70%|left|8|\nadd_label|small|\nadd_textbox|`9Fragments -> `#55%|left|8|\nadd_label|small|\nadd_textbox|`9Special Blocks -> `#20%|left|8|\nadd_label|small|\nadd_textbox|`9Items -> `#15%|left|8|\nadd_spacer|small|\nadd_button|buysilverchest|`9Purchase `7[`450`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}



							if (btn == "goldchest")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Purchase `9Gold `oChest`2!``|left|6200|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oThe `eChances `ofor `9Gold `oChest are:|\nadd_label|small|\nadd_textbox|`9Gems -> `#20% `9[`4MAX `6120000`2 Gems!`9]|left|8|\nadd_label|small|\nadd_textbox|`9Crystals -> `#45%|left|8|\nadd_label|small|\nadd_textbox|`9Fragments -> `#65%|left|8|\nadd_label|small|\nadd_textbox|`9Special Blocks -> `#70%|left|8|\nadd_label|small|\nadd_textbox|`9Items -> `#30%|left|8|\nadd_spacer|small|\nadd_button|buygoldchest|`9Purchase `7[`470`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}


							if (btn == "winterchest")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Purchase `qWinter `oChest`2!``|left|7484|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oThe `eChances `ofor `qWinter `oChest are:|\nadd_label|small|\nadd_textbox|`9Gems -> `#15% `9[`4MAX `6170000`2 Gems!`9]|left|8|\nadd_label|small|\nadd_textbox|`9Crystals -> `#30%|left|8|\nadd_label|small|\nadd_textbox|`9Fragments -> `#60%|left|8|\nadd_label|small|\nadd_textbox|`9Special Blocks -> `#75%|left|8|\nadd_label|small|\nadd_textbox|`9Items -> `#50%|left|8|\nadd_spacer|small|\nadd_button|buywinterchest|`9Purchase `7[`490`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}


							if (btn == "springchest")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|big|`2Purchase `^Spring `oChest`2!``|left|7954|\nadd_spacer|small|\nadd_label|small|\nadd_textbox|`oThe `eChances `ofor `^Spring `oChest are:|\nadd_label|small|\nadd_textbox|`9Gems -> `#15% `9[`4MAX `6200000`2 Gems!`9]|left|8|\nadd_label|small|\nadd_textbox|`9Crystals -> `#30%|left|8|\nadd_label|small|\nadd_textbox|`9Fragments -> `#60%|left|8|\nadd_label|small|\nadd_textbox|`9Special Blocks -> `#75%|left|8|\nadd_label|small|\nadd_textbox|`9Items -> `#50%|left|8|\nadd_spacer|small|\nadd_button|buyspringchest|`9Purchase `7[`495`2 WLS`7]!|0|0|\nadd_spacer|0|0|\n\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}



			








							if (btn == "consumables")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`#Consumable `eItems``|left|828|\nadd_button_with_icon|megaphone||staticBlueFrame|2480|\nadd_quick_exit|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}



							if (btn == "no")
							{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`1Purchasable `eItems``|left|1438|\nadd_button_with_icon|hammer||staticBlueFrame|7912|100000|\nadd_button_with_icon|ances||staticBlueFrame|5078|950000|\nadd_button_with_icon|tk69||staticBlueFrame|8834|350000|\nadd_button_with_icon|\nadd_quick_exit|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}


							if (btn == "anticrash") {



	



								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Your `@Set `@Have Been `4Removed`#!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;



								((PlayerInfo*)(peer->data))->cloth_hair = 0;
								((PlayerInfo*)(peer->data))->cloth_shirt = 0;
								((PlayerInfo*)(peer->data))->cloth_pants = 0;
								((PlayerInfo*)(peer->data))->cloth_feet = 0;
								((PlayerInfo*)(peer->data))->cloth_face = 0;
								((PlayerInfo*)(peer->data))->cloth_hand = 0;
								((PlayerInfo*)(peer->data))->cloth_back = 0;
								((PlayerInfo*)(peer->data))->cloth_mask = 0;
								((PlayerInfo*)(peer->data))->cloth_necklace = 0;
								((PlayerInfo*)(peer->data))->cloth_ances = 0;
								sendClothes(peer);
								enet_peer_disconnect_later(peer, 0);


							}





							if (btn == "yestk") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 349999)
								{

									bool success = true;
									SaveShopsItem(8834, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `1You have `2purchased `3TK69 Mystical board `1Successfully!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 350000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtTK = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtTK"] = ((PlayerInfo*)(peer->data))->boughtRAY; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}
							if (btn == "yesaac") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 949999)
								{

									bool success = true;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|\nadd_label_with_icon|small|`^Select `9Ancestral `^Color``|left|5080|\nadd_button_with_icon|wisdom||staticBlueFrame|5078|\nadd_button_with_icon|dimensions||staticBlueFrame|5080|\nadd_button_with_icon|life||staticBlueFrame|5082|\nadd_button_with_icon|riches||staticBlueFrame|5084|\nadd_button_with_icon||END_LIST|noflags|0|0|\nadd_button_with_icon|orb||staticBlueFrame|7166|"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									if (!success)continue;



									((PlayerInfo*)(peer->data))->boughtAAC = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtAAC"] = ((PlayerInfo*)(peer->data))->boughtAAC; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;


									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}


							if (btn == "wisdom")
							{
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());
								int gemcalc10k = b - 950000;



								ofstream myfile2;
								myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								myfile2 << std::to_string(gemcalc10k);
								myfile2.close();

								std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string contentx((std::istreambuf_iterator<char>(ifszi)),
									(std::istreambuf_iterator<char>()));


								int updgem = atoi(contentx.c_str());
								GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
								ENetPacket* packetpp = enet_packet_create(pp.data,
									pp.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packetpp);
								delete pp.data;
								bool success = true;
								SaveShopsItemMoreTimes(5078, 1, peer, success);
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `1You have `2Claimed `3Ancestral Of Wisdom `1Successfully!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;

							}

							if (btn == "dimensions")
							{
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());
								int gemcalc10k = b - 950000;



								ofstream myfile2;
								myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								myfile2 << std::to_string(gemcalc10k);
								myfile2.close();

								std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string contentx((std::istreambuf_iterator<char>(ifszi)),
									(std::istreambuf_iterator<char>()));


								int updgem = atoi(contentx.c_str());
								GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
								ENetPacket* packetpp = enet_packet_create(pp.data,
									pp.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packetpp);
								delete pp.data;
								bool success = true;
								SaveShopsItemMoreTimes(5080, 1, peer, success);
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `1You have `2Claimed `3Ancestral Of Dimensions `1Successfully!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;

							}

							if (btn == "life")
							{
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());
								int gemcalc10k = b - 950000;



								ofstream myfile2;
								myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								myfile2 << std::to_string(gemcalc10k);
								myfile2.close();

								std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string contentx((std::istreambuf_iterator<char>(ifszi)),
									(std::istreambuf_iterator<char>()));


								int updgem = atoi(contentx.c_str());
								GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
								ENetPacket* packetpp = enet_packet_create(pp.data,
									pp.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packetpp);
								delete pp.data;
								bool success = true;
								SaveShopsItemMoreTimes(5082, 1, peer, success);
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `1You have `2Claimed `3Ancestral Of Life `1Successfully!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;

							}

							if (btn == "riches")
							{
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());
								int gemcalc10k = b - 950000;



								ofstream myfile2;
								myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								myfile2 << std::to_string(gemcalc10k);
								myfile2.close();

								std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string contentx((std::istreambuf_iterator<char>(ifszi)),
									(std::istreambuf_iterator<char>()));


								int updgem = atoi(contentx.c_str());
								GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
								ENetPacket* packetpp = enet_packet_create(pp.data,
									pp.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packetpp);
								delete pp.data;
								bool success = true;
								SaveShopsItemMoreTimes(5084, 1, peer, success);
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `1You have `2Claimed `3Ancestral Of Riches `1Successfully!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;

							}

							if (btn == "orb")
							{
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());
								int gemcalc10k = b - 950000;



								ofstream myfile2;
								myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								myfile2 << std::to_string(gemcalc10k);
								myfile2.close();

								std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string contentx((std::istreambuf_iterator<char>(ifszi)),
									(std::istreambuf_iterator<char>()));


								int updgem = atoi(contentx.c_str());
								GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
								ENetPacket* packetpp = enet_packet_create(pp.data,
									pp.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packetpp);
								delete pp.data;
								bool success = true;
								SaveShopsItemMoreTimes(7166, 1, peer, success);
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `1You have `2Claimed `3Ancestral Of Orb `1Successfully!"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;

							}




							if (btn == "yeswar") {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 199999)
								{
									bool success = true;
									SaveShopsItem(7912, 1, peer, success); // aposition, itemid, quantity, peer, success

									if (!success)continue;

									sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`5[GTLT] `1You have `2purchased `3War Hammers `1Successfully!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									int gemcalc10k = b - 200000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->boughtWAR = true;

									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["boughtWAR"] = ((PlayerInfo*)(peer->data))->boughtWAR; //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;



									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r`4TRANSACTION ABORTED! - `wNot enough gems."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}


							if (isPasswordDialog) {
								cout << oldpass << endl;
								cout << password2 << endl;
								cout << password2verify << endl;
								if (((PlayerInfo*)(peer->data))->tankIDPass != oldpass) {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wChange Password|left|1280|\nadd_spacer|small|\nadd_textbox|`4Oops! `oThe Current Password you have entered is incorrect!``|\nadd_spacer|small|\nadd_text_input|oldpass|`$Current Password``||18|\nadd_text_input|newpass|`$New Password``||18|\nadd_text_input|verifypass|`$Verify Password``||18|\nend_dialog|pssdia|`wCancel``|`wConfirm!``|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}
								else if (password2 != password2verify) {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wChange Password|left|1280|\nadd_spacer|small|\nadd_textbox|`4Oops! `oThe Password Verify failed.``|\nadd_spacer|small|\nadd_text_input|oldpass|`$Current Password``||18|\nadd_text_input|newpass|`$New Password``||18|\nadd_text_input|verifypass|`$Verify Password``||18|\nend_dialog|pssdia|`wCancel``|`wConfirm!``|"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}
								else {
									((PlayerInfo*)(peer->data))->tankIDPass = password2;
									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load


									j["password"] = hashPassword(((PlayerInfo*)(peer->data))->tankIDPass); //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;
									GamePacket p3 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), 1), ((PlayerInfo*)(peer->data))->rawName), password2));
									ENetPacket* packet3 = enet_packet_create(p3.data,
										p3.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet3);
									GamePacket p9 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Your password has been changed!"));
									ENetPacket* packet9 = enet_packet_create(p9.data,
										p9.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet9);
									delete p9.data;
									enet_peer_disconnect_later(peer, 0);
								}
							}
							if (isGrowidDialog) {
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));

								int b = atoi(content.c_str());

								if (b > 19999)
								{

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Your growid has been changed!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									int gemcalc10k = b - 20000;


									ofstream myfile2;
									myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile2 << std::to_string(gemcalc10k);
									myfile2.close();

									std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string contentx((std::istreambuf_iterator<char>(ifszi)),
										(std::istreambuf_iterator<char>()));


									int updgem = atoi(contentx.c_str());
									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;


									((PlayerInfo*)(peer->data))->tankIDName = newgrowid;
									std::ifstream ifff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {
									}
									json j;
									ifff >> j; //load
									j["username"] = (((PlayerInfo*)(peer->data))->tankIDName); //edit




									std::ofstream o("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									o << j << std::endl;
									GamePacket p3 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), 1), ((PlayerInfo*)(peer->data))->rawName), newgrowid));
									ENetPacket* packet3 = enet_packet_create(p3.data,
										p3.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet3);
									string text = "action|play_sfx\nfile|audio/achievement.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
									memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

									ENetPacket* packetsou = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetsou);

								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`rYou need to have enough gems to change `2name`w!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}

#ifdef REGISTRATION
							if (isRegisterDialog) {


								int regState = PlayerDB::playerRegister(peer, username, password, passwordverify, discord, pin);
								if (regState == 1) {
									std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									std::string acontent((std::istreambuf_iterator<char>(ifsz)),
										(std::istreambuf_iterator<char>()));
									int arda = 0;
									ofstream myfile;
									myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									myfile << arda;
									myfile.close();
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^Your account has been created!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									GamePacket p8 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), 1), username), password));
									ENetPacket * packet8 = enet_packet_create(p8.data,
										p8.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet8);

									//enet_host_flush(server);
									delete p8.data;
									enet_peer_disconnect_later(peer, 0);



									GamePacket p7 = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), 0));
									ENetPacket* packet7 = enet_packet_create(p7.data,
										p7.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet7);
									GamePacket p3 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), 1), username), password));
									ENetPacket* packet3 = enet_packet_create(p3.data,
										p3.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet3);

									//enet_host_flush(server);
									delete p3.data;
									string nam1e = "```0" + username;
									((PlayerInfo*)(event.peer->data))->displayName = username;
									((PlayerInfo*)(event.peer->data))->tankIDName = username;
									((PlayerInfo*)(event.peer->data))->tankIDPass = password;
									((PlayerInfo*)(event.peer->data))->rawName = PlayerDB::getProperName(((PlayerInfo*)(event.peer->data))->tankIDName);
									((PlayerInfo*)(event.peer->data))->msgName = PlayerDB::getProperName(((PlayerInfo*)(event.peer->data))->tankIDName);
									((PlayerInfo*)(event.peer->data))->haveGrowId = true;
									GamePacket p4 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), nam1e));
									memcpy(p4.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
									ENetPacket* packet4 = enet_packet_create(p4.data,
										p4.len,
										ENET_PACKET_FLAG_RELIABLE);
									string text = "action|play_sfx\nfile|audio/piano_nice.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPacket* packet2 = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);

									//enet_host_flush(server);
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{
											enet_peer_send(currentPeer, 0, packet4);
											GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD-LOGS] `2New Account with username: `4" + username + " `rIP:`4" + ((PlayerInfo*)(peer->data))->charIP));
											string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);

											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (!((PlayerInfo*)(currentPeer->data))->radio)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 998 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 888) {
													ENetPacket* packet6 = enet_packet_create(p6.data,
														p6.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(currentPeer, 0, packet6);




													ENetPacket* packet2 = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(currentPeer, 0, packet2);

													//enet_host_flush(server);
												}
											}
											delete data;
											delete p6.data;
											delete p4.data;
										}
									}
								}
								else if (regState == -1) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Account creation failed, because it already exists!``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (regState == -2) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Account creation failed, because the name is too short!``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (regState == -3) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Passwords mismatch!``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (regState == -4) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Account creation failed, because email address is invalid!``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (regState == -5) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Account creation failed, because Discord ID is invalid!``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (regState == -6) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Account creation failed due to account name that is being used by system!``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (regState == -7) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Oops! `9Looks like players data have been resetted, `wmake sure to use your `bPIN `wthat you used when creating your account. `2For help, message `w! Wry#4304 on Discord!`w``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (regState == -8) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Oops! `9Looks like `wPIN `9is not in a range of 1000-9999. Choose a `wPIN `9from 1000-9999!``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (regState == -9) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Oops! `9Looks like `wPIN `9contains text, only numbers. Choose a `wPIN `9from 1000-9999!``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (regState == -10) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Player name contains illegal characters.``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (regState == -11) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Your connection have been cancelled!``"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
#endif
							}
						}

						string dropText = "action|drop\n|itemID|"; // drop funkcianalumas
						if (cch.find(dropText) == 0)
						{

							std::stringstream ss(cch);
							std::string to;
							int idx = -1;
							int count = -1;
							while (std::getline(ss, to, '\n')) {
								vector<string> infoDat = explode("|", to);
								if (infoDat.size() == 3) {
									if (infoDat[1] == "itemID") idx = atoi(infoDat[2].c_str());
									if (infoDat[1] == "count") count = atoi(infoDat[2].c_str());
								}
							}
							((PlayerInfo*)(peer->data))->lastdropitem = idx;
							((PlayerInfo*)(peer->data))->lastdropitemcount = count;

							if (idx == -1) continue;
							if (itemDefs.size() < idx || idx < 0) continue;
							if (((PlayerInfo*)(peer->data))->lastdropitem == 18 || ((PlayerInfo*)(peer->data))->lastdropitem == 32) {
								GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You can't drop that."));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete ps.data;
								continue;
							}
							else {
								/*GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wDrop " + itemDefs.at(idx).name + "``|left|" + std::to_string(idx) + "|\nadd_textbox|`oHow many to drop?|\nadd_text_input|dropitemcount|||3||\nadd_textbox|`4Warning: `oAny player who asks you to drop items is scamming you. We cannot restore scammed items.|\nend_dialog|dropdialog|Cancel|Ok|\n"));
								ENetPacket * packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;*/
								GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Drop Is `@Disabled!"));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete ps.data;
								continue;
							}
						}

						string trashText = "action|trash\n|itemID|"; // drop funkcianalumas
						if (cch.find(trashText) == 0)
						{

							std::stringstream ss(cch);
							std::string to;
							int idx = -1;
							int count = -1;
							while (std::getline(ss, to, '\n')) {
								vector<string> infoDat = explode("|", to);
								if (infoDat.size() == 3) {
									if (infoDat[1] == "itemID") idx = atoi(infoDat[2].c_str());
									if (infoDat[1] == "count") count = atoi(infoDat[2].c_str());
								}
							}
							((PlayerInfo*)(peer->data))->lasttrashitem = idx;
							((PlayerInfo*)(peer->data))->lasttrashitemcount = count;

							if (idx == -1) continue;
							if (itemDefs.size() < idx || idx < 0) continue;
							if (((PlayerInfo*)(peer->data))->lasttrashitem == 18 || ((PlayerInfo*)(peer->data))->lasttrashitem == 32) {
								GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You can't trash that."));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete ps.data;
								continue;
							}
							else {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`wTrash " + itemDefs.at(idx).name + "``|left|" + std::to_string(idx) + "|\nadd_textbox|`oHow many to trash?|\nadd_text_input|trashitemcount|||3|\nend_dialog|trashdialog|Cancel|Ok|\n"));
								ENetPacket * packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								//enet_host_flush(server);
								delete p.data;
							}
						}

						if (cch.find("text|") != std::string::npos) {
							bool canchat = true;
							PlayerInfo* pData = ((PlayerInfo*)(peer->data));

							if (str.length() > 120)
							{
								Player::OnConsoleMessage(peer, "`4Too many symbols");
								continue;
							}
							if (str.length() && str[0] == '/')
							{
								sendConsoleMsg(peer, "`6" + str);
								sendAction(peer, ((PlayerInfo*)(peer->data))->netID, str);

							}

							else if (((PlayerInfo*)(peer->data))->taped == false) {
								sendChatMessage(peer, ((PlayerInfo*)(peer->data))->netID, str);

							}
							else {
								for (char c : str)

									if (c < 0x18 || std::all_of(str.begin(), str.end(), isspace))
									{
										canchat = false;
									}
								if (canchat)
								{

									if (std::experimental::filesystem::exists("timemuted/" + ((PlayerInfo*)(peer->data))->rawName + ".txt"))
									{

										using namespace std::chrono;
										if (((PlayerInfo*)(peer->data))->lastMuted < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Your `4Mute `^Has `2Expired, `4Don't `^Break `2Rules `^Anymore!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;

											((PlayerInfo*)(peer->data))->taped = false;
											((PlayerInfo*)(peer->data))->isDuctaped = false;
											((PlayerInfo*)(peer->data))->cantsay = false;
											sendState(peer);
											sendClothes(peer);

											remove(("timemuted/" + ((PlayerInfo*)(peer->data))->rawName + ".txt").c_str());

											sendChatMessage(peer, ((PlayerInfo*)(peer->data))->netID, str);
										}
										else {
											int kiekDar = ((PlayerInfo*)(peer->data))->lastMuted - (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
											long milli = kiekDar;
											//3600000 milliseconds in an hour
											long hr = milli / 3600000;
											milli = milli - 3600000 * hr;
											//60000 milliseconds in a minute
											long min = milli / 60000;
											milli = milli - 60000 * min;

											//1000 milliseconds in a second
											long sec = milli / 1000;

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are muted now.`8 Your mute will expire in `2 " + to_string(hr) + " `8h. `2 " + to_string(min) + " `8m. `2 " + to_string(sec) + " `8s."));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;

											sendChatMessage(peer, ((PlayerInfo*)(peer->data))->netID, "`7I'm `bcursed `#:( ");
											continue;
										}



									}
									else
									{
										((PlayerInfo*)(peer->data))->taped = false;
										((PlayerInfo*)(peer->data))->isDuctaped = false;
										((PlayerInfo*)(peer->data))->cantsay = false;
										sendState(peer);
										sendClothes(peer);
									}

								}

							}










							if (str == "/mod")
							{

								if (((PlayerInfo*)(peer->data))->adminLevel <= 666) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9MOD `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}





								if (world->name == "HELL") {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^This World Is Too `bCursed `^For That..."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}


								if (world->name == "UNDERGROUND") {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^This World Is Too `4Hot `^For That..."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}


								if (world->name == "JUMPS") {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^This World Is Too `9Special `^For That..."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}


								if (getPlyersWorld(peer)->allowMod == false && ((PlayerInfo*)(peer->data))->rawName != world->owner) {
									if (((PlayerInfo*)(peer->data))->adminLevel >= 1000) {


										((PlayerInfo*)(peer->data))->skinColor = atoi("-155");
										sendClothes(peer);
										//((PlayerInfo*)(peer->data))->isModState = true;
										((PlayerInfo*)(peer->data))->canDoubleJump = true;
										((PlayerInfo*)(peer->data))->canWalkInBlocks = true;
										sendState(peer);
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^Moderator Mode `2Enabled`^!``"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9/mod `^Is `4Disabled `^In This World!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else
								{
									((PlayerInfo*)(peer->data))->skinColor = atoi("-155");
									sendClothes(peer);
									//((PlayerInfo*)(peer->data))->isModState = true;
									((PlayerInfo*)(peer->data))->canDoubleJump = true;
									((PlayerInfo*)(peer->data))->canWalkInBlocks = true;
									sendState(peer);
								}
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^Moderator Mode `2Enabled`^!``"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								string text = "action|play_sfx\nfile|audio/secret.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);
								ENetPacket* packet2 = enet_packet_create(data,
									5 + text.length(),
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p.data;
								delete data;
							}

							else if (str == "/news")
							{
								GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`5GTLT`w `8Update `@6.7``|left|5956|noflags|0|0|\n\nadd_image_button|okgoss|interface/large/anni_sta.rttex|noflags|||\n\nadd_spacer|\nadd_label_with_icon|small|`#Gem Storage`^! Added new block `9The `#Gem Storage `^Allows you to `9Store `9Gems `^In it! Can be `2Purchased `^In the `4Store`^!|left|9418|\n\nadd_spacer|\nadd_label_with_icon|small|`eOcean Update`^! `^Added New `43 `9Items `w[`eOcean Chest`9,`e Ocean Wings`9, `eOcean Token`w] `^This `eEvent `^Lasts For `43 `9Months`^! More `9Information `^About `eWinter Chest `^Can Be Found In The `4Store`^!|left|7328|\n\nadd_spacer|\nadd_label_with_icon|small|`#Server Renamed`^! `9Server Name `4GTOS `6[`wGrowtopia Of Sebia`6] `^Changed To `4GTLT `6[`wGrowtopia Lithuania`6]`^!|left|32|\n\nadd_spacer|\nadd_label_with_icon|small|`#Multifacing Update`^! Now `9Blocks `^For `6Example Crouch `^Will be placed in the `#Directory `^You Are `9Looking At`^! `6Special Thanks For The `9Update `6To `wLuc1fer`6!|left|828|\n\nadd_spacer|\nadd_label_with_icon|small|`#New Features`^! Added New `9Command `@/flag <`wID`@> `^Allows you to change your flag into `9Any Block `^You Want! Finally... `9/mod `^Fully Fixed`^! `6Special Thanks For The `9Update `6To `wLuc1fer`6!|left|1796|\n\nadd_spacer|\nadd_label_with_icon|small|`#Performance Update`^! Removed `4Fake Sebia `^Useless `9Codes`^ Added New `2Spring `9Chest `^To the `4Store`^!|left|32|\n\nadd_spacer|\nadd_label_with_icon|small|`#Purple Phoenix Wings`^! New `9ULTRA RARE `^Wings! `6Obtainable From The `4Store `w[`8Legendary Craftable Items`w] `4Hurry! `9Theres Only `23 Of Them `9In The `5Game`9!|left|9410|\n\nadd_spacer|\nadd_label_with_icon|small|`#Valentine Update! `^Added `4ALL NEW `#VALENTINE `4ITEMS`^! Added New `9Golden Booty Chest `8Obtainable `^Via `4Shop `w[`4Available Only During `#Valentine`w]`^!|left|3402|\n\nadd_spacer|\nadd_label_with_icon|small|`eBig Update! `^Added New `9Command `4/givelevel `^Improved `9Commands `w[`4/pban /unban /clear /giverank`w]`^! Also... `2Earth `9Fragments `^Are now obtainable from breaking `4ANY `9Block`^!|left|828|\n\nadd_spacer|\nadd_label_with_icon|small|`eNew Block! `^Added `9The `eXP `9Block `^Obtainable From Breaking `w[`4???`w] `9Blocks`^! Gives you `9Bunch of `eXP `^And `9Gems`^!|left|9358|\n\nadd_spacer|\nadd_label_with_icon|small|`eNew Wings! `^Added `9The `#Dyro Wings `^Only available for `9Dyro`^!|left|9356|\n\nadd_spacer|\nadd_label_with_icon|small|`ePlayers Requested Updates `##5! `8Whats new?.. `2NEW `#Unicorn! `^Harvesting `#Unicorns can give you 0-3 `9Crystals `^Per `4PUNCH`^! `#Unicorn `^Can be `2Bought `^From `4STORE`^!|left|1636|\n\nadd_spacer|\nadd_label_with_icon|small|`@Big Changes! `^Added All New Items `93.01 `^Fixed World's Corruption `4Bug`^!|left|9294|\n\nadd_spacer|\nadd_label_with_icon|small|`@New Command! `^Added `4/dr ^& `4/undr `^And by using this command it toggles `4Dr. Title`^! You must be at least `9Level `2300 `^To use it`^!|left|828|\n\nadd_spacer|\nadd_label_with_icon|small|`@New Feature! `^Now You Can `9Write `^How Much `6Crystals `^You Want To `4Buy `^In The `4Store`^! Also... We Have `9Fixed `^Old `4Bug `^With `bNegative `^Amount Of `9Crystals`^!|left|5076|\n\nadd_spacer|\nadd_label_with_icon|small|`@New Lock! `^Added `4The Lava Lock `^Available for `2Free`^! But `9Think Twice `^Before Placing It, Who knows what might `9Happen`^!|left|9308|\n\nadd_spacer|\nadd_label_with_icon|small|`@New Update! `^Added [`4ShowOff`^] `9Feature`^ Now you can `9Drop Items `^Without losing them! Fixed `4Bug `^That `1Ancient Altar `^Didn't Return To `9Inventory`^!|left|5072|\n\nadd_spacer|\nadd_label_with_icon|small|`@Paid Items Change! `^All `4Paid `eItems `9From the `4Store `9Are Now `2Totally Free`^! `^These `9Items `^Are `4STILL PAID`^: `9[`4Ancestral, TK69, War Hammers`9]`^!|left|3580|\n\nadd_spacer|\nadd_label_with_icon|small|`@Ancestral Update! `^From now you can upgrade `9Any Type `^Of `@Ancestral`^, By using `9Ancient Altar `^Which is available in the `4Store`^! Also... We are working on our `9Server Website `4www.gtltprivate.eu`^! Mostly This update bringed `9A Lot `^Bug fixes`^!|left|5086|\n\nadd_spacer|\nadd_label_with_icon|small|`@Rollback! `^Yesterday our server burned down. We have been forced to delete all players and worlds! All your gems and ranks will be recovered`^!|left|8|\n\nadd_spacer|\nadd_label_with_icon|small|`@New Wings! `^Added New Wings The `bDark Angel Wings `^Obtainable From `9The Underground Trader`^!|left|9306|\n\nadd_spacer|\nadd_label_with_icon|small|`@Underground Update! `^Added New Items! Added New `9The Underground Trader `^Which Can Be Found In `4Underground `^World [`4Underground`^]! And you can Exchange `bDark `9Fragments `^Into `9Items`^ By Trading with `9The Underground Trader`^!|left|9288|\n\nadd_spacer|\nadd_label_with_icon|small|`@Major Improvements! `^Fixed Crash Bugs, Optimised Server, Online Limit Increased To `950`^!|left|1796|\n\nadd_spacer|\nadd_label_with_icon|small|`@Dark Lock Update! `^Added New Lock The `bDark Lock`^! Available in store! This is the `9Rarest Lock `^In the game`^!|left|9290|\n\nadd_spacer|\nadd_label_with_icon|small|`@New Block! `^Added new block The `1Light Crystal `^Obtainable from `bOnyx Blocks`^! And gives you `9Up to 3000 Gems`^!|left|9240|\n\nadd_spacer|\nadd_label_with_icon|small|`@Performance Update! `^Removed block breaking `9effects`^! Improvements to `9/pay`^! New `9Mod-Logs`^!|left|5270|\n\nadd_spacer|\nadd_label_with_icon|small|`@Dirt Lock Update! `^Added custom item `2Dirt Lock`^! Available in the store for `910 `2Emeralds`^! With custom effects and more`^!|left|8470|\n\nadd_spacer|\nadd_label_with_icon|small|`@VPS Update! `^Changed server IP, Now VPS is stronger and can handle more players online! [`9Added Player Limit to `415`9]`^!|left|1796|\n\nadd_spacer|\nadd_label_with_icon|small|`@Rayman Price! `^Rayman are now available for `2300 GEMS `^[`4Offer Limited`^] `^In the `9Store`^! And other `9crash-BOT `^Fixes...|left|5480|\n\nadd_spacer|\nadd_label_with_icon|small|`@BAN Menu! `^Now you can choose how long to ban!|left|732|\n\nadd_spacer|\nadd_label_with_icon|small|`@Rayman! `^Fixed bugs with rayman and now rayman is 6 Far!|left|5480|\n\nadd_spacer|\nadd_label_with_icon|small|`@Doors! `^Are now fully working!|left|12|\n\nadd_spacer|\nadd_label_with_icon|small|`@Mail box'es `^Are now in beta mode!|left|1006|\n\nadd_spacer|\nadd_label_with_icon|small|`@Bugs Fixes `^And `@New Features`^! `9Increased chance to get more gems breaking `bOnyx Blocks `9And `#Amethyst Blocks `9New machine! `7The Magic Machine `9Available in the store!|left|3146|\n\nadd_spacer|\nadd_label_with_icon|small|`@Guilds `^And `@Security Update`^! `9New `4AUTO BAN `9Detection! GTLT Will now detect illegal clients and `4AUTO BAN `9Players! `9Guilds Are Now `^Fully Working`9!|left|5270|\n\nadd_spacer|\nadd_label_with_icon|small|`^Beta `@Development Update `##2`^! `9Guilds `^Are now `450% `^Working! `9New minigame `eThe PvP Wars`9! `^PvP Are now in `@beta `^Mode! And available in world `9PvP`^!|left|262|\n\nadd_spacer|\nadd_label_with_icon|small|`^Beta `@Development Update`^! `9Doors And Stuff Weather Machine `^Are now under `@beta `^mode! `9Warning! `9Doors And Stuff Weather Machine `^Are not fully finished! So use them at your own risk!|left|262|\n\nadd_spacer|\nadd_label_with_icon|small|`9New `eUPGRADE INVENTORY `9Feature! `^From now you can upgrade your inventory in the store for 30 `2WLS `^Each upgrade give you `4+30 Slots`^! `9Also... We have fixed `2World Locks `9And `1Diamond Locks `9Bug! `^And `@Chest's `^Prices Were Decreased!|left|2812|\n\nadd_spacer|\nadd_label_with_icon|small|`9Huge Update! A lot of improvements, bug fixes was made!|left|828|\n\nadd_spacer|\nadd_label_with_icon|small|`ePlayers Requested Updates `##4! `8Whats new?.. `2NEW `eATM Machine! `^Harvesting ATM Machines can give you 5-10 `9Gems `^Per `4PUNCH`^! `eATM Machine `^Can be `2Bought `^From `4STORE`^!|left|826|\n\nadd_spacer|\nadd_label_with_icon|small|`^ ADDED NEW COMMANDS! `4/ignore <nick> `^and`4 /unignore <nick> `^commands! NOW, if you will add a player to the ignore list, he will not be able to send you a private message(`4/msg`^6)! FIXED `4/curse, /uncurse, /mute, /unmute, /ban, /pban, /unban, /hardban`^ commands! Now it works correctly!|left|3146|\n\nadd_spacer|\nadd_label_with_icon|small|`@New block in store! `4The `bOnyx Block's`@! Those blocks can give you up to `4150-200 `@Gems per block`9!|left|7382|\n\nadd_spacer|\nadd_label_with_icon|small|`ePlayers Requested Updates `##3! `8Whats new?.. `9Fixed many bugs -> `9Now /sb `2Shows `9Cooldown time properly, Chests are now fully `2Working, `9And now when you are buying World Locks you can choose how many you want to `2buy`9!|left|826|\n\nadd_spacer|\nadd_label_with_icon|small|`ePlayers Requested Updates `##2! `8Whats new?.. `9New shop category `#Chests `9Now you can open chests and obtain gems, crystals or even items!... [`4Warning!`9] Chests are not fully working yet! `4Bugs `9May occur!|left|826|\n\nadd_spacer|\nadd_label_with_icon|small|`ePlayers Requested Updates `##1! `8Whats new?.. `9Now `2VIP `9And higher ranks don't have `6flags`9! Added new `2command `4/sdb `4Costs `920K To use! New `2Store `9Category `#Consumable `eItems `9Added new commands /msb, /vsb, /asb, /dsb, /lsb... `#And thats not all for sure! `9More comming `2SOON!|left|826|\n\nadd_spacer|\nadd_label_with_icon|small|`4Many Bug Fixes`9! `#Out Of World Crash FIXED! Now `4You Can't `#Place `2Ancestral `#As a block`9! `#And many many other `5fixes`#!|left|262|\n\nadd_spacer|\nadd_label_with_icon|small|`4Hot Bug FIX! `9Bug related to dissapearing items from inventory have been `2Fixed`9!|left|3424|\n\nadd_spacer|\nadd_label_with_icon|small|`8Update! `9Whats new? `eBreaking `@world locks `eor `@diamond locks `ewill `9return `e to your `5inventory`e! `2And new `4Ring Store `9Optimizations!|left|2812|\n\nadd_spacer|\nadd_label_with_icon|small|`eWinterfest `9Sales Starts! `2Enjoy up to -50% discount for ranks! And `9Gems `2Are now `415K/WL`2! More `9Information Can be found in our `6Discord`2!|left|3146|\n\nadd_spacer|\nadd_label_with_icon|small|`9New features and bug fixes update! Whats new? `eNew store category [`9Rings`e], Fixed unlimited `9gems `ebug [Hackers were punished], New `2World Owner `ePrefixes!, Fixed many other bugs...|left|5270|\n\nadd_spacer|\nadd_label_with_icon|small|`9WORLDS TRADING SYSTEM IS HERE! `2We added a new world trading system! If you are an owner of your world you can wrench on any player and press 'trade a world'! The buyer must enter /tradeworld command to take further actions!|left|3606|\n\nadd_spacer|small|\nadd_label_with_icon|small|\n\nadd_spacer|small|\n\nadd_url_button|comment|`9Join Our Discord Server``|noflags|https://discord.gg/qtSdMWx |Join Discord Server ?|4|\n\nadd_spacer|small|0|0|)|noflags|0|0|\nnend_dialog|gazette||OK|small|\nnend_dialog|gazette||OK||left|\nadd_button|chcsss0|`^Close|noflags|0|0|\nadd_quick_exit|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet3 = enet_packet_create(p3.data,
									p3.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet3);
								delete p3.data;
							}








							else if (str == "/mods") {
								if (((PlayerInfo*)(peer->data))->adminLevel <= 333) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9King `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								string x;

								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;

									if (((PlayerInfo*)(currentPeer->data))->adminLevel >= 555) {
										x.append("`^" + ((PlayerInfo*)(currentPeer->data))->tankIDName + "``, ");
									}

								}
								x = x.substr(0, x.length() - 2);

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5Moderators online: " + x));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
							}
							else if (str == "/nicked") {
								if (((PlayerInfo*)(peer->data))->adminLevel >= 777) {
									string x = "";


									ENetPeer* currentPeer;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;


										if (((PlayerInfo*)(currentPeer->data))->adminLevel > 333) {

											string name = ((PlayerInfo*)(currentPeer->data))->displayName;

											if ((((PlayerInfo*)(currentPeer->data))->isNicked == true))
											{

												x.append("`w'" + ((PlayerInfo*)(currentPeer->data))->displayName + " " + "->" + ((PlayerInfo*)(currentPeer->data))->rawName + "``, ");

											}











										}


									}
									x = x.substr(0, x.length() - 2);


									if (x == "")
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "``Nicked vips/mods/devs: None visible."));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "``Nicked vips/mods/devs: " + x));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);

										delete p.data;
									}

								}
							}
							else if (str == "/go")
							{
							string act = ((PlayerInfo*)(peer->data))->lastSbbWorld;
							if (act == "") {
								GamePacket po = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Unable to track down the location of the broadcast."));
								ENetPacket* packet = enet_packet_create(po.data,
									po.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
							}
							else if (act == ((PlayerInfo*)(peer->data))->currentWorld) {
								GamePacket po = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Sorry, but you are already in the world!"));
								ENetPacket* packet = enet_packet_create(po.data,
									po.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
							}
							else {
								sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
								joinWorld(peer, act, 0, 0);
							}
							}
							else if (str == "/find")
							{
								if (((PlayerInfo*)(peer->data))->haveGrowId)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "add_label_with_icon|big|`9Item Finder``|left|3146|\nadd_textbox|`^Enter a word below to Find the item!|\nadd_text_input|item|`^Item Name||30|\nend_dialog|findid|Cancel|Find the item!|\nadd_quick_exit|\n"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									//enet_host_flush(server);
									delete p.data;
								}
							}
							else if (str == "/online") {

								string online = "";
								int total = 0;
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->adminLevel >= 0) {
										online += ((PlayerInfo*)(currentPeer->data))->displayName + "`o, `w";
										total++;
									}
								}
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5Players online [`wTotal: `2" + to_string(total) + "`5]: `w" + online));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							else if (str.substr(0, 8) == "/summon ") {


								if (((PlayerInfo*)(peer->data))->isCreator != true) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command is currently only available for `7Server Creator`^!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								if (world->name == "UNDERGROUND") {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^This World Is Too `4Hot `^For That..."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}
								if (str.substr(8, cch.length() - 8 - 1) == "") continue;
								if (((PlayerInfo*)(peer->data))->rawName == str.substr(8, cch.length() - 8 - 1)) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You can't summon yourself!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}

								if ((str.substr(8, cch.length() - 8 - 1) == "sebia")) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You are not allowed to summon server creators!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}
								if (((PlayerInfo*)(peer->data))->adminLevel >= 888) {
									string name = str.substr(8, str.length());


									ENetPeer* currentPeer;


									bool found = false;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;


										string name2 = ((PlayerInfo*)(currentPeer->data))->rawName;


										std::transform(name.begin(), name.end(), name.begin(), ::tolower);
										std::transform(name2.begin(), name2.end(), name2.begin(), ::tolower);



										if (name == name2) {
											if (((PlayerInfo*)(currentPeer->data))->currentWorld == "HELL" || ((PlayerInfo*)(currentPeer->data))->currentWorld == "EXIT" || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000)
											{
												found = false;
											}
											else
											{
												GamePacket pox = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`5[GTLT] `^You were `@Summoned `^By `#Moderator`^!"));
												ENetPacket* packetpox = enet_packet_create(pox.data,
													pox.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packetpox);
												updateAllClothes(currentPeer);
												sendClothes(currentPeer);
												sendPlayerToPlayer(currentPeer, peer);
												found = true;
											}

											if (((PlayerInfo*)(currentPeer->data))->adminLevel >= 1000 && ((PlayerInfo*)(currentPeer->data))->adminLevel == ((PlayerInfo*)(peer->data))->adminLevel)
											{
												GamePacket pox = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`5[GTLT] `^You were `@Summoned `^By `#Moderator`^!"));
												ENetPacket* packetpox = enet_packet_create(pox.data,
													pox.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packetpox);
												updateAllClothes(currentPeer);
												sendClothes(currentPeer);
												sendPlayerToPlayer(currentPeer, peer);
												found = true;
											}

										}
									}
									if (found) {
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Summoning Player..."));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Player `4Not Found `@Or Summoning the player is `4Prohibited`@!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
									}
								}


							}
							else if (str.substr(0, 5) == "/pay ")
							{
								std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
								std::string content((std::istreambuf_iterator<char>(ifsz)),
									(std::istreambuf_iterator<char>()));
								int b = atoi(content.c_str());
								ENetPeer* currentPeer;
								string imie = str.substr(5, cch.length() - 5 - 1);
								int phm = 0;
								if (imie.find(" ") != std::string::npos)
								{
									phm = atoi(imie.substr(imie.find(" ") + 1).c_str());
									imie = imie.substr(0, imie.find(" "));
								}
								else {
									GamePacket p4 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Sending Payment Failed"));
									ENetPacket* packet4 = enet_packet_create(p4.data,
										p4.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet4);
									delete p4.data;
								}
								if (((PlayerInfo*)(peer->data))->rawName == str.substr(5, cch.length() - 5 - 1)) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You are not allowed to pay yourself!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}
								if (phm < 0)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@You can't pay negative amount of `9gems`@!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								else if (b >= phm)
								{
									GamePacket p = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/cash_icon_overlay.rttex"), "Player`w " + ((PlayerInfo*)(peer->data))->rawName + "`o paid you `2" + std::to_string(phm) + " Gems`o!"), "audio/piano_nice.wav"), 0));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->rawName == imie or ((PlayerInfo*)(currentPeer->data))->displayName == imie)
										{
											std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".txt");
											std::string acontent((std::istreambuf_iterator<char>(ifsz)),
												(std::istreambuf_iterator<char>()));
											int a = atoi(acontent.c_str());
											int bb = b - phm;
											int aa = a + phm;
											ofstream myfile;
											myfile.open("gemdb/" + ((PlayerInfo*)(currentPeer->data))->rawName + ".txt");
											myfile << aa;
											myfile.close();
											myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											myfile << bb;
											myfile.close();
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9You've sent `2" + to_string(phm) + " `9gems to `2" + imie + "`9!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											GamePacket psa = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), bb));
											ENetPacket* packetsa = enet_packet_create(psa.data, psa.len, ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packetsa);
											GamePacket psa2 = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), aa));
											ENetPacket* packetsa2 = enet_packet_create(psa2.data, psa2.len, ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packetsa2);
											enet_peer_send(currentPeer, 0, packet);
											delete psa.data;
											delete psa2.data;
										}
									}
									delete p.data;
								}
								else if (b < phm)
								{
									GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Sorry but you need " + std::to_string(phm) + " `9Gems `@To `2Pay `@Someone!"));
									ENetPacket* packet3 = enet_packet_create(p3.data,
										p3.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet3);
									delete p3.data;
								}
								GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD LOGS] `1[`o" + currentDateTime() + "`1] `2" + ((PlayerInfo*)(peer->data))->displayName + " (`$" + ((PlayerInfo*)(peer->data))->tankIDName + "`2) has just payed `w" + imie + " `2for " + to_string(phm) + " gems!"));
								string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (!((PlayerInfo*)(currentPeer->data))->radio)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->adminLevel > 777) {
										ENetPacket* packet6 = enet_packet_create(p6.data,
											p6.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet6);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);

										//enet_host_flush(server);
									}
								}
							}
							else if (str.substr(0, 6) == "/pull ")
							{
								cout << "[INFO]: Player " << ((PlayerInfo*)(peer->data))->displayName << " Issued Command /pull" << endl;
								WorldInfo* world = getPlyersWorld(peer);
								if (((PlayerInfo*)(peer->data))->rawName == world->owner)
								{
									ENetPeer* currentPeer;
									string imie = str.substr(6, cch.length() - 6 - 1);
									int x = ((PlayerInfo*)(peer->data))->x;
									int y = ((PlayerInfo*)(peer->data))->y;
									string dupa;
									GamePacket pmsg = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`o" + ((PlayerInfo*)(peer->data))->displayName + " `5pulls " + imie));
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{
											if (((PlayerInfo*)(currentPeer->data))->rawName == imie or ((PlayerInfo*)(currentPeer->data))->displayName == imie)
											{
												dupa = ((PlayerInfo*)(currentPeer->data))->rawName;
												PlayerMoving data;
												data.packetType = 0x0;
												data.characterState = 0x924; // animation
												data.x = x;
												data.y = y;
												data.punchX = -1;
												data.punchY = -1;
												data.XSpeed = 0;
												data.YSpeed = 0;
												data.netID = ((PlayerInfo*)(currentPeer->data))->netID;
												data.plantingTree = 0x0;
												SendPacketRaw(4, packPlayerMoving(&data), 56, 0, currentPeer, ENET_PACKET_FLAG_RELIABLE);
												GamePacket p2 = packetEnd(appendFloat(appendString(createPacket(), "OnSetPos"), x, y));
												memcpy(p2.data + 8, &(((PlayerInfo*)(currentPeer->data))->netID), 4);
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet2);
												delete p2.data;
											}
										}
									}
									ENetPacket* packetmsg = enet_packet_create(pmsg.data,
										pmsg.len,
										ENET_PACKET_FLAG_RELIABLE);
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{
											enet_peer_send(currentPeer, 0, packetmsg);
										}
									}
									delete pmsg.data;
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You need to be world owner to use that command."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

								}
							}
							else if (str == "/cry")
							{
								GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), ":'("), 0));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer))
									{
										enet_peer_send(currentPeer, 0, packet2);
									}
								}
								delete p2.data;
								continue;
							}

							else if (str.substr(0, 4) == "/me ")
							{
								if (((PlayerInfo*)(peer->data))->isDuctaped == false && ((PlayerInfo*)(peer->data))->haveGrowId == true)
								{
									string namer = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`#<`w" + namer + " `#" + str.substr(3, cch.length() - 3 - 1).c_str() + "`5>"), 0));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w<" + namer + " `#" + str.substr(3, cch.length() - 3 - 1).c_str() + "`w>"));
									ENetPacket* packet3 = enet_packet_create(p3.data,
										p3.len,
										ENET_PACKET_FLAG_RELIABLE);
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{
											enet_peer_send(currentPeer, 0, packet2);
											enet_peer_send(currentPeer, 0, packet3);
										}
									}
									delete p2.data;
									delete p3.data;
									continue;
								}
							}
							else if (str.substr(0, 6) == "/warn ") {

								if (((PlayerInfo*)(peer->data))->adminLevel <= 777) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Admin `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}



								string warn_info = str;

								size_t extra_space = warn_info.find("  ");
								if (extra_space != std::string::npos) {
									warn_info.replace(extra_space, 2, " ");
								}

								string delimiter = " ";
								size_t pos = 0;
								string warn_user;
								string warn_message;
								if ((pos = warn_info.find(delimiter)) != std::string::npos) {
									warn_info.erase(0, pos + delimiter.length());
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Please specify a `9Player `@You want to `4Warn`@!"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}

								if ((pos = warn_info.find(delimiter)) != std::string::npos) {
									warn_user = warn_info.substr(0, pos);
									warn_info.erase(0, pos + delimiter.length());
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Please enter your `4Warn `@Reason!"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}

								warn_message = warn_info;
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->rawName == warn_user) {

										ofstream warnslog("logs/warns.txt", ios::app);
										warnslog << "administrator " << ((PlayerInfo*)(peer->data))->rawName << "used /warn " << warn_user << " " << warn_message << endl;
										warnslog.close();


										ifstream ifff("players/" + PlayerDB::getProperName(warn_user) + ".json");
										json j;
										ifff >> j;
										ifff.close();
										int kiekDabarTuriWarns = 0;
										bool shouldban = false;

										kiekDabarTuriWarns = j["receivedwarns"];
										if (kiekDabarTuriWarns < 2)
										{
											kiekDabarTuriWarns++;
											j["receivedwarns"] = kiekDabarTuriWarns;
										}
										else
										{
											j["receivedwarns"] = 0;

											/*ofstream savebantime("timebanned/" + PlayerDB::getProperName(warn_user) + ".txt");
											savebantime << (GetCurrentTimeInternalSeconds() + (1440 * 60));
											savebantime.close();*/
											
											shouldban = false;

										}

										ofstream offf("players/" + PlayerDB::getProperName(warn_user) + ".json");
										offf << j;
										offf.close();

										GamePacket p0;
										if(shouldban)
										{
											p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^Player `9" + warn_user + " `^Have Been `4Warned`^ [3/3] `4and got banned for a day!"));
										}
										else
										{
											p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^Player `9" + warn_user + " `^Have Been `4Warned`^[" + to_string(kiekDabarTuriWarns) + "/3]`4!"));

										}
										
										ENetPacket* packet0 = enet_packet_create(p0.data,
											p0.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet0);
										delete p0.data;
										

										GamePacket ps;
										if (shouldban)
										{
											 ps = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`wWarning[3/3] from `4Admin `2" + ((PlayerInfo*)(peer->data))->rawName + "`0: " + warn_message), "audio/hub_open.wav"), 0));
										}
										else
										{
											 ps = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`wWarning[" + to_string(kiekDabarTuriWarns) + "/3] from `4Admin `2" + ((PlayerInfo*)(peer->data))->rawName + "`0: " + warn_message), "audio/hub_open.wav"), 0));
										}

										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										delete ps.data;

										if (shouldban)
										{
											Player::OnConsoleMessage(currentPeer, "`wWarning from SYSTEM: `4You have been banned for`9 1 day `4because you got [`93`4/`93`4] warnings! Last warning was given by `2"+ ((PlayerInfo*)(peer->data))->rawName +"");
											enet_peer_disconnect_later(currentPeer, 0);
										}

										break;
									}
								}


								GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Just `2WARNED `4player `w" + warn_user + " `6 with reason: `4 " + warn_message + "`6."));
								string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (!((PlayerInfo*)(currentPeer->data))->radio)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888) {
										ENetPacket* packet6 = enet_packet_create(p6.data,
											p6.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet6);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);

										//enet_host_flush(server);
									}
								}
								delete data;
								delete p6.data;


							}
							else if (str == "/logs") {
							if (((PlayerInfo*)(peer->data))->adminLevel < 999) {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Creator `^And `@Higher `^ranks!"));
								ENetPacket * packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								continue;
							}
							//string unbanlogstring, warnslogstring, givelevellogstring, givegemslogstring, giveranklogstring;

							ifstream unbanlog("logs/unban.txt");
							string unbanlogstring((std::istreambuf_iterator<char>(unbanlog)),
								(std::istreambuf_iterator<char>()));
							unbanlog.close();

							ifstream warnslog("logs/warns.txt");
							string warnslogstring((std::istreambuf_iterator<char>(warnslog)),
								(std::istreambuf_iterator<char>()));
							warnslog.close();

							ifstream givelevellog("logs/givelevel.txt");
							string givelevellogstring((std::istreambuf_iterator<char>(givelevellog)),
								(std::istreambuf_iterator<char>()));
							givelevellog.close();

							ifstream givegemslog("logs/givegems.txt");
							string givegemslogstring((std::istreambuf_iterator<char>(givegemslog)),
								(std::istreambuf_iterator<char>()));
							givegemslog.close();

							ifstream giveranklog("logs/giverank.txt");
							string giveranklogstring((std::istreambuf_iterator<char>(giveranklog)),
								(std::istreambuf_iterator<char>()));
							giveranklog.close();

							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wList of Logs``|left|18|\n\nadd_spacer|small|\nadd_label|small|`wCommands log:|left|1432|\nadd_label_with_icon|small|`w/unban logs:|left|1432|\nadd_label_with_icon|small||left|1432|\nadd_label_with_icon|small|`w"+ unbanlogstring +"|left|1432|\nadd_label_with_icon|small||left|1432|\nadd_label_with_icon|small|`w/givelevel logs:|left|1432|\nadd_label_with_icon|small||left|1432|\nadd_label_with_icon|small|`w" + givelevellogstring + "|left|1432|\nadd_label_with_icon|small||left|1432|\nadd_label_with_icon|small|`w/givegems logs:|left|1432|\nadd_label_with_icon|small||left|1432|\nadd_label_with_icon|small|`w" + givegemslogstring + "|left|1432|\nadd_label_with_icon|small||left|1432|\nadd_label_with_icon|small|`w/giverank logs:|left|1432|\nadd_label_with_icon|small||left|1432|\nadd_label_with_icon|small|`w" + giveranklogstring + "|left|1432|\nadd_label_with_icon|small||left|1432|\nadd_label_with_icon|small|`w/warn logs:|left|1432|\nadd_label_with_icon|small||left|1432|\nadd_label_with_icon|small|`w" + warnslogstring + "|left|21|\nadd_label|small|~`e@Herino#1175|left|32|\nadd_button|chsssssc0|`0I done.|"));
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);
							delete p.data;

							}
							else if (str == "/rules") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wHelp & Rules``|left|18|\n\nadd_spacer|small|\nadd_label|small|`wTo keep this community,We've got some rules to follow it:|left|1432|\nadd_label_with_icon|small|`wKeep your password secret.sharing your password will result in stolen world.|left|1432|\nadd_label_with_icon|small|`wApplying punishments that don't comply with /punishments rules may result in your admin-level being demoted.|left|1432|\nadd_label_with_icon|small|`0Be civil. Bullying, racism,excessive profanity,sexual content and abuse behavior is not allowed|left|1432|\nadd_label_with_icon|small|`wUsing 1 hit ingame is illegal.Except you are using Rayman + sorrow.|left|1432|\nadd_label_with_icon|small|`wTrying to get punishment or asking for punishment can earn you a worse punishment.|left|1432|\nadd_label_with_icon|small|`wDon't lie about mods or fake official GrowtopiaOS system messages.``|left|1432|\nadd_label_with_icon|small|`wSelling gems for outside server items is illegal!|left|1432|\nadd_label_with_icon|small|`wDo not sb about a rude stuff.|left|1432|\nadd_label_with_icon|small|`0Do not war sb.|left|1432|\nadd_label_with_icon|small|`0Any advertising in any manner will lead to a ban or mute|left|1432|\nadd_label_with_icon|small|`0A Staff insult or other players can lead to a demotion in rank or mute or ban or curse.|left|1432|\nadd_label_with_icon|small|`0Any mention of selling your account will result in your account being blocked.|left|1432|\nadd_label_with_icon|small|`w@Moderators are here to enforce the rules. Abusing, spamming or harassing mods will have consequences.|left|1432|\nadd_label_with_icon|small|`w/ban, /mute, /curse, /warn without proofs may result in demotion .|left|1432|\nadd_label|small|`0Thank You!|left|21|\nadd_label|small|~`e@Herino#1175|left|32|\nadd_button|chsssssc0|`0I accept these Rules.|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}

							else if (str == "/punishments") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wList of Punishments``|left|18|\n\nadd_spacer|small|\nadd_label|small|`wEach staff member should follow these punishments rules:|left|1432|\nadd_label_with_icon|small|`wMUTE punishments. Use: /mute <user> <minutes>|left|1432|\nadd_label_with_icon|small||left|1432|\nadd_label_with_icon|small|`w1. Swearing: 20-40 minutes mute.|left|1432|\nadd_label_with_icon|small|`wHumiliation, Insult: 60-120 minutes mute.|left|1432|\nadd_label_with_icon|small|`wRacism, Nazism: 60 minutes mute.|left|1432|\nadd_label_with_icon|small|`wFlood, Spam: 10-25 minutes mute.|left|1432|\nadd_label_with_icon|small|`wStaff insult: 240-300 minutes mute.|left|1432|\nadd_label_with_icon|small|`0Threats to other players: 120 minutes mute.|left|1432|\nadd_label_with_icon|small|`0Threats to harm the server: 480 minutes mute.|left|1432|\nadd_label_with_icon|small|`0Advertising other servers, hacks(if you cannot ban him): 10080 minutes mute.|left|1432|\nadd_label|small|`0Applying punishments that don't comply with these rules may result in your admin-level being demoted.|left|1432|\nadd_label_with_icon|small|`wBAN punishments. Use: /pban <user> <minutes>|left|1432|\nadd_label_with_icon|small||left|1432|\nadd_label_with_icon|small|`w1. hacks: 7200 minutes ban.|left|1432|\nadd_label_with_icon|small|`w2. Scamming: 4320 minutes ban.|left|1432|\nadd_label_with_icon|small|`w3. Advertising other servers/hacks: 43200 minutes ban.|left|1432|\nadd_label_with_icon|small|`w4. Sharing IP, personal info: 5760 minutes ban.|left|1432|\nadd_label_with_icon|small|`w5. Punishing with no reason: demote -1 rank + ban [60 - 1440] minutes.|left|21|\nadd_label|small|~`e@Herino#1175|left|32|\nadd_button|chsssssc0|`0I accept these Punishments.|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
							}
							else if (str == "/report") {
							Player::OnConsoleMessage(peer, "`4Usage: `2/report reportText");
							}

							else if (str.substr(0, 8) == "/report ") {

							if (((PlayerInfo*)(peer->data))->isDuctaped == true)
							{
								GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are muted now!"));
								ENetPacket* packet0 = enet_packet_create(p0.data,
									p0.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet0);
								delete p0.data;
								continue;
							}

							string reportText = str.substr(8, cch.length() - 8 - 1);

							if (reportText == "")
							{
								Player::OnConsoleMessage(peer, "`4Your report text should be not empty.");
								continue;
							}

							GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[REPORT]: `3from player `2"+ ((PlayerInfo*)(peer->data))->rawName +". `4His violation/question: `2"+ reportText +""));
							string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
							BYTE* data = new BYTE[5 + text.length()];
							BYTE zero = 0;
							int type = 3;
							memcpy(data, &type, 4);
							memcpy(data + 4, text.c_str(), text.length());
							memcpy(data + 4 + text.length(), &zero, 1);

							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								if (!((PlayerInfo*)(currentPeer->data))->radio)
									continue;
								if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888) {
									ENetPacket* packet6 = enet_packet_create(p6.data,
										p6.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(currentPeer, 0, packet6);




									ENetPacket* packet2 = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(currentPeer, 0, packet2);

									//enet_host_flush(server);
								}
							}
							delete data;
							delete p6.data;


							}

							else if (str.substr(0, 5) == "/ans ") {
							

							if (((PlayerInfo*)(peer->data))->isDuctaped == true)
							{
								GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are muted now!"));
								ENetPacket* packet0 = enet_packet_create(p0.data,
									p0.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet0);
								delete p0.data;
								continue;
							}

							if (((PlayerInfo*)(peer->data))->adminLevel < 777) {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Staff members!"));
								ENetPacket * packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								continue;
							}



							string ban_info = str;

							size_t extra_space = ban_info.find("  ");
							if (extra_space != std::string::npos) {
								ban_info.replace(extra_space, 2, " ");
							}

							string delimiter = " ";
							size_t pos = 0;
							string ban_user;
							string ban_time;
							if ((pos = ban_info.find(delimiter)) != std::string::npos) {
								ban_info.erase(0, pos + delimiter.length());
							}
							else {
								GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /ans <user> <answer text>"));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete ps.data;
								continue;
							}

							if ((pos = ban_info.find(delimiter)) != std::string::npos) {
								ban_user = ban_info.substr(0, pos);
								ban_info.erase(0, pos + delimiter.length());
							}
							else {
								GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /ans <user> <answer text>"));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete ps.data;
								continue;
							}

							ban_time = ban_info;
							//cout << "administrator "<<((PlayerInfo*)(peer->data))->rawName <<"used /giverank " << ban_user << " " << ban_time;
							string playerName = PlayerDB::getProperName(ban_user);
							string answerText = ban_time;
							bool sucanswered = false;

							ENetPeer* currentPeer;

							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								if (((PlayerInfo*)(currentPeer->data))->rawName == playerName) {
									Player::OnConsoleMessage(currentPeer, "`9[`#GTLT STAFF`9]`w: `3Administrator `2"+ ((PlayerInfo*)(peer->data))->rawName +"`3 just answered to your question`w:`2 "+ answerText + "");
									Player::OnConsoleMessage(peer, "`2You successfully answered to `8"+playerName+"'s `2question.");
									sucanswered = true;




									GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Just `2ANSWERD `8to `4player's `w" + playerName + " `6 question. `4The answer: `2 " + answerText + ""));
									string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888) {
											ENetPacket* packet6 = enet_packet_create(p6.data,
												p6.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet6);




											ENetPacket* packet2 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet2);

											//enet_host_flush(server);
										}
									}
									delete data;
									delete p6.data;




									break;
								}
	
							}
							if (!sucanswered)
							{
								Player::OnConsoleMessage(peer, "`4The player `2" + playerName + " `4 is not online.");
							}

							}

							else if (str.substr(0, 3) == "/r ") {
								if (((PlayerInfo*)(peer->data))->haveGrowId == false) {
									GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oTo prevent abuse, you `4must `obe `2registered `oin order to use this command!"));
									ENetPacket* packet0 = enet_packet_create(p0.data,
										p0.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet0);
									delete p0.data;
									continue;
								}


								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->rawName == ((PlayerInfo*)(peer->data))->lastMsger) {

										((PlayerInfo*)(currentPeer->data))->lastMsger = ((PlayerInfo*)(peer->data))->rawName;
										GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6>> (Sent to `2" + ((PlayerInfo*)(peer->data))->lastMsger + "`6)"));
										ENetPacket* packet0 = enet_packet_create(p0.data,
											p0.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet0);
										delete p0.data;
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6>> Private msg from `2" + ((PlayerInfo*)(peer->data))->displayName + "`6 (`$in " + ((PlayerInfo*)(peer->data))->currentWorld + "`6) : " + str.substr(3, cch.length() - 3 - 1) + "`o"));
										string text = "action|play_sfx\nfile|audio/pay_time.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);
										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);
										delete data;
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										delete ps.data;
										break;
									}
								}
							}

							else if (str.substr(0, 4) == "/rgo") {
								string act = ((PlayerInfo*)(peer->data))->lastMsgWorld;
								if (act == "") {
									GamePacket po = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Unable to track down the location of the message."));
									ENetPacket* packet = enet_packet_create(po.data,
										po.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
								else if (act == ((PlayerInfo*)(peer->data))->currentWorld) {
									GamePacket po = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "Sorry, but you are already in the world!"));
									ENetPacket* packet = enet_packet_create(po.data,
										po.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
								else {
									sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
									joinWorld(peer, act, 0, 0);
								}
							}


							else if (str.substr(0, 8) == "/answer ") {
								ENetPeer * currentPeer;
								int imie = atoi(str.substr(8, cch.length() - 8 - 1).c_str());
								if (imie == 0) continue;
								if (imie == hasil) {
									resultnbr1 = 0;
									resultnbr2 = 0;
									hasil = 0;

									int currentGems = 0;
									ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									ifs >> currentGems;
									ifs.close();

									currentGems += prize;
									ofstream myfile;
									ofstream ofs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									ofs << currentGems;
									ofs.close();


									GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), currentGems));
									ENetPacket* packetpp = enet_packet_create(pp.data,
										pp.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packetpp);
									delete pp.data;

									prize = 0;


									string nama = ((PlayerInfo*)(peer->data))->displayName;
									ENetPeer * currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										sendConsole(currentPeer, "`9** GTLT Daily: Party Math Event Winner is `w" + nama + "`9!");
										sendSound(currentPeer, "pinata_lasso.wav");

									}
								}
							}
							else if (str.substr(0, 6) == "/flag ") {
							if (((PlayerInfo*)(peer->data))->adminLevel <= 444) {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9VIP `^And `@Higher `^ranks!"));
								ENetPacket * packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								continue;
							}






							string lol = str.substr(5, str.length());




								bool contains_non_alpha
									= !std::regex_match(lol, std::regex("^[0-9]+$"));



								if (contains_non_alpha)
								{
									int lol = atoi(str.substr(6).c_str());


									if (lol >= 0 && lol <= 9413)
									{


										GamePacket p2 = packetEnd(appendIntx(appendIntx(appendIntx(appendIntx(appendString(createPacket(), "OnGuildDataChanged"), 1), 2), lol), 0));
										memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
										ENetPacket* packet3 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (isHere(peer, currentPeer))
											{
												enet_peer_send(currentPeer, 0, packet3);
											}
										}
										delete p2.data;
									}
									else
									{

										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Please Only `4Numbers `9From `40-9412`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
								else
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Please Only `4Numbers`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}


								}
							
						
							else if (str == "/help") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`4YouTuber Commands``|left|826|\nadd_spacer|small|\n\nadd_label|small|`^/ignore <`9player`^> [`#Ignore Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unignore <`9player`^> [`#Remove Ignore Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/pban <`9player`^> [`#Permanently Ban Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/sseditworldbg <`9ID`^> [`#Change Background`^]|\nadd_spacer|small|\n\nadd_label|small|`^/save [`#Save All Worlds`^]|\nadd_spacer|small|\n\nadd_label|small|`^/wkick <`9player`^> [`#World Kick Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/achat <`9message`^> [`#Admin-Only Chat`^]|\nadd_spacer|small|\n\nadd_label|small|`^/info <`9player`^> [`#View Player Info`^]|\nadd_spacer|small|\n\nadd_label|small|`^/offlineinfo <`9player`^> [`#View Offline Info`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mods [`#View Online Mods`^]|\nadd_spacer|small|\n\nadd_label|small|`^/find [`#Search Item`^]|\nadd_spacer|small|\n\nadd_label|small|`^/color <`9number`^> [`#Change Skin Color`^]|\nadd_spacer|small|\n\nadd_label|small|`^/who [`#Show Players In World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/count [`#Show Online Count`^]|\nadd_spacer|small|\n\nadd_label|small|`^/sb <`9message`^> [`#Super Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/jsb <`9message`^> [`#Jammed Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/radio [`#Disable Broadcasts`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rules [`#Show Rules`^]|\nadd_spacer|small|\n\nadd_label|small|`^/go [`#Under Development!`^]|\nadd_spacer|small|\n\nadd_label|small|`^/news [`#Show News`^]|\nadd_spacer|small|\n\nadd_label|small|`^/p <`9id`^> [`#Currently Disabled!`^]|\nadd_spacer|small|\n\nadd_label|small|`^/clear [`#Clear World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/access <`9player`^> [`#Give Access`^]|\nadd_spacer|small|\n\nadd_label|small|`^/msg <`9player`^> [`#Send Private Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/r <`9message`^> [`#Reply Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/pull <`9player`^> [`#Pull Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/kick <`9player`^> [`#Kill Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rgo [`#Warp To Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/ssb <`9message`^> [`#Special Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/nick <`9nick`^> [`#Change Nickname`^]|\nadd_spacer|small|\n\nadd_label|small|`^/gsb <`9message`^> [`#Guardian Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/invis [`#Invisible Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mute <`9player`^> [`#Mute Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mod [`#Walk In Blocks`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unmod [`#Disable Mod Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/ban <`9player`^> [`#World Ban Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/warn <`9player`^> <`9message`^> [`#Warn Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unban <`9player`^> [`#Unban Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/summon <`9player`^> [`#Summon Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/freeze <`9player`^> [`#Freeze Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/warp <`9world`^> [`#Warp To World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/warpto <`9player`^> [`#Warp To Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/nuke <`9world`^> [`#Nuke World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/curse <`9player`^> [`#Curse Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/reset [`#Restarting Notification`^]|\nadd_spacer|small|\n\nadd_label|small|`^/gsm <`9message`^> [`#Global System Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/uncurse <`9player`^> [`#Remove Curse`^]|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`9Guardian Commands``|left|826|\nadd_spacer|small|\n\nadd_label|small|`^/ignore <`9player`^> [`#Ignore Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unignore <`9player`^> [`#Remove Ignore Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/pban <`9player`^> [`#Permanently Ban Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/sseditworldbg <`9ID`^> [`#Change Background`^]|\nadd_spacer|small|\n\nadd_label|small|`^/save [`#Save All Worlds`^]|\nadd_spacer|small|\n\nadd_label|small|`^/wkick <`9player`^> [`#World Kick Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/achat <`9message`^> [`#Admin-Only Chat`^]|\nadd_spacer|small|\n\nadd_label|small|`^/info <`9player`^> [`#View Player Info`^]|\nadd_spacer|small|\n\nadd_label|small|`^/offlineinfo <`9player`^> [`#View Offline Info`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mods [`#View Online Mods`^]|\nadd_spacer|small|\n\nadd_label|small|`^/find [`#Search Item`^]|\nadd_spacer|small|\n\nadd_label|small|`^/color <`9number`^> [`#Change Skin Color`^]|\nadd_spacer|small|\n\nadd_label|small|`^/who [`#Show Players In World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/count [`#Show Online Count`^]|\nadd_spacer|small|\n\nadd_label|small|`^/sb <`9message`^> [`#Super Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/jsb <`9message`^> [`#Jammed Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/radio [`#Disable Broadcasts`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rules [`#Show Rules`^]|\nadd_spacer|small|\n\nadd_label|small|`^/go [`#Under Development!`^]|\nadd_spacer|small|\n\nadd_label|small|`^/news [`#Show News`^]|\nadd_spacer|small|\n\nadd_label|small|`^/p <`9id`^> [`#Currently Disabled!`^]|\nadd_spacer|small|\n\nadd_label|small|`^/clear [`#Clear World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/access <`9player`^> [`#Give Access`^]|\nadd_spacer|small|\n\nadd_label|small|`^/msg <`9player`^> [`#Send Private Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/r <`9message`^> [`#Reply Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/pull <`9player`^> [`#Pull Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/kick <`9player`^> [`#Kill Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rgo [`#Warp To Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/ssb <`9message`^> [`#Special Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/nick <`9nick`^> [`#Change Nickname`^]|\nadd_spacer|small|\n\nadd_label|small|`^/gsb <`9message`^> [`#Guardian Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/invis [`#Invisible Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mute <`9player`^> [`#Mute Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mod [`#Walk In Blocks`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unmod [`#Disable Mod Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/ban <`9player`^> [`#World Ban Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/warn <`9player`^> <`9message`^> [`#Warn Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unban <`9player`^> [`#Unban Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/summon <`9player`^> [`#Summon Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/freeze <`9player`^> [`#Freeze Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/warp <`9world`^> [`#Warp To World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/warpto <`9player`^> [`#Warp To Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/nuke <`9world`^> [`#Nuke World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/curse <`9player`^> [`#Curse Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/reset [`#Restarting Notification`^]|\nadd_spacer|small|\n\nadd_label|small|`^/gsm <`9message`^> [`#Global System Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/uncurse <`9player`^> [`#Remove Curse`^]|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`4Leader Commands``|left|826|\nadd_spacer|small|\n\nadd_label|small|`^/ignore <`9player`^> [`#Ignore Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unignore <`9player`^> [`#Remove Ignore Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/pban <`9player`^> [`#Permanently Ban Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/saveo [`#Save All Data`^]|\nadd_spacer|small|\n\nadd_label|small|`^/wkick <`9player`^> [`#World Kick Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/lchat <`9message`^> [`#Leader-Only Chat`^]|\nadd_spacer|small|\n\nadd_label|small|`^/info <`9player`^> [`#View Player Info`^]|\nadd_spacer|small|\n\nadd_label|small|`^/offlineinfo <`9player`^> [`#View Offline Info`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mods [`#View Online Mods`^]|\nadd_spacer|small|\n\nadd_label|small|`^/find [`#Search Item`^]|\nadd_spacer|small|\n\nadd_label|small|`^/color <`9number`^> [`#Change Skin Color`^]|\nadd_spacer|small|\n\nadd_label|small|`^/who [`#Show Players In World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/count [`#Show Online Count`^]|\nadd_spacer|small|\n\nadd_label|small|`^/sb <`9message`^> [`#Super Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/jsb <`9message`^> [`#Jammed Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/radio [`#Disable Broadcasts`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rules [`#Show Rules`^]|\nadd_spacer|small|\n\nadd_label|small|`^/go [`#Under Development!`^]|\nadd_spacer|small|\n\nadd_label|small|`^/news [`#Show News`^]|\nadd_spacer|small|\n\nadd_label|small|`^/p <`9id`^> [`#Currently Disabled!`^]|\nadd_spacer|small|\n\nadd_label|small|`^/clear [`#Clear World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/access <`9player`^> [`#Give Access`^]|\nadd_spacer|small|\n\nadd_label|small|`^/msg <`9player`^> [`#Send Private Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/r <`9message`^> [`#Reply Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/pull <`9player`^> [`#Pull Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/kick <`9player`^> [`#Kill Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rgo [`#Warp To Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/ssb <`9message`^> [`#Special Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/nick <`9nick`^> [`#Change Nickname`^]|\nadd_spacer|small|\n\nadd_label|small|`^/lsb <`9message`^> [`#Leader Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/invis [`#Invisible Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mute <`9player`^> [`#Mute Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mod [`#Walk In Blocks`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unmod [`#Disable Mod Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/ban <`9player`^> [`#World Ban Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/warn <`9player`^> <`9message`^> [`#Warn Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/summon <`9player`^> [`#Summon Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/freeze <`9player`^> [`#Freeze Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/warp <`9world`^> [`#Warp To World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/warpto <`9player`^> [`#Warp To Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/curse <`9player`^> [`#Curse Player`^]|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`qAdmin Commands``|left|826|\nadd_spacer|small|\n\nadd_label|small|`^/ignore <`9player`^> [`#Ignore Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unignore <`9player`^> [`#Remove Ignore Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/wkick <`9player`^> [`#World Kick Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/achat <`9message`^> [`#Admin-Only Chat`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mods [`#View Online Mods`^]|\nadd_spacer|small|\n\nadd_label|small|`^/find [`#Search Item`^]|\nadd_spacer|small|\n\nadd_label|small|`^/color <`9number`^> [`#Change Skin Color`^]|\nadd_spacer|small|\n\nadd_label|small|`^/who [`#Show Players In World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/count [`#Show Online Count`^]|\nadd_spacer|small|\n\nadd_label|small|`^/sb <`9message`^> [`#Super Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/jsb <`9message`^> [`#Jammed Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/radio [`#Disable Broadcasts`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rules [`#Show Rules`^]|\nadd_spacer|small|\n\nadd_label|small|`^/go [`#Under Development!`^]|\nadd_spacer|small|\n\nadd_label|small|`^/news [`#Show News`^]|\nadd_spacer|small|\n\nadd_label|small|`^/p <`9id`^> [`#Currently Disabled!`^]|\nadd_spacer|small|\n\nadd_label|small|`^/clear [`#Clear World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/access <`9player`^> [`#Give Access`^]|\nadd_spacer|small|\n\nadd_label|small|`^/msg <`9player`^> [`#Send Private Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/r <`9message`^> [`#Reply Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/pull <`9player`^> [`#Pull Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/kick <`9player`^> [`#Kill Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rgo [`#Warp To Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/ssb <`9message`^> [`#Special Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/nick <`9nick`^> [`#Change Nickname`^]|\nadd_spacer|small|\n\nadd_label|small|`^/asb <`9message`^> [`#Admin Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/invis [`#Invisible Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mute <`9player`^> [`#Mute Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mod [`#Walk In Blocks`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unmod [`#Disable Mod Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/ban <`9player`^> [`#World Ban Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/warn <`9player`^> <`9message`^> [`#Warn Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/summon <`9player`^> [`#Summon Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/freeze <`9player`^> [`#Freeze Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/warp <`9world`^> [`#Warp To World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/warpto <`9player`^> [`#Warp To Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/curse <`9player`^> [`#Curse Player`^]|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`#Moderator Commands``|left|826|\nadd_spacer|small|\n\nadd_label|small|`^/ignore <`9player`^> [`#Ignore Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unignore <`9player`^> [`#Remove Ignore Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/wkick <`9player`^> [`#World Kick Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mchat <`9message`^> [`#Mod-Only Chat`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mods [`#View Online Mods`^]|\nadd_spacer|small|\n\nadd_label|small|`^/find [`#Search Item`^]|\nadd_spacer|small|\n\nadd_label|small|`^/color <`9number`^> [`#Change Skin Color`^]|\nadd_spacer|small|\n\nadd_label|small|`^/who [`#Show Players In World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/count [`#Show Online Count`^]|\nadd_spacer|small|\n\nadd_label|small|`^/sb <`9message`^> [`#Super Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/jsb <`9message`^> [`#Jammed Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/radio [`#Disable Broadcasts`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rules [`#Show Rules`^]|\nadd_spacer|small|\n\nadd_label|small|`^/go [`#Under Development!`^]|\nadd_spacer|small|\n\nadd_label|small|`^/news [`#Show News`^]|\nadd_spacer|small|\n\nadd_label|small|`^/p <`9id`^> [`#Currently Disabled!`^]|\nadd_spacer|small|\n\nadd_label|small|`^/access <`9player`^> [`#Give Access`^]|\nadd_spacer|small|\n\nadd_label|small|`^/msg <`9player`^> [`#Send Private Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/r <`9message`^> [`#Reply Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/pull <`9player`^> [`#Pull Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/kick <`9player`^> [`#Kill Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rgo [`#Warp To Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/ssb <`9message`^> [`#Special Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/msb <`9message`^> [`#MOD Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/nick <`9nick`^> [`#Change Nickname`^]|\nadd_spacer|small|\n\nadd_label|small|`^/invis [`#Invisible Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mute <`9player`^> [`#Mute Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mod [`#Walk In Blocks`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unmod [`#Disable Mod Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/ban <`9player`^> [`#World Ban Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/summon <`9player`^> [`#Summon Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/warp <`9world`^> [`#Warp To World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/warpto <`9player`^> [`#Warp To Player`^]|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`5Premium Commands``|left|826|\nadd_spacer|small|\n\nadd_label|small|`^/ignore <`9player`^> [`#Ignore Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unignore <`9player`^> [`#Remove Ignore Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/pchat <`9message`^> [`#Premium-Only Chat`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mods [`#View Online Mods`^]|\nadd_spacer|small|\n\nadd_label|small|`^/find [`#Search Item`^]|\nadd_spacer|small|\n\nadd_label|small|`^/color <`9number`^> [`#Change Skin Color`^]|\nadd_spacer|small|\n\nadd_label|small|`^/who [`#Show Players In World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/count [`#Show Online Count`^]|\nadd_spacer|small|\n\nadd_label|small|`^/sb <`9message`^> [`#Super Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/radio [`#Disable Broadcasts`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rules [`#Show Rules`^]|\nadd_spacer|small|\n\nadd_label|small|`^/go [`#Under Development!`^]|\nadd_spacer|small|\n\nadd_label|small|`^/news [`#Show News`^]|\nadd_spacer|small|\n\nadd_label|small|`^/p <`9id`^> [`#Currently Disabled!`^]|\nadd_spacer|small|\n\nadd_label|small|`^/access <`9player`^> [`#Give Access`^]|\nadd_spacer|small|\n\nadd_label|small|`^/msg <`9player`^> [`#Send Private Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/r <`9message`^> [`#Reply Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/pull <`9player`^> [`#Pull Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/kick <`9player`^> [`#Kill Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rgo [`#Warp To Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/ssb <`9message`^> [`#Special Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/nick <`9nick`^> [`#Change Nickname`^]|\nadd_spacer|small|\n\nadd_label|small|`^/psb <`9message`^> [`#Premium Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/invis [`#Invisible Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mod [`#Walk In Blocks`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unmod [`#Disable Mod Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/ban <`9player`^> [`#World Ban Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/warp <`9world`^> [`#Warp To World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/warpto <`9player`^> [`#Warp To Player`^]|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`oVIP Commands``|left|826|\nadd_spacer|small|\n\nadd_label|small|`^/ignore <`9player`^> [`#Ignore Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unignore <`9player`^> [`#Remove Ignore Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/vchat <`9message`^> [`#VIP-Only Chat`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mods [`#View Online Mods`^]|\nadd_spacer|small|\n\nadd_label|small|`^/find [`#Search Item`^]|\nadd_spacer|small|\n\nadd_label|small|`^/color <`9number`^> [`#Change Skin Color`^]|\nadd_spacer|small|\n\nadd_label|small|`^/who [`#Show Players In World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/count [`#Show Online Count`^]|\nadd_spacer|small|\n\nadd_label|small|`^/sb <`9message`^> [`#Super Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/radio [`#Disable Broadcasts`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rules [`#Show Rules`^]|\nadd_spacer|small|\n\nadd_label|small|`^/go [`#Under Development!`^]|\nadd_spacer|small|\n\nadd_label|small|`^/news [`#Show News`^]|\nadd_spacer|small|\n\nadd_label|small|`^/p <`9id`^> [`#Currently Disabled!`^]|\nadd_spacer|small|\n\nadd_label|small|`^/access <`9player`^> [`#Give Access`^]|\nadd_spacer|small|\n\nadd_label|small|`^/msg <`9player`^> [`#Send Private Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/r <`9message`^> [`#Reply Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/pull <`9player`^> [`#Pull Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/kick <`9player`^> [`#Kill Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rgo [`#Warp To Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/ssb <`9message`^> [`#Special Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/vsb <`9message`^> [`#VIP Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/invis [`#Invisible Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mod [`#Walk In Blocks`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unmod [`#Disable Mod Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/ban <`9player`^> [`#World Ban Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/warp <`9world`^> [`#Warp To World`^]|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`eKing Commands``|left|826|\nadd_spacer|small|\n\nadd_label|small|`^/ignore <`9player`^> [`#Ignore Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unignore <`9player`^> [`#Remove Ignore Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/kchat <`9message`^> [`#King-Only Chat`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mods [`#View Online Mods`^]|\nadd_spacer|small|\n\nadd_label|small|`^/find [`#Search Item`^]|\nadd_spacer|small|\n\nadd_label|small|`^/color <`9number`^> [`#Change Skin Color`^]|\nadd_spacer|small|\n\nadd_label|small|`^/who [`#Show Players In World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/count [`#Show Online Count`^]|\nadd_spacer|small|\n\nadd_label|small|`^/sb <`9message`^> [`#Super Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/radio [`#Disable Broadcasts`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rules [`#Show Rules`^]|\nadd_spacer|small|\n\nadd_label|small|`^/go [`#Under Development!`^]|\nadd_spacer|small|\n\nadd_label|small|`^/news [`#Show News`^]|\nadd_spacer|small|\n\nadd_label|small|`^/access <`9player`^> [`#Give Access`^]|\nadd_spacer|small|\n\nadd_label|small|`^/msg <`9player`^> [`#Send Private Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/r <`9message`^> [`#Reply Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/pull <`9player`^> [`#Pull Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/kick <`9player`^> [`#Kill Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rgo [`#Warp To Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/ksb <`9message`^> [`#King Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mod [`#Walk In Blocks`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unmod [`#Disable Mod Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/ban <`9player`^> [`#World Ban Player`^]|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;

								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`bNinja Commands``|left|826|\nadd_spacer|small|\n\nadd_label|small|`^/ignore <`9player`^> [`#Ignore Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unignore <`9player`^> [`#Remove Ignore Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/nchat <`9message`^> [`#Ninja-Only Chat`^]|\nadd_spacer|small|\n\nadd_label|small|`^/find [`#Search Item`^]|\nadd_spacer|small|\n\nadd_label|small|`^/color <`9number`^> [`#Change Skin Color`^]|\nadd_spacer|small|\n\nadd_label|small|`^/who [`#Show Players In World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/count [`#Show Online Count`^]|\nadd_spacer|small|\n\nadd_label|small|`^/sb <`9message`^> [`#Super Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/radio [`#Disable Broadcasts`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rules [`#Show Rules`^]|\nadd_spacer|small|\n\nadd_label|small|`^/go [`#Under Development!`^]|\nadd_spacer|small|\n\nadd_label|small|`^/news [`#Show News`^]|\nadd_spacer|small|\n\nadd_label|small|`^/access <`9player`^> [`#Give Access`^]|\nadd_spacer|small|\n\nadd_label|small|`^/msg <`9player`^> [`#Send Private Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/r <`9message`^> [`#Reply Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/pull <`9player`^> [`#Pull Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/kick <`9player`^> [`#Kill Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rgo [`#Warp To Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/mod [`#Walk In Blocks`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unmod [`#Disable Mod Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/ban <`9player`^> [`#World Ban Player`^]|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;

								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`@Samurai Commands``|left|826|\nadd_spacer|small|\n\nadd_label|small|`^/ignore <`9player`^> [`#Ignore Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unignore <`9player`^> [`#Remove Ignore Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/find [`#Search Item`^]|\nadd_spacer|small|\n\nadd_label|small|`^/color <`9number`^> [`#Change Skin Color`^]|\nadd_spacer|small|\n\nadd_label|small|`^/who [`#Show Players In World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/count [`#Show Online Count`^]|\nadd_spacer|small|\n\nadd_label|small|`^/sb <`9message`^> [`#Super Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/radio [`#Disable Broadcasts`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rules [`#Show Rules`^]|\nadd_spacer|small|\n\nadd_label|small|`^/go [`#Under Development!`^]|\nadd_spacer|small|\n\nadd_label|small|`^/news [`#Show News`^]|\nadd_spacer|small|\n\nadd_label|small|`^/access <`9player`^> [`#Give Access`^]|\nadd_spacer|small|\n\nadd_label|small|`^/msg <`9player`^> [`#Send Private Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/r <`9message`^> [`#Reply Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/pull <`9player`^> [`#Pull Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/kick <`9player`^> [`#Kill Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rgo [`#Warp To Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/ban <`9player`^> [`#World Ban Player`^]|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;

								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`1Warrior Commands``|left|826|\nadd_spacer|small|\n\nadd_label|small|`^/ignore <`9player`^> [`#Ignore Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unignore <`9player`^> [`#Remove Ignore Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/find [`#Search Item`^]|\nadd_spacer|small|\n\nadd_label|small|`^/who [`#Show Players In World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/count [`#Show Online Count`^]|\nadd_spacer|small|\n\nadd_label|small|`^/sb <`9message`^> [`#Super Broadcast`^]|\nadd_spacer|small|\n\nadd_label|small|`^/radio [`#Disable Broadcasts`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rules [`#Show Rules`^]|\nadd_spacer|small|\n\nadd_label|small|`^/go [`#Under Development!`^]|\nadd_spacer|small|\n\nadd_label|small|`^/news [`#Show News`^]|\nadd_spacer|small|\n\nadd_label|small|`^/access <`9player`^> [`#Give Access`^]|\nadd_spacer|small|\n\nadd_label|small|`^/msg <`9player`^> [`#Send Private Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/r <`9message`^> [`#Reply Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/pull <`9player`^> [`#Pull Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/kick <`9player`^> [`#Kill Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rgo [`#Warp To Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/ban <`9player`^> [`#World Ban Player`^]|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;

								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`w\n\nadd_label_with_icon|big|`!Player Commands``|left|826|\nadd_spacer|small|\n\nadd_label|small|`^/ignore <`9player`^> [`#Ignore Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/unignore <`9player`^> [`#Remove Ignore Status`^]|\nadd_spacer|small|\n\nadd_label|small|`^/find [`#Search Item`^]|\nadd_spacer|small|\n\nadd_label|small|`^/who [`#Show Players In World`^]|\nadd_spacer|small|\n\nadd_label|small|`^/count [`#Show Online Count`^]|\nadd_spacer|small|\n\nadd_label|small|`^/radio [`#Disable Broadcasts`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rules [`#Show Rules`^]|\nadd_spacer|small|\n\nadd_label|small|`^/go [`#Under Development!`^]|\nadd_spacer|small|\n\nadd_label|small|`^/news [`#Show News`^]|\nadd_spacer|small|\n\nadd_label|small|`^/access <`9player`^> [`#Give Access`^]|\nadd_spacer|small|\n\nadd_label|small|`^/msg <`9player`^> [`#Send Private Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/r <`9message`^> [`#Reply Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/pull <`9player`^> [`#Pull Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/kick <`9player`^> [`#Kill Player`^]|\nadd_spacer|small|\n\nadd_label|small|`^/rgo [`#Warp To Message`^]|\nadd_spacer|small|\n\nadd_label|small|`^/ban <`9player`^> [`#World Ban Player`^]|0|0|\nend_dialog||Close||\nadd_quick_exit|"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
							}









							else if (str.substr(0, 8) == "/warpto ") {


								if (((PlayerInfo*)(peer->data))->adminLevel <= 888) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Leader `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								if (str.substr(8, cch.length() - 8 - 1) == "") continue;
								if (((PlayerInfo*)(peer->data))->rawName == str.substr(8, cch.length() - 8 - 1)) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You can't warp to yourself!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}

								if ((str.substr(8, cch.length() - 8 - 1) == "sebia")) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You are not allowed to warp to server creators!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}


								if (world->name == "UNDERGROUND") {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^This World Is Too `4Hot `^For That..."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}


								string name = str.substr(8, str.length());


								ENetPeer* currentPeer;


								bool found = false;


								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;


									string name2 = ((PlayerInfo*)(currentPeer->data))->rawName;


									std::transform(name.begin(), name.end(), name.begin(), ::tolower);
									std::transform(name2.begin(), name2.end(), name2.begin(), ::tolower);


									if (name == name2) {
										if (((PlayerInfo*)(currentPeer->data))->currentWorld == "EXIT")
										{
											//std::this_thread::sleep_for(std::chrono::milliseconds(200));
										}
										else
										{
											sendPlayerToPlayer(peer, currentPeer);
											found = true;
										}

									}
								}
								if (found) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Warping To Player..."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									delete p.data;
								}
								else {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Player Not `4Found! `@Or is currently in `4EXIT`@!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);

									delete p.data;
								}
							}






							else if (str.substr(0, 6) == "/warp ") {

								if (((PlayerInfo*)(peer->data))->adminLevel <= 444) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9VIP `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}


								if (world->name == "UNDERGROUND") {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^This World Is Too `4Hot `^For That..."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}
								string world = str.substr(6, str.length());
								std::transform(world.begin(), world.end(), world.begin(), ::toupper);
								if (world.length() >= 16) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@World Name Too Long`@!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}
								if (world == "SERVER" && ((PlayerInfo*)(peer->data))->adminLevel != 1000)
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@You can't warp to `9Server`@!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}

								if (((PlayerInfo*)(peer->data))->currentWorld == "HELL")
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@You can't warp from this world`@!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}

								if (world == "EXIT")
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@You can't warp to `9Exit`@!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}
								else
								{
									bool contains_non_alpha
										= !std::regex_match(world, std::regex("^[A-Za-z0-9]+$"));

									if (contains_non_alpha == true)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Warping Failed! Only Letters / Numbers Allowed`@!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										continue;
									}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Magically `^Warped To `4" + world + "`^!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);



										sendPlayerToWorld(peer, (PlayerInfo*)(peer->data), world);


									}



								}




							}
							else if (str.substr(0, 5) == "/asb ") {
								using namespace std::chrono;
								if (((PlayerInfo*)(peer->data))->adminLevel >= 888) {
									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `#ADMIN-Broadcast`` from `$`2" + name + "```` (in `$" + ((PlayerInfo*)(peer->data))->currentWorld + "``) ** :`` `# " + str.substr(4, cch.length() - 4 - 1)));
									string text = "action|play_sfx\nfile|audio/getpoint.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);
										((PlayerInfo*)(currentPeer->data))->lastSbbWorld = ((PlayerInfo*)(peer->data))->currentWorld;
										//enet_host_flush(server);
									}
									delete data;
									delete p.data;
								}
								else {


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Admin `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}
							}
















							else if (str.substr(0, 5) == "/ysb ") {
								using namespace std::chrono;
								if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `4YouTuber-Broadcast`` from `$`2" + name + "```` (in `$" + ((PlayerInfo*)(peer->data))->currentWorld + "``) ** :`` `# " + str.substr(4, cch.length() - 4 - 1)));
									string text = "action|play_sfx\nfile|audio/getpoint.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);
										((PlayerInfo*)(currentPeer->data))->lastSbbWorld = ((PlayerInfo*)(peer->data))->currentWorld;
										//enet_host_flush(server);
									}
									delete data;
									delete p.data;
								}
								else {


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `4YouTuber`^!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}
							}













							else if (str.substr(0, 5) == "/gsb ") {
								using namespace std::chrono;
								if (((PlayerInfo*)(peer->data))->adminLevel >= 1000) {
									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `9Guardian-Broadcast`` from `$`2" + name + "```` (in `$" + ((PlayerInfo*)(peer->data))->currentWorld + "``) ** :`` `# " + str.substr(4, cch.length() - 4 - 1)));
									string text = "action|play_sfx\nfile|audio/getpoint.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);
										((PlayerInfo*)(currentPeer->data))->lastSbbWorld = ((PlayerInfo*)(peer->data))->currentWorld;
										//enet_host_flush(server);
									}
									delete data;
									delete p.data;
								}
								else {


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Guardian `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}
							}

























							else if (str.substr(0, 5) == "/lsb ") {
								using namespace std::chrono;
								if (((PlayerInfo*)(peer->data))->adminLevel >= 999) {
									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `4Leader-Broadcast`` from `$`2" + name + "```` (in `$" + ((PlayerInfo*)(peer->data))->currentWorld + "``) ** :`` `# " + str.substr(4, cch.length() - 4 - 1)));
									string text = "action|play_sfx\nfile|audio/getpoint.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);
										((PlayerInfo*)(currentPeer->data))->lastSbbWorld = ((PlayerInfo*)(peer->data))->currentWorld;
										//enet_host_flush(server);
									}
									delete data;
									delete p.data;
								}
								else {


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Leader `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}
							}
							else if (str.substr(0, 5) == "/vsb ") {
								using namespace std::chrono;
								if (((PlayerInfo*)(peer->data))->adminLevel >= 555) {
									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `9VIP-Broadcast`` from `$`2" + name + "```` (in `$" + ((PlayerInfo*)(peer->data))->currentWorld + "``) ** :`` `# " + str.substr(4, cch.length() - 4 - 1)));
									string text = "action|play_sfx\nfile|audio/getpoint.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);
										((PlayerInfo*)(currentPeer->data))->lastSbbWorld = ((PlayerInfo*)(peer->data))->currentWorld;
										//enet_host_flush(server);
									}
									delete data;
									delete p.data;
								}
								else {


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9VIP `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}
							}
							else if (str.substr(0, 5) == "/msb ") {
								using namespace std::chrono;
								if (((PlayerInfo*)(peer->data))->adminLevel >= 777) {
									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `bMOD-Broadcast`` from `$`2" + name + "```` (in `4HIDDEN!`w) ** :`` `# " + str.substr(4, cch.length() - 4 - 1)));
									string text = "action|play_sfx\nfile|audio/getpoint.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);
										((PlayerInfo*)(currentPeer->data))->lastSbbWorld = ((PlayerInfo*)(peer->data))->currentWorld;
										//enet_host_flush(server);
									}
									delete data;
									delete p.data;
								}

								else {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9MOD `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;




								}



							}



































							else if (str.substr(0, 5) == "/ksb ") {
								using namespace std::chrono;
								if (((PlayerInfo*)(peer->data))->adminLevel >= 444) {
									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `5King-Broadcast`` from `$`2" + name + "```` (in `$" + ((PlayerInfo*)(peer->data))->currentWorld + "``) ** :`` `# " + str.substr(4, cch.length() - 4 - 1)));
									string text = "action|play_sfx\nfile|audio/getpoint.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);
										((PlayerInfo*)(currentPeer->data))->lastSbbWorld = ((PlayerInfo*)(peer->data))->currentWorld;
										//enet_host_flush(server);
									}
									delete data;
									delete p.data;
								}
								else {


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9King `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}
							}







































							else if (str.substr(0, 5) == "/psb ") {
								using namespace std::chrono;
								if (((PlayerInfo*)(peer->data))->adminLevel >= 666) {
									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `5Premium-Broadcast`` from `$`2" + name + "```` (in `$" + ((PlayerInfo*)(peer->data))->currentWorld + "``) ** :`` `# " + str.substr(4, cch.length() - 4 - 1)));
									string text = "action|play_sfx\nfile|audio/getpoint.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);
										((PlayerInfo*)(currentPeer->data))->lastSbbWorld = ((PlayerInfo*)(peer->data))->currentWorld;
										//enet_host_flush(server);
									}
									delete data;
									delete p.data;
								}
								else {


									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Premium `^And `@Higher `^ranks!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}
							}



							else if (str == "/nuke") {
								if (((PlayerInfo*)(peer->data))->adminLevel <= 999) {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Guardian `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}
								if (((PlayerInfo*)(peer->data))->adminLevel >= 1000) {
									WorldInfo *world = getPlyersWorld(peer);
									if (world->nuked) {
										world->nuked = false;
										cout << "[WARNING]: Player " << ((PlayerInfo*)(peer->data))->rawName << " has unnuked " << world->name << endl;
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^You have `@Un-Nuked `^the world!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else {
										world->nuked = true;
										cout << "[WARNING]: Player " << ((PlayerInfo*)(peer->data))->rawName << " has nuked " << world->name << endl;
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^You have `@Nuked `^the world!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										//enet_host_flush(server);
										string name = ((PlayerInfo*)(peer->data))->displayName;
										GamePacket p1 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`o>>`4" + world->name + " `4was nuked from orbit`o. It's the only way to be sure. Play nice, everybody!"));
										string text = "action|play_sfx\nfile|audio/bigboom.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);
										ENetPeer * currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (!((PlayerInfo*)(currentPeer->data))->radio)
												continue;
											ENetPacket * packet = enet_packet_create(p1.data,
												p1.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											ENetPacket * packet2 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet2);
											if (isHere(peer, currentPeer)) {
												if (((PlayerInfo*)(currentPeer->data))->adminLevel < 1000) {
													//((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";
													sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
													sendWorldOffers(currentPeer);
													((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";
												}
											}
											//enet_host_flush(server);
										}
										delete data;
										delete p1.data;
									}
									continue;
								}
							}






							else if (str == "/pban")
							{
							if (((PlayerInfo*)(peer->data))->isCreator != true) {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Creator!"));
								ENetPacket * packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								continue;
							}

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Please include `^Player Name `@That you want to `4Ban`@!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								
							}









							else if (str == "/ban")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel >= 888 || ((PlayerInfo*)(peer->data))->rawName == world->owner) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Please include `^Player Name `@That you want to `4Ban `@From World!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
							}

							else if (str == "/curse")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel <= 888) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Leader `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (((PlayerInfo*)(peer->data))->adminLevel >= 998) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Please include `^Player Name `@That you want to `bCurse`@!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
							}


							else if (str == "/gbcevent")
							{
							if (((PlayerInfo*)(peer->data))->rawName != "sebia") {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `#Sebia`^!"));
								ENetPacket * packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								continue;
							}

							GamePacket p = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`#Valentine Event! `4Everyone Receives `9Golden Booty Chest`#!"), "audio/mp3/suspended.mp3"), 0));
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							ENetPeer* currentPeer;

							bool success = true;
							SaveShopsItemMoreTimes(3402, 1, peer, success);

							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								enet_peer_send(currentPeer, 0, packet);
							}
							delete p.data;
							//enet_host_flush(server);



                            }



							else if (str == "/mute")
							{


								if (((PlayerInfo*)(peer->data))->adminLevel <= 666) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9MOD `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}


								if (((PlayerInfo*)(peer->data))->adminLevel >= 888) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^Usage `2/mute <`^user`2> <`^minutes`2>!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
							}
							else if (str.substr(0, 7) == "/block ")
							{

								if (((PlayerInfo*)(peer->data))->isCreator != true) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Creator!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								string blox = str.substr(6, str.length());


								bool contains_non_alpha
									= !std::regex_match(blox, std::regex("^[0-9]+$"));

								if (contains_non_alpha)
								{
									int bloxint = atoi(str.substr(7).c_str());
									if (bloxint >= 0 && bloxint < 7559)
									{
										((PlayerInfo*)(peer->data))->cloth_face = atoi(str.substr(7).c_str());
										sendState(peer);
										((PlayerInfo*)(peer->data))->skinColor = 2;
										sendClothes(peer);

										int block = atoi(str.substr(7).c_str());

										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9You are `2" + std::to_string(block) + " `9Now!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else
									{

										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Please Only `4Numbers `9From `40-7558`9!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
								}
								else
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Please Only `4Numbers`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}
							}


							else if (str.substr(0, 5) == "/eff ") {
								if (((PlayerInfo*)(peer->data))->isCreator != true) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Creator!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								int effect = atoi(str.substr(5).c_str());
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {

										int x = ((PlayerInfo*)(peer->data))->x;
										int y = ((PlayerInfo*)(peer->data))->y;
										GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

										ENetPacket* packetd = enet_packet_create(psp.data,
											psp.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packetd);
										delete psp.data;
									}
								}

							}














							else if (str.substr(0, 5) == "/ssb ") {
								using namespace std::chrono;
								if (((PlayerInfo*)(peer->data))->adminLevel <= 444) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9VIP `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (((PlayerInfo*)(peer->data))->level < 30)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT]`1 You need to be level `@30 `1to do that!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (((PlayerInfo*)(peer->data))->isDuctaped == true)
								{
									GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are muted now!"));
									ENetPacket* packet0 = enet_packet_create(p0.data,
										p0.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet0);
									delete p0.data;
									continue;
								}

								string name = ((PlayerInfo*)(peer->data))->displayName;
								GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "You received `2Special - Broadcast`` From `6" + name + ""));
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `2Special - Broadcast`` from `$`6" + name + "```0 (in `6" + ((PlayerInfo*)(peer->data))->currentWorld + "`0) ** :`` `$ " + str.substr(5, cch.length() - 5 - 1)));
								string text = "action|play_sfx\nfile|audio/double_chance.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (!((PlayerInfo*)(currentPeer->data))->radio)
										continue;
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									ENetPacket* packet2 = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet2);
									enet_peer_send(currentPeer, 0, packet);
									ENetPacket* packet3 = enet_packet_create(p3.data,
										p3.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet3);
								}
								delete data;
								delete p.data;
								delete p3.data;
							}














							else if (str.substr(0, 5) == "/ban ")
							{

								if (((PlayerInfo*)(peer->data))->haveGrowId && ((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || ((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 998 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 888)
								{

									if (str.substr(5, cch.length() - 5 - 1) == "") continue;
									if (((PlayerInfo*)(peer->data))->rawName == str.substr(5, cch.length() - 5 - 1)) continue;

									ENetPeer* currentPeerp;

									for (currentPeerp = server->peers;
										currentPeerp < &server->peers[server->peerCount];
										++currentPeerp)
									{
										if (currentPeerp->state != ENET_PEER_STATE_CONNECTED)
											continue;



										string name = ((PlayerInfo*)(peer->data))->displayName;
										string kickname = str.substr(5, cch.length() - 5 - 1);
										//string kickname = ((PlayerInfo*)(peer->data))->displayName;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), name + " `4world bans " + "`o" + kickname + " from `w" + world->name + "`o!"));
										string text = "action|play_sfx\nfile|audio/repair.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);

										if (isHere(peer, currentPeerp))
										{
											ENetPacket* packetsou = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);



											enet_peer_send(currentPeerp, 0, packetsou);
											enet_peer_send(currentPeerp, 0, packet);
											delete data;
											delete p.data;
											if (((PlayerInfo*)(currentPeerp->data))->rawName == kickname)
											{


												namespace fs = std::experimental::filesystem;

												if (!fs::is_directory("worldbans/" + getPlyersWorld(peer)->name) || !fs::exists("worldbans/" + getPlyersWorld(peer)->name)) {
													fs::create_directory("worldbans/" + getPlyersWorld(peer)->name);

													std::ofstream outfile("worldbans/" + getPlyersWorld(peer)->name + "/" + ((PlayerInfo*)(currentPeerp->data))->rawName);

													outfile << "worldbanned by: " + ((PlayerInfo*)(peer->data))->rawName;

													outfile.close();
												}
												else
												{
													std::ofstream outfile("worldbans/" + getPlyersWorld(peer)->name + "/" + ((PlayerInfo*)(currentPeerp->data))->rawName);

													outfile << "worldbanned by: " + ((PlayerInfo*)(peer->data))->rawName;

													outfile.close();
												}

												sendPlayerLeave(currentPeerp, (PlayerInfo*)(currentPeerp->data));
												sendWorldOffers(currentPeerp);


												((PlayerInfo*)(currentPeerp->data))->currentWorld = "EXIT";

											}
										}


									}

								}

							}

							else if (str.substr(0, 6) == "/pban ") {

							if (((PlayerInfo*)(peer->data))->isCreator != true) {
								continue;
							}
							string ban_info = str;

							size_t extra_space = ban_info.find("  ");
							if (extra_space != std::string::npos) {
								ban_info.replace(extra_space, 2, " ");
							}
							
							string delimiter = " ";
							size_t pos = 0;
							string ban_user;
							string ban_time;
							if ((pos = ban_info.find(delimiter)) != std::string::npos) {
								ban_info.erase(0, pos + delimiter.length());
							}
							else {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/pban <`^user`2> <`^minutes`2>!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}

							if ((pos = ban_info.find(delimiter)) != std::string::npos) {
								ban_user = ban_info.substr(0, pos);
								ban_info.erase(0, pos + delimiter.length());
							}
							else {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/pban <`^user`2> <`^minutes`2>!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}

							ban_time = ban_info;
							//cout << "/tban " << ban_user << " " << ban_time;
							string user = ban_user;
							string muteTime = ban_time;

							/*string ip = "";

							ENetPeer* admincurrentPeer;

							for (admincurrentPeer = server->peers;
								admincurrentPeer < &server->peers[server->peerCount];
								++admincurrentPeer)
							{
								if (admincurrentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								if (((PlayerInfo*)(admincurrentPeer->data))->rawName == PlayerDB::getProperName(user)) {
									ip = to_string(admincurrentPeer->address.host);
									break;
								}
							}
							if (ip == "84.55.48.195")
							{
								continue;
							}*/

							if (muteTime.length() > 9)
							{
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Too much symbols!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								continue;
							}

							bool contains_non_int = !std::regex_match(muteTime, std::regex("^[0-9]+$"));
							if (contains_non_int == true)
							{
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `4Minutes `@Format!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								continue;
							}
							else
							{
								int konvertuotasInt = stoi(muteTime);
								if (konvertuotasInt <= 0 || konvertuotasInt > 43200) // 10080  - iki 7 dienu
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Minutes `@Should Be Between `91-43200`@!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}
								else
								{
									bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(user) + ".json");
									if (!existx)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@User `4Doesn't `@Exist!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										continue;
									}
									else
									{
											
										ofstream savebantime("timebanned/" + PlayerDB::getProperName(user) + ".txt");
										savebantime << (GetCurrentTimeInternalSeconds() + (konvertuotasInt * 60));
										savebantime.close();





										ENetPeer* currentPeer;

										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `bbanned `2" + user + " `#for`4 " + to_string(konvertuotasInt) + " `#minutes`#** `o(`4/rules `oto see the rules!)"));
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet2);

											if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(user)) {
												Player::OnAddNotification(currentPeer, "`0Warning from `4System`0: You've been `4BANNED `0from GrowtopiaOS for "+ to_string(konvertuotasInt) +" minutes", "audio/hub_open.wav", "interface/atomic_button.rttex");
												Player::OnConsoleMessage(currentPeer, "`4You have been banned for`9 " + to_string(konvertuotasInt) + "`4 minutes by `2" + ((PlayerInfo*)(peer->data))->rawName + "`4!");
												Player::OnConsoleMessage(currentPeer, "`4You have been banned for`9 " + to_string(konvertuotasInt) + "`4 minutes by `2" + ((PlayerInfo*)(peer->data))->rawName + "`4!");
												enet_peer_disconnect_later(currentPeer, 0);
											}

										}
										delete p2.data;


										GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Just `2BANNED `4player `w" + user + " `6 for`4 " + to_string(konvertuotasInt) + "`6 minutes"));
										string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);

										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (!((PlayerInfo*)(currentPeer->data))->radio)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888) {
												ENetPacket* packet6 = enet_packet_create(p6.data,
													p6.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(currentPeer, 0, packet6);




												ENetPacket* packet2 = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(currentPeer, 0, packet2);

												//enet_host_flush(server);
											}
										}
										delete data;
										delete p6.data;







										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2User `8" + user + " `2 has successfully banned for `8" + to_string(konvertuotasInt) + "`2 minutes."));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete ps.data;

									}
								}
							}
						}


							else if (str.substr(0, 5) == "/spk ")
							{

								if (((PlayerInfo*)(peer->data))->isCreator != true) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Creator!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								string say_info = str;

								size_t extra_space = say_info.find("  ");
								if (extra_space != std::string::npos) {
									say_info.replace(extra_space, 2, " ");
								}

								string delimiter = " ";
								size_t pos = 0;
								string say_user;
								string say_message;
								if ((pos = say_info.find(delimiter)) != std::string::npos) {
									say_info.erase(0, pos + delimiter.length());
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oPlease enter a player's name."));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}

								if ((pos = say_info.find(delimiter)) != std::string::npos) {
									say_user = say_info.substr(0, pos);
									say_info.erase(0, pos + delimiter.length());
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oPlease enter a message."));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}

								say_message = say_info;
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->rawName == say_user) {

										GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6>> `2" + say_user + " `6said `2" + say_message));
										ENetPacket* packet0 = enet_packet_create(p0.data,
											p0.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet0);
										delete p0.data;

										sendChatMessage(currentPeer, ((PlayerInfo*)(currentPeer->data))->netID, say_message);
									}

								}
							}




							else if (str.substr(0, 8) == "/unmute ")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel >= 777) {
									if (str.substr(8, cch.length() - 8 - 1) == "") continue;
									if (((PlayerInfo*)(peer->data))->rawName == str.substr(8, cch.length() - 8 - 1)) continue;

									string name = PlayerDB::getProperName(str.substr(8, cch.length() - 8 - 1));

									bool existx = std::experimental::filesystem::exists("timemuted/" + PlayerDB::getProperName(name) + ".txt");
									if (!existx)
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Player `@Not Found! `5Unmute `@Aborted!"));

										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										continue;
									}

									remove(("timemuted/" + name + ".txt").c_str());

									ENetPeer* currentPeer;

									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `bremoved mute from `2" + name + " `#** `o(`4/rules `oto see the rules!)"));
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet2);

										if (((PlayerInfo*)(currentPeer->data))->rawName == name) {


											((PlayerInfo*)(currentPeer->data))->taped = false;
											((PlayerInfo*)(currentPeer->data))->isDuctaped = false;
											((PlayerInfo*)(currentPeer->data))->cantsay = false;
											((PlayerInfo*)(currentPeer->data))->lastMuted = 0;
											sendState(currentPeer);

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You have been unmuted!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											sendClothes(currentPeer);
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You have unmuted the player!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
											}
											delete p.data;
										}

									}
									delete p2.data;

									GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Just `2UNMUTED `4player `w" + PlayerDB::getProperName(str.substr(8, cch.length() - 8 - 1))));
									string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888) {
											ENetPacket* packet6 = enet_packet_create(p6.data,
												p6.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet6);




											ENetPacket* packet2 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet2);

											//enet_host_flush(server);
										}
									}
									delete data;
									delete p6.data;

								}
								else {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You need to have a higher admin-level to do that!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
							}





							else if (str.substr(0, 6) == "/mute ")
							{
							if (((PlayerInfo*)(peer->data))->adminLevel <= 666) {
								continue;
							}

								string ban_info = str;

								size_t extra_space = ban_info.find("  ");
								if (extra_space != std::string::npos) {
									ban_info.replace(extra_space, 2, " ");
								}

								string delimiter = " ";
								size_t pos = 0;
								string ban_user;
								string ban_time;
								if ((pos = ban_info.find(delimiter)) != std::string::npos) {
									ban_info.erase(0, pos + delimiter.length());
								}
								else {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/mute <`^user`2> <`^minutes`2>!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}

								if ((pos = ban_info.find(delimiter)) != std::string::npos) {
									ban_user = ban_info.substr(0, pos);
									ban_info.erase(0, pos + delimiter.length());
								}
								else {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/mute <`^user`2> <`^minutes`2>!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
								}

								ban_time = ban_info;
								//cout << "/tban " << ban_user << " " << ban_time;
								string user = ban_user;
								string muteTime = ban_time;

								if (muteTime.length() > 9)
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Too much symbols!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}

								bool contains_non_int = !std::regex_match(muteTime, std::regex("^[0-9]+$"));
								if (contains_non_int == true)
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `4Minutes `@Format!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}
								else
								{
									int konvertuotasInt = stoi(muteTime);
									if (konvertuotasInt <= 0 || konvertuotasInt > 10080) // 10080  - iki 7 dienu
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Minutes `@Should Be Between `91-10080`@!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										continue;
									}
									else
									{
										bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(user) + ".json");
										if (!existx)
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@User `4Doesn't `@Exist!"));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											continue;
										}
										else
										{
											ofstream savemutetime("timemuted/" + PlayerDB::getProperName(user) + ".txt");
											savemutetime << konvertuotasInt;
											savemutetime.close();



											

											ENetPeer* currentPeer;

											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `bmuted `2" + user + " `#for`4 " + to_string(konvertuotasInt) + " `#minutes`#** `o(`4/rules `oto see the rules!)"));
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												ENetPacket* packet2 = enet_packet_create(p2.data,
													p2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet2);

												if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(user)) {

													using namespace std::chrono;

													((PlayerInfo*)(currentPeer->data))->taped = true;
													((PlayerInfo*)(currentPeer->data))->isDuctaped = true;
													((PlayerInfo*)(currentPeer->data))->cantsay = true;
													//((PlayerInfo*)(currentPeer->data))->mutedMiliseconds = konvertuotasInt * 60 * 1000;
													((PlayerInfo*)(currentPeer->data))->lastMuted = ((duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) + (konvertuotasInt * 60 * 1000);
													sendState(currentPeer);
													sendClothes(currentPeer);


													Player::OnAddNotification(currentPeer, "`0Warning from `4System`0: You've been `4MUTED `0from GrowtopiaOS for " + to_string(konvertuotasInt) + " minutes", "audio/hub_open.wav", "interface/atomic_button.rttex");
													Player::OnConsoleMessage(currentPeer, "`4You have been muted for`9 " + to_string(konvertuotasInt) + "`4 minutes by `2" + ((PlayerInfo*)(peer->data))->rawName + "`4!");
													Player::OnConsoleMessage(currentPeer, "`4You have been muted for`9 " + to_string(konvertuotasInt) + "`4 minutes by `2" + ((PlayerInfo*)(peer->data))->rawName + "`4!");
												}

											}
											delete p2.data;


											GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Just `2MUTED `4player `w" + user + " `6 for`4 " + to_string(konvertuotasInt) + "`6 minutes"));
											string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);

											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (!((PlayerInfo*)(currentPeer->data))->radio)
													continue;
												if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888) {
													ENetPacket* packet6 = enet_packet_create(p6.data,
														p6.len,
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(currentPeer, 0, packet6);




													ENetPacket* packet2 = enet_packet_create(data,
														5 + text.length(),
														ENET_PACKET_FLAG_RELIABLE);

													enet_peer_send(currentPeer, 0, packet2);

													//enet_host_flush(server);
												}
											}
											delete data;
											delete p6.data;







											GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2User `8" + user + " `2 has successfully muted for `8" + to_string(konvertuotasInt) + "`2 minutes."));
											ENetPacket* packet = enet_packet_create(ps.data,
												ps.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete ps.data;

										}
									}
								}



							}

							else if (str.substr(0, 7) == "/curse ") {
								if (((PlayerInfo*)(peer->data))->adminLevel <= 888) continue;
								if (str.substr(7, cch.length() - 7 - 1) == "") continue;
								if (((PlayerInfo*)(peer->data))->rawName == str.substr(7, cch.length() - 7 - 1)) continue;
								if ((str.substr(7, cch.length() - 7 - 1) == "sebia")) {
									//cout << "[WARNING]" << endl;
									ENetPeer* currentPeer;
									string name = ((PlayerInfo*)(peer->data))->rawName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										//((PlayerInfo*)(currentPeer->data))->isDuctaped = true;
									}

									delete p.data;
									Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from GrowtopiaOS for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
									autoBan(peer, false, 3);
									continue;

								}
								string cursename = PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1));

								bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(cursename) + ".json");
								if (!existx)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Player `@Not Found! `bCurse `@Aborted!"));

									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								cout << "[WARNING]: Player " << ((PlayerInfo*)(peer->data))->rawName << " Has Cursed " << str.substr(7, cch.length() - 7 - 1) << "!" << endl;


								std::ofstream outfile("cursedplayers/" + cursename + ".txt");

								outfile << "caused by: " + ((PlayerInfo*)(peer->data))->rawName;

								outfile.close();



								ENetPeer* currentPeer;

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `bcursed `2" + str.substr(7, cch.length() - 7 - 1) + " `#** `o(`4/rules `oto see the rules!)"));
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet);

									if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1))) {
										if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false && ((PlayerInfo*)(currentPeer->data))->haveGuestId == false) continue;
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave used `#Curse `oon `2" + str.substr(7, cch.length() - 7 - 1) + "`o! `#**"));
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										delete ps.data;

										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/hommel.rttex"), "`0Warning from `4System`0: You've been `bCURSED `0from GrowtopiaOS."), "audio/explode.wav"), 0));
										ENetPacket* packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet2);
										delete ps2.data;

										GamePacket ps3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWarning from `4System`o: You've been `bCursed `ofrom GrowtopiaOS by `2"+ ((PlayerInfo*)(peer->data))->rawName +"`o."));
										ENetPacket* packet3 = enet_packet_create(ps3.data,
											ps3.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet3);
										delete ps3.data;

										((PlayerInfo*)(currentPeer->data))->isCursed = true;

										sendPlayerToWorld(currentPeer, (PlayerInfo*)(currentPeer->data), "HELL");

									}
								}
								delete p.data;


								GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Just `2CURSED `4player `w" + PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1))));
								string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (!((PlayerInfo*)(currentPeer->data))->radio)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 998 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888) {
										ENetPacket* packet6 = enet_packet_create(p6.data,
											p6.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet6);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);

										//enet_host_flush(server);
									}
								}
								delete data;
								delete p6.data;

							}

							else if (str == "/unequip")
							{
								((PlayerInfo*)(peer->data))->cloth_hair = 0;
								((PlayerInfo*)(peer->data))->cloth_shirt = 0;
								((PlayerInfo*)(peer->data))->cloth_pants = 0;
								((PlayerInfo*)(peer->data))->cloth_feet = 0;
								((PlayerInfo*)(peer->data))->cloth_face = 0;
								((PlayerInfo*)(peer->data))->cloth_hand = 0;
								((PlayerInfo*)(peer->data))->cloth_back = 0;
								((PlayerInfo*)(peer->data))->cloth_mask = 0;
								((PlayerInfo*)(peer->data))->cloth_necklace = 0;
								((PlayerInfo*)(peer->data))->cloth_ances = 0;
								((PlayerInfo*)(peer->data))->effect = 8421376;
								sendState(peer);
								sendClothes(peer);
								sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
							}
							else if (str.substr(0, 9) == "/uncurse ") {
								if (((PlayerInfo*)(peer->data))->adminLevel <= 999) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Guardian `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}



								if (str.substr(9, cch.length() - 9 - 1) == "") continue;
								if (((PlayerInfo*)(peer->data))->rawName == str.substr(9, cch.length() - 9 - 1)) continue;
								if ((str.substr(9, cch.length() - 9 - 1) == "timesimple") || (str.substr(9, cch.length() - 9 - 1) == "j3xxx")) continue;
								string cursename = str.substr(9, cch.length() - 9 - 1);
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4System-Message:`2 " + cursename + " has been uncursed."));
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet);
									remove(("cursedplayers/" + cursename + ".txt").c_str());
									if (((PlayerInfo*)(currentPeer->data))->rawName == cursename)
									{
										((PlayerInfo*)(currentPeer->data))->skinColor = 0x8295C3FF;
										sendClothes(currentPeer);
										((PlayerInfo*)(currentPeer->data))->isCursed = false;
										sendState(currentPeer);


									}
								}
								delete p.data;


								GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Just `2UNCURSED `4player `w" + PlayerDB::getProperName(str.substr(9, cch.length() - 9 - 1))));
								string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (!((PlayerInfo*)(currentPeer->data))->radio)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 998 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888) {
										ENetPacket* packet6 = enet_packet_create(p6.data,
											p6.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet6);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);

										//enet_host_flush(server);
									}
								}
								delete data;
								delete p6.data;

							}
							else if (str.substr(0, 7) == "/unban ") {
								if (((PlayerInfo*)(peer->data))->adminLevel < 999) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Creator!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								string name = PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1));
								bool existx = std::experimental::filesystem::exists("timebanned/" + PlayerDB::getProperName(name) + ".txt");
								if (!existx)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Player `@Not Found! `5Unban `@Aborted!"));

									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								remove(("timebanned/" + name + ".txt").c_str());

								ofstream unbanlog("logs/unban.txt", ios::app);
								unbanlog << "administrator " << ((PlayerInfo*)(peer->data))->rawName << "used /unban " << name << endl;
								unbanlog.close();

								ENetPeer* currentPeer;

								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `bremoved banyy from `2" + name + " `#** `o(`4/rules `oto see the rules!)"));
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet2);
								}


								GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Just `2UNBANNED `4player `w" + PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1))));
								string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (!((PlayerInfo*)(currentPeer->data))->radio)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 998 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888) {
										ENetPacket* packet6 = enet_packet_create(p6.data,
											p6.len,
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet6);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);

										//enet_host_flush(server);
									}
								}
								delete data;
								delete p6.data;


							}

							else if (str.substr(0, 11) == "/givelevel ")
							{
							if (((PlayerInfo*)(peer->data))->isCreator != true) {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Creators!"));
								ENetPacket * packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								continue;
							}



							string ban_info = str;

							size_t extra_space = ban_info.find("  ");
							if (extra_space != std::string::npos) {
								ban_info.replace(extra_space, 2, " ");
							}

							string delimiter = " ";
							size_t pos = 0;
							string ban_user;
							string ban_time;
							if ((pos = ban_info.find(delimiter)) != std::string::npos) {
								ban_info.erase(0, pos + delimiter.length());
							}
							else {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/givelevel <`^user`2> <`^level`2>!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}

							if ((pos = ban_info.find(delimiter)) != std::string::npos) {
								ban_user = ban_info.substr(0, pos);
								ban_info.erase(0, pos + delimiter.length());
							}
							else {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/givelevel <`^user`2> <`^level`2>!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}

							ban_time = ban_info;
							//cout << "/tban " << ban_user << " " << ban_time;
							string user = ban_user;
							string levelnum = ban_time;


							if (levelnum.length() > 9)
							{
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Too much symbols!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								continue;
							}

							bool contains_non_int = !std::regex_match(levelnum, std::regex("^[0-9]+$"));
							if (contains_non_int == true)
							{
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `4Level `@Format!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								continue;
							}
							else
							{
								int konvertuotasInt = stoi(levelnum);
								if (konvertuotasInt <= 0 || konvertuotasInt > 500) // 10080  - iki 7 dienu
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Level `@Should Be Between `91-500`@!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}
								else
								{
									bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(user) + ".json");
									if (!existx)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@User `4Doesn't `@Exist!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										continue;
									}
									else
									{

										ifstream ifff("players/" + PlayerDB::getProperName(user) + ".json");
										json j;
										ifff >> j;
										ifff.close();

										j["level"] = konvertuotasInt;

										ofstream offf("players/" + PlayerDB::getProperName(user) + ".json");
										offf << j;
										offf.close();

										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;

											if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(user))
											{

												ofstream givelevellog("logs/givelevel.txt", ios::app);
												givelevellog << "administrator " << ((PlayerInfo*)(peer->data))->rawName << "used /givelevel " << user << " " << to_string(konvertuotasInt) << endl;
												givelevellog.close();

												((PlayerInfo*)(currentPeer->data))->level = konvertuotasInt;
												sendState(currentPeer);
												sendClothes(currentPeer);
												Player::OnConsoleMessage(currentPeer, "`4System-Message:`8Creator `2 " + ((PlayerInfo*)(peer->data))->rawName + " `8has just changed your account level to `2" + to_string(konvertuotasInt) + "`8.");
											}
										}
										Player::OnConsoleMessage(peer, "`2You successfully gave `8" + to_string(konvertuotasInt) + " `2level to `8" + user + " `2user.");

									}
								}
							}
						}
						else if (str.substr(0, 10) == "/givegems ")
							{
							if (((PlayerInfo*)(peer->data))->isCreator != true) {
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Creators!"));
								ENetPacket * packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								continue;
							}



							string ban_info = str;

							size_t extra_space = ban_info.find("  ");
							if (extra_space != std::string::npos) {
								ban_info.replace(extra_space, 2, " ");
							}

							string delimiter = " ";
							size_t pos = 0;
							string ban_user;
							string ban_time;
							if ((pos = ban_info.find(delimiter)) != std::string::npos) {
								ban_info.erase(0, pos + delimiter.length());
							}
							else {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/givegems <`^user`2> <`^level`2>!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}

							if ((pos = ban_info.find(delimiter)) != std::string::npos) {
								ban_user = ban_info.substr(0, pos);
								ban_info.erase(0, pos + delimiter.length());
							}
							else {
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Usage `2/givegems <`^user`2> <`^level`2>!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}

							ban_time = ban_info;
							//cout << "/tban " << ban_user << " " << ban_time;
							string user = ban_user;
							string levelnum = ban_time;


							if (levelnum.length() > 9)
							{
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Too much symbols!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								continue;
							}

							bool contains_non_int = !std::regex_match(levelnum, std::regex("^[0-9]+$"));
							if (contains_non_int == true)
							{
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Invalid `4Gems amount `@Format!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								continue;
							}
							else
							{
								int konvertuotasInt = stoi(levelnum);
								if (konvertuotasInt <= 0 || konvertuotasInt > 10000000) // 10080  - iki 7 dienu
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Gems amount `@Should Be Between `91-10000000`@!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}
								else
								{
									bool existx = std::experimental::filesystem::exists("gemdb/" + PlayerDB::getProperName(user) + ".txt");
									if (!existx)
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@User `4Doesn't `@Exist!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										continue;
									}
									else
									{

										ifstream ifff("gemdb/" + PlayerDB::getProperName(user) + ".txt");
										int gems = 0;
										ifff >> gems;
										ifff.close();

										gems+= konvertuotasInt;

										ofstream offf("gemdb/" + PlayerDB::getProperName(user) + ".txt");
										offf << gems;
										offf.close();

										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;

											if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(user))
											{

												ofstream givelevellog("logs/givegems.txt", ios::app);
												givelevellog << "administrator " << ((PlayerInfo*)(peer->data))->rawName << "used /givegems " << user << " " << to_string(konvertuotasInt) << endl;
												givelevellog.close();


												GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gems));
												ENetPacket* packetpp = enet_packet_create(pp.data,
													pp.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(peer, 0, packetpp);
												delete pp.data;


												sendState(currentPeer);
												sendClothes(currentPeer);
												Player::OnConsoleMessage(currentPeer, "`4System-Message:`8Creator `2 " + ((PlayerInfo*)(peer->data))->rawName + " `8has just gave you `2" + to_string(konvertuotasInt) + "`8 gems.");
											}
										}
										Player::OnConsoleMessage(peer, "`2You successfully gave `8" + to_string(konvertuotasInt) + " `2gems to `8" + user + " `2user.");

									}
								}
							}
						}
							else if (str == "/save")
							{

								if (((PlayerInfo*)(peer->data))->rawName != "sebia") {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Leader `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}


								if (((PlayerInfo*)(peer->data))->rawName == "sebia") {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^Saving `9data`^!"));
									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										//enet_peer_disconnect_now(currentPeer, 0);
									}
									saveAllWorlds();
									delete p.data;

								}

							}
							else if (str.substr(0, 3) == "/p ") {
								if (((PlayerInfo*)(peer->data))->adminLevel <= 444) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9VIP `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								string blox = str.substr(2, str.length());
								bool contains_non_alpha
									= !std::regex_match(blox, std::regex("^[0-9]+$"));

								if (contains_non_alpha)
								{
									int bloxint = atoi(str.substr(3).c_str());
									if (bloxint >= 0)
									{



										((PlayerInfo*)(peer->data))->effect = atoi(str.substr(3).c_str());
										PlayerInfo* info = ((PlayerInfo*)(peer->data));
										int netID = info->netID;
										ENetPeer* currentPeer;
										int state = getState(info);
										sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Punch Effect `9Changed`^!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
									}
									else
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Please only positive numbers!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Please only positive numbers!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}

							}
							else if (str.substr(0, 5) == "/msg ") {
								bool found = false;
								if (((PlayerInfo*)(peer->data))->haveGrowId == false) {
									GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oTo prevent abuse, you `4must `obe `2registered `oin order to use this command!"));
									ENetPacket* packet0 = enet_packet_create(p0.data,
										p0.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet0);
									delete p0.data;
									continue;
								}
								

								if (((PlayerInfo*)(peer->data))->isDuctaped == true)
								{
									GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are muted now!"));
									ENetPacket* packet0 = enet_packet_create(p0.data,
										p0.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet0);
									delete p0.data;
									continue;
								}



								string msg_info = str;

								size_t extra_space = msg_info.find("  ");
								if (extra_space != std::string::npos) {
									msg_info.replace(extra_space, 2, " ");
								}

								string delimiter = " ";
								size_t pos = 0;
								string pm_user;
								string pm_message;
								if ((pos = msg_info.find(delimiter)) != std::string::npos) {
									msg_info.erase(0, pos + delimiter.length());
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oPlease specify a `2player `oyou want your message to be delivered to."));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}

								if ((pos = msg_info.find(delimiter)) != std::string::npos) {
									pm_user = msg_info.substr(0, pos);
									msg_info.erase(0, pos + delimiter.length());
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oPlease enter your `2message`o."));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
								}



								bool arIgnore = false;

								bool existxx = std::experimental::filesystem::exists("ignoredPlayers/" + PlayerDB::getProperName(pm_user) + ".json");
								if (existxx)
								{
									std::ifstream ifff("ignoredPlayers/" + PlayerDB::getProperName(pm_user) + ".json");

									if (ifff.fail()) {
										ifff.close();


									}
									if (ifff.is_open()) {


									}




									json j;
									ifff >> j; //load
									if (j.count("ignoredPlayers") > 0) {

										for (int i = 0; i < j["ignoredPlayers"].size(); i++) {
											if (j["ignoredPlayers"][i] == ((PlayerInfo*)(peer->data))->rawName)
											{
												arIgnore = true;
												break;
											}
										}
									}
								}

								if (arIgnore)
								{
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4WARNING: `wThe player`8 " + pm_user + " `whad added you to the ignore list.`4 Your message was not sent!"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;
								}



								pm_message = msg_info;
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->msgName == PlayerDB::getProperName(pm_user)) {

										((PlayerInfo*)(currentPeer->data))->lastMsger = ((PlayerInfo*)(peer->data))->rawName;
										((PlayerInfo*)(currentPeer->data))->lastMsgerTrue = ((PlayerInfo*)(currentPeer->data))->displayName;
										((PlayerInfo*)(currentPeer->data))->lastMsgWorld = ((PlayerInfo*)(peer->data))->currentWorld;
										GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6>> (Sent to `$" + ((PlayerInfo*)(currentPeer->data))->tankIDName + "`6)"));
										ENetPacket* packet0 = enet_packet_create(p0.data,
											p0.len,
											ENET_PACKET_FLAG_RELIABLE);
										GamePacket p10 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6>> (Sent to `$" + ((PlayerInfo*)(currentPeer->data))->tankIDName + "`6) `o(`4NOTE: ``Message a mod `4ONLY ONCE `oabout an issue. Mods dont fix scams or replace gems, they punish players who break the `5/rules`o. For issues related to account recovery or purchasing, send message to creators on discord.)"));
										ENetPacket* packet10 = enet_packet_create(p10.data,
											p10.len,
											ENET_PACKET_FLAG_RELIABLE);
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 998 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888) {
											enet_peer_send(peer, 0, packet10);
										}
										else {
											enet_peer_send(peer, 0, packet0);
										}
										delete p0.data;
										delete p10.data;
										found = true;
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6>> Private msg from `w" + ((PlayerInfo*)(peer->data))->displayName + "`6 (`$in " + ((PlayerInfo*)(peer->data))->currentWorld + "`6) : " + pm_message + "`o"));
										string text = "action|play_sfx\nfile|audio/pay_time.wav\ndelayMS|0\n";
										BYTE* data = new BYTE[5 + text.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);
										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);

										enet_peer_send(currentPeer, 0, packet2);
										delete data;
										ENetPacket* packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										delete ps.data;
										break;
									}

								}
								if (found == false)
								{
									GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`6Player " + PlayerDB::getProperName(pm_user) + " not found, remember to type all letters small."));
									ENetPacket* packet0 = enet_packet_create(p0.data,
										p0.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet0);
									delete p0.data;
								}
							}
							else if (str == "/tradeworld")
							{
								if (getPlyersWorld(peer)->owner == ((PlayerInfo*)(peer->data))->rawName)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oCannot buy your own world!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else if (getPlyersWorld(peer)->isPublic)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oCannot buy world because it's public!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else
								{
									ENetPeer* currentPeerpx;

									for (currentPeerpx = server->peers;
										currentPeerpx < &server->peers[server->peerCount];
										++currentPeerpx)
									{
										if (currentPeerpx->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(peer->data))->lastSellWorld == getPlyersWorld(peer)->name)
										{
											if (((PlayerInfo*)(peer->data))->lastSeller == getPlyersWorld(peer)->owner)
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wTrade Menu``|left|242|\nadd_label|small|\nadd_button_with_icon|dotrade|Do the Trade!|noflags|1424||\nadd_button|decline|`4Cancel/Decline|noflags||\nadd_spacer|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);

												//enet_host_flush(server);
												delete p.data;
											}
											else
											{
												cout << "last player sell / buy not true";
											}
										}
										else
										{
											cout << "last sell world not true";
										}
									}
								}
							}
							else if (str == "/uba") {
								if (((PlayerInfo*)(peer->data))->haveGrowId && ((PlayerInfo*)(peer->data))->rawName == getPlyersWorld(peer)->owner || ((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(peer->data))->adminLevel == 998 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888)
								{
									namespace fs = std::experimental::filesystem;
									fs::remove_all("worldbans/" + getPlyersWorld(peer)->name);

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou unbanned everyone from the world!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
							}

							else if (str.substr(0, 7) == "/wkick ") {



								if (((PlayerInfo*)(peer->data))->adminLevel >= 777 || ((PlayerInfo*)(peer->data))->rawName == world->owner) {
									if (str.substr(7, cch.length() - 7 - 1) == "") continue;
									if (((PlayerInfo*)(peer->data))->rawName == str.substr(5, cch.length() - 7 - 1)) continue;

									cout << "[DEBUG] Player " << ((PlayerInfo*)(peer->data))->rawName << " Has kicked from the world " << str.substr(7, cch.length() - 7 - 1) << "." << endl;


									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(str.substr(7, cch.length() - 7 - 1))) {
											if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@You have been `4Kicked `@From the world!"));
											ENetPacket * packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;

											sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));

											sendWorldOffers(currentPeer);
											((PlayerInfo*)(currentPeer->data))->currentWorld = "EXIT";
										}
									}


								}
								else {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `2World-Owner `^Or `9MOD `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;


								}

							}


							else if (str == "/unbluename") {

								if (((PlayerInfo*)(peer->data))->level < 100)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT]`1 You need to be level `@100 `1to do that!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else {
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnCountryState"), ((PlayerInfo*)(peer->data))->country + "|showGuild"));
											memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet2);
											delete p2.data;
										}
									}
								}
							}



							else if (str == "/bluename") {

								if (((PlayerInfo*)(peer->data))->level < 100)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT]`1 You need to be level `@100 `1to do that!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else {
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnCountryState"), ((PlayerInfo*)(peer->data))->country + "|showGuild|maxLevel"));
											memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet2);
											delete p2.data;
										}
									}
								}
							}
							else if (str == "/hide") {

								GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnDisguiseChanged"), 8));

								memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet2);
								delete p2.data;


							}



							else if (str.substr(0, 6) == "/mode ")
							{
								if (((PlayerInfo*)(peer->data))->isCreator != true) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Creator!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								string modestr = str.substr(6, cch.length() - 6 - 1);
								((PlayerInfo*)(peer->data))->characterState = atoi(modestr.c_str());
								sendState(peer);
							}




							else if (str.substr(0, 5) == "/gsm ") {

								if (((PlayerInfo*)(peer->data))->isCreator != true) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Creator!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								cout << "[DEBUG] Player " << ((PlayerInfo*)(peer->data))->rawName << " Used Global System Message In World " << ((PlayerInfo*)(peer->data))->currentWorld << " With Message " << str.substr(5, cch.length() - 5 - 1) << endl;
								string name = ((PlayerInfo*)(peer->data))->displayName;

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Global System Message: `o" + str.substr(4, cch.length() - 4 - 1)));
								string text = "action|play_sfx\nfile|audio/sungate.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);
								ENetPeer* currentPeer;

								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (!((PlayerInfo*)(currentPeer->data))->radio)
										continue;
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(currentPeer, 0, packet);



									ENetPacket* packet2 = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(currentPeer, 0, packet2);

									//enet_host_flush(server);
								}
								delete data;
								delete p.data;

							}








							else if (str.substr(0, 10) == "/unaccess ") {
								if (((PlayerInfo*)(peer->data))->rawName == world->owner) {

									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->rawName == (str.substr(7, cch.length() - 7 - 1))) {
											WorldInfo info;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9You `4Lost `9World Access!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											delete p.data;
											world->worldaccess.erase(std::remove(world->worldaccess.begin(), world->worldaccess.end(), ((PlayerInfo*)(currentPeer->data))->rawName), world->worldaccess.end());
										}
									}
								}
							}
							else if (str.substr(0, 8) == "/access ") {
								if (((PlayerInfo*)(peer->data))->rawName == world->owner) {

									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->rawName == (str.substr(8, cch.length() - 8 - 1))) {
											if (((PlayerInfo*)(peer->data))->rawName == ((PlayerInfo*)(currentPeer->data))->rawName) {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You can't access yourself"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												delete p.data;
											}
											else {
												WorldInfo info;
												world->worldaccess.push_back(((PlayerInfo*)(currentPeer->data))->rawName);
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9You `Got `9World Access!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet);
												delete p.data;
												//enet_host_flush(server);
												string text = "action|play_sfx\nfile|audio/secret.wav\ndelayMS|0\n";
												BYTE* data = new BYTE[5 + text.length()];
												BYTE zero = 0;
												int type = 3;
												memcpy(data, &type, 4);
												memcpy(data + 4, text.c_str(), text.length());
												memcpy(data + 4 + text.length(), &zero, 1);
												ENetPacket* packet2 = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(currentPeer, 0, packet2);
											}
										}
									}
								}
							}

							else if (str.substr(0, 8) == "/ignore ")
							{
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								/*if (str.substr(8, cch.length() - 8 - 1) == "") continue;
								if (((PlayerInfo*)(peer->data))->rawName == str.substr(8, cch.length() - 8 - 1)) continue;
								if ((str.substr(8, cch.length() - 8 - 1) == "timesimple") || (str.substr(8, cch.length() - 8 - 1) == "j3xxx")) continue;
								if ((str.substr(8, cch.length() - 8 - 1) == "admin")) continue;

								string username = PlayerDB::getProperName(str.substr(8, cch.length() - 8 - 1));

								bool existx = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(username) + ".json");
								if (!existx)
								{
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`9Player not found, `4ignore `waborted!"));

								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								continue;
								}

								bool existxx = std::experimental::filesystem::exists("ignoredPlayers/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
								if (!existxx)
								{
									std::ofstream oo("ignoredPlayers/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}

									json ignoredPlayers;
									json ignoredPlayersArray = json::array();

									ignoredPlayers["ignoredPlayers"] = ignoredPlayersArray;

									oo << ignoredPlayers << std::endl;
								}

								std::ifstream ifff("ignoredPlayers/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

								if (ifff.fail()) {
									ifff.close();


								}
								if (ifff.is_open()) {


								}
								vector<string>ignoredPlayers;
								json j;
								ifff >> j; //load
								if (j.count("ignoredPlayers") > 0) {

									for (int i = 0; i < j["ignoredPlayers"].size(); i++) {
										ignoredPlayers.push_back(j["ignoredPlayers"][i]);
									}
								}


								bool arJauIgnorina = false;
								if (j.count("ignoredPlayers") > 0) {
									for (int i = 0; i < ignoredPlayers.size(); i++)
									{
										if (ignoredPlayers[i] == username)
										{
											arJauIgnorina = true;
											break;
										}
									}
								}

								if (!arJauIgnorina)
								{

									ignoredPlayers.push_back(username);

									j["ignoredPlayers"] = ignoredPlayers;

									std::ofstream o("ignoredPlayers/" + ((PlayerInfo*)(peer->data))->rawName + ".json"); //save
									if (!o.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}
									o << j << std::endl;

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You successfully added player`8 " + username + "`2 to ignore list."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You already ignoring this player!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
								}*/
							}

							else if (str.substr(0, 10) == "/unignore ")
							{
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#Under Development!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
							}




							else if (str == "/magic") {


								if (((PlayerInfo*)(peer->data))->isCreator != true) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Creator!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								if (!world) continue;


								GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou cast a magic spell!"));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet);
								delete ps.data;

								string text = "action|play_sfx\nfile|audio/magic.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length()); // change memcpy here
								memcpy(data + 4 + text.length(), &zero, 1); // change memcpy here, revert to 4

								ENetPacket* packetsou = enet_packet_create(data,
									5 + text.length(),
									ENET_PACKET_FLAG_RELIABLE);

								float x = ((PlayerInfo*)(peer->data))->x;
								float y = ((PlayerInfo*)(peer->data))->y;
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									Player::OnParticleEffect(currentPeer, 90, x, y, 0);
								}

								bool found = false;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer)) {
										bool isRev = false;
										for (int i = 5; i < 45; i++) {
											if (isRev == false) {
												Player::OnParticleEffect(currentPeer, 3, x + i * (rand() % 9), y + i * (rand() % 9), i * 100);
												Player::OnParticleEffect(currentPeer, 2, x + i * (rand() % 9), y + i * (rand() % 9), i * 100);
												isRev = true;
											}
											else {
												Player::OnParticleEffect(currentPeer, 3, x - i * (rand() % 9), y - i * (rand() % 9), i * 100);
												Player::OnParticleEffect(currentPeer, 2, x + i * (rand() % 9), y + i * (rand() % 9), i * 100);
												isRev = false;
											}
										}
									}
								}


							}





							else if (str.substr(0, 13) == "/offlineinfo ") { //this is coded by playingohd gaming special code for nabzgt.



								if (((PlayerInfo*)(peer->data))->isCreator != true) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Creator `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}





								string playerCalled = PlayerDB::getProperName(str.substr(13, cch.length() - 13 - 1));
								string wrldname = PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1));



								toUpperCase(wrldname);
								if (wrldname == "CON" || wrldname == "NUL" || wrldname == "PRN" || wrldname == "AUX" || wrldname == "CLOCK$" || wrldname == "COM0" || wrldname == "COM1" || wrldname == "COM2" || wrldname == "COM3" || wrldname == "COM4" || wrldname == "COM5" || wrldname == "COM6" || wrldname == "COM7" || wrldname == "COM8" || wrldname == "COM9" || wrldname == "LPT0" || wrldname == "LPT1" || wrldname == "LPT2" || wrldname == "LPT3" || wrldname == "LPT4" || wrldname == "LPT5" || wrldname == "LPT6" || wrldname == "LPT7" || wrldname == "LPT8" || wrldname == "LPT9")
								{
									continue;
									break;
								}

								std::ifstream ifs("players/" + playerCalled + ".json");
								std::string content((std::istreambuf_iterator<char>(ifs)),
									(std::istreambuf_iterator<char>()));


								std::ifstream ifs7("gemdb/" + playerCalled + ".txt");
								std::string contentp((std::istreambuf_iterator<char>(ifs7)),
									(std::istreambuf_iterator<char>()));
								ifs7.close();



								string x;
								x.append(content);

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^Player Info [`4OFFLINE`^] -> " + x + " `9Gems `^-> `4" + contentp));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								x = x.substr(0, x.length() - 2);


							}
							else if (str.substr(0, 6) == "/info ") { //this is coded by playingohd gaming special code for nabzgt.

								if (((PlayerInfo*)(peer->data))->isCreator != true) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Creator `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}


								string wrldname = PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1));
								toUpperCase(wrldname);
								if (wrldname == "CON" || wrldname == "NUL" || wrldname == "PRN" || wrldname == "AUX" || wrldname == "CLOCK$" || wrldname == "COM0" || wrldname == "COM1" || wrldname == "COM2" || wrldname == "COM3" || wrldname == "COM4" || wrldname == "COM5" || wrldname == "COM6" || wrldname == "COM7" || wrldname == "COM8" || wrldname == "COM9" || wrldname == "LPT0" || wrldname == "LPT1" || wrldname == "LPT2" || wrldname == "LPT3" || wrldname == "LPT4" || wrldname == "LPT5" || wrldname == "LPT6" || wrldname == "LPT7" || wrldname == "LPT8" || wrldname == "LPT9")
								{

								}
								else
								{
									string playerCalled = PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1));

									std::ifstream ifs("players/" + playerCalled + ".json");
									std::string content((std::istreambuf_iterator<char>(ifs)),
										(std::istreambuf_iterator<char>()));


									std::ifstream ifs7("gemdb/" + playerCalled + ".txt");
									std::string contentp((std::istreambuf_iterator<char>(ifs7)),
										(std::istreambuf_iterator<char>()));
									ifs7.close();



									string x;
									x.append(content);

									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;

										if (((PlayerInfo*)(currentPeer->data))->rawName == playerCalled)
										{

											string showcountry = ((PlayerInfo*)(currentPeer->data))->country;
											string showgameversion = ((PlayerInfo*)(currentPeer->data))->gameversion;
											string showrid = ((PlayerInfo*)(currentPeer->data))->rid;
											string showwk = ((PlayerInfo*)(currentPeer->data))->wkid;
											string showmeta = ((PlayerInfo*)(currentPeer->data))->metaip;
											string showmac = ((PlayerInfo*)(currentPeer->data))->mac;
											string showhash2 = ((PlayerInfo*)(currentPeer->data))->hash2;
											string showplatid = ((PlayerInfo*)(currentPeer->data))->platformID;
											string showage = ((PlayerInfo*)(currentPeer->data))->player_age;
											string showaid = ((PlayerInfo*)(currentPeer->data))->aid;
											string showgid = ((PlayerInfo*)(currentPeer->data))->gid;
											string showvid = ((PlayerInfo*)(currentPeer->data))->vid;
											string showworld = ((PlayerInfo*)(currentPeer->data))->currentWorld;
											string showplainip = ((PlayerInfo*)(currentPeer->data))->charIP;
											string showdeviceversion = ((PlayerInfo*)(currentPeer->data))->deviceversion;
											string showlmode = ((PlayerInfo*)(currentPeer->data))->lmode;
											string showgdpr = ((PlayerInfo*)(currentPeer->data))->gdpr;
											string showuser = ((PlayerInfo*)(currentPeer->data))->user;
											string showtoken = ((PlayerInfo*)(currentPeer->data))->token;
											string showf = ((PlayerInfo*)(currentPeer->data))->f;
											string showfz = ((PlayerInfo*)(currentPeer->data))->fz;
											string showfhash = ((PlayerInfo*)(currentPeer->data))->fhash;
											//string showhid = ((PlayerInfo*)(currentPeer->data))->hpid;
											string showplatidplain;


											if (showplatid == "4")
											{
												showplatidplain = " mobile (android) ";
											}
											else if (showplatid == "0")
											{
												showplatidplain = " PC (Windows) ";
											}
											else if (showplatid == "6")
											{
												showplatidplain = " Mac (OS X) ";
											}
											else
											{
												showplatidplain = " UNIX (Linux, iOS (most likely), FreeBSD etc.) ";
											}
											if (((PlayerInfo*)(currentPeer->data))->adminLevel >= 1000)
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Cannot View Player Info Of `^Server Owner's`@!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
											}
											else
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^Player Info [`2ONLINE`^] -> " + x + " `9Gems `^-> `4" + contentp + " " + "`^Current world: `4" + showworld + " `^country: `4" + showcountry + " `^gameversion: `4" + showgameversion + " ^rid: `4" + showrid + " `^aid: `4" + showaid + " `^gid: `4" + showgid + " `^vid: `4" + showvid + " `^wk identity (SID): `4" + showwk + " `^meta: `4" + showmeta + " ^mac: `4" + showmac + " `^hash2: `4" + showhash2 + " `^platform: `4" + showplatidplain + " `^device-version: `4" + showdeviceversion + " `^L-mode: `4" + showlmode + " `^GDPR: `4" + showgdpr + " `^User: `4" + showuser + " `^Token: `4" + showtoken + " `^F-Identity: `4" + showf + " `^FZ-Identity: `4" + showfz + +" `^fhash: `4" + showfhash + " `^age: `4" + showage));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
											}

											x = x.substr(0, x.length() - 2);



										}

									}
								}
							}


							else if (str.substr(0, 9) == "/hardban ") { //This is a special code by PlayIngoHD Gaming extra for NabzGT!
								if (((PlayerInfo*)(peer->data))->rawName == str.substr(9, cch.length() - 9 - 1)) continue;
								if (((PlayerInfo*)(peer->data))->isCreator != true) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Creator `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								ENetPeer* currentPeer;
								string playerCalled = str.substr(9, cch.length() - 9 - 1);
								bool existh = std::experimental::filesystem::exists("players/" + PlayerDB::getProperName(playerCalled) + ".json");

								if (existh)
								{
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `4permanently hard banned `2" + playerCalled + " `#** `o(`4/rules `oto see the rules!)"));
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;

										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet2);

										if (((PlayerInfo*)(currentPeer->data))->rawName == PlayerDB::getProperName(playerCalled))
										{
											cout << "Administrator: " << ((PlayerInfo*)(peer->data))->rawName << " used HARDBAN on " << ((PlayerInfo*)(currentPeer->data))->rawName << endl;

											std::ofstream outfile("ridbans/" + ((PlayerInfo*)(currentPeer->data))->rid + ".txt");

											outfile << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName << endl;
											outfile << "Banned user name is: " + ((PlayerInfo*)(currentPeer->data))->rawName;

											outfile.close();

											string checkaid = ((PlayerInfo*)(currentPeer->data))->aid;
											if (checkaid.length() > 4)
											{
												std::ofstream outfile2("aidbans/" + ((PlayerInfo*)(currentPeer->data))->aid + ".txt");

												outfile2 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName << endl;
												outfile2 << "Banned user name is: " + ((PlayerInfo*)(currentPeer->data))->rawName;

												outfile2.close();
											}

											string checkgid = ((PlayerInfo*)(currentPeer->data))->gid;
											if (checkgid.length() > 4)
											{
												std::ofstream outfile3("gidbans/" + ((PlayerInfo*)(currentPeer->data))->gid + ".txt");

												outfile3 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName << endl;
												outfile3 << "Banned user name is: " + ((PlayerInfo*)(currentPeer->data))->rawName;

												outfile3.close();
											}

											string checkvid = ((PlayerInfo*)(currentPeer->data))->vid;
											if (checkvid.length() > 4)
											{
												std::ofstream outfile4("vidbans/" + ((PlayerInfo*)(currentPeer->data))->vid + ".txt");

												outfile4 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName << endl;
												outfile4 << "Banned user name is: " + ((PlayerInfo*)(currentPeer->data))->rawName;

												outfile4.close();
											}

											string checksid = ((PlayerInfo*)(currentPeer->data))->wkid;
											if (checksid.length() > 8)
											{
												std::ofstream outfile5("sidbans/" + ((PlayerInfo*)(currentPeer->data))->wkid + ".txt");

												outfile5 << "user who banned this ID: " + ((PlayerInfo*)(peer->data))->rawName << endl;
												outfile5 << "Banned user name is: " + ((PlayerInfo*)(currentPeer->data))->rawName;

												outfile5.close();
											}
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2You successfully `5HARD `4BANNED `w" + ((PlayerInfo*)(currentPeer->data))->rawName + " !! (hardbans cannot be removed from the game, only from server itself)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;

											enet_peer_disconnect_later(currentPeer, 0);
										}
									}
									delete p2.data;
								}


							}



							else if (str == "/nick")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel <= 555) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Premium `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}









								string name2;
								string namemsg = ((PlayerInfo*)(peer->data))->rawName;
								((PlayerInfo*)(peer->data))->isNicked = false;
								if (((PlayerInfo*)(peer->data))->adminLevel == 998)
								{



									name2 = "`w[`4YouTuber`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
									//((PlayerInfo*)(event.peer->data))->country = "../";


								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
								{
									if (((PlayerInfo*)(peer->data))->isCreator == true) {
										name2 = "`w[`4Creator`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
									}

									else {
										name2 = "`w[`9Guardian`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
										//((PlayerInfo*)(event.peer->data))->country = "../";

									}
								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 999)
								{
									name2 = "`w[`4Leader`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
									//((PlayerInfo*)(event.peer->data))->country = "../";
								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 888)
								{
									name2 = "`w[`qAdmin`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
									//((PlayerInfo*)(event.peer->data))->country = "../";
								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 777)
								{
									name2 = "`w[`#MOD`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
									//((PlayerInfo*)(event.peer->data))->country = "../";
								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 555)
								{
									name2 = "`w[`oVIP`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
									//((PlayerInfo*)(event.peer->data))->country = "../";

								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 444)
								{
									name2 = "`w[`eKing`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
									//((PlayerInfo*)(event.peer->data))->country = "../";

								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 333)
								{
									name2 = "`w[`bNinja`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
									//((PlayerInfo*)(event.peer->data))->country = "../";

								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 222)
								{
									name2 = "`w[`@Samurai`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
									//((PlayerInfo*)(event.peer->data))->country = "../";

								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 111)
								{
									name2 = "`w[`1Warrior`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
									//((PlayerInfo*)(event.peer->data))->country = "../";

								}
								else if (((PlayerInfo*)(peer->data))->adminLevel == 0)
								{
									name2 = "`w[`2Newbie`w] " + ((PlayerInfo*)(peer->data))->tankIDName;
									//((PlayerInfo*)(event.peer->data))->country = "../";
								}
								((PlayerInfo*)(peer->data))->displayName = name2;
								((PlayerInfo*)(peer->data))->msgName = namemsg;
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), name2));
								memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor

								((PlayerInfo*)(peer->data))->displayName = name2;
								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);



								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (isHere(peer, currentPeer))
									{
										enet_peer_send(currentPeer, 0, packet7);
									}
								}
								delete p7.data;

								GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYour nickname has been reverted!"));
								ENetPacket* packet = enet_packet_create(ps.data,
									ps.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet);
								delete ps.data;

							}


							if (str == "/giverank")
							{
								if (((PlayerInfo*)(peer->data))->isCreator != true) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Creator `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								if (((PlayerInfo*)(peer->data))->isCreator == true) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Please include `^Player Name `@That you want to `#Give rank`@!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
								}
							}



							else if (str.substr(0, 10) == "/giverank ") {

								if (((PlayerInfo*)(peer->data))->isCreator != true) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Creator `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (str.substr(10, cch.length() - 10 - 1) == "") continue;
								if (((PlayerInfo*)(peer->data))->rawName == str.substr(10, cch.length() - 10 - 1)) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You are not allowed to edit your rank!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;
								}
								if ((str.substr(10, cch.length() - 10 - 1) == "sebia")) {
									//cout << "[WARNING]" << endl;
									ENetPeer* currentPeer;
									string name = ((PlayerInfo*)(peer->data))->rawName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										//((PlayerInfo*)(currentPeer->data))->isDuctaped = true;
									}

									delete p.data;
									Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from GrowtopiaOS for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
									autoBan(peer, false, 3);
									continue;

								}



								string ban_info = str;

								size_t extra_space = ban_info.find("  ");
								if (extra_space != std::string::npos) {
									ban_info.replace(extra_space, 2, " ");
								}

								string delimiter = " ";
								size_t pos = 0;
								string ban_user;
								string ban_time;
								if ((pos = ban_info.find(delimiter)) != std::string::npos) {
									ban_info.erase(0, pos + delimiter.length());
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /giverank <user> <rankname>"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;
								}

								if ((pos = ban_info.find(delimiter)) != std::string::npos) {
									ban_user = ban_info.substr(0, pos);
									ban_info.erase(0, pos + delimiter.length());
								}
								else {
									GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oUsage: /giverank <user> <rankname>"));
									ENetPacket* packet = enet_packet_create(ps.data,
										ps.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete ps.data;
									continue;
								}

								ban_time = ban_info;
								//cout << "administrator "<<((PlayerInfo*)(peer->data))->rawName <<"used /giverank " << ban_user << " " << ban_time;
								string playerName = ban_user;
								string rankName = ban_time;


								if (((PlayerInfo*)(peer->data))->rawName == playerName) continue;

								int countranks, rankNumber;
								string rankText;
								bool arRado = false;
								ifstream ranks("giverank.txt");
								ranks >> countranks;
								for (int i = 0; i < countranks; i++)
								{
									ranks >> rankNumber >> rankText;
									if (rankText == rankName)
									{
										arRado = true;
										break;
									}

								}
								ranks.close();
								if (arRado == false)
								{
									continue;
								}

								bool success = false;
								GiveRank(rankName, playerName, success);
								if (success)
								{
									cout << "administrator " << ((PlayerInfo*)(peer->data))->rawName << "used /giverank " << ban_user << " " << ban_time;

									ofstream giveranklog("logs/giverank.txt", ios::app);
									giveranklog << "administrator " << ((PlayerInfo*)(peer->data))->rawName << "used /giverank " << ban_user << " " << ban_time << endl;
									giveranklog.close();

									ENetPeer * currentPeer;

									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `5Changed `2 " + playerName + "'s rank `8to " + rankName + ""));
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet2);

										if (((PlayerInfo*)(currentPeer->data))->rawName == playerName)
										{
											if (((PlayerInfo*)(currentPeer->data))->haveGrowId) {
												GamePacket ps3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWarning from `4System`o: your rank has been `5Changed to `8" + rankName + ""));
												ENetPacket * packet3 = enet_packet_create(ps3.data,
													ps3.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet3);
												delete ps3.data;
												enet_peer_disconnect_later(currentPeer, 0);
											}
										}

									}
									delete p2.data;



									GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Just `2GAVE THE `8" + rankName + "`2 RANK TO `4player `w" + playerName));
									string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 998 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888) {
											ENetPacket* packet6 = enet_packet_create(p6.data,
												p6.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet6);




											ENetPacket* packet2 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet2);

											//enet_host_flush(server);
										}
									}
									delete data;
									delete p6.data;

								}
								else
								{
									GamePacket pse = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4An error occurred.`2It could be because you entered the wrong player name or rank name."));
									ENetPacket* packete = enet_packet_create(pse.data,
										pse.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packete);
									delete pse.data;
									continue;
								}
							}


							else if (str.substr(0, 11) == "/delstatus ") {


								if (((PlayerInfo*)(peer->data))->isCreator != true) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Creator `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								if (str.substr(11, cch.length() - 11 - 1) == "") continue;
								if ((str.substr(11, cch.length() - 11 - 1) == "cmd") || (str.substr(11, cch.length() - 11 - 1) == "ttika") || (str.substr(5, cch.length() - 11 - 1) == "alpht")) continue;
								if (((PlayerInfo*)(peer->data))->rawName == str.substr(11, cch.length() - 11 - 1)) {
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`#You are not allowed to edit your status!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									continue;

								}

								if ((str.substr(11, cch.length() - 11 - 1) == "sebia")) {
									//cout << "[WARNING]" << endl;
									ENetPeer* currentPeer;
									string name = ((PlayerInfo*)(peer->data))->rawName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										//((PlayerInfo*)(currentPeer->data))->isDuctaped = true;
									}

									delete p.data;
									Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from GrowtopiaOS for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
									autoBan(peer, false, 3);
									continue;

								}


								cout << "[WARNING]: Creator " << ((PlayerInfo*)(peer->data))->rawName << " Has Removed " << str.substr(11, cch.length() - 11 - 1) << " From Staff Team!" << endl;

								ENetPeer * currentPeer;

								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave `5Removed `2 " + str.substr(11, cch.length() - 11 - 1) + " `#from Staff Team."));
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);

									if (((PlayerInfo*)(currentPeer->data))->rawName == str.substr(11, cch.length() - 11 - 1)) {
										if (((PlayerInfo*)(currentPeer->data))->haveGrowId == false) continue;
										GamePacket ps = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#** `$The Ancient Ones `ohave Removed `5 " + str.substr(11, cch.length() - 11 - 1) + " `#from Staff Team."));
										ENetPacket * packet = enet_packet_create(ps.data,
											ps.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);

										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "`0Warning from `4System`0: You've been `5REMOVED `#from Staff team"), "audio/hub_open.wav"), 0));
										ENetPacket * packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet2);
										GamePacket ps3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWarning from `4System`o: You've been `5Removed `5from Staff Team."));
										ENetPacket * packet3 = enet_packet_create(ps3.data,
											ps3.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet3);
										if (((PlayerInfo*)(currentPeer->data))->isIn)
										{
											if (((PlayerInfo*)(currentPeer->data))->haveGrowId) {


												/*for (int i = 0; i < admins.size(); i++) {
													Admin admin = admins[i];
													if (admin.username == ((PlayerInfo*)(peer->data))->rawName && admin.password == ((PlayerInfo*)(peer->data))->tankIDPass) {
														admins.erase(remove_if(admins.begin(), admins.end(), [&toKill](const admin& u) {return u.username == toKill; }), admins.end());
													}
												}*/

												PlayerInfo* p = ((PlayerInfo*)(currentPeer->data));
												p->adminLevel = 0;
												string username = PlayerDB::getProperName(p->rawName);

												std::ofstream o("players/" + username + ".json");
												if (!o.is_open()) {
													cout << GetLastError() << endl;
													_getch();
												}
												json j;

												int ban = p->ban;
												int clothback = p->cloth_back;
												int clothhand = p->cloth_hand;
												int clothface = p->cloth_face;
												int clothhair = p->cloth_hair;
int clothfeet = p->cloth_feet;
int clothpants = p->cloth_pants;
int clothneck = p->cloth_necklace;
int clothshirt = p->cloth_shirt;
int clothmask = p->cloth_mask;
int clothances = p->cloth_ances;
string guild = p->guild;
bool joinguild = p->joinguild;
int level = p->level;
int xp = p->xp;


string password = ((PlayerInfo*)(currentPeer->data))->tankIDPass;
j["username"] = username;
j["password"] = hashPassword(password);
j["adminLevel"] = p->adminLevel;
j["ClothBack"] = clothback;
j["ClothHand"] = clothhand;
j["ClothFace"] = clothface;
j["ClothShirt"] = clothshirt;
j["ClothPants"] = clothpants;
j["ClothNeck"] = clothneck;
j["ClothHair"] = clothhair;
j["ClothFeet"] = clothfeet;
j["ClothMask"] = clothmask;
j["ClothAnces"] = clothances;


j["isBanned"] = ban;
int ip;
j["ipID"] = peer->address.host;
j["effect"] = ((PlayerInfo*)(peer->data))->effect;
j["friends"] = ((PlayerInfo*)(peer->data))->friendinfo;
j["ip"] = ((PlayerInfo*)(peer->data))->charIP;
j["boughtLGW"] = ((PlayerInfo*)(peer->data))->boughtLGW;
j["boughtLGK"] = ((PlayerInfo*)(peer->data))->boughtLGK;
j["boughtLGD"] = ((PlayerInfo*)(peer->data))->boughtLGD;
j["boughtLGB"] = ((PlayerInfo*)(peer->data))->boughtLGB;
j["boughtLKW"] = ((PlayerInfo*)(peer->data))->boughtLKW;
j["boughtCWD"] = ((PlayerInfo*)(peer->data))->boughtCWD;
j["boughtRFS"] = ((PlayerInfo*)(peer->data))->boughtRFS;
j["boughtCDG"] = ((PlayerInfo*)(peer->data))->boughtCDG;
j["boughtLTIT"] = ((PlayerInfo*)(peer->data))->boughtLTIT;
j["aap"] = ((PlayerInfo*)(peer->data))->isAAP;
j["receivedwarns"] = ((PlayerInfo*)(peer->data))->warns;
j["receivedbans"] = ((PlayerInfo*)(peer->data))->bans;
j["guild"] = guild;
j["joinguild"] = joinguild;
j["level"] = level;
j["xp"] = xp;
j["rubble"] = p->rubble;
j["rubblexp"] = p->rubblexp;
j["amberxp"] = p->amberxp;
j["amber"] = p->amber;

j["opalxp"] = p->opalxp;
j["opal"] = p->opal;


j["goldxp"] = p->goldxp;
j["gold"] = p->gold;


j["sapphirexp"] = p->sapphirexp;
j["sapphire"] = p->sapphire;


j["diamondxp"] = p->diamondxp;
j["diamond"] = p->diamond;


j["emeraldxp"] = p->emeraldxp;
j["emerald"] = p->emerald;
j["worldsowned"] = ((PlayerInfo*)(currentPeer->data))->worldsowned;
o << j << std::endl;
											}
										}
										delete ps.data;
										enet_peer_disconnect_later(currentPeer, 0);

									}

									enet_peer_send(currentPeer, 0, packet);

									//enet_host_flush(server);
								}
								delete p.data;



							}

							else if (str.substr(0, 6) == "/nick ") {
							if (((PlayerInfo*)(peer->data))->adminLevel >= 777) {
								string name2 = "`w`w" + str.substr(6, cch.length() - 6 - 1);
								((PlayerInfo*)(peer->data))->msgName = PlayerDB::getProperName(str.substr(6, cch.length() - 6 - 1));



								if ((str.substr(6, cch.length() - 6 - 1) == "sebia") || (str.substr(6, cch.length() - 6 - 1) == "Sebia") || (str.substr(6, cch.length() - 6 - 1) == "@sebia") || (str.substr(6, cch.length() - 6 - 1) == "`4@Sebia") || (str.substr(6, cch.length() - 6 - 1) == "`4@sebia") || (str.substr(6, cch.length() - 6 - 1) == "`9Sebia")) {
									if (((PlayerInfo*)(peer->data))->rawName == "sebia") {



									}
									else {
										ENetPeer* currentPeer;
										string name = ((PlayerInfo*)(peer->data))->rawName;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));


										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(currentPeer, 0, packet);
											//((PlayerInfo*)(currentPeer->data))->isDuctaped = true;
										}

										delete p.data;
										Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from GrowtopiaOS for 3 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
										autoBan(peer, false, 3);
										continue;
									}
									}






									string lognickname = str.substr(6, cch.length() - 6 - 1);
									if (name2.length() < 5 && ((PlayerInfo*)(peer->data))->rawName != "sebia")
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`@Only `4Creators `@Can Change `4Nickname `@To `4Nothing`@!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										continue;
									}


									if (name2.length() > 16 && ((PlayerInfo*)(peer->data))->rawName != "sebia")
									{
										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Nickname @Too Long `4Max `910 `@Words`4!"));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										continue;
									}



									else
									{

										cout << "[INFO]: " << ((PlayerInfo*)(peer->data))->rawName << " Nicked Into " << lognickname << "!" << endl;




										((PlayerInfo*)(peer->data))->displayName = str.substr(6, cch.length() - 6 - 1);
										//((PlayerInfo*)(peer->data))->country = "us";
										((PlayerInfo*)(peer->data))->isNicked = true;




										GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), name2));
										memcpy(p7.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor

										((PlayerInfo*)(peer->data))->displayName = name2;
										ENetPacket* packet7 = enet_packet_create(p7.data,
											p7.len,
											ENET_PACKET_FLAG_RELIABLE);



										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (isHere(peer, currentPeer))
											{
												enet_peer_send(currentPeer, 0, packet7);
											}
										}
										delete p7.data;

										GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`^Your `2Nickname `^Changed To `9" + str.substr(6, cch.length() - 6 - 1)));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										string name = ((PlayerInfo*)(peer->data))->displayName;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1[MOD-LOGS] `6" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(`6" + ((PlayerInfo*)(peer->data))->displayName + "`r) `4Changing `2Nickname `4To `w" + str.substr(6, cch.length() - 6 - 1)));

										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (!((PlayerInfo*)(currentPeer->data))->radio)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->adminLevel >= 777) {
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(currentPeer, 0, packet);

												//enet_host_flush(server);
											}
										}
										delete p.data;
									}
								}
							}
							else if (str.substr(0, 9) == "/weather ") {
								if (world->name != "ADMIN" || world->name != "HELL") {
									if (world->owner != "") {
										if (((PlayerInfo*)(peer->data))->rawName == world->owner || ((PlayerInfo*)(peer->data))->adminLevel >= 888)


										{
											ENetPeer* currentPeer;


											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (isHere(peer, currentPeer))
												{
													GamePacket p1 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oPlayer `2" + ((PlayerInfo*)(peer->data))->displayName + "`o has just changed the world's weather!"));
													ENetPacket* packet1 = enet_packet_create(p1.data,
														p1.len,
														ENET_PACKET_FLAG_RELIABLE);


													enet_peer_send(currentPeer, 0, packet1);
													delete p1.data;

													if (((PlayerInfo*)(peer->data))->currentWorld != "EXIT")
													{
														getPlyersWorld(peer)->weather = atoi(str.substr(9).c_str());
													}
													GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetCurrentWeather"), atoi(str.substr(9).c_str())));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);


													enet_peer_send(currentPeer, 0, packet2);
													delete p2.data;
													continue; /*CODE UPDATE /WEATHER FOR EVERYONE!*/
												}
											}
										}
									}
								}
							}
							else if (str.substr(0, 8) == "/system ") {
								if (((PlayerInfo*)(peer->data))->adminLevel <= 999) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Guardian `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								cout << "[DEBUG] Player " << ((PlayerInfo*)(peer->data))->rawName << " In World " << ((PlayerInfo*)(peer->data))->currentWorld << " Used System Broadcast With Message: " << str.substr(5, cch.length() - 5 - 1) << endl;
								GamePacket p = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), str.substr(8, cch.length() - 8 - 1).c_str()), "audio/hub_open.wav"), 0));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									enet_peer_send(currentPeer, 0, packet);
								}

								//enet_host_flush(server);
								delete p.data;
							}


							else if (str == "/invis") {
								if (((PlayerInfo*)(peer->data))->adminLevel <= 444) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9VIP `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								if (world->name == "UNDERGROUND") {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^This World Is Too `4Hot `^For That..."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}


								//sendConsoleMsg(peer, "`6" + str);
								if (pData->isinv == false) {

									pData->isinv = true;
									sendConsoleMsg(peer, "`9Silent,invisible,deadly.(`$Ninja Stealth `omod added)");
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Invisible Mode `2Enabled`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									ENetPeer* currentPeer;
									GamePacket p0 = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), 1));

									memcpy(p0.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
									ENetPacket* packet0 = enet_packet_create(p0.data,
										p0.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet0);
									string text = "action|play_sfx\nfile|audio/boo_ghost_be_gone.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPacket* packet6 = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet6);
									delete data;
									delete p0.data;


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{


											((PlayerInfo*)(peer->data))->isinv = 1;
											GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), 1));

											memcpy(p2.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet2);
											delete p2.data;




										}
									}

								}
								else {
									sendConsoleMsg(peer, "`9You are less sneaky now.(`$Ninja Stealth `omod removed)");
									((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
									GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9Invisible Mode `4Disabled`9!"));
									ENetPacket* packet2 = enet_packet_create(p2.data,
										p2.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet2);
									delete p2.data;
									GamePacket p5 = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), 0));
									memcpy(p5.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
									ENetPacket* packet5 = enet_packet_create(p5.data,
										p5.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet5);
									delete p5.data;



									pData->isinv = false;

									GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnNameChanged"), ((PlayerInfo*)(peer->data))->displayName));
									memcpy(p3.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4); // ffloor
									ENetPacket* packet3 = enet_packet_create(p3.data,
										p3.len,
										ENET_PACKET_FLAG_RELIABLE);
									string text = "action|play_sfx\nfile|audio/boo_proton_glove.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPacket* packet8 = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet8);
									delete data;
									delete p3.data;

									ENetPeer* currentPeer;
									GamePacket penter1 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
									GamePacket penter2 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
									GamePacket penter3 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
									GamePacket penter4 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
									GamePacket penter8 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
									GamePacket penter5 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
									GamePacket penter6 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
									GamePacket penter7 = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), 40), ((PlayerInfo*)peer->data)->x1 + 10, ((PlayerInfo*)peer->data)->y1 + 15));
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (isHere(peer, currentPeer))
										{
											if (!((PlayerInfo*)(peer->data))->isGhost)
											{
												ENetPacket* packet5 = enet_packet_create(penter1.data,
													penter1.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet5);

												ENetPacket* packet6 = enet_packet_create(penter2.data,
													penter2.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet6);

												ENetPacket* packet7 = enet_packet_create(penter3.data,
													penter3.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet7);

												ENetPacket* packet8 = enet_packet_create(penter4.data,
													penter4.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet8);

												ENetPacket* packet9 = enet_packet_create(penter5.data,
													penter5.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet9);

												ENetPacket* packet10 = enet_packet_create(penter6.data,
													penter6.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet10);

												ENetPacket* packet11 = enet_packet_create(penter7.data,
													penter7.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet11);

												ENetPacket* packet12 = enet_packet_create(penter8.data,
													penter8.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(currentPeer, 0, packet12);
												GamePacket pis = packetEnd(appendInt(appendString(createPacket(), "OnInvis"), 0));

												memcpy(pis.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
												ENetPacket* packetpis = enet_packet_create(pis.data,
													pis.len,
													ENET_PACKET_FLAG_RELIABLE);

												enet_peer_send(currentPeer, 0, packetpis);
												delete pis.data;
											}


											if (((PlayerInfo*)(peer->data))->rawName != ((PlayerInfo*)(currentPeer->data))->rawName)
											{
												enet_peer_send(currentPeer, 0, packet3);
											}
										}
									}

									sendState(peer);
									sendClothes(peer);
								}

							}
							else if (str.substr(0, 5) == "/jsb ")
							{
								if (((PlayerInfo*)(peer->data))->adminLevel <= 666) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9MOD `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (((PlayerInfo*)(peer->data))->isDuctaped == true)
								{
									GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are muted now!"));
									ENetPacket* packet0 = enet_packet_create(p0.data,
										p0.len,
										ENET_PACKET_FLAG_RELIABLE);

									enet_peer_send(peer, 0, packet0);
									delete p0.data;
									continue;
								}

								if (((PlayerInfo*)(peer->data))->adminLevel >= 777) {
									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `5Super-Broadcast`` from `$`2" + name + "```` in (`$`4JAMMED!``) ** :`` `# " + str.substr(4, cch.length() - 4 - 1)));
									string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);


										enet_peer_send(currentPeer, 0, packet);




										ENetPacket* packet2 = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);


										enet_peer_send(currentPeer, 0, packet2);

										//enet_host_flush(server);
									}
									delete data;
									delete p.data;



								}
							}
							else if (str.substr(0, 3) == "/m ") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 998 || ((PlayerInfo*)(peer->data))->adminLevel == 999 || ((PlayerInfo*)(peer->data))->adminLevel == 777 || ((PlayerInfo*)(peer->data))->adminLevel == 888) {
									using namespace std::chrono;
									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`r[MOD CHAT] `2" + ((PlayerInfo*)(peer->data))->tankIDName + "`r(" + ((PlayerInfo*)(peer->data))->displayName + "`r): `6" + str.substr(3, cch.length() - 3 - 1)));
									string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 1000 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 999 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 998 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 777 || ((PlayerInfo*)(currentPeer->data))->adminLevel == 888) {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);




											ENetPacket* packet2 = enet_packet_create(data,
												5 + text.length(),
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet2);

											//enet_host_flush(server);
										}
									}
									delete data;
									delete p.data;
								}
							}
							else if (str.substr(0, 4) == "/sb ") {


								if (str.substr(4, cch.length() - 4 - 1) == "OID:0_") {

									//cout << "[WARNING]" << endl;
									ENetPeer* currentPeer;
									string name = ((PlayerInfo*)(peer->data))->rawName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));


									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(currentPeer, 0, packet);
										//((PlayerInfo*)(currentPeer->data))->isDuctaped = true;
									}

									delete p.data;
									Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from GrowtopiaOS for 24 hours", "audio/hub_open.wav", "interface/atomic_button.rttex");
									autoBan(peer, false, 24);


									continue;


								}



								if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Warrior `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}


								if (((PlayerInfo*)(peer->data))->isDuctaped == true)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Super Broadcast Not `4Allowed `@When You Are `9Duct-taped`@!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);


									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else
								{
									if (((PlayerInfo*)(peer->data))->level < 10)
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@You Must Be Aleast `9Level `410 `@To Use This `9Command`@!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);


										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
									else {

										std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string content((std::istreambuf_iterator<char>(ifsz)),
											(std::istreambuf_iterator<char>()));

										int b = atoi(content.c_str());

										if (b > 100)
										{
											using namespace std::chrono;
											if (((PlayerInfo*)(peer->data))->lastSB + 60000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
											{
												((PlayerInfo*)(peer->data))->lastSB = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
											}
											else {
												int kiekDar = (((PlayerInfo*)(peer->data))->lastSB + 60000 - (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count()) / 1000; // jei nedalinti is 1000, tai rodys milisekundem laika, reikia paversti i sekundes
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Cooldown `@Please Wait `9" + to_string(kiekDar) + " Seconds `@To Throw Another Broadcast!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(peer, 0, packet);
												delete p.data;
												//enet_host_flush(server);
												continue;
											}
											int gemcalc10k = b - 100;


											ofstream myfile2;
											myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											myfile2 << std::to_string(gemcalc10k);
											myfile2.close();

											std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string contentx((std::istreambuf_iterator<char>(ifszi)),
												(std::istreambuf_iterator<char>()));


											int updgem = atoi(contentx.c_str());
											GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
											ENetPacket* packetpp = enet_packet_create(pp.data,
												pp.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(peer, 0, packetpp);
											delete pp.data;




											GamePacket p5 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2>> `9Super Broadcast sent to all players online`2!"));
											ENetPacket* packet5 = enet_packet_create(p5.data,
												p5.len,
												ENET_PACKET_FLAG_RELIABLE);


											enet_peer_send(peer, 0, packet5);
											delete p5.data;



											string name = ((PlayerInfo*)(peer->data))->displayName;

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w** `5Super-Broadcast`` from `$`2" + name + "```` (in `$" + ((PlayerInfo*)(peer->data))->currentWorld + "``) ** :`` `# " + str.substr(4, cch.length() - 4 - 1)));
											string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";




											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);
											ENetPeer* currentPeer;

											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (!((PlayerInfo*)(currentPeer->data))->radio)
													continue;
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(currentPeer, 0, packet);




												ENetPacket* packet2 = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(currentPeer, 0, packet2);
												((PlayerInfo*)(currentPeer->data))->lastSbbWorld = ((PlayerInfo*)(peer->data))->currentWorld;
												//enet_host_flush(server);
											}
											delete data;
											delete p.data;
										}
										else
										{
											int needgems = 100 - b;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@You Need `9" + to_string(needgems) + " `@Gems More To Send Super Broadcast!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);


											enet_peer_send(peer, 0, packet);
											delete p.data;
										}
									}
								}
							}
















































							if (str.substr(0, 5) == "/sdb ") {
								if (((PlayerInfo*)(peer->data))->isDuctaped == true)
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Super Duper Broadcast Not `4Allowed `@When You Are `9Duct-taped`@!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);


									enet_peer_send(peer, 0, packet);
									delete p.data;
								}
								else
								{
									if (((PlayerInfo*)(peer->data))->level < 60)
									{
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@You Must Be Aleast `9Level `460 `@To Use This `9Command`@!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);


										enet_peer_send(peer, 0, packet);
										delete p.data;
									}
									else {

										std::ifstream ifsz("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
										std::string content((std::istreambuf_iterator<char>(ifsz)),
											(std::istreambuf_iterator<char>()));

										int b = atoi(content.c_str());

										if (b > 3000)
										{
											using namespace std::chrono;
											if (((PlayerInfo*)(peer->data))->lastSB + 60000 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
											{
												((PlayerInfo*)(peer->data))->lastSB = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
											}
											else {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Cooldown `@Please Wait `960 Seconds `@To Throw Anothers Broadcast!"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(peer, 0, packet);
												delete p.data;
												//enet_host_flush(server);
												continue;
											}
											int gemcalc10k = b - 3000;
											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												((PlayerInfo*)(currentPeer->data))->lastSdbWorld = ((PlayerInfo*)(peer->data))->currentWorld;
											}

											ofstream myfile2;
											myfile2.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											myfile2 << std::to_string(gemcalc10k);
											myfile2.close();

											std::ifstream ifszi("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string contentx((std::istreambuf_iterator<char>(ifszi)),
												(std::istreambuf_iterator<char>()));


											int updgem = atoi(contentx.c_str());
											GamePacket pp = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), updgem));
											ENetPacket* packetpp = enet_packet_create(pp.data,
												pp.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(peer, 0, packetpp);
											delete pp.data;




											GamePacket p5 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2>> `9Super Duper Broadcast sent to all players online`2!"));
											ENetPacket* packet5 = enet_packet_create(p5.data,
												p5.len,
												ENET_PACKET_FLAG_RELIABLE);


											enet_peer_send(peer, 0, packet5);
											delete p5.data;





											string name = ((PlayerInfo*)(peer->data))->displayName;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`^Super Duper Broadcast`^!``|left|2480|\n\nadd_spacer|small|\nadd_label|small|`#From " + name + "|left|4|\nadd_label|small|`2>> `@" + str.substr(4, cch.length() - 4 - 1) + "|\n\nadd_spacer|small|\nadd_button|warptosb|`2Warp To `9" + ((PlayerInfo*)(peer->data))->currentWorld + "`2!|\nadd_quick_exit|\n"));
											string text = "action|play_sfx\nfile|audio/beep.wav\ndelayMS|0\n";
											BYTE* data = new BYTE[5 + text.length()];
											BYTE zero = 0;
											int type = 3;
											memcpy(data, &type, 4);
											memcpy(data + 4, text.c_str(), text.length());
											memcpy(data + 4 + text.length(), &zero, 1);
											ENetPeer* currentPeer;





											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;
												if (!((PlayerInfo*)(currentPeer->data))->radio)
													continue;
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(currentPeer, 0, packet);




												ENetPacket* packet2 = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);


												enet_peer_send(currentPeer, 0, packet2);

												//enet_host_flush(server);
											}
											delete data;
											delete p.data;
										}
										else
										{
											int needgems = 3000 - b;
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@You Need `9" + to_string(needgems) + " `@Gems More To Send Super Duper Broadcast!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);


											enet_peer_send(peer, 0, packet);
											delete p.data;
										}
									}
								}
							}












































							else if (str.substr(0, 3) == "/a ") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
									using namespace std::chrono;

									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`9Admin CHAT`w] [`4" + ((PlayerInfo*)(peer->data))->tankIDName + "`w]  = " + str.substr(3, cch.length() - 3 - 1)));
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 888) {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);

											//enet_host_flush(server);
										}
									}

									delete p.data;
								}
								else {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Admin`^!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;







								}



							}






							else if (str.substr(0, 3) == "/v ") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
									using namespace std::chrono;

									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`5VIP CHAT`w] [`4" + ((PlayerInfo*)(peer->data))->tankIDName + "`w]  = " + str.substr(3, cch.length() - 3 - 1)));
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 555) {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);

											//enet_host_flush(server);
										}
									}

									delete p.data;
								}
								else {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9VIP`^!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;







								}



							}

							else if (str.substr(0, 3) == "/l ") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
									using namespace std::chrono;

									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`4Leader CHAT`w] [`4" + ((PlayerInfo*)(peer->data))->tankIDName + "`w]  = " + str.substr(3, cch.length() - 3 - 1)));
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 999) {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);

											//enet_host_flush(server);
										}
									}

									delete p.data;
								}
								else {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Leader`^!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;







								}



							}




							else if (str.substr(0, 3) == "/g ") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
									using namespace std::chrono;

									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`9Guardian CHAT`w] [`4" + ((PlayerInfo*)(peer->data))->tankIDName + "`w]  = " + str.substr(3, cch.length() - 3 - 1)));
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 1000) {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);

											//enet_host_flush(server);
										}
									}

									delete p.data;
								}
								else {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Guardian`^!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;







								}



							}




							else if (str.substr(0, 3) == "/m ") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
									using namespace std::chrono;

									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`5MOD CHAT`w] [`4" + ((PlayerInfo*)(peer->data))->tankIDName + "`w]  = " + str.substr(3, cch.length() - 3 - 1)));
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 777) {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);

											//enet_host_flush(server);
										}
									}

									delete p.data;
								}
								else {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9MOD`^!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;







								}



							}



							else if (str.substr(0, 3) == "/g ") {
								
							if (((PlayerInfo*)(peer->data))->isDuctaped == true)
							{
								GamePacket p0 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4You are muted now!"));
								ENetPacket* packet0 = enet_packet_create(p0.data,
									p0.len,
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(peer, 0, packet0);
								delete p0.data;
								continue;
							}

								if (((PlayerInfo*)(peer->data))->joinguild == true) {

									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`5GUILD CHAT`w] [`4" + ((PlayerInfo*)(peer->data))->tankIDName + "`w]  = " + str.substr(3, cch.length() - 3 - 1)));
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (find(((PlayerInfo*)(peer->data))->guildMembers.begin(), ((PlayerInfo*)(peer->data))->guildMembers.end(), ((PlayerInfo*)(currentPeer->data))->rawName) != ((PlayerInfo*)(peer->data))->guildMembers.end()) {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);


										}
									}

									delete p.data;
								}
								else
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^You must join a `9Guild `^Or `9Create `^One to use this command!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

							}

































							else if (str.substr(0, 3) == "/n ") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
									using namespace std::chrono;

									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`5Ninja CHAT`w] [`4" + ((PlayerInfo*)(peer->data))->tankIDName + "`w]  = " + str.substr(3, cch.length() - 3 - 1)));
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 333) {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);

											//enet_host_flush(server);
										}
									}

									delete p.data;
								}
								else {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Ninja`^!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;







								}



							}

















							else if (str.substr(0, 3) == "/k ") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
									using namespace std::chrono;

									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`5King CHAT`w] [`4" + ((PlayerInfo*)(peer->data))->tankIDName + "`w]  = " + str.substr(3, cch.length() - 3 - 1)));
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 444) {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);

											//enet_host_flush(server);
										}
									}

									delete p.data;
								}
								else {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9King`^!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;







								}



							}
















							else if (str.substr(0, 7) == "/pchat ") {
								if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
									using namespace std::chrono;

									string name = ((PlayerInfo*)(peer->data))->displayName;
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`w[`9Premium CHAT`w] [`4" + ((PlayerInfo*)(peer->data))->tankIDName + "`w]  = " + str.substr(7, cch.length() - 7 - 1)));
									ENetPeer* currentPeer;

									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (!((PlayerInfo*)(currentPeer->data))->radio)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->adminLevel == 666) {
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(currentPeer, 0, packet);

											//enet_host_flush(server);
										}
									}

									delete p.data;
								}
								else {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Premium`^!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;







								}








							}
							else if (str.substr(0, 6) == "/radio") {
								GamePacket p;
								if (((PlayerInfo*)(peer->data))->radio) {
									p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You won't see broadcasts anymore."));
									((PlayerInfo*)(peer->data))->radio = false;
								}
								else {
									p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "You will now see broadcasts again."));
									((PlayerInfo*)(peer->data))->radio = true;
								}


								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);


								enet_peer_send(peer, 0, packet);
								delete p.data;
								//enet_host_flush(server);
							}
							else if (str == "/restart") {

								if (restartForUpdate)
								{
									continue;
								}

								if (((PlayerInfo*)(peer->data))->isCreator != true) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Creator `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								//cout << "[DEBUG] /Reset have been used by " << ((PlayerInfo*)(peer->data))->displayName << endl;
								GamePacket p = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/science_button.rttex"), "Restarting For Update!"), "audio/mp3/suspended.mp3"), 0));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									enet_peer_send(currentPeer, 0, packet);
								}
								delete p.data;
								//enet_host_flush(server);

								restartForUpdate = true;
								//RestartForUpdate();

							}



							else if (str.substr(0, 15) == "/sseditworldbg ")
							{
								if (((PlayerInfo*)(peer->data))->isCreator != true) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Creator `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}


								if (((PlayerInfo*)(peer->data))->rawName == "sebia")
								{
									string editforeg = str.substr(15, cch.length() - 15 - 1);


									int editforegint = atoi(editforeg.c_str());
									if (editforegint == 0 || editforegint > 0 && editforegint < 7000) {



										vector<WorldInfo> worlds;

										cout << "[DEBUG] World Background Edited By " << ((PlayerInfo*)(peer->data))->tankIDName << endl;
										WorldInfo* wrld = getPlyersWorld(peer);

										ENetPeer* currentPeer;
										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											//if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
											//{
											string act = ((PlayerInfo*)(peer->data))->currentWorld;
											//WorldInfo info = worldDB.get(act);
											// sendWorld(currentPeer, &info);
											int x = 3040;
											int y = 736;



											for (int i = 0; i < world->width * world->height; i++)
											{
												if (world->items[i].foreground == 6) {
													//world->items[i].foreground =0;
												}
												else if (world->items[i].foreground == 8 || world->items[i].foreground == 242 || world->items[i].foreground == 2408 || world->items[i].foreground == 1796 || world->items[i].foreground == 4428 || world->items[i].foreground == 7188) {

												}
												else {
													world->items[i].background = editforegint;

												}



												//}
											}


											//ENetPeer* currentPeer;


											bool found = false;


											for (currentPeer = server->peers;
												currentPeer < &server->peers[server->peerCount];
												++currentPeer)
											{
												if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
													continue;

												if (((PlayerInfo*)(peer->data))->currentWorld == ((PlayerInfo*)(currentPeer->data))->currentWorld)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#[ `$Used edit mod on world`0! `6No abuse, please. `#] `oSupported item ids: 0-7000"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
													sendPlayerToWorld(currentPeer, (PlayerInfo*)(peer->data), ((PlayerInfo*)(peer->data))->currentWorld);
												}


											}
										}
									}

								}
							}











							else if (str.substr(0, 6) == "/clear") {
								if (((PlayerInfo*)(peer->data))->adminLevel <= 777) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Admin `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (((PlayerInfo*)(peer->data))->rawName != getPlyersWorld(peer)->owner && getPlyersWorld(peer)->owner != "")
								{
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But you can use this command only in empty or in your worlds!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}
								if (((PlayerInfo*)(peer->data))->adminLevel >= 888) {

									WorldInfo* wrld = getPlyersWorld(peer);

									ENetPeer* currentPeer;
									for (currentPeer = server->peers;
										currentPeer < &server->peers[server->peerCount];
										++currentPeer)
									{
										if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
											continue;
										if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
										{
											string act = ((PlayerInfo*)(peer->data))->currentWorld;
											//WorldInfo info = worldDB.get(act);
											// sendWorld(currentPeer, &info);
											int x = 3040;
											int y = 736;



											for (int i = 0; i < world->width * world->height; i++)
											{
												if (world->items[i].foreground == 6) {
													//world->items[i].foreground =0;
												}
												else if (world->items[i].foreground == 8) {

												}
												else if (world->items[i].foreground == 242 || world->items[i].foreground == 2408 || world->items[i].foreground == 1796 || world->items[i].foreground == 4428 || world->items[i].foreground == 7188 || world->items[i].foreground == 8470 || world->items[i].foreground == 9290 || world->items[i].foreground == 9170) {

												}
												else {
													world->items[i].foreground = 0;
													world->items[i].background = 0;
												}
											}

											sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
											joinWorld(currentPeer, act, 0, 0);

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^World Cleared!"));
											ENetPacket * packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											continue;





										}

									}
								}
							}


							else if (str == "/dr") {
								if (((PlayerInfo*)(peer->data))->level < 300) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT]`1 You need to be level `@300 `1to do that!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}



								((PlayerInfo*)(peer->data))->isDr = true;



								sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
								sendWorldOffers(peer);
								((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Dr. Title `2Toggled On`9!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;


							}



							else if (str == "/undr") {
								if (((PlayerInfo*)(peer->data))->level < 300) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT]`1 You need to be level `@300 `1to do that!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}




								((PlayerInfo*)(peer->data))->isDr = false;
								sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
								sendWorldOffers(peer);
								((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
								GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Dr. Title `2Toggled `4Off`9!"));
								ENetPacket* packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;


							}


							else if (str == "/spl") {
								if (((PlayerInfo*)(peer->data))->isCreator != true) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Creator `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								WorldInfo* wrld = getPlyersWorld(peer);

								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
									if (((PlayerInfo*)(currentPeer->data))->currentWorld == wrld->name)
									{
										world->isEvent = true;
										string act = ((PlayerInfo*)(peer->data))->currentWorld;
										//WorldInfo info = worldDB.get(act);
										// sendWorld(currentPeer, &info);
										int x = 3040;
										int y = 736;



										for (int i = 0; i < world->width * world->height; i++)
										{
											if (world->items[i].foreground == 0) {
												world->items[i].foreground = 1000;
											}
										}

										sendPlayerLeave(currentPeer, (PlayerInfo*)(currentPeer->data));
										joinWorld(currentPeer, act, 0, 0);





									}

								}

							}

							else if (str == "/unmod")
							{


								if (((PlayerInfo*)(peer->data))->adminLevel <= 666) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9MOD `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}


								if (world->name == "HELL") {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^This World Is Too `bCursed `^For That..."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}

								if (world->name == "JUMPS") {

									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^This World Is Too `9Special `^For That..."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;

								}
								((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
								//((PlayerInfo*)(peer->data))->isModState = false;
								((PlayerInfo*)(peer->data))->canDoubleJump = false;
								((PlayerInfo*)(peer->data))->canWalkInBlocks = false;
								sendState(peer);
								sendClothes(peer);
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^Moderator Mode `4Disabled`^!``"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;
								}
								string text = "action|play_sfx\nfile|audio/dialog_cancel.wav\ndelayMS|0\n";
								BYTE* data = new BYTE[5 + text.length()];
								BYTE zero = 0;
								int type = 3;
								memcpy(data, &type, 4);
								memcpy(data + 4, text.c_str(), text.length());
								memcpy(data + 4 + text.length(), &zero, 1);
								ENetPacket* packet2 = enet_packet_create(data,
									5 + text.length(),
									ENET_PACKET_FLAG_RELIABLE);

								enet_peer_send(currentPeer, 0, packet2);
								enet_peer_send(peer, 0, packet2);
								delete p.data;
								delete data;
								/*PlayerMoving data;
								data.packetType = 0x14;
								data.characterState = 0x0; // animation
								data.x = 1000;
								data.y = 1;
								data.punchX = 0;
								data.punchY = 0;
								data.XSpeed = 300;
								data.YSpeed = 600;
								data.netID = ((PlayerInfo*)(peer->data))->netID;
								data.plantingTree = 0x0;
								SendPacketRaw(4, packPlayerMoving(&data), 56, 0, peer, ENET_PACKET_FLAG_RELIABLE);*/
							}
							/*else if (str == "/clearworld")
							{
							cout << "World cleared by " << ((PlayerInfo*)(peer->data))->tankIDName << endl;

							int x = 3040;
							int y = 736;
							generateWorld("CLEARZ", x, y);


							enet_host_flush;

							}
							else if (str == "/alt") {
								GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetBetaMode"), 1));
								ENetPacket * packet2 = enet_packet_create(p2.data,
									p2.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2);
								delete p2.data;
								//enet_host_flush(server);
							}*/



							/*
								else if (str == "/inventory")
								{
									sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
								}

								else if (str.substr(0, 6) == "/item ")
									{

										PlayerInventory inventory;
										InventoryItem item;
										int proitem = atoi(str.substr(6, cch.length() - 6 - 1).c_str());
										if (proitem == 1874 || proitem == 1876 || proitem == 1986 || proitem == 2970 || proitem == 1780 || proitem == 1782 || proitem == 1784 || proitem == 7734 || proitem == 5026)
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wThe `9Legendary Wizard`w has invited you to come to `2LEGEND`w!``|left|1790|\n\nadd_spacer|small|\nadd_label_with_icon|small|set_default_color|`o\n\nadd_label_with_icon|big|`wThe `4Ring Master`w has invited you to come to `2CARNIVAL`w!``|left|1900|\n\nadd_spacer|small|\nadd_label_with_icon|small|\nadd_quick_exit|\nadd_button|chc0|Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											//enet_host_flush(server);
											delete p.data;
										}

										else {
											string id = (str.substr(6, cch.length() - 6 - 1).c_str());
											GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`2Item `w" + id + "`o has been `2added `oto your inventory."));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;

											size_t invsize = 30;
											if (((PlayerInfo*)(peer->data))->inventory.items.size() == invsize) {
												PlayerInventory inventory;
												InventoryItem item;
												item.itemID = atoi(str.substr(6, cch.length() - 6 - 1).c_str());
												item.itemCount = 200;
												inventory.items.push_back(item);
												item.itemCount = 1;
												item.itemID = 18;
												inventory.items.push_back(item);
												item.itemID = 32;
												inventory.items.push_back(item);
												((PlayerInfo*)(peer->data))->inventory = inventory;
											}
											else {
												InventoryItem item;
												item.itemID = atoi(str.substr(6, cch.length() - 6 - 1).c_str());
												item.itemCount = 200;
												((PlayerInfo*)(peer->data))->inventory.items.push_back(item);
											}
											sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);
										}
									}
									else
										if (str.substr(0, 9) == "/cleaninv")
										{
											PlayerInventory inventory;
											InventoryItem item;
											item.itemID = ((PlayerInfo*)(peer->data))->invitem1;
											item.itemCount = 200;
											inventory.items.push_back(item);

											item.itemID = ((PlayerInfo*)(peer->data))->invitem2;
											item.itemCount = 200;
											inventory.items.push_back(item);

											item.itemID = ((PlayerInfo*)(peer->data))->invitem3;
											item.itemCount = 200;
											inventory.items.push_back(item);

											item.itemID = ((PlayerInfo*)(peer->data))->invitem4;
											item.itemCount = 200;
											inventory.items.push_back(item);

											item.itemID = ((PlayerInfo*)(peer->data))->invitem5;
											item.itemCount = 200;
											inventory.items.push_back(item);

											item.itemID = ((PlayerInfo*)(peer->data))->invitem6;
											item.itemCount = 200;
											inventory.items.push_back(item);

											item.itemID = ((PlayerInfo*)(peer->data))->invitem7;
											item.itemCount = 200;
											inventory.items.push_back(item);

											item.itemID = ((PlayerInfo*)(peer->data))->invitem8;
											item.itemCount = 200;
											inventory.items.push_back(item);

											item.itemID = ((PlayerInfo*)(peer->data))->invitem9;
											item.itemCount = 200;
											inventory.items.push_back(item);


											item.itemCount = 1;
											item.itemID = 18;
											inventory.items.push_back(item);
											item.itemID = 32;
											inventory.items.push_back(item);
											sendInventory(peer, inventory);

										}
										*/


							else if (str.substr(0, 7) == "/color ")
							{

								if (((PlayerInfo*)(peer->data))->adminLevel <= 111) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `9Soory! `^But this command only available for `9Samurai `^And `@Higher `^ranks!"));
									ENetPacket * packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									continue;
								}

								((PlayerInfo*)(peer->data))->skinColor = atoi(str.substr(6, cch.length() - 6 - 1).c_str());
								sendClothes(peer);
							}
							if (str.substr(0, 4) == "/who")
							{
								sendWho(peer);


							}

						}

						if (!((PlayerInfo*)(event.peer->data))->isIn)
						{
							/*std::ifstream ifs("hash.txt");
							std::string contentha((std::istreambuf_iterator<char>(ifs)),
								(std::istreambuf_iterator<char>()));

							int serverhash = std::atoi(contentha.c_str());
							cout << "client connected successfuly, server hash: " + serverhash;*/
							// current hash: 926425180
							GamePacket p = packetEnd(appendString(appendString(appendString(appendString(appendInt(appendString(createPacket(), "OnSuperMainStartAcceptLogonHrdxs47254722215a"), itemdathash), "5.20.120.177"), "realcache/"), "cc.cz.madkite.freedom org.aqua.gg idv.aqua.bulldog com.cih.gamecih2 com.cih.gamecih com.cih.game_cih cn.maocai.gamekiller com.gmd.speedtime org.dax.attack com.x0.strai.frep com.x0.strai.free org.cheatengine.cegui org.sbtools.gamehack com.skgames.traffikrider org.sbtoods.gamehaca com.skype.ralder org.cheatengine.cegui.xx.multi1458919170111 com.prohiro.macro me.autotouch.autotouch com.cygery.repetitouch.free com.cygery.repetitouch.pro com.proziro.zacro com.slash.gamebuster"), "proto=80|choosemusic=audio/mp3/ykoops.mp3|active_holiday=4"));
							//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet);

							//enet_host_flush(server);
							delete p.data;
							std::stringstream ss(GetTextPointerFromPacket(event.packet));
							std::string to;
							while (std::getline(ss, to, '\n')) {
								string id = to.substr(0, to.find("|"));
								string act = to.substr(to.find("|") + 1, to.length() - to.find("|") - 1);
								if (id == "tankIDName")
								{
									((PlayerInfo*)(event.peer->data))->tankIDName = act;
									((PlayerInfo*)(event.peer->data))->haveGrowId = true;
								}
								else if (id == "tankIDPass")
								{
									((PlayerInfo*)(event.peer->data))->tankIDPass = act;
								}
								else if (id == "requestedName")
								{
									((PlayerInfo*)(event.peer->data))->requestedName = act;
								}
								else if (id == "country")
								{
									//((PlayerInfo*)(event.peer->data))->country = act;
								}
								else if (id == "game_version") {
									((PlayerInfo*)(event.peer->data))->gameversion = act;
									if (act != "3.021") {
										sendConsoleMsg(peer, "`5[GTLT] `9Soory, your growtopia version is not supported! Please update to the latest!");
										enet_peer_disconnect_later(peer, 0);
									}
								}
								else if (id == "rid") {
									((PlayerInfo*)(event.peer->data))->rid = act;
									if (std::experimental::filesystem::exists("bans/rid/" + act + ".txt")) {
										((PlayerInfo*)(peer->data))->evadeRID = true;
									}
									if (act.length() < 32) autoBan(peer, true, 1);
									if (act.length() > 36) autoBan(peer, true, 1);

								}
								else if (id == "wk") {
									bool valid = true;
									if (act.substr(0, 4) == "NONE" || act.substr(1, 4) == "NONE" || act.substr(3, 4) == "NONE") valid = false;
									if (valid) {
										((PlayerInfo*)(event.peer->data))->sid = act;
										if (act.length() < 32) autoBan(peer, true, 1);
										if (act.length() > 36) autoBan(peer, true, 1);
									}

								}
								else if (id == "zf") {
									if (act.length() < 4) autoBan(peer, true, 1);
									((PlayerInfo*)(event.peer->data))->zf = act;
								}
								else if (id == "meta")
								{

									((PlayerInfo*)(event.peer->data))->metaip = act;


									if (act != "localhost") {
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Oh No! something is wrong and you will be disconnected..."));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										enet_peer_disconnect_later(peer, 0);
									}



								}
								else if (id == "hash2") {
									if (act.length() != 0) {
										if (act.length() < 6) autoBan(peer, true, 1);
										if (act.length() > 16) autoBan(peer, true, 1);
									}
								}
								else if (id == "platformID") {
									if (act.length() == 0) autoBan(peer, true, 1);
									((PlayerInfo*)(event.peer->data))->platformID = act;
								}
								else if (id == "player_age")
								{
									((PlayerInfo*)(event.peer->data))->player_age = act;
								}
								else if (id == "fhash")
								{
									((PlayerInfo*)(event.peer->data))->fhash = act;
								}
								else if (id == "mac") {
									((PlayerInfo*)(event.peer->data))->mac = act;
									if (act.length() < 16) autoBan(peer, true, 1);
									if (act.length() > 20) autoBan(peer, true, 1);
								}
								else if (id == "hash") {
									if (act.length() != 0) {
										if (act.length() < 6) autoBan(peer, true, 1);
										if (act.length() > 16) autoBan(peer, true, 1);
									}
								}
								else if (id == "aid")
								{
									((PlayerInfo*)(event.peer->data))->aid = act;
								}
								else if (id == "houstonProductID")
								{
									((PlayerInfo*)(event.peer->data))->hpid = act;
								}
								else if (id == "gid")
								{
									((PlayerInfo*)(event.peer->data))->gid = act;
								}
								else if (id == "vid")
								{
									((PlayerInfo*)(event.peer->data))->vid = act;
								}
								else if (id == "f")
								{
									((PlayerInfo*)(event.peer->data))->f = act;
								}
								else if (id == "fz")
								{
									((PlayerInfo*)(event.peer->data))->fz = act;
								}
								else if (id == "lmode")
								{
									((PlayerInfo*)(event.peer->data))->lmode = act;
								}
								else if (id == "user")
								{
									((PlayerInfo*)(event.peer->data))->user = act;
								}
								else if (id == "token")
								{
									((PlayerInfo*)(event.peer->data))->token = act;
								}
								else if (id == "GDPR")
								{
									((PlayerInfo*)(event.peer->data))->gdpr = act;
								}
								else if (id == "deviceVersion")
								{
									((PlayerInfo*)(event.peer->data))->deviceversion = act;
								}


							}
							if (((PlayerInfo*)(event.peer->data))->mac == "" || ((PlayerInfo*)(event.peer->data))->rid == "" || ((PlayerInfo*)(event.peer->data))->player_age == "")
							{
								enet_peer_disconnect_now(peer, 0);
							}
							if (!((PlayerInfo*)(event.peer->data))->haveGrowId)
							{
								GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`1Connecting... `w[`ev3.021 `2GTLT`w]"));
								ENetPacket* packet3 = enet_packet_create(p3.data,
									p3.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet3);
								delete p3.data;



								((PlayerInfo*)(event.peer->data))->rawName = "" + PlayerDB::fixColors(((PlayerInfo*)(event.peer->data))->requestedName.substr(0, ((PlayerInfo*)(event.peer->data))->requestedName.length() > 15 ? 15 : ((PlayerInfo*)(event.peer->data))->requestedName.length()));
								((PlayerInfo*)(event.peer->data))->haveGuestId = true;
								((PlayerInfo*)(event.peer->data))->msgName = std::to_string(event.peer->address.host);
								((PlayerInfo*)(event.peer->data))->displayName = "" + PlayerDB::fixColors(((PlayerInfo*)(event.peer->data))->requestedName.substr(0, ((PlayerInfo*)(event.peer->data))->requestedName.length() > 15 ? 15 : ((PlayerInfo*)(event.peer->data))->requestedName.length()));
								((PlayerInfo*)(event.peer->data))->tankIDName = "" + PlayerDB::fixColors(((PlayerInfo*)(event.peer->data))->requestedName.substr(0, ((PlayerInfo*)(event.peer->data))->requestedName.length() > 15 ? 15 : ((PlayerInfo*)(event.peer->data))->requestedName.length()));
								((PlayerInfo*)(event.peer->data))->displayNamebackup = ((PlayerInfo*)(event.peer->data))->displayName;
							}
							else {
								((PlayerInfo*)(event.peer->data))->rawName = PlayerDB::getProperName(((PlayerInfo*)(event.peer->data))->tankIDName);
								((PlayerInfo*)(event.peer->data))->msgName = PlayerDB::getProperName(((PlayerInfo*)(event.peer->data))->tankIDName);
#ifdef REGISTRATION
								int logStatus = PlayerDB::playerLogin(peer, ((PlayerInfo*)(event.peer->data))->rawName, ((PlayerInfo*)(event.peer->data))->tankIDPass);
								if (logStatus == -5) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Your connection have been cancelled!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									enet_peer_disconnect_later(peer, 0);
								}
								if (logStatus == -4) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `4Your account have been locked for security reasons, If you believe its an mistake please contact Herino#1175!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;

									enet_peer_disconnect_later(peer, 0);
								}
								if (logStatus == -3) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Sorry, this account (`5" + ((PlayerInfo*)(event.peer->data))->rawName + "`4) has been suspended.If you have a question contact `5Herino#1175`4!"));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, packet);
									delete p.data;
									//enet_peer_disconnect_later(peer, 0);
								}
								else if (logStatus == 1) {

									//((PlayerInfo*)(peer->data))->adminLevel = 999;

									std::ifstream iffff("players/" + ((PlayerInfo*)(peer->data))->rawName + ".json");


									if (iffff.fail()) {
										iffff.close();


									}
									if (iffff.is_open()) {
									}
									json j;
									iffff >> j; //load

									((PlayerInfo*)(peer->data))->adminLevel = j["adminLevel"];




									bool arrestartedmn;
									ifstream fdarest("restartedmaintenance.txt");
									fdarest >> arrestartedmn;
									fdarest.close();


									bool ar;
									ifstream fdar("maintenance/maintenance.txt");
									fdar >> ar;
									fdar.close();



									if (ar && ((PlayerInfo*)(peer->data))->adminLevel < 1000)
									{

										string text = "action|log\nmsg|`4Sorry, the server is under `1maintenance`4! Try it in a few minutes.\n";
										string text3 = "action|logon_fail\n";
										string dc = "https://discord.gg/qtSdMWx";
										string url = "action|set_url\nurl|" + dc + "\nlabel|Join discord\n";


										BYTE* data = new BYTE[5 + text.length()];
										BYTE* data3 = new BYTE[5 + text3.length()];
										BYTE* dataurl = new BYTE[5 + url.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);

										memcpy(dataurl, &type, 4);
										memcpy(dataurl + 4, url.c_str(), url.length());
										memcpy(dataurl + 4 + url.length(), &zero, 1);

										memcpy(data3, &type, 4);
										memcpy(data3 + 4, text3.c_str(), text3.length());
										memcpy(data3 + 4 + text3.length(), &zero, 1);

										ENetPacket* p = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, p);
										ENetPacket* p3 = enet_packet_create(dataurl,
											5 + url.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, p3);
										ENetPacket* p2 = enet_packet_create(data3,
											5 + text3.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, p2);

										delete data;
										delete dataurl;
										delete data3;

										break;
									}



									if (arrestartedmn)
									{

										string text = "action|log\nmsg|`4Sorry, the server is under `1maintenance`4! Try it in a few minutes.\n";
										string text3 = "action|logon_fail\n";
										string dc = "https://discord.gg/qtSdMWx";
										string url = "action|set_url\nurl|" + dc + "\nlabel|Join discord\n";


										BYTE* data = new BYTE[5 + text.length()];
										BYTE* data3 = new BYTE[5 + text3.length()];
										BYTE* dataurl = new BYTE[5 + url.length()];
										BYTE zero = 0;
										int type = 3;
										memcpy(data, &type, 4);
										memcpy(data + 4, text.c_str(), text.length());
										memcpy(data + 4 + text.length(), &zero, 1);

										memcpy(dataurl, &type, 4);
										memcpy(dataurl + 4, url.c_str(), url.length());
										memcpy(dataurl + 4 + url.length(), &zero, 1);

										memcpy(data3, &type, 4);
										memcpy(data3 + 4, text3.c_str(), text3.length());
										memcpy(data3 + 4 + text3.length(), &zero, 1);

										ENetPacket* p = enet_packet_create(data,
											5 + text.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, p);
										ENetPacket* p3 = enet_packet_create(dataurl,
											5 + url.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, p3);
										ENetPacket* p2 = enet_packet_create(data3,
											5 + text3.length(),
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, p2);

										delete data;
										delete dataurl;
										delete data3;

										break;
									}




									short invsize = 0;
									ifstream invfd("usersinventorysize/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
									invfd >> invsize;
									invfd.close();

									((PlayerInfo*)(peer->data))->currentInventorySize = invsize;



									int level = ((PlayerInfo*)(peer->data))->level;
									((PlayerInfo*)(event.peer->data))->displayName = ((PlayerInfo*)(event.peer->data))->tankIDName;
									if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
										((PlayerInfo*)(event.peer->data))->displayName = "`w[`4YouTuber`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`4YouTuber`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
										/*if (((PlayerInfo*)(peer->data))->rawName == "btw") {
											((PlayerInfo*)(event.peer->data))->displayName = "`w[`#MOMO`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
											((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`#MOMO`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;

										}*/
										if (((PlayerInfo*)(peer->data))->isCreator == true) {
											((PlayerInfo*)(event.peer->data))->displayName = "`w[`4Creator`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
											((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`4Creator`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
										}
										else {
											((PlayerInfo*)(event.peer->data))->displayName = "`w[`9Guardian`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
											((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`9Guardian`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
										}
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
										((PlayerInfo*)(event.peer->data))->displayName = "`w[`4Leader`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`4Leader`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
										((PlayerInfo*)(event.peer->data))->displayName = "`w[`qAdmin`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`qAdmin`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
										((PlayerInfo*)(event.peer->data))->displayName = "`w[`#MOD`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`#MOD`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
										((PlayerInfo*)(event.peer->data))->displayName = "`w[`5Premium`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`5Premium`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
										((PlayerInfo*)(event.peer->data))->displayName = "`w[`oVIP`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`oVIP`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
										((PlayerInfo*)(event.peer->data))->displayName = "`w[`eKing`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`eKing`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
										((PlayerInfo*)(event.peer->data))->displayName = "`w[`bNinja`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`bNinja`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
										((PlayerInfo*)(event.peer->data))->displayName = "`w[`@Samurai`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`@Samurai`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
										((PlayerInfo*)(event.peer->data))->displayName = "`w[`1Warrior`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`1Warrior`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}
									else if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
										((PlayerInfo*)(event.peer->data))->displayName = "`w[`2Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
										((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`2Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
									}


								}
								else {

									string text = "action|log\nmsg|`4GrowID or password is wrong!`7 Incase you want to recover your account, contact Herino#1175!";
									string text3 = "action|logon_fail\n";
									string dc = "https://discord.gg/qtSdMWx";
									string url = "action|set_url\nurl|" + dc + "\nlabel|Join GTLT Discord\n";
									BYTE* data = new BYTE[5 + text.length()];
									BYTE* data3 = new BYTE[5 + text3.length()];
									BYTE* dataurl = new BYTE[5 + url.length()];
									BYTE zero = 0;
									int type = 3;
									memcpy(data, &type, 4);
									memcpy(data + 4, text.c_str(), text.length());
									memcpy(data + 4 + text.length(), &zero, 1);

									memcpy(dataurl, &type, 4);
									memcpy(dataurl + 4, url.c_str(), url.length());
									memcpy(dataurl + 4 + url.length(), &zero, 1);

									memcpy(data3, &type, 4);
									memcpy(data3 + 4, text3.c_str(), text3.length());
									memcpy(data3 + 4 + text3.length(), &zero, 1);

									ENetPacket* p = enet_packet_create(data,
										5 + text.length(),
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, p);
									ENetPacket* p3 = enet_packet_create(dataurl,
										5 + url.length(),
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, p3);
									ENetPacket* p2 = enet_packet_create(data3,
										5 + text3.length(),
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(peer, 0, p2);
									enet_peer_disconnect_later(peer, 0);
									delete data;
									delete dataurl;
									delete data3;
									enet_peer_disconnect_later(peer, 0);
									//cout << "[GTLT] Uzfiksuotas nepavikes loginas!" << endl;
									//cout << "GrowID: " + ((PlayerInfo*)(peer->data))->tankIDName << endl;
									//cout << "Password: " + ((PlayerInfo*)(peer->data))->tankIDPass << endl;										
									ofstream wuplog("wuplog.txt", std::ios_base::app);
									wuplog << "GROWID: " << ((PlayerInfo*)(peer->data))->tankIDName << " PASSWORD: " << ((PlayerInfo*)(peer->data))->tankIDPass << " !" << endl;
									wuplog.close();
									continue;
									break;
								}
#else

								((PlayerInfo*)(event.peer->data))->displayName = PlayerDB::fixColors(((PlayerInfo*)(event.peer->data))->tankIDName.substr(0, ((PlayerInfo*)(event.peer->data))->tankIDName.length() > 18 ? 18 : ((PlayerInfo*)(event.peer->data))->tankIDName.length()));
								if (((PlayerInfo*)(event.peer->data))->displayName.length() < 3) ((PlayerInfo*)(event.peer->data))->displayName = "Person that doesn't know how the name looks!";
#endif
							}
							for (char c : ((PlayerInfo*)(event.peer->data))->displayName) if (c < 0x20 || c>0x7A) ((PlayerInfo*)(event.peer->data))->displayName = "Bad characters in name, remove them!";

							if (((PlayerInfo*)(event.peer->data))->country.length() > 4)
							{
								//((PlayerInfo*)(event.peer->data))->country = "us";
							}
							if (((PlayerInfo*)(event.peer->data))->adminLevel == 998)
							{
								//((PlayerInfo*)(event.peer->data))->country = "";
							}
							if (((PlayerInfo*)(event.peer->data))->adminLevel == 1000)
							{
								//((PlayerInfo*)(event.peer->data))->country = "";
							}
							if (((PlayerInfo*)(event.peer->data))->adminLevel == 999)
							{
								//((PlayerInfo*)(event.peer->data))->country = "";										
							}
							if (((PlayerInfo*)(event.peer->data))->adminLevel == 777)
							{
								//((PlayerInfo*)(event.peer->data))->country = "";
							}
							if (((PlayerInfo*)(event.peer->data))->adminLevel == 555)
							{
								//((PlayerInfo*)(event.peer->data))->country = "";
							}
							if (((PlayerInfo*)(event.peer->data))->adminLevel == 888)
							{
								//((PlayerInfo*)(event.peer->data))->country = "";
							}
							/*GamePacket p3= packetEnd(appendString(appendString(createPacket(), "OnRequestWorldSelectMenu"), "default|GO FOR IT\nadd_button|Showing: `wFake Worlds``|_catselect_|0.6|3529161471|\nadd_floater|Subscribe|5|0.55|3529161471\nadd_floater|Growtopia|4|0.52|4278190335\nadd_floater|Noobs|150|0.49|3529161471\nadd_floater|...|3|0.49|3529161471\nadd_floater|`6:O :O :O``|2|0.46|3529161471\nadd_floater|SEEMS TO WORK|2|0.46|3529161471\nadd_floater|?????|1|0.43|3529161471\nadd_floater|KEKEKEKEK|13|0.7|3417414143\n"));
							//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
							ENetPacket * packet3 = enet_packet_create(p3.data,
							p3.len,
							ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet3);
							enet_host_flush(server);*/


							GamePacket p2 = packetEnd(appendString(appendString(appendInt(appendString(createPacket(), "SetHasGrowID"), ((PlayerInfo*)(event.peer->data))->haveGrowId), ((PlayerInfo*)(peer->data))->tankIDName), ((PlayerInfo*)(peer->data))->tankIDPass));
							ENetPacket* packet2 = enet_packet_create(p2.data,
								p2.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(peer, 0, packet2);
							delete p2.data;



						}
						string pStr = GetTextPointerFromPacket(event.packet);
						//if (strcmp(GetTextPointerFromPacket(event.packet), "action|enter_game\n") == 0 && !((PlayerInfo*)(event.peer->data))->isIn)
						if (pStr.substr(0, 17) == "action|enter_game" && !((PlayerInfo*)(event.peer->data))->isIn)
						{
#ifdef TOTAL_LOG
							cout << "And we are in!" << endl;
#endif
							ENetPeer* currentPeer;
							if (((PlayerInfo*)(event.peer->data))->rawName == "")
							{
								enet_peer_disconnect_now(event.peer, 0);
							}
							else
							{
								((PlayerInfo*)(event.peer->data))->isIn = true;
							}

							if (std::experimental::filesystem::exists("cursedplayers/" + ((PlayerInfo*)(peer->data))->rawName + ".txt"))
							{
								((PlayerInfo*)(peer->data))->isCursed = true;
							}

							if (std::experimental::filesystem::exists("mutedplayers/" + ((PlayerInfo*)(peer->data))->rawName + ".txt"))
							{
								((PlayerInfo*)(peer->data))->taped = true;
								((PlayerInfo*)(peer->data))->isDuctaped = true;
								((PlayerInfo*)(peer->data))->cantsay = true;
							}
							/*for (currentPeer = server->peers;
							currentPeer < &server->peers[server->peerCount];
							++currentPeer)
							{
							if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;


							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Player `o" + ((PlayerInfo*)(event.peer->data))->tankIDName + "`o just entered the game..."));
							ENetPacket * packet = enet_packet_create(p.data,
							p.len,
							ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(currentPeer, 0, packet);

							enet_host_flush(server);
							delete p.data;
							}*/
							if (((PlayerInfo*)(peer->data))->haveGrowId) {
								sendWorldOffers(peer);
							}
							int counts = 0;

							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								counts++;
							}
							if (((PlayerInfo*)(peer->data))->haveGrowId) {
								//cout << ((PlayerInfo*)(peer->data))->displayName << "(" << ((PlayerInfo*)(peer->data))->rawName << ")" << " joined this server. " << counts << " people are online." << endl;

								//cout << "IP: " + ((PlayerInfo*)(peer->data))->charIP << endl;
								cout << "[INFO]: Player " << ((PlayerInfo*)(peer->data))->tankIDName << " Connected!" << endl;
								//cout << "GrowID: " + ((PlayerInfo*)(peer->data))->tankIDName << endl;
								//cout << "Password: " + ((PlayerInfo*)(peer->data))->tankIDPass << endl;
								//cout << "GameVersion: " + ((PlayerInfo*)(peer->data))->gameversion << endl;
								GamePacket p7 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"));
								ENetPacket* packet7 = enet_packet_create(p7.data,
									p7.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet7);
								string name = ((PlayerInfo*)(peer->data))->displayName;
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wWelcome back, `6" + name + "`o. `1[`wThere are `2" + to_string(counts) + " `wplayers online!`1]"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								delete p.data;
								GamePacket p3 = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`5GTLT`w `8Update `@6.7``|left|5956|noflags|0|0|\n\nadd_image_button|okgo|interface/large/anni_sta.rttex|noflags|||\n\nadd_spacer|\nadd_label_with_icon|small|`#Gem Storage`^! Added new block `9The `#Gem Storage `^Allows you to `9Store `9Gems `^In it! Can be `2Purchased `^In the `4Store`^!|left|9418|\n\nadd_spacer|\nadd_label_with_icon|small|`eOcean Update`^! `^Added New `43 `9Items `w[`eOcean Chest`9,`e Ocean Wings`9, `eOcean Token`w] `^This `eEvent `^Lasts For `43 `9Months`^! More `9Information `^About `eWinter Chest `^Can Be Found In The `4Store`^!|left|7328|\n\nadd_spacer|\nadd_label_with_icon|small|`#Server Renamed`^! `9Server Name `4GTOS `6[`wGrowtopia Of Sebia`6] `^Changed To `4GTLT `6[`wGrowtopia Lithuania`6]`^!|left|32|\n\nadd_spacer|\nadd_label_with_icon|small|`#Multifacing Update`^! Now `9Blocks `^For `6Example Crouch `^Will be placed in the `#Directory `^You Are `9Looking At`^! `6Special Thanks For The `9Update `6To `wLuc1fer`6!|left|828|\n\nadd_spacer|\nadd_label_with_icon|small|`#New Features`^! Added New `9Command `@/flag <`wID`@> `^Allows you to change your flag into `9Any Block `^You Want! Finally... `9/mod `^Fully Fixed`^! `6Special Thanks For The `9Update `6To `wLuc1fer`6!|left|1796|\n\nadd_spacer|\nadd_label_with_icon|small|`#Performance Update`^! Removed `4Fake Sebia `^Useless `9Codes`^ Added New `2Spring `9Chest `^To the `4Store`^!|left|32|\n\nadd_spacer|\nadd_label_with_icon|small|`#Purple Phoenix Wings`^! New `9ULTRA RARE `^Wings! `6Obtainable From The `4Store `w[`8Legendary Craftable Items`w] `4Hurry! `9Theres Only `23 Of Them `9In The `5Game`9!|left|9410|\n\nadd_spacer|\nadd_label_with_icon|small|`#Valentine Update! `^Added `4ALL NEW `#VALENTINE `4ITEMS`^! Added New `9Golden Booty Chest `8Obtainable `^Via `4Shop `w[`4Available Only During `#Valentine`w]`^!|left|3402|\n\nadd_spacer|\nadd_label_with_icon|small|`eBig Update! `^Added New `9Command `4/givelevel `^Improved `9Commands `w[`4/pban /unban /clear /giverank`w]`^! Also... `2Earth `9Fragments `^Are now obtainable from breaking `4ANY `9Block`^!|left|828|\n\nadd_spacer|\nadd_label_with_icon|small|`eNew Block! `^Added `9The `eXP `9Block `^Obtainable From Breaking `w[`4???`w] `9Blocks`^! Gives you `9Bunch of `eXP `^And `9Gems`^!|left|9358|\n\nadd_spacer|\nadd_label_with_icon|small|`eNew Wings! `^Added `9The `#Dyro Wings `^Only available for `9Dyro`^!|left|9356|\n\nadd_spacer|\nadd_label_with_icon|small|`ePlayers Requested Updates `##5! `8Whats new?.. `2NEW `#Unicorn! `^Harvesting `#Unicorns can give you 0-3 `9Crystals `^Per `4PUNCH`^! `#Unicorn `^Can be `2Bought `^From `4STORE`^!|left|1636|\n\nadd_spacer|\nadd_label_with_icon|small|`@Big Changes! `^Added All New Items `93.01 `^Fixed World's Corruption `4Bug`^!|left|9294|\n\nadd_spacer|\nadd_label_with_icon|small|`@New Command! `^Added `4/dr `^& `4/undr `^And by using this command it toggles `4Dr. Title`^! You must be at least `9Level `2300 `^To use it`^!|left|828|\n\nadd_spacer|\nadd_label_with_icon|small|`@New Feature! `^Now You Can `9Write `^How Much `6Crystals `^You Want To `4Buy `^In The `4Store`^! Also... We Have `9Fixed `^Old `4Bug `^With `bNegative `^Amount Of `9Crystals`^!|left|5076|\n\nadd_spacer|\nadd_label_with_icon|small|`@New Lock! `^Added `4The Lava Lock `^Available for `2Free`^! But `9Think Twice `^Before Placing It, Who knows what might `9Happen`^!|left|9308|\n\nadd_spacer|\nadd_label_with_icon|small|`@New Update! `^Added [`4ShowOff`^] `9Feature`^ Now you can `9Drop Items `^Without losing them! Fixed `4Bug `^That `1Ancient Altar `^Didn't Return To `9Inventory`^!|left|5072|\n\nadd_spacer|\nadd_label_with_icon|small|`@Paid Items Change! `^All `4Paid `eItems `9From the `4Store `9Are Now `2Totally Free`^! `^These `9Items `^Are `4STILL PAID`^: `9[`4Ancestral, TK69, War Hammers`9]`^!|left|3580|\n\nadd_spacer|\nadd_label_with_icon|small|`@Ancestral Update! `^From now you can upgrade `9Any Type `^Of `@Ancestral`^, By using `9Ancient Altar `^Which is available in the `4Store`^! Also... We are working on our `9Server Website `4www.gtltprivate.eu`^! Mostly This update bringed `9A Lot `^Bug fixes`^!|left|5086|\n\nadd_spacer|\nadd_label_with_icon|small|`@Rollback! `^Yesterday our server burned down. We have been forced to delete all players and worlds! All your gems and ranks will be recovered`^!|left|8|\n\nadd_spacer|\nadd_label_with_icon|small|`@New Wings! `^Added New Wings The `bDark Angel Wings `^Obtainable From `9The Underground Trader`^!|left|9306|\n\nadd_spacer|\nadd_label_with_icon|small|`@Underground Update! `^Added New Items! Added New `9The Underground Trader `^Which Can Be Found In `4Underground `^World [`4Underground`^]! And you can Exchange `bDark `9Fragments `^Into `9Items`^ By Trading with `9The Underground Trader`^!|left|9288|\n\nadd_spacer|\nadd_label_with_icon|small|`@Major Improvements! `^Fixed Crash Bugs, Optimised Server, Online Limit Increased To `950`^!|left|1796|\n\nadd_spacer|\nadd_label_with_icon|small|`@Dark Lock Update! `^Added New Lock The `bDark Lock`^! Available in store! This is the `9Rarest Lock `^In the game`^!|left|9290|\n\nadd_spacer|\nadd_label_with_icon|small|`@New Block! `^Added new block The `1Light Crystal `^Obtainable from `bOnyx Blocks`^! And gives you `9Up to 3000 Gems`^!|left|9240|\n\nadd_spacer|\nadd_label_with_icon|small|`@Performance Update! `^Removed block breaking `9effects`^! Improvements to `9/pay`^! New `9Mod-Logs`^!|left|5270|\n\nadd_spacer|\nadd_label_with_icon|small|`@Dirt Lock Update! `^Added custom item `2Dirt Lock`^! Available in the store for `910 `2Emeralds`^! With custom effects and more`^!|left|8470|\n\nadd_spacer|\nadd_label_with_icon|small|`@VPS Update! `^Changed server IP, Now VPS is stronger and can handle more players online! [`9Added Player Limit to `415`9]`^!|left|1796|\n\nadd_spacer|\nadd_label_with_icon|small|`@Rayman Price! `^Rayman are now available for `2300 GEMS `^[`4Offer Limited`^] `^In the `9Store`^! And other `9crash-BOT `^Fixes...|left|5480|\n\nadd_spacer|\nadd_label_with_icon|small|`@BAN Menu! `^Now you can choose how long to ban!|left|732|\n\nadd_spacer|\nadd_label_with_icon|small|`@Rayman! `^Fixed bugs with rayman and now rayman is 6 Far!|left|5480|\n\nadd_spacer|\nadd_label_with_icon|small|`@Doors! `^Are now fully working!|left|12|\n\nadd_spacer|\nadd_label_with_icon|small|`@Mail box'es `^are now in beta mode!|left|1006|\n\nadd_spacer|\nadd_label_with_icon|small|`@Bugs Fixes `^And `@New Features`^! `9Increased chance to get more gems breaking `bOnyx Blocks `9And `#Amethyst Blocks `9New machine! `7The Magic Machine `9Available in the store!|left|3146|\n\nadd_spacer|\nadd_label_with_icon|small|`@Guilds `^And `@Security Update`^! `9New `4AUTO BAN `9Detection! GTLT Will now detect illegal clients and `4AUTO BAN `9Players! `9Guilds Are Now `^Fully Working`9!|left|5270|\n\nadd_spacer|\nadd_label_with_icon|small|`^Beta `@Development Update `##2`^! `9Guilds `^Are now `450% `^Working! `9New minigame `eThe PvP Wars`9! `^PvP Are now in `@beta `^Mode! And available in world `9PvP`^!|left|262|\n\nadd_spacer|\nadd_label_with_icon|small|`^Beta `@Development Update`^! `9Doors And Stuff Weather Machine `^Are now under `@beta `^mode! `9Warning! `9Doors And Stuff Weather Machine `^Are not fully finished! So use them at your own risk!|left|262|\n\nadd_spacer|\nadd_label_with_icon|small|`9New `eUPGRADE INVENTORY `9Feature! `^From now you can upgrade your inventory in the store for 30 `2WLS `^Each upgrade give you `4+30 Slots`^! `9Also... We have fixed `2World Locks `9And `1Diamond Locks `9Bug! `^And `@Chest's `^Prices Were Decreased!|left|2812|\n\nadd_spacer|\nadd_label_with_icon|small|`9Huge Update! A lot of improvements, bug fixes was made!|left|828|\n\nadd_spacer|\nadd_label_with_icon|small|`ePlayers Requested Updates `##4! `8Whats new?.. `2NEW `eATM Machine! `^Harvesting ATM Machines can give you 5-10 `9Gems `^Per `4PUNCH`^! `eATM Machine `^Can be `2Bought `^From `4STORE`^!|left|826|\n\nadd_spacer|\nadd_label_with_icon|small|`^ ADDED NEW COMMANDS! `4/ignore <nick> `^and`4 /unignore <nick> `^commands! NOW, if you will add a player to the ignore list, he will not be able to send you a private message(`4/msg`^6)! FIXED `4/curse, /uncurse, /mute, /unmute, /ban, /pban, /unban, /hardban`^ commands! Now it works correctly!|left|3146|\n\nadd_spacer|\nadd_label_with_icon|small|`@New block in store! `4The `bOnyx Block's`@! Those blocks can give you up to `4150-200 `@Gems per block`9!|left|7382|\n\nadd_spacer|\nadd_label_with_icon|small|`ePlayers Requested Updates `##3! `8Whats new?.. `9Fixed many bugs -> `9Now /sb `2Shows `9Cooldown time properly, Chests are now fully `2Working, `9And now when you are buying World Locks you can choose how many you want to `2buy`9!|left|826|\n\nadd_spacer|\nadd_label_with_icon|small|`ePlayers Requested Updates `##2! `8Whats new?.. `9New shop category `#Chests `9Now you can open chests and obtain gems, crystals or even items!... [`4Warning!`9] Chests are not fully working yet! `4Bugs `9May occur!|left|826|\n\nadd_spacer|\nadd_label_with_icon|small|`ePlayers Requested Updates `##1! `8Whats new?.. `9Now `2VIP `9And higher ranks don't have `6flags`9! Added new `2command `4/sdb `4Costs `920K To use! New `2Store `9Category `#Consumable `eItems `9Added new commands /msb, /vsb, /asb, /dsb, /lsb... `#And thats not all for sure! `9More comming `2SOON!|left|826|\n\nadd_spacer|\nadd_label_with_icon|small|`4Many Bug Fixes`9! `#Out Of World Crash FIXED! Now `4You Can't `#Place `2Ancestral `#As a block`9! `#And many many other `5fixes`#!|left|262|\n\nadd_spacer|\nadd_label_with_icon|small|`4Hot Bug FIX! `9Bug related to dissapearing items from inventory have been `2Fixed`9!|left|3424|\n\nadd_spacer|\nadd_label_with_icon|small|`8Update! `9Whats new? `eBreaking `@world locks `eor `@diamond locks `ewill `9return `e to your `5inventory`e! `2And new `4Ring Store `9Optimizations!|left|2812|\n\nadd_spacer|\nadd_label_with_icon|small|`eWinterfest `9Sales Starts! `2Enjoy up to -50% discount for ranks! And `9Gems `2Are now `415K/WL`2! More `9Information Can be found in our `6Discord`2!|left|3146|\n\nadd_spacer|\nadd_label_with_icon|small|`9New features and bug fixes update! Whats new? `eNew store category [`9Rings`e], Fixed unlimited `9gems `ebug [Hackers were punished], New `2World Owner `ePrefixes!, Fixed many other bugs...|left|5270|\n\nadd_spacer|\nadd_label_with_icon|small|`9WORLDS TRADING SYSTEM IS HERE! `2We added a new world trading system! If you are an owner of your world you can wrench on any player and press 'trade a world'! The buyer must enter /tradeworld command to take further actions!|left|3606|\n\nadd_spacer|small|\nadd_label_with_icon|small|\n\nadd_spacer|small|\n\nadd_url_button|comment|`9Join Our Discord Server``|noflags|https://discord.gg/qtSdMWx |Join Discord Server ?|4|\n\nadd_spacer|small|0|0|)|noflags|0|0|\nnend_dialog|gazette||OK|small|\nnend_dialog|gazette||OK||left|\nadd_button|anticrash|`@Fix `4Crash `^[`2Remove Set`^]|\n\nadd_spacer|\nadd_button|okgo|`^Close|noflags|0|0|\nnend_dialog|gazette||OK|"));
								ENetPacket* packet3 = enet_packet_create(p3.data,
									p3.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet3);
								delete p3.data;
								GamePacket p2ssw = packetEnd(appendString(appendInt(appendString(createPacket(), "OnEmoticonDataChanged"), 201560520), "(wl)|Ä|1&(yes)|Ä‚|1&(no)|Äƒ|1&(love)|Ä„|1&(oops)|Ä…|1&(shy)|Ä†|1&(wink)|Ä‡|1&(tongue)|Äˆ|1&(agree)|Ä‰|1&(sleep)|ÄŠ|1&(punch)|Ä‹|1&(music)|ÄŒ|1&(build)|Ä|1&(megaphone)|ÄŽ|1&(sigh)|Ä|1&(mad)|Ä|1&(wow)|Ä‘|1&(dance)|Ä’|1&(see-no-evil)|Ä“|1&(bheart)|Ä”|1&(heart)|Ä•|1&(grow)|Ä–|1&(gems)|Ä—|1&(kiss)|Ä˜|1&(gtoken)|Ä™|1&(lol)|Äš|1&(smile)|Ä€|1&(cool)|Äœ|1&(cry)|Ä|1&(vend)|Äž|1&(bunny)|Ä›|1&(cactus)|ÄŸ|1&(pine)|Ä¤|1&(peace)|Ä£|1&(terror)|Ä¡|1&(troll)|Ä¢|1&(evil)|Ä¢|1&(fireworks)|Ä¦|1&(football)|Ä¥|1&(alien)|Ä§|1&(party)|Ä¨|1&(pizza)|Ä©|1&(clap)|Äª|1&(song)|Ä«|1&(ghost)|Ä¬|1&(nuke)|Ä­|1&(halo)|Ä®|1&(turkey)|Ä¯|1&(gift)|Ä°|1&(cake)|Ä±|1&(heartarrow)|Ä²|1&(lucky)|Ä³|1&(shamrock)|Ä´|1&(grin)|Äµ|1&(ill)|Ä¶|1&"));


								ENetPacket* packet2ssw = enet_packet_create(p2ssw.data,
									p2ssw.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet2ssw);
								delete p2ssw.data;

								//enet_host_flush(server);

								std::ifstream ifff("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");

								if (ifff.fail()) {
									ifff.close();


								}
								if (ifff.is_open()) {


								}
								json j;
								ifff >> j; //load

								if (j["items"][0]["itemid"] != 18 || j["items"][1]["itemid"] != 32)
								{
									j["items"][0]["itemid"] = 18;
									j["items"][1]["itemid"] = 32;

									j["items"][0]["quantity"] = 1;
									j["items"][1]["quantity"] = 1;

									std::ofstream oo("inventory/" + ((PlayerInfo*)(peer->data))->rawName + ".json");
									if (!oo.is_open()) {
										cout << GetLastError() << endl;
										_getch();
									}
									oo << j << std::endl;
									cout << "[WARNING] Player " << ((PlayerInfo*)(peer->data))->rawName << " Had Inventory Data Corrupted! Attempting To Restore..." << endl;
									cout << "[WARNING] Inventory For " << ((PlayerInfo*)(peer->data))->rawName << " Restored Succesfully!" << endl;



								}

								PlayerInventory inventory;
								{
									InventoryItem item;

									for (int i = 0; i < ((PlayerInfo*)(peer->data))->currentInventorySize; i++)
									{
										int itemid = j["items"][i]["itemid"];
										int quantity = j["items"][i]["quantity"];
										if (itemid != 0 && quantity != 0)
										{
											item.itemCount = quantity;
											item.itemID = itemid;
											inventory.items.push_back(item);
											sendInventory(peer, inventory);
										}

									}
								}
								((PlayerInfo*)(event.peer->data))->inventory = inventory;
							}
							else {
								((PlayerInfo*)(peer->data))->isBot = false;
								ENetPeer* currentPeer;
								for (currentPeer = server->peers;
									currentPeer < &server->peers[server->peerCount];
									++currentPeer)
								{
									if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
										continue;

								}
								GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnDialogRequest"), "set_default_color|`o\n\nadd_label_with_icon|big|`wRegistration Agreement``|left|6128|small|\n\nadd_spacer|\nadd_label_with_icon|small|`wUsing any hack clients that can harm the server is not allowed! And will result in a IP SHARE & PERMANENT BAN! All ranks, gems are not refundable!|left|828|\n\nadd_spacer|\nadd_button|sutikimas|`2Accept|0|0|"));
								ENetPacket* packet = enet_packet_create(p.data,
									p.len,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);

								enet_host_flush(server);
								delete p.data;
							}

							if (((PlayerInfo*)(peer->data))->haveGrowId) {

								PlayerInfo* p = ((PlayerInfo*)(peer->data));
								std::ifstream ifff("players/" + PlayerDB::getProperName(p->rawName) + ".json");
								json j;
								ifff >> j;

								//p->currentWorld = worldInfo->name;



								vector <string>frns;
								if (j.count("friends") == 1) {
									for (int i = 0; i < j["friends"].size(); i++) {
										frns.push_back(j["friends"][i]);
									}
								}
								else {
									frns = {};
								}

								((PlayerInfo*)(peer->data))->effect = j["effect"];


								p->friendinfo = frns;
								ifff.close();
							}
							for (currentPeer = server->peers;
								currentPeer < &server->peers[server->peerCount];
								++currentPeer)
							{
								if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
									continue;
								string name = ((PlayerInfo*)(currentPeer->data))->rawName;
								if (find(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), name) != ((PlayerInfo*)(peer->data))->friendinfo.end()) {
									GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ALERT: `o" + ((PlayerInfo*)(peer->data))->rawName + " `ohas `2logged on`o."));
									ENetPacket* packet = enet_packet_create(p.data,
										p.len,
										ENET_PACKET_FLAG_RELIABLE);
									enet_peer_send(currentPeer, 0, packet);
									delete p.data;
								}
							}
							{
								PlayerInfo* pData = ((PlayerInfo*)(peer->data));


							}
						}
						if (strcmp(GetTextPointerFromPacket(event.packet), "action|refresh_item_data\n") == 0)
						{
							if (itemsDat != NULL) {
								ENetPacket* packet = enet_packet_create(itemsDat,
									itemsDatSize + 60,
									ENET_PACKET_FLAG_RELIABLE);
								enet_peer_send(peer, 0, packet);
								((PlayerInfo*)(peer->data))->isUpdating = true;
								enet_peer_disconnect_later(peer, 0);
								//enet_host_flush(server);




							}
							// TODO FIX refresh_item_data ^^^^^^^^^^^^^^
						}
						break;
					}
					default:
						cout << "Unknown packet type " << messageType << endl;
						break;
					case 3:
					{
						//cout << GetTextPointerFromPacket(event.packet) << endl;
						std::stringstream ss(GetTextPointerFromPacket(event.packet));
						std::string to;
						bool isJoinReq = false;
						while (std::getline(ss, to, '\n')) {
							string id = to.substr(0, to.find("|"));
							string act = to.substr(to.find("|") + 1, to.length() - to.find("|") - 1);
							if (id == "name" && isJoinReq)
							{
								if (((PlayerInfo*)(peer->data))->isBot == true) {
									enet_peer_disconnect_now(peer, 0);
								}
#ifdef TOTAL_LOG
								cout << "Entering some world..." << endl;
#endif
								try {
									toUpperCase(act);



									if (act == "HELL")
									{
										((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
										//((PlayerInfo*)(peer->data))->isModState = false;
										((PlayerInfo*)(peer->data))->canWalkInBlocks = false;
										sendConsoleMsg(peer, "`9You are less sneaky now.(`$Ninja Stealth `omod removed)");
										((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
										sendState(peer);
										sendClothes(peer);
									}


									if (act == "JUMPS")
									{
										((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
										//((PlayerInfo*)(peer->data))->isModState = false;
										((PlayerInfo*)(peer->data))->canWalkInBlocks = false;
										sendConsoleMsg(peer, "`9You are less sneaky now.(`$Ninja Stealth `omod removed)");
										((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
										sendState(peer);
										sendClothes(peer);
									}



									if (act == "UNDERGROUND")
									{
										((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
										//((PlayerInfo*)(peer->data))->isModState = false;
										((PlayerInfo*)(peer->data))->canWalkInBlocks = false;
										sendConsoleMsg(peer, "`9You are less sneaky now.(`$Ninja Stealth `omod removed)");
										((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;
										sendState(peer);
										sendClothes(peer);
									}






									if (act == "SERVER")
									{
										if (((PlayerInfo*)(peer->data))->adminLevel != 1000) {
											((PlayerInfo*)(peer->data))->currentWorld = "START";
											GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnFailedToEnterWorld"), 1));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet2);
											delete p2.data;
											sendPlayerToWorld(peer, (PlayerInfo*)(peer->data), "EXIT");
										}
									}


									if (act == "CON" || act == "NUL" || act == "PRN" || act == "AUX" || act == "CLOCK$" || act == "COM0" || act == "COM1" || act == "COM2" || act == "COM3" || act == "COM4" || act == "COM5" || act == "COM6" || act == "COM7" || act == "COM8" || act == "COM9" || act == "LPT0" || act == "LPT1" || act == "LPT2" || act == "LPT3" || act == "LPT4" || act == "LPT5" || act == "LPT6" || act == "LPT7" || act == "LPT8" || act == "LPT9")
									{
										enet_peer_disconnect_now(peer, 0);
									}
									else
									{
										WorldInfo info = worldDB.get(act);
										WorldInfo info2 = worldDB.get("HELL");
										WorldInfo info3 = worldDB.get("START");


										bool existsban = std::experimental::filesystem::exists("worldbans/" + info.name + "/" + ((PlayerInfo*)(peer->data))->rawName);
										if (existsban)
										{
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4Oh no! ``You've been banned from that world by its owner! Try again later after ban wears off."));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;

											GamePacket p3 = packetEnd(appendString(appendInt(appendString(createPacket(), "OnFailedToEnterWorld"), 1), "Sorry"));
											ENetPacket* packet3 = enet_packet_create(p3.data,
												p3.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet3);
											delete p3.data;

											continue;
											break;
										}




										if (((PlayerInfo*)(peer->data))->isCursed == true)
										{
											((PlayerInfo*)(peer->data))->currentWorld = "HELL";
											sendWorldCursed(peer, &info2);
											ofstream myfile;

											std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											std::string content((std::istreambuf_iterator<char>(ifs)),
												(std::istreambuf_iterator<char>()));


											ofstream myfilet;
											myfilet.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
											myfilet << content;
											myfilet.close();

											int gembuxc = std::atoi(content.c_str());
											GamePacket p = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gembuxc));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);

											enet_peer_send(peer, 0, packet);
											delete p.data;

											((PlayerInfo*)(peer->data))->isInWorld = true;




											int x = 3040;
											int y = 736;


											for (int j = 0; j < info2.width * info2.height; j++)
											{
												if (info2.items[j].foreground == 6) {
													x = (j % info2.width) * 32;
													y = (j / info2.width) * 32;
												}
											}

											if (((PlayerInfo*)(peer->data))->adminLevel >= 666) {
												if (((PlayerInfo*)(peer->data))->isinv == true)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|1\nmstate|1\nsmstate|0\ntype|local\n"));
													//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													//enet_host_flush(server);
													delete p.data;
													((PlayerInfo*)(event.peer->data))->netID = cId;
													onPeerConnect(peer);
													cId++;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|1\nsmstate|0\ntype|local\n"));
													//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													//enet_host_flush(server);
													delete p.data;
													((PlayerInfo*)(event.peer->data))->netID = cId;
													onPeerConnect(peer);
													cId++;

												}

												int count = 0;
												ENetPeer* currentPeer;
												string name = "";
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													count++;
												}


												int countx = 0;
												//ENetPeer * currentPeer;
												string namex = "";
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													countx++;
												}


												int otherpeople = 0;

												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer))
														otherpeople++;
												}
												int otherpeoples = otherpeople - 1;
												string ownerworld = info.owner;
												string nameworld = info.name;


												string text = "action|play_sfx\nfile|audio/door_open.wav\ndelayMS|0\n";
												BYTE* data = new BYTE[5 + text.length()];
												BYTE zero = 0;
												int type = 3;
												memcpy(data, &type, 4);
												memcpy(data + 4, text.c_str(), text.length());
												memcpy(data + 4 + text.length(), &zero, 1);
												ENetPacket* packet7 = enet_packet_create(data,
													5 + text.length(),
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet7);

												/*if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
													((PlayerInfo*)(event.peer->data))->displayName = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
													((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
												}*/
												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													if (isHere(peer, currentPeer))
														if (((PlayerInfo*)(peer->data))->isinv == false)
														{

														}
													enet_peer_send(currentPeer, 0, packet7);

												}
												if (ownerworld != "") {
													GamePacket p3x = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`0" + nameworld + " `$World Locked `oby " + ownerworld + "`5]"));
													ENetPacket* packet3x = enet_packet_create(p3x.data,
														p3x.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet3x);
													delete p3x.data;
													/*if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
														((PlayerInfo*)(event.peer->data))->displayName = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
														((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
													}*/
												}



											}

											else if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
											{
												if (((PlayerInfo*)(peer->data))->isinv == true)
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|1\nmstate|0\nsmstate|0\ntype|local\n"));
													//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													//enet_host_flush(server);
													delete p.data;
													((PlayerInfo*)(event.peer->data))->netID = cId;
													onPeerConnect(peer);
													cId++;
												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
													//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													//enet_host_flush(server);
													delete p.data;
													((PlayerInfo*)(event.peer->data))->netID = cId;
													onPeerConnect(peer);
													cId++;
												}

											}
											else
											{
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
												//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);
												//enet_host_flush(server);
												delete p.data;
												((PlayerInfo*)(event.peer->data))->netID = cId;
												onPeerConnect(peer);
												cId++;
											}


											if (((PlayerInfo*)(peer->data))->haveGrowId == false)
											{
											}
										}
										else
										{
											if (((PlayerInfo*)(peer->data))->haveGrowId == false && ((PlayerInfo*)(peer->data))->haveGuestId == false)
											{
												sendWorld(peer, &info);

												string cworld = act;
												std::transform(cworld.begin(), cworld.end(), cworld.begin(), ::toupper);

												((PlayerInfo*)(peer->data))->currentWorld = cworld;


												((PlayerInfo*)(peer->data))->isInWorld = true;


											}
											else
											{


												if (act.length() < 16) {

													if (info.nuked)
													{
														if (((PlayerInfo*)(peer->data))->adminLevel < 777)
														{


															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wThis world is inaccessible.``"));
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															delete p.data;

															GamePacket p3 = packetEnd(appendString(appendInt(appendString(createPacket(), "OnFailedToEnterWorld"), 1), "Sorry"));
															ENetPacket* packet3 = enet_packet_create(p3.data,
																p3.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet3);
															delete p3.data;

														}

														else
														{
															{
																std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
																std::string content((std::istreambuf_iterator<char>(ifs)),
																	(std::istreambuf_iterator<char>()));

																sendWorld(peer, &info);

																string cworld = act;
																std::transform(cworld.begin(), cworld.end(), cworld.begin(), ::toupper);

																((PlayerInfo*)(peer->data))->currentWorld = cworld;



																ofstream myfile;
																myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
																myfile << content;
																myfile.close();
																int gembux = std::atoi(content.c_str());
																GamePacket p = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gembux));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);

																enet_peer_send(peer, 0, packet);
																delete p.data;


																((PlayerInfo*)(peer->data))->isInWorld = true;

																int x = 3040;
																int y = 736;


																for (int j = 0; j < info.width * info.height; j++)
																{
																	if (info.items[j].foreground == 6) {
																		x = (j % info.width) * 32;
																		y = (j / info.width) * 32;
																	}
																}

																if (((PlayerInfo*)(peer->data))->adminLevel == 1000) { //Buvo 777
																	if (((PlayerInfo*)(peer->data))->isinv == true)
																	{
																		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|1\nmstate|1\nsmstate|0\ntype|local\n"));
																		//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																		ENetPacket* packet = enet_packet_create(p.data,
																			p.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(peer, 0, packet);
																		//enet_host_flush(server);
																		delete p.data;
																		((PlayerInfo*)(event.peer->data))->netID = cId;
																		onPeerConnect(peer);
																		cId++;


																	}
																	else
																	{
																		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|1\nsmstate|0\ntype|local\n"));
																		//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																		ENetPacket* packet = enet_packet_create(p.data,
																			p.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(peer, 0, packet);
																		//enet_host_flush(server);
																		delete p.data;
																		((PlayerInfo*)(event.peer->data))->netID = cId;
																		onPeerConnect(peer);
																		cId++;


																	}
																}

																else if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
																{
																	if (((PlayerInfo*)(peer->data))->isinv == true)
																	{
																		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|1\nmstate|0\nsmstate|0\ntype|local\n"));
																		//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																		ENetPacket* packet = enet_packet_create(p.data,
																			p.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(peer, 0, packet);
																		//enet_host_flush(server);
																		delete p.data;
																		((PlayerInfo*)(event.peer->data))->netID = cId;
																		onPeerConnect(peer);
																		cId++;


																	}
																	else
																	{
																		GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
																		//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																		ENetPacket* packet = enet_packet_create(p.data,
																			p.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(peer, 0, packet);
																		//enet_host_flush(server);
																		delete p.data;
																		((PlayerInfo*)(event.peer->data))->netID = cId;
																		onPeerConnect(peer);
																		cId++;


																	}

																}
																else
																{
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
																	//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																	//enet_host_flush(server);
																	delete p.data;
																	((PlayerInfo*)(event.peer->data))->netID = cId;
																	onPeerConnect(peer);
																	cId++;


																}


																if (((PlayerInfo*)(peer->data))->haveGrowId == false)
																{
																}

																int countx = 0;
																ENetPeer* currentPeer;
																string namex = "";
																for (currentPeer = server->peers;
																	currentPeer < &server->peers[server->peerCount];
																	++currentPeer)
																{
																	if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																		continue;
																	countx++;
																}


																int otherpeople = 0;

																for (currentPeer = server->peers;
																	currentPeer < &server->peers[server->peerCount];
																	++currentPeer)
																{
																	if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																		continue;
																	if (isHere(peer, currentPeer))
																		otherpeople++;
																}
																int otherpeoples = otherpeople - 1;
																string ownerworld = info.owner;
																string nameworld = info.name;



																string text = "action|play_sfx\nfile|audio/door_open.wav\ndelayMS|0\n";
																BYTE* data = new BYTE[5 + text.length()];
																BYTE zero = 0;
																int type = 3;
																memcpy(data, &type, 4);
																memcpy(data + 4, text.c_str(), text.length());
																memcpy(data + 4 + text.length(), &zero, 1);
																ENetPacket* packet7 = enet_packet_create(data,
																	5 + text.length(),
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet7);

																/*if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
																	((PlayerInfo*)(event.peer->data))->displayName = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
																	((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
																}*/
																for (currentPeer = server->peers;
																	currentPeer < &server->peers[server->peerCount];
																	++currentPeer)
																{
																	if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																		continue;
																	if (isHere(peer, currentPeer))
																		if (((PlayerInfo*)(peer->data))->isinv == false)
																		{

																		}
																	enet_peer_send(currentPeer, 0, packet7);

																}
																if (ownerworld != "") {
																	GamePacket p3x = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`0" + nameworld + " `$World Locked `oby " + ownerworld + "`5]"));
																	ENetPacket* packet3x = enet_packet_create(p3x.data,
																		p3x.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet3x);
																	delete p3x.data;
																	/*if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
																		((PlayerInfo*)(event.peer->data))->displayName = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
																		((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
																	}*/
																}
															}
														}

													}


													else
													{
														std::ifstream ifs("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														std::string content((std::istreambuf_iterator<char>(ifs)),
															(std::istreambuf_iterator<char>()));

														sendWorld(peer, &info);

														string cworld = act;
														std::transform(cworld.begin(), cworld.end(), cworld.begin(), ::toupper);

														((PlayerInfo*)(peer->data))->currentWorld = cworld;



														ofstream myfile;
														myfile.open("gemdb/" + ((PlayerInfo*)(peer->data))->rawName + ".txt");
														myfile << content;
														myfile.close();
														int gembux = std::atoi(content.c_str());
														GamePacket p = packetEnd(appendInt(appendString(createPacket(), "OnSetBux"), gembux));
														ENetPacket* packet = enet_packet_create(p.data,
															p.len,
															ENET_PACKET_FLAG_RELIABLE);

														enet_peer_send(peer, 0, packet);
														delete p.data;


														((PlayerInfo*)(peer->data))->isInWorld = true;

														int x = 3040;
														int y = 736;


														for (int j = 0; j < info.width * info.height; j++)
														{
															if (info.items[j].foreground == 6) {
																x = (j % info.width) * 32;
																y = (j / info.width) * 32;
															}
														}

														if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
															if (((PlayerInfo*)(peer->data))->isinv == true)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|1\nmstate|1\nsmstate|0\ntype|local\n"));
																//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																//enet_host_flush(server);
																delete p.data;
																((PlayerInfo*)(event.peer->data))->netID = cId;
																onPeerConnect(peer);
																cId++;
															}
															else
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|1\nsmstate|0\ntype|local\n"));
																//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																//enet_host_flush(server);
																delete p.data;
																((PlayerInfo*)(event.peer->data))->netID = cId;
																onPeerConnect(peer);
																cId++;
															}
														}
														else if (((PlayerInfo*)(peer->data))->adminLevel == 1000)
														{
															if (((PlayerInfo*)(peer->data))->isinv == true)
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|1\nmstate|0\nsmstate|0\ntype|local\n"));
																//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																//enet_host_flush(server);
																delete p.data;
																((PlayerInfo*)(event.peer->data))->netID = cId;
																onPeerConnect(peer);
																cId++;
															}
															else
															{
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
																//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																//enet_host_flush(server);
																delete p.data;
																((PlayerInfo*)(event.peer->data))->netID = cId;
																onPeerConnect(peer);
																cId++;
															}
															
														}
														else
														{
															GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnSpawn"), "spawn|avatar\nnetID|" + std::to_string(cId) + "\nuserID|" + std::to_string(cId) + "\ncolrect|0|0|20|30\nposXY|" + std::to_string(x) + "|" + std::to_string(y) + "\nname|``" + ((PlayerInfo*)(event.peer->data))->displayName + "``\ncountry|" + ((PlayerInfo*)(event.peer->data))->country + "\ninvis|0\nmstate|0\nsmstate|0\ntype|local\n"));
															//for (int i = 0; i < p.len; i++) cout << (int)*(p.data + i) << " ";
															ENetPacket* packet = enet_packet_create(p.data,
																p.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet);
															//enet_host_flush(server);
															delete p.data;
															((PlayerInfo*)(event.peer->data))->netID = cId;
															onPeerConnect(peer);
															cId++;
														}


														if (((PlayerInfo*)(peer->data))->haveGrowId == false)
														{
														}

														int countx = 0;
														ENetPeer* currentPeer;
														string namex = "";
														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															countx++;
														}


														int otherpeople = 0;

														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															if (isHere(peer, currentPeer))
																otherpeople++;
														}




														int otherpeoples = otherpeople - 1;
														string ownerworld = info.Displayowner;
														string nameworld = info.name;
														string text = "action|play_sfx\nfile|audio/door_open.wav\ndelayMS|0\n";
														BYTE* data = new BYTE[5 + text.length()];
														BYTE zero = 0;
														int type = 3;
														memcpy(data, &type, 4);
														memcpy(data + 4, text.c_str(), text.length());
														memcpy(data + 4 + text.length(), &zero, 1);

														if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
															if (((PlayerInfo*)(peer->data))->isinv == true) {
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2You are invisible!"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;
															}
															else {

																if (((PlayerInfo*)(peer->data))->isinv == false) {
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2Silently entered world!"));
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																	delete p.data;


																}

															}
														}

														if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
															if (((PlayerInfo*)(peer->data))->isinv == true) {
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2You are invisible!"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;
															}
															else {

																if (((PlayerInfo*)(peer->data))->isinv == false) {
																	GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`4Entered World!"));
																	ENetPacket* packet = enet_packet_create(p.data,
																		p.len,
																		ENET_PACKET_FLAG_RELIABLE);
																	enet_peer_send(peer, 0, packet);
																	delete p.data;


																}

															}
														}

														if (((PlayerInfo*)(peer->data))->adminLevel <= 777) {

															ENetPacket* packet7 = enet_packet_create(data,
																5 + text.length(),
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet7);
															GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` others here>``"));
															ENetPacket* packet6 = enet_packet_create(p6.data,
																p6.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet6);
															delete p6.data;


															GamePacket p2 = packetEnd(appendIntx(appendString(appendIntx(appendString(createPacket(), "OnTalkBubble"), ((PlayerInfo*)(peer->data))->netID), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` others here>``"), 0));
															ENetPacket* packet2 = enet_packet_create(p2.data,
																p2.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet2);
															delete p2.data;


														}

														if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
															if (((PlayerInfo*)(peer->data))->isinv == true) {
																ENetPeer* currentPeer;
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2You are invisible!"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;
															}
															else {
																/*ENetPeer* currentPeer;
																int effect = 92;
																for (currentPeer = server->peers;
																	currentPeer < &server->peers[server->peerCount];
																	++currentPeer)
																{
																	if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																		continue;
																	if (isHere(peer, currentPeer)) {

																		int x = ((PlayerInfo*)(peer->data))->x;
																		int y = ((PlayerInfo*)(peer->data))->y;
																		GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

																		ENetPacket* packetd = enet_packet_create(psp.data,
																			psp.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(currentPeer, 0, packetd);
																		delete psp.data;
																	}
																}*/
																GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` `5others here>```w"));
																ENetPacket* packet6 = enet_packet_create(p6.data,
																	p6.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet6);
																delete p6.data;
															}
														}




														if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
															if (((PlayerInfo*)(peer->data))->isinv == true) {
																ENetPeer* currentPeer;
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2You are invisible!"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;
															}
															else {
																/*ENetPeer* currentPeer;
																int effect = 92;
																for (currentPeer = server->peers;
																	currentPeer < &server->peers[server->peerCount];
																	++currentPeer)
																{
																	if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																		continue;
																	if (isHere(peer, currentPeer)) {

																		int x = ((PlayerInfo*)(peer->data))->x;
																		int y = ((PlayerInfo*)(peer->data))->y;
																		GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

																		ENetPacket* packetd = enet_packet_create(psp.data,
																			psp.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(currentPeer, 0, packetd);
																		delete psp.data;
																	}
																}*/
																GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` `5others here>```w"));
																ENetPacket* packet6 = enet_packet_create(p6.data,
																	p6.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet6);
																delete p6.data;
															}
														}



														if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
															if (((PlayerInfo*)(peer->data))->isinv == true) {
																ENetPeer* currentPeer;
																GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`2You are invisible!"));
																ENetPacket* packet = enet_packet_create(p.data,
																	p.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet);
																delete p.data;
															}
															else {
																/*ENetPeer* currentPeer;
																int effect = 92;
																for (currentPeer = server->peers;
																	currentPeer < &server->peers[server->peerCount];
																	++currentPeer)
																{
																	if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																		continue;
																	if (isHere(peer, currentPeer)) {

																		int x = ((PlayerInfo*)(peer->data))->x;
																		int y = ((PlayerInfo*)(peer->data))->y;
																		GamePacket psp = packetEnd(appendFloat(appendIntx(appendString(createPacket(), "OnParticleEffect"), effect), x, y));

																		ENetPacket* packetd = enet_packet_create(psp.data,
																			psp.len,
																			ENET_PACKET_FLAG_RELIABLE);
																		enet_peer_send(currentPeer, 0, packetd);
																		delete psp.data;
																	}
																}*/
																GamePacket p6 = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5<`w" + ((PlayerInfo*)(peer->data))->displayName + "`` `5entered, `w" + std::to_string(otherpeoples) + "`` `5others here>```w"));
																ENetPacket* packet6 = enet_packet_create(p6.data,
																	p6.len,
																	ENET_PACKET_FLAG_RELIABLE);
																enet_peer_send(peer, 0, packet6);
																delete p6.data;
															}
														}
														for (currentPeer = server->peers;
															currentPeer < &server->peers[server->peerCount];
															++currentPeer)
														{
															if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
																continue;
															if (isHere(peer, currentPeer))
																if (((PlayerInfo*)(peer->data))->isinv == false)
																{

																}


														}
														if (ownerworld != "") {
															GamePacket p3x = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[`0" + nameworld + " `$World Locked `oby " + ownerworld + "`5]"));
															ENetPacket* packet3x = enet_packet_create(p3x.data,
																p3x.len,
																ENET_PACKET_FLAG_RELIABLE);
															enet_peer_send(peer, 0, packet3x);
															delete p3x.data;
															/*if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
																((PlayerInfo*)(event.peer->data))->displayName = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
																((PlayerInfo*)(event.peer->data))->displayNamebackup = "`w[`^Newbie`w] " + ((PlayerInfo*)(event.peer->data))->tankIDName;
															}*/
														}


													}


												}
												else
												{
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`wWorld name cannot be longer than 15 characters."));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
													enet_peer_disconnect_now(peer, 0);


													GamePacket p3 = packetEnd(appendString(appendInt(appendString(createPacket(), "OnFailedToEnterWorld"), 1), "Sorry"));
													ENetPacket* packet3 = enet_packet_create(p3.data,
														p3.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet3);
													delete p3.data;


													continue;
													//enet_peer_disconnect_later(peer, 0);
												}

											}


										}

										sendState(peer); //here
										sendInventory(peer, ((PlayerInfo*)(peer->data))->inventory);





										if (info.allowMod == false && ((PlayerInfo*)(peer->data))->ghostalr == false && info.owner != ((PlayerInfo*)(peer->data))->rawName)
										{
											if (((PlayerInfo*)(peer->data))->adminLevel >= 1000 || ((PlayerInfo*)(peer->data))->rawName == "sebia") {


												if (((PlayerInfo*)(peer->data))->canWalkInBlocks = true) {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^Noclipping `^Is `4Disabled `^In Here, But You Are `2Immune`^!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
													continue;

												}
												else {
													GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^Noclipping `^Is `4Disabled `^In Here, But You Are `2Immune`^!"));
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet);
													delete p.data;
													continue;
												}
											}
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `@Noclipping `@Is `4Disabled `@In Here!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;

											((PlayerInfo*)(peer->data))->canWalkInBlocks = false;
											((PlayerInfo*)(peer->data))->skinColor = 0x8295C3FF;

											sendClothes(peer);
											sendState(peer); //here
										}
										else
										{
											if (((PlayerInfo*)(peer->data))->isModState == true || ((PlayerInfo*)(peer->data))->ghostalr == true)
											{
												((PlayerInfo*)(peer->data))->canWalkInBlocks = true;
												((PlayerInfo*)(peer->data))->canDoubleJump = true; //here


												//sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->puncheffect);
												//sendState(peer); //here

											}
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 0) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 111) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 222) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 333) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 444) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 555) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
											((PlayerInfo*)(peer->data))->isShining = true;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 666) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
											((PlayerInfo*)(peer->data))->isShining = true;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 777) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
											((PlayerInfo*)(peer->data))->isShining = true;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 888) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
											((PlayerInfo*)(peer->data))->isShining = true;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 999) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
											((PlayerInfo*)(peer->data))->isShining = true;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 1000) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
											((PlayerInfo*)(peer->data))->isShining = true;
											((PlayerInfo*)(peer->data))->haveHauntedShadows = true;
										}
										if (((PlayerInfo*)(peer->data))->adminLevel == 998) {
											((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
											((PlayerInfo*)(peer->data))->isShining = true;
											((PlayerInfo*)(peer->data))->haveHauntedShadows = true;
										}
										/*	if (((PlayerInfo*)(peer->data))->level > 100) {
												((PlayerInfo*)(peer->data))->haveSuperSupporterName = true;
												((PlayerInfo*)(peer->data))->isShining = false;
											}*/


										if (info.weather != 0) {
											GamePacket p2 = packetEnd(appendInt(appendString(createPacket(), "OnSetBaseWeather"), info.weather));
											ENetPacket* packet2 = enet_packet_create(p2.data,
												p2.len,
												ENET_PACKET_FLAG_RELIABLE);


											enet_peer_send(peer, 0, packet2);
											delete p2.data;
										}

										sendState(peer); //here
										sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
									}
								}
								catch (int e) {
									if (e == 1) {
										((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
										GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnFailedToEnterWorld"), 1));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT]`@ You have exited the world."));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										//enet_host_flush(server);
									}
									else if (e == 2) {
										((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
										GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnFailedToEnterWorld"), 1));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT]`@ You have entered bad characters in the world name!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										//enet_host_flush(server);
									}
									else if (e == 3) {
										((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
										GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnFailedToEnterWorld"), 1));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT]`@ You can't visit this world!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										//enet_host_flush(server);
									}
									else {
										((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
										GamePacket p2 = packetEnd(appendIntx(appendString(createPacket(), "OnFailedToEnterWorld"), 1));
										ENetPacket* packet2 = enet_packet_create(p2.data,
											p2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete p2.data;
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT]`@ I know this menu is magical and all, but it has its limitations! You can't visit this world!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
										//enet_host_flush(server);
									}
								}
							}

							if (id == "action")
							{
								if (act == "join_request")
								{
									isJoinReq = true;
								}
								if (act == "quit_to_exit")
								{

									if (((PlayerInfo*)(peer->data))->haveGrowId == false) {
										string act = "START";
										joinWorld(peer, act, 0, 0);
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`0Make GrowID First!"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;
									}

									else if (((PlayerInfo*)(event.peer->data))->canExit)
									{




										string online = "";
										int total = 0;
										ENetPeer* currentPeer;

										for (currentPeer = server->peers;
											currentPeer < &server->peers[server->peerCount];
											++currentPeer)
										{
											if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
												continue;
											if (((PlayerInfo*)(currentPeer->data))->adminLevel >= 0) {
												total++;
											}
										}
										GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "Where would you like to go? (`w" + to_string(total) + " `oonline)"));
										ENetPacket* packet = enet_packet_create(p.data,
											p.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet);
										delete p.data;

										sendPlayerLeave(peer, (PlayerInfo*)(event.peer->data));
										sendWorldOffers(peer);



										((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
									}
								}

								/*if (act == "quit_to_exit")
								{
									match.playersInGame--;
									((PlayerInfo*)(peer->data))->isInGame = false;
									sendPlayerLeave(peer, (PlayerInfo*)(event.peer->data));
									((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
									sendWorldOffers(peer);
									Player::PlayAudio(peer, "audio/door_shut.wav", 0);

								}*/
								if (act == "quit")
								{
									if (((PlayerInfo*)(peer->data))->isWaitingForMatch) {
										((PlayerInfo*)(peer->data))->isWaitingForMatch = false;
										match.playersInQueue--;
									}
									if (((PlayerInfo*)(peer->data))->isInGame) {
										((PlayerInfo*)(peer->data))->isInGame = false;
										match.playersInGame--;
									}
									enet_peer_disconnect_later(peer, 0);
								}
							}
						}
						break;
					}
					case 4:
					{
						{
							BYTE* tankUpdatePacket = GetStructPointerFromTankPacket(event.packet);

							if (tankUpdatePacket)
							{
								PlayerMoving* pMov = unpackPlayerMoving(tankUpdatePacket);

								if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT")
								{

									continue;

								}
								//string cchzzz = GetTextPointerFromPacket(event.packet);



								((PlayerInfo*)(event.peer->data))->posX = (int)pMov->x;
								((PlayerInfo*)(event.peer->data))->posY = (int)pMov->y;

								int posX = ((PlayerInfo*)(event.peer->data))->posX / 32;
								int posY = ((PlayerInfo*)(event.peer->data))->posY / 32;

								if (world->items[posX + (posY * world->width)].foreground == 12)
								{
									std::string to;
									((PlayerInfo*)(event.peer->data))->SignPosX = (int)pMov->x;
									((PlayerInfo*)(event.peer->data))->SignPosY = (int)pMov->y;
									int yy = ((PlayerInfo*)(event.peer->data))->SignPosX / 32;
									int xx = ((PlayerInfo*)(event.peer->data))->SignPosY / 32;
									string world = ((PlayerInfo*)(peer->data))->currentWorld;
									string posx = std::to_string(yy);
									string posy = std::to_string(xx);
									bool exist = std::experimental::filesystem::exists("doors/" + world + posx + posy + ".txt");
									if (exist)
									{
										WorldInfo* worldInfo = getPlyersWorld(peer);
										int squaredoor = yy + (xx * 100);
										std::ifstream ifs("doors/" + world + posx + posy + ".txt");
										std::string content((std::istreambuf_iterator<char>(ifs)),
											(std::istreambuf_iterator<char>()));
										updateDoor(peer, worldInfo->items[squaredoor].foreground, squaredoor % worldInfo->width, squaredoor / worldInfo->width, content);
									}
									else
									{
									}
								}


								if (world->items[posX + (posY * world->width)].foreground == 20 || world->items[posX + (posY * world->width)].foreground == 24 || world->items[posX + (posY * world->width)].foreground == 26 || world->items[posX + (posY * world->width)].foreground == 28 || world->items[posX + (posY * world->width)].foreground == 608 || world->items[posX + (posY * world->width)].foreground == 780 || world->items[posX + (posY * world->width)].foreground == 986 || world->items[posX + (posY * world->width)].foreground == 1426 || world->items[posX + (posY * world->width)].foreground == 1428 || world->items[posX + (posY * world->width)].foreground == 1430 || world->items[posX + (posY * world->width)].foreground == 1432 || world->items[posX + (posY * world->width)].foreground == 1446 || world->items[posX + (posY * world->width)].foreground == 780 || world->items[posX + (posY * world->width)].foreground == 1906 || world->items[posX + (posY * world->width)].foreground == 2396 || world->items[posX + (posY * world->width)].foreground == 2414 || world->items[posX + (posY * world->width)].foreground == 2586 || world->items[posX + (posY * world->width)].foreground == 2948 || world->items[posX + (posY * world->width)].foreground == 3758 || world->items[posX + (posY * world->width)].foreground == 4470 || world->items[posX + (posY * world->width)].foreground == 4488 || world->items[posX + (posY * world->width)].foreground == 5622 || world->items[posX + (posY * world->width)].foreground == 6102 || world->items[posX + (posY * world->width)].foreground == 6272)
								{
									((PlayerInfo*)(event.peer->data))->SignPosX = (int)pMov->x;
									((PlayerInfo*)(event.peer->data))->SignPosY = (int)pMov->y;
									int yy = ((PlayerInfo*)(event.peer->data))->SignPosX / 32;
									int xx = ((PlayerInfo*)(event.peer->data))->SignPosY / 32;
									string world = ((PlayerInfo*)(peer->data))->currentWorld;
									string posx = std::to_string(yy);
									string posy = std::to_string(xx);
									bool exist = std::experimental::filesystem::exists("signs/" + world + posx + posy + ".txt");

									if (exist)
									{
										WorldInfo* worldInfo = getPlyersWorld(peer);
										int squaresign = yy + (xx * 100);
										std::ifstream ifs("signs/" + world + posx + posy + ".txt");
										std::string content((std::istreambuf_iterator<char>(ifs)),
											(std::istreambuf_iterator<char>()));
										updateSign(peer, worldInfo->items[squaresign].foreground, squaresign % worldInfo->width, squaresign / worldInfo->width, content, worldInfo->items[squaresign].background);
									}
									else
									{
									}
								}
							}


							if (tankUpdatePacket)
							{
								PlayerMoving* pMov = unpackPlayerMoving(tankUpdatePacket);

								if (((PlayerInfo*)(event.peer->data))->isInWorld)
								{



									((PlayerInfo*)(event.peer->data))->posXY = (int)pMov->x + (int)pMov->y;
									sendPuncheffect(peer, ((PlayerInfo*)(event.peer->data))->effect);
									//((PlayerInfo*)(peer->data))->canDoubleJump = true; //here
									//sendState(peer); //here


								}

								// checkpoint system by cmd code start from here 
								if (tankUpdatePacket)
								{
									PlayerMoving* pMov = unpackPlayerMoving(tankUpdatePacket); // to get player step

									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT")
									{

										continue; // to avoid server crash

									}

									((PlayerInfo*)(event.peer->data))->posX = (int)pMov->x; // posx is player move x
									((PlayerInfo*)(event.peer->data))->posY = (int)pMov->y; // posy is player move y

									int posX = ((PlayerInfo*)(event.peer->data))->posX / 32; // good value is actually 31.16-31.33
									int posY = ((PlayerInfo*)(event.peer->data))->posY / 32;

									if (world->items[posX + (posY*world->width)].foreground == 7992 || world->items[posX + (posY*world->width)].foreground == 410 || world->items[posX + (posY*world->width)].foreground == 1770 || world->items[posX + (posY*world->width)].foreground == 1832 || world->items[posX + (posY*world->width)].foreground == 4720 || world->items[posX + (posY*world->width)].foreground == 4882 || world->items[posX + (posY*world->width)].foreground == 6392) //checkpoints id 
									{
										if (((PlayerInfo*)(peer->data))->cpX == posX * 32 && ((PlayerInfo*)(peer->data))->cpY == posY * 32)
										{

										}
										else
										{
											((PlayerInfo*)(peer->data))->usedCP = true;
											((PlayerInfo*)(peer->data))->cpX = posX * 32;
											((PlayerInfo*)(peer->data))->cpY = posY * 32;

											GamePacket p3 = packetEnd(appendInt(appendString(createPacket(), "SetRespawnPos"), posX + (posY*world->width)));
											memcpy(p3.data + 8, &(((PlayerInfo*)(peer->data))->netID), 4);
											ENetPacket * packet3 = enet_packet_create(p3.data,
												p3.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet3);

											delete p3.data;
										}
									}
								}
								//checkpoint system by cmd end here ...


								if (tankUpdatePacket)
								{
									PlayerMoving* pMov = unpackPlayerMoving(tankUpdatePacket); // to get player step

									if (((PlayerInfo*)(peer->data))->currentWorld == "EXIT")
									{

										continue; // to avoid server crash

									}



									((PlayerInfo*)(event.peer->data))->posX = (int)pMov->x; // posx is player move x
									((PlayerInfo*)(event.peer->data))->posY = (int)pMov->y; // posy is player move y

									int posX = ((PlayerInfo*)(event.peer->data))->posX;
									int posY = ((PlayerInfo*)(event.peer->data))->posY;

									if (posY < -3)
									{

										GamePacket ps2 = packetEnd(appendInt(appendString(appendString(appendString(appendString(createPacket(), "OnAddNotification"), "interface/atomic_button.rttex"), "`0Warning from `4System`0: You were out of the world."), "audio/hub_open.wav"), 0));
										ENetPacket* packet2 = enet_packet_create(ps2.data,
											ps2.len,
											ENET_PACKET_FLAG_RELIABLE);
										enet_peer_send(peer, 0, packet2);
										delete ps2.data;

										cout << "[WARNING]: Player " << ((PlayerInfo*)(peer->data))->rawName << " Was Out Of The World. Y position was - " << posY << endl;

										sendPlayerLeave(peer, (PlayerInfo*)(peer->data));
										((PlayerInfo*)(peer->data))->currentWorld = "EXIT";
										sendWorldOffers(peer);
									}
								}

								switch (pMov->packetType)
								{
								case 0:

									((PlayerInfo*)(event.peer->data))->x = pMov->x;
									((PlayerInfo*)(event.peer->data))->y = pMov->y;
									((PlayerInfo*)(event.peer->data))->isRotatedLeft = pMov->characterState & 0x10;
									sendPData(peer, pMov);



									if (!((PlayerInfo*)(peer->data))->joinClothesUpdated)
									{
										((PlayerInfo*)(peer->data))->joinClothesUpdated = true;
										updateAllClothes(peer);
										updateInvis(peer);
										sendState(peer); //here
										sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);

										if (((PlayerInfo*)(peer->data))->ghostalr)
										{
											((PlayerInfo*)(peer->data))->canDoubleJump = true; //here

											sendPuncheffect(peer, ((PlayerInfo*)(peer->data))->effect);
										}

										if (((PlayerInfo*)(peer->data))->currentWorld == "PVP") {
											Player::OnCountdownStart(peer, ((PlayerInfo*)(peer->data))->netID, 420, 0);
										}




										if (((PlayerInfo*)(peer->data))->isinv == 1) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`5[GTLT] `^You are in invisibility mode, no one can see you!``"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
										}
									}


									break;

								default:
									break;
								}
								switch (pMov->packetType)
								{
								case 0:
									((PlayerInfo*)(event.peer->data))->x = pMov->x;
									((PlayerInfo*)(event.peer->data))->y = pMov->y;
									((PlayerInfo*)(event.peer->data))->isRotatedLeft = pMov->characterState & 0x10;
									sendPData(peer, pMov);
									if (!((PlayerInfo*)(peer->data))->joinClothesUpdated)
									{
										((PlayerInfo*)(peer->data))->joinClothesUpdated = true;
										updateAllClothes(peer);

										if (((PlayerInfo*)(peer->data))->currentWorld == "PVP") {
											Player::OnCountdownStart(peer, ((PlayerInfo*)(peer->data))->netID, 420, 0);
										}
									}

									break;


								default:
									break;
								}
								PlayerMoving* data2 = unpackPlayerMoving(tankUpdatePacket);
								if (data2->packetType == 255)
								{
									autoBan(peer, false, 24 * 7);
									cout << "[ERROR]: Bad packet 255!" << endl;
								}
								if (data2->packetType == 254)
								{
									autoBan(peer, false, 24 * 7);
									cout << "[ERROR]: Bad packet 254!" << endl;
								}
								if (data2->packetType == 11)
								{
									//cout << pMov->x << ";" << pMov->y << ";" << pMov->plantingTree << ";" << pMov->punchX << endl;
									//sendDrop(((PlayerInfo*)(event.peer->data))->netID, ((PlayerInfo*)(event.peer->data))->x, ((PlayerInfo*)(event.peer->data))->y, pMov->punchX, 1, 0);
									// lets take item
									//cout << "item was tried to be taken!";

									sendTake(peer, ((PlayerInfo*)(event.peer->data))->netID, ((PlayerInfo*)(event.peer->data))->x, ((PlayerInfo*)(event.peer->data))->y, data2->plantingTree);

								}
								if (data2->packetType == 14)
								{
									//cout << pMov->x << ";" << pMov->y << ";" << pMov->plantingTree << ";" << pMov->punchX << endl;
									//sendDrop(((PlayerInfo*)(event.peer->data))->netID, ((PlayerInfo*)(event.peer->data))->x, ((PlayerInfo*)(event.peer->data))->y, pMov->punchX, 1, 0);
									// lets take item
									//cout << "item was tried to be taken!";
									sendTake(peer, ((PlayerInfo*)(event.peer->data))->netID, ((PlayerInfo*)(event.peer->data))->x, ((PlayerInfo*)(event.peer->data))->y, data2->plantingTree);

								}
								if (data2->packetType == 7)
								{
									int idx = pMov->punchY * world->width + pMov->punchX;
									if (getItemDef(world->items[idx].foreground).blockType == BlockTypes::DOOR)
									{
										PlayerInfo* pinf = (PlayerInfo*)peer->data;
										switch (world->items[idx].foreground)
										{
										case 762:
										case 4190:
											// Password Door
											if (world->items[idx].password == "")
											{
												// fail
												DoCancelTransitionAndTeleport(peer, pMov->punchX, pMov->punchY);
												sendChatMessage(peer, ((PlayerInfo*)(peer->data))->netID, "This door has no password set!");
											}
											else
											{
												pinf->wrenchsession = idx;
												DoCancelTransitionAndTeleport(peer, pMov->punchX, pMov->punchY);
												sendDialog(peer, "set_default_color|`o\n\nadd_label_with_icon|big|`w" + getItemDef(world->items[idx].foreground).name + "``|left|" + to_string(world->items[idx].foreground) + "|\n\nadd_spacer|small|\nadd_textbox|`oThis door requires a password.``|\nadd_text_input|doorpwd|Password||100|\nend_dialog|pwddoor|Cancel|OK|");
											}
											break;
										default:
											DoEnterDoor(peer, world, pMov->punchX, pMov->punchY);
											break;
										}
									}
									else {
										WhiteDoor(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
									}
								}






								if (data2->packetType == 10)
								{
									ItemDefinition def;
									try {
										def = getItemDef(pMov->plantingTree);
									}
									catch (int e) {
										goto END_CLOTHSETTER_FORCE;
									}
									switch (def.clothType) {
									case 0:
										if (pMov->plantingTree == 4626) {
										}
										else if (pMov->plantingTree == 3462) {

										}
										if (((PlayerInfo*)(event.peer->data))->cloth0 == pMov->plantingTree)
										{
											((PlayerInfo*)(event.peer->data))->cloth0 = 0;
											break;
										}
										((PlayerInfo*)(event.peer->data))->cloth0 = pMov->plantingTree;
										break;
									case 1:
										if (((PlayerInfo*)(event.peer->data))->cloth1 == pMov->plantingTree)
										{
											((PlayerInfo*)(peer->data))->effect = 8421376;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
											((PlayerInfo*)(event.peer->data))->cloth1 = 0;
											break;
										}
										((PlayerInfo*)(event.peer->data))->cloth1 = pMov->plantingTree;
										if (pMov->plantingTree = 1780) {
											((PlayerInfo*)(peer->data))->effect = 8421474;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										break;
									case 2:
										if (((PlayerInfo*)(event.peer->data))->cloth2 == pMov->plantingTree)
										{
											((PlayerInfo*)(event.peer->data))->cloth2 = 0;
											break;
										}
										((PlayerInfo*)(event.peer->data))->cloth2 = pMov->plantingTree;
										break;
									case 3:
										if (((PlayerInfo*)(event.peer->data))->cloth3 == pMov->plantingTree)
										{
											((PlayerInfo*)(event.peer->data))->cloth3 = 0;
											break;
										}
										if (pMov->plantingTree == 8834) {

										}
										((PlayerInfo*)(event.peer->data))->cloth3 = pMov->plantingTree;
										break;
									case 4:
										if (((PlayerInfo*)(event.peer->data))->cloth4 == pMov->plantingTree)
										{
											((PlayerInfo*)(peer->data))->effect = 8421376;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
											((PlayerInfo*)(event.peer->data))->cloth4 = 0;
											break;
										}
										if (pMov->plantingTree == 1204) {

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oGive people the evil eye. (`oFocused eyes mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);
											delete p.data;
											((PlayerInfo*)(peer->data))->effect = 8421386;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										((PlayerInfo*)(event.peer->data))->cloth4 = pMov->plantingTree;
										break;
									case 5:

										if (pMov->plantingTree == 2592) {

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oNone can stand against you! (`oLegendary Swordsmaster mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(peer->data))->effect = 8421399;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);

										}
										else if (pMov->plantingTree == 1742) {

										}
										else if (pMov->plantingTree == 2952) {

										}
										else if (pMov->plantingTree == 6782) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou are feeling like `2Infinity `4Power `oStarts to go out of you!"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(peer->data))->effect = 8421509;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 8452) {
											((PlayerInfo*)(peer->data))->effect = 8421412;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 5480) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oWho needs arms when you have these? (`oRayman fist! mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(peer->data))->effect = 8421456;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);

										}
										else if (pMov->plantingTree == 9410) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`#Purple `9lights `ostarts to move around you! (`#Valentine! `omod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											sendState(peer); //here

										}
										else if (pMov->plantingTree == 1782) {

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou should be very very nice to your pet. (`oLegendary! mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(peer->data))->effect = 8421397;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);

										}
										else if (pMov->plantingTree == 1868) {

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou command a mighty (violent) dragon! (`oDrakeborn mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(peer->data))->effect = 8421399;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);

										}
										else if (pMov->plantingTree == 1804) {

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou electrocute things. (`oFistful Of Thunder mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(peer->data))->effect = 8421398;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);

										}
										else if (pMov->plantingTree == 9058) {
											((PlayerInfo*)(peer->data))->effect = 8421512;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}


										else if (pMov->plantingTree == 7912) {
											((PlayerInfo*)(peer->data))->effect = 8421398;   //INCORRECT FOR NOW
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);

										}
										else if (pMov->plantingTree == 6026) {
											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oThe truth is yours! (`oWhip of Truth mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(peer->data))->effect = 8421452;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);

										}

										else if (pMov->plantingTree == 9310) {
											bool iscontains = false;
											SearchInventoryItem(peer, 9310, 1, iscontains);
											if (!iscontains)
											{
												ENetPeer* currentPeer;

												string name = ((PlayerInfo*)(peer->data))->rawName;
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`4** `o" + name + " `4AUTO-BANNED BY SYSTEM **`o (/rules to view rules)"));


												for (currentPeer = server->peers;
													currentPeer < &server->peers[server->peerCount];
													++currentPeer)
												{
													if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
														continue;
													ENetPacket* packet = enet_packet_create(p.data,
														p.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(currentPeer, 0, packet);
												}

												delete p.data;
												Player::OnAddNotification(peer, "`0Warning from `4System`0: You've been `4AUTO-BANNED `0from GrowtopiaOS for 7 days", "audio/hub_open.wav", "interface/atomic_button.rttex");
												autoBan(peer, false, 24 * 7);
											}
											else {
												GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYour hands starts to `4Burn! `o(`9Legendary `omod added)"));
												ENetPacket* packet = enet_packet_create(p.data,
													p.len,
													ENET_PACKET_FLAG_RELIABLE);
												enet_peer_send(peer, 0, packet);

												delete p.data;
												((PlayerInfo*)(peer->data))->effect = 8421452;
												sendState(peer); //here
												sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
											}
										}


										else if (pMov->plantingTree == 2952) {

										}
										else if (pMov->plantingTree == 1836) {

										}




										if (((PlayerInfo*)(event.peer->data))->cloth5 == pMov->plantingTree)
										{
											((PlayerInfo*)(peer->data))->effect = 8421376;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
											((PlayerInfo*)(event.peer->data))->cloth5 = 0;
											break;
										}
										if (pMov->plantingTree == 1782) {
											((PlayerInfo*)(peer->data))->effect = 8424213;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 1804) {
											((PlayerInfo*)(peer->data))->effect = 8424214;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 1868) {
											((PlayerInfo*)(peer->data))->effect = 8424215;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 2572) {
											((PlayerInfo*)(peer->data))->effect = 8424234;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 2756) {
											((PlayerInfo*)(peer->data))->effect = 8424239;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 6026) {
											((PlayerInfo*)(peer->data))->effect = 8421452;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 2872) {
											((PlayerInfo*)(peer->data))->effect = 8424243;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 2952) {
											((PlayerInfo*)(peer->data))->effect = 8424222;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 3066) {
											((PlayerInfo*)(peer->data))->effect = 8424249;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 2592) {
											((PlayerInfo*)(peer->data))->effect = 8424235;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 2476) {
											((PlayerInfo*)(peer->data))->effect = 8424231;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 1874) {
											((PlayerInfo*)(peer->data))->effect = 8424216;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 1204) {
											((PlayerInfo*)(peer->data))->effect = 8421386;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										else if (pMov->plantingTree == 1956) {
											((PlayerInfo*)(peer->data))->effect = -997;
											sendState(peer); //here
											sendPuncheffectpeer(peer, ((PlayerInfo*)(peer->data))->effect);
										}
										((PlayerInfo*)(event.peer->data))->cloth5 = pMov->plantingTree;
										break;
									case 6:

										if (pMov->plantingTree == 1784) {

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou can jump in mid-air! It's like flying, but less. (`oDouble jump mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
											sendState(peer); //here

										}

										else if (pMov->plantingTree == 1674) {

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou can jump in mid-air! It's like flying, but less. (`oDouble jump mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
											sendState(peer); //here

										}

										else if (pMov->plantingTree == 6334) {

										}

										else if (pMov->plantingTree == 1970) {

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou can jump in mid-air! It's like flying, but less. (`oDouble jump mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
											sendState(peer); //here

										}
										else if (pMov->plantingTree == 8286) {

											GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`oYou can jump in mid-air! It's like flying, but less. (`oDouble jump mod added`o)"));
											ENetPacket* packet = enet_packet_create(p.data,
												p.len,
												ENET_PACKET_FLAG_RELIABLE);
											enet_peer_send(peer, 0, packet);

											delete p.data;
											((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
											sendState(peer); //here

										}

										else if (pMov->plantingTree == 7734) {

										}



										if (((PlayerInfo*)(event.peer->data))->cloth6 == pMov->plantingTree)
										{
											((PlayerInfo*)(event.peer->data))->cloth6 = 0;
											((PlayerInfo*)(event.peer->data))->canDoubleJump = false;
											sendState(peer);
											break;
										}
										{
											((PlayerInfo*)(event.peer->data))->cloth6 = pMov->plantingTree;
											int item = pMov->plantingTree;
											if (item == 156 || item == 362 || item == 678 || item == 736 || item == 7734 || item == 7762 || item == 818 || item == 1206 || item == 1460 || item == 1550 || item == 1574 || item == 1668 || item == 1672 || item == 1674 || item == 1784 || item == 1824 || item == 1936 || item == 1938 || item == 1970 || item == 2254 || item == 2256 || item == 2258 || item == 2260 || item == 2262 || item == 2264 || item == 2390 || item == 2392 || item == 3120 || item == 3308 || item == 3512 || item == 4534 || item == 4986 || item == 5754 || item == 6144 || item == 6334 || item == 6694 || item == 6818 || item == 6842 || item == 1934 || item == 3134 || item == 6004 || item == 1780 || item == 2158 || item == 2160 || item == 2162 || item == 2164 || item == 2166 || item == 2168 || item == 2438 || item == 2538 || item == 2778 || item == 3858 || item == 350 || item == 998 || item == 1738 || item == 2642 || item == 2982 || item == 3104 || item == 3144 || item == 5738 || item == 3112 || item == 2722 || item == 3114 || item == 4970 || item == 4972 || item == 5020 || item == 6284 || item == 4184 || item == 4628 || item == 5322 || item == 4112 || item == 4114 || item == 3442 || item == 8286) {
												((PlayerInfo*)(event.peer->data))->canDoubleJump = true;
											}
											else {
												((PlayerInfo*)(event.peer->data))->canDoubleJump = false;
											}
											// ^^^^ wings
											sendState(peer);
										}
										break;

									case 7:


										if (((PlayerInfo*)(event.peer->data))->cloth7 == pMov->plantingTree)
										{
											((PlayerInfo*)(event.peer->data))->cloth7 = 0;
											break;
										}
										((PlayerInfo*)(event.peer->data))->cloth7 = pMov->plantingTree;
										break;
									case 8:




										if (((PlayerInfo*)(event.peer->data))->cloth8 == pMov->plantingTree)
										{
											((PlayerInfo*)(event.peer->data))->cloth8 = 0;
											break;
										}
										((PlayerInfo*)(event.peer->data))->cloth8 = pMov->plantingTree;
										break;
									default:
										if (
											def.id == 7166
											|| def.id == 5078 || def.id == 5080 || def.id == 5082 || def.id == 5084 || def.id == 5134
											|| def.id == 5126 || def.id == 5128 || def.id == 5130 || def.id == 5132 || def.id == 5152
											|| def.id == 5144 || def.id == 5146 || def.id == 5148 || def.id == 5150 || def.id == 5170
											|| def.id == 5162 || def.id == 5164 || def.id == 5166 || def.id == 5168 || def.id == 5188
											|| def.id == 5180 || def.id == 5182 || def.id == 5184 || def.id == 5186 || def.id == 9212
											|| def.id == 7168 || def.id == 7170 || def.id == 7172 || def.id == 7174
											) {
											if (((PlayerInfo*)(event.peer->data))->cloth_ances == pMov->plantingTree) {

												((PlayerInfo*)(event.peer->data))->cloth_ances = 0;
												break;
											}

											((PlayerInfo*)(event.peer->data))->cloth_ances = pMov->plantingTree;

										}
#ifdef TOTAL_LOG
										cout << "Invalid item activated: " << pMov->plantingTree << " by " << ((PlayerInfo*)(event.peer->data))->displayName << endl;
#endif
										break;
									}
									sendClothes(peer);
								END_CLOTHSETTER_FORCE:;
								}
								if (data2->packetType == 18)
								{
									sendPData(peer, pMov);
								}
								if (data2->punchX != -1 && data2->punchY != -1) {
									if (data2->packetType == 3)
									{
										if (((PlayerInfo*)(event.peer->data))->isRotatedLeft = pMov->characterState & 0x10) {
											((PlayerInfo*)(event.peer->data))->RotatedLeft = true;
										}
										else {
											((PlayerInfo*)(event.peer->data))->RotatedLeft = false;
										}

										using namespace std::chrono;
										if (((PlayerInfo*)(peer->data))->lastBREAK + 150 < (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count())
										{
											((PlayerInfo*)(peer->data))->lastBREAK = (duration_cast<milliseconds>(system_clock::now().time_since_epoch())).count();
											if (data2->plantingTree == 18) {
												if (((PlayerInfo*)(peer->data))->cloth_hand == 5480) {
													if (((PlayerInfo*)(event.peer->data))->isRotatedLeft = pMov->characterState & 0x10) {
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 1, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 2, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX - 3, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
													}
													else {
														sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 1, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 2, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
														sendTileUpdate(data2->punchX + 3, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
													}
												}
												else {
													sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
												}
												if (((PlayerInfo*)(peer->data))->cloth_hand == 9032) {
													GamePacket p2 = packetEnd(appendString(appendString(createPacket(), "OnTextOverlay"), "`9This Item Is `#Temporarily `4Disabled`9!"));
													ENetPacket* packet2 = enet_packet_create(p2.data,
														p2.len,
														ENET_PACKET_FLAG_RELIABLE);
													enet_peer_send(peer, 0, packet2);
													delete p2.data;
												}
											}
											else {
												sendTileUpdate(data2->punchX, data2->punchY, data2->plantingTree, ((PlayerInfo*)(event.peer->data))->netID, peer);
											}
										}
										else {
										}
									}
									else {
									}
								}
								delete data2;
								delete pMov;
							}
							else {
								cout << "[CRITICAL]: Got Bad Tank Packet!";
							}
						}
					}
					break;
					case 5:
						break;
					case 6:
						break;
					}
					enet_packet_destroy(event.packet);
					break;
				}
				case ENET_EVENT_TYPE_DISCONNECT:
#ifdef TOTAL_LOG
					printf("Peer disconnected.\n");
#endif
					ENetPeer* currentPeer;
					for (currentPeer = server->peers;
						currentPeer < &server->peers[server->peerCount];
						++currentPeer)
					{
						if (currentPeer->state != ENET_PEER_STATE_CONNECTED)
							continue;
						string name = ((PlayerInfo*)(currentPeer->data))->rawName;

						if (find(((PlayerInfo*)(peer->data))->friendinfo.begin(), ((PlayerInfo*)(peer->data))->friendinfo.end(), name) != ((PlayerInfo*)(peer->data))->friendinfo.end()) {
							GamePacket p = packetEnd(appendString(appendString(createPacket(), "OnConsoleMessage"), "`3FRIEND ALERT: `o" + ((PlayerInfo*)(peer->data))->rawName + " `ohas `4logged off`o."));
							ENetPacket* packet = enet_packet_create(p.data,
								p.len,
								ENET_PACKET_FLAG_RELIABLE);
							enet_peer_send(currentPeer, 0, packet);
							delete p.data;
						}
					}
					sendPlayerLeave(peer, (PlayerInfo*)(event.peer->data));
					((PlayerInfo*)(event.peer->data))->inventory.items.clear();
					delete event.peer->data;
					event.peer->data = NULL;
				}
			}
	}
	cout << "Program ended??? Huh?" << endl;
	while (1);
	return 0;
};